[
    {
        "oracle": "method edu.rice.cs.drjava.model.repl.InteractionsScriptModel::setActionsDisabled():void need move to edu.rice.cs.drjava.ui.InteractionsScriptController",
        "class_name": "edu.rice.cs.drjava.model.repl.InteractionsScriptModel",
        "telemetry": {
            "id": "edb9aecd-2863-4bb6-9d62-0d103d452772",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 123,
                "lineStart": 46,
                "lineEnd": 168,
                "bodyLineStart": 46,
                "language": "java",
                "sourceCode": "/** Manages the execution of a Interactions History as a script of individual commands.  Useful for presentations.\n  * @version $Id: InteractionsScriptModel.java 5175 2010-01-20 08:46:32Z mgricken $\n  */\npublic class InteractionsScriptModel /* implements Serializable */ {\n  /** The interactions model associated with the script. */\n  private volatile InteractionsModel _model;\n  /** The interactions document. */\n  private volatile InteractionsDocument _doc;\n  /** The interactions to perform. */\n  private volatile List<String> _interactions;\n  /** The index into the list of the current interaction. */\n  private volatile int _currentInteraction;\n  /** Indicates whether the iterator has \"passed\" the current interaction, which is the case after an execution. In\n    * this state, \"next\" will show the interaction after our index, and \"prev\" will show the interaction at our index\n    * (which was mostrecently executed).\n    */\n  private volatile boolean _passedCurrent;\n\n  /** Constructs a new interactions script using the given model and interactions.\n    * @param model the interactions model\n    * @param interactions the interactions that make up the script.\n    */\n  public InteractionsScriptModel(InteractionsModel model, List<String> interactions) {\n    _model = model;\n    _doc = model.getDocument();\n    _interactions = interactions;\n    _currentInteraction = -1;\n    _passedCurrent = false;\n  }\n\n  /** Enters the next interaction into the interactions pane. Should only run in the event thread. */\n  public void nextInteraction() {\n    if (! hasNextInteraction()) { throw new IllegalStateException(\"There is no next interaction!\"); }\n    _currentInteraction++;\n    _showCurrentInteraction();\n    _passedCurrent = false;\n  }\n\n//  /** Enters the current interaction into the interactions pane. */\n//  public void currentInteraction() {\n//    if (!hasCurrentInteraction()) {\n//      throw new IllegalStateException(\"There is no current interaction!\");\n//    }\n//    try {\n//      _doc.clearCurrentInteraction();\n//      String text = _interactions.get(_currentInteraction);\n//      _doc.insertText(_doc.getLength(), text, _doc.DEFAULT_STYLE);\n//    }\n//    catch (EditDocumentException dae) {\n//      throw new UnexpectedException(dae);\n//    }\n//  }\n\n  /** Enters the previous interaction into the interactions pane. Should only run in the event thread. */\n  public void prevInteraction() {\n    if (! hasPrevInteraction()) throw new IllegalStateException(\"There is no previous interaction!\");\n\n    // Only move back if we haven't passed the current interaction\n    if (! _passedCurrent)  _currentInteraction--;\n    _showCurrentInteraction();\n    _passedCurrent = false;\n  }\n\n  /** Clears the current text at the prompt and shows the current interaction from the script.  Should only run in the\n    * event thread.  Assumes that write lock is already held.\n    */\n  private void _showCurrentInteraction() {\n    try {\n      _doc.clearCurrentInteraction();\n      String text = _interactions.get(_currentInteraction);\n      _doc.insertText(_doc.getLength(), text, InteractionsDocument.DEFAULT_STYLE);\n    }\n    catch (EditDocumentException dae) {\n      throw new UnexpectedException(dae);\n    }\n  }\n\n  /** Executes the current interaction.  Should only run in the event thread. After this call, we have passed the \n    * current interaction.\n    */\n  public void executeInteraction() {\n    _passedCurrent = true;\n    /* The following must use EventQueue rather than Utilities because this task must be placed at the end of the\n     * event queue, running the interpretCurrentInteraction call apart from this write locked section. In \n     * SimpleInteractionModel, the interpret method is called SYNCHRONOUSLY.  There is a faint chance of a race with\n     * regard to the sequenceing of operations in the event queue.  There could already be operations that affect\n     * the determination of the current interaction on the event queue. If we forced the interpret method to run \n     * asynchronously in SimpleInteractionsModel, then we could determine the current interaction within this write\n     * locked section avoiding the race. */\n    EventQueue.invokeLater(new Runnable() { public void run() { _model.interpretCurrentInteraction(); } });\n  }\n\n//  /** Ends the script.  Not currently used. */\n//  public synchronized void closeScript() {\n//    _currentInteraction = -1;\n//    _passedCurrent = false;\n//  }\n\n  /** @return true iff this script has another interaction to perform. */\n  public boolean hasNextInteraction() {\n    return _currentInteraction < _interactions.size() - 1; \n  }\n\n//  /** @return true iff this script has a current interaction to perform. Not currently used.  No sync required because\n//    * it only reads a single volatile field. \n//    */\n//  public boolean hasCurrentInteraction() { return _currentInteraction >= 0; }\n\n  /** @return true iff this script has a previous interaction to perform. */\n  public boolean hasPrevInteraction() {\n    int index = _currentInteraction;\n    if (_passedCurrent) index++; // We're passed the current, so the previous interaction is the current.\n    return index > 0;\n  }\n\n/** Disables navigation actions \n * @param interactionsScriptController TODO*/\n  public void setActionsDisabled(InteractionsScriptController interactionsScriptController) {\n    interactionsScriptController._nextInteractionAction.setEnabled(false);\n    interactionsScriptController._prevInteractionAction.setEnabled(false);\n    interactionsScriptController._executeInteractionAction.setEnabled(false);\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 160,
                        "lineEnd": 166,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.InteractionsScriptController\nRationale: The method directly manipulates the state of the actions within the InteractionsScriptController, making it logical for the method to reside within this class to encapsulate its behavior.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 9889
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "setActionsDisabled",
                            "method_signature": "public void setActionsDisabled(InteractionsScriptController interactionsScriptController)",
                            "target_class": "InteractionsScriptController",
                            "rationale": "The setActionsDisabled method directly manipulates the state of the InteractionsScriptController, which suggests that it is more appropriate for this method to reside within the InteractionsScriptController class."
                        }
                    ],
                    "llm_response_time": 1250
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "setActionsDisabled",
                            "method_signature": "public void setActionsDisabled(InteractionsScriptController interactionsScriptController)",
                            "target_class": "InteractionsScriptController",
                            "rationale": "The setActionsDisabled method directly manipulates the state of the InteractionsScriptController, which suggests that it is more appropriate for this method to reside within the InteractionsScriptController class."
                        }
                    ],
                    "llm_response_time": 1079
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "setActionsDisabled",
                            "method_signature": "public void setActionsDisabled(InteractionsScriptController interactionsScriptController)",
                            "target_class": "InteractionsScriptController",
                            "rationale": "The setActionsDisabled method directly manipulates the state of the InteractionsScriptController, which suggests that it is more appropriate for this method to reside within the InteractionsScriptController class."
                        }
                    ],
                    "llm_response_time": 1046
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "setActionsDisabled",
                            "method_signature": "public void setActionsDisabled(InteractionsScriptController interactionsScriptController)",
                            "target_class": "InteractionsScriptController",
                            "rationale": "The setActionsDisabled method directly manipulates the state of the InteractionsScriptController, which suggests that it is more appropriate for this method to reside within the InteractionsScriptController class."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "setActionsDisabled"
                ],
                "llm_response_time": 486
            },
            "targetClassMap": {
                "setActionsDisabled": {
                    "target_classes": [
                        {
                            "class_name": "InteractionsScriptController",
                            "similarity_score": 0.39059650574945864
                        },
                        {
                            "class_name": "InteractionsModel",
                            "similarity_score": 0.3436250644941248
                        },
                        {
                            "class_name": "InteractionsDocument",
                            "similarity_score": 0.3657318429917422
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "InteractionsScriptController",
                        "InteractionsDocument",
                        "InteractionsModel"
                    ],
                    "llm_response_time": 1581,
                    "similarity_computation_time": 4,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.junit.JUnitError::progressReset(int):void need move to edu.rice.cs.drjava.ui.JUnitPanel",
        "class_name": "edu.rice.cs.drjava.model.junit.JUnitError",
        "telemetry": {
            "id": "c1504fb2-abc5-4d4c-82c5-3ce49e8b8932",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 80,
                "lineStart": 45,
                "lineEnd": 124,
                "bodyLineStart": 45,
                "language": "java",
                "sourceCode": "/** A class to represent JUnit errors.  This class enables DrJava to highlight the exact error text.\n  * @version $Id: JUnitError.java 5236 2010-04-27 01:43:36Z mgricken $\n  */\npublic class JUnitError extends DJError implements Serializable {\n  private String _test;\n  private String _className;\n  private String _exception;\n  private StackTraceElement[] _stackTrace;\n  \n  /** Constructor.\n   * @param file the file where the error occurred\n   * @param lineNumber the line number of the error\n   * @param startColumn the starting column of the error\n   * @param message  the error message\n   * @param isWarning true if the error is a warning\n   * @param test the name of the test that failed\n   */\n  public JUnitError(File file, int lineNumber, int startColumn, String message, boolean isWarning, String test, \n                    String className, String exception, StackTraceElement[] stackTrace) {\n    super(file, lineNumber, startColumn, message, isWarning);\n    _test = test;\n    _className = className;\n    _exception = exception;\n    _stackTrace = stackTrace;\n  }\n\n  /** Constructor for an error with no associated location.  This constructor also\n    * provides a default stackTrace.\n    * @param message  the error message\n    * @param isWarning true if the error is a warning\n    * @param test the name of the test that failed\n    */\n  public JUnitError(String message, boolean isWarning, String test) {\n    this(null, -1, -1, message, isWarning, test, \"\", \"No associated stack trace\", new StackTraceElement[0]);\n  }\n\n  /** Gets the test name\n    * @return the test name\n    */\n  public String testName() { return _test; }\n\n  /** Gets the class name\n    * @return the class name\n    */\n  public String className() { return _className; }\n\n  /** All JUnit errors are Throwables that have been thrown, so all have\n    * a stack trace\n    * @return the stack trace associated with the error\n    */\n  public String exception() { return _exception; }\n  \n  /** Return the array of stack trace elements. */\n  public StackTraceElement[] stackTrace() { return _stackTrace; }\n  \n  /** Set the array of stack trace elements. */\n  public void setStackTrace(StackTraceElement[] stes) { _stackTrace = stes; }\n  \n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append(_exception);\n    \n    for(StackTraceElement s: _stackTrace) {\n      sb.append('\\n');\n      sb.append(\"\\tat \");\n      sb.append(s);\n    }\n    return sb.toString();\n  }\n\n/** Resets the progress bar to start counting the given number of tests. \n * @param jUnitPanel TODO\n * @param numTests TODO*/\n  public void progressReset(JUnitPanel jUnitPanel, int numTests) {\n    jUnitPanel._progressBar.reset();\n    jUnitPanel._progressBar.start(numTests);\n    jUnitPanel._testsSuccessful = true;\n    jUnitPanel._testCount = 0;\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 114,
                        "lineEnd": 122,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.JUnitPanel\nRationale: The method directly manipulates the properties of JUnitPanel, such as resetting the progress bar and updating test counts, making it logical for the method to reside within the JUnitPanel class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 3774
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "progressReset",
                            "method_signature": "public void progressReset(JUnitPanel jUnitPanel, int numTests)",
                            "target_class": "JUnitPanel",
                            "rationale": "The progressReset method directly manipulates the JUnitPanel's progress bar and test count, indicating that it is more appropriate for this method to reside within the JUnitPanel class."
                        }
                    ],
                    "llm_response_time": 1032
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "progressReset",
                            "method_signature": "public void progressReset(JUnitPanel jUnitPanel, int numTests)",
                            "target_class": "JUnitPanel",
                            "rationale": "The progressReset method directly manipulates the JUnitPanel's progress bar and test count, indicating that it is more appropriate for this method to reside within the JUnitPanel class."
                        }
                    ],
                    "llm_response_time": 984
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "progressReset",
                            "method_signature": "public void progressReset(JUnitPanel jUnitPanel, int numTests)",
                            "target_class": "JUnitPanel",
                            "rationale": "The progressReset method directly manipulates the JUnitPanel's progress bar and test count, indicating that it is more appropriate for this method to reside within the JUnitPanel class."
                        }
                    ],
                    "llm_response_time": 1179
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "progressReset",
                            "method_signature": "public void progressReset(JUnitPanel jUnitPanel, int numTests)",
                            "target_class": "JUnitPanel",
                            "rationale": "The progressReset method directly manipulates the JUnitPanel's progress bar and test count, indicating that it is more appropriate for this method to reside within the JUnitPanel class."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "progressReset"
                ],
                "llm_response_time": 509
            },
            "targetClassMap": {
                "progressReset": {
                    "target_classes": [
                        {
                            "class_name": "JUnitPanel",
                            "similarity_score": 0.4911634244820169
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "JUnitPanel"
                    ],
                    "llm_response_time": 1305,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "- method edu.rice.cs.drjava.model.definitions.DefinitionsEditorKit::closeProject(boolean):void need move to edu.rice.cs.drjava.model.AbstractGlobalModel",
        "class_name": "edu.rice.cs.drjava.model.definitions.DefinitionsEditorKit",
        "telemetry": {
            "id": "6ad7c9ab-1cec-4053-8004-aa5aed059588",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 314,
                "lineStart": 52,
                "lineEnd": 365,
                "bodyLineStart": 52,
                "language": "java",
                "sourceCode": "/** The editor kit class for editing Java source files. It functions as the controller in an MVC hierarchy.  It also\n  * implements a factory for new documents and a factory for Views (the things that render the document).  May only be\n  * used as the EditorKit for panes extending AbstractDJPane.  In fact, only used as the EditorKit for DefintionsPanes.\n  * Stored as a field of DefinitionsPane.\n  * @version $Id: DefinitionsEditorKit.java 5248 2010-05-08 16:36:16Z mgricken $\n  */\npublic class DefinitionsEditorKit extends StyledEditorKit {\n  \n  private GlobalEventNotifier _notifier;\n  private Action[] _actions;\n  \n  /** Creates a new editor kit with the given listeners.\n    * @param notifier Keeps track of the listeners to the model\n    */\n  public DefinitionsEditorKit(GlobalEventNotifier notifier) {\n    _notifier = notifier;\n    Action[] supActions = super.getActions();\n    _actions = new Action[supActions.length];\n    for(int i = 0; i < _actions.length; ++i) {\n      Action a = supActions[i];\n      Object name = a.getValue(\"Name\");\n      if (name.equals(beginWordAction)) {\n        _actions[i] = new BeginWordAction(beginWordAction, false);\n      }\n      else if (name.equals(endWordAction)) {\n        _actions[i] = new EndWordAction(endWordAction, false);\n      }\n      else if (name.equals(nextWordAction)){\n        _actions[i] = new NextWordAction(nextWordAction, false);\n      }\n      else if (name.equals(previousWordAction)) {\n        _actions[i] = new PreviousWordAction(previousWordAction, false);\n      }\n      else if (name.equals(selectionNextWordAction)){\n        _actions[i] = new NextWordAction(selectionNextWordAction, true);\n      }\n      else if (name.equals(selectionPreviousWordAction)) {\n        _actions[i] = new PreviousWordAction(selectionPreviousWordAction, true);\n      }\n      else if (name.equals(selectWordAction)) {\n        _actions[i] = new SelectWordAction();\n      }\n      else _actions[i] = a;\n    }\n  }\n  \n  public Action[] getActions() { return _actions; }\n  \n  private static ViewFactory _factory = new ViewFactory() {\n    public View create(Element elem) {\n      // The following line is for performance analysis only!\n      // return new WrappedPlainView(elem, true);\n      return new ColoringView(elem);\n    }\n  };\n  \n  /** Creates a new DefinitionsDocument.  Formerly named createDefaultDocument() because the view (DefinitionsPane)\n    * would create a DefinitionsDocument by default when it was constructed.  However, this default document was  \n    * immediately discarded because a DefinitionsDocument for the constructed DefinitionsPane already existed. \n    * Unfortunately, JEditorPane does not have a constructor that takes a Document as input.  We conceivably could\n    * design this EditorKit to return the pre-existing document when the JEditorPane requests a new one, but the \n    * EditorKit is specified by a static field of DefinitionsPane so there is no clean way to install the proper\n    * EditorKit before the JEditorPane constructor asks for the Document.\n    *\n    * As an easier alternative, we just let the DefaultEditorKit return a PlainDocument (much lighter weight),\n    * which is thrown away when the true DefinitionsDocument is assigned\n    *\n    * Improvements to this approach are welcome...  :)\n    */\n  public DefinitionsDocument createNewDocument() { return  _createDefaultTypedDocument(); }\n  \n  /** Creates a new DefinitionsDocument.\n    * @return a new DefinitionsDocument.\n    */\n  private DefinitionsDocument _createDefaultTypedDocument() { return new DefinitionsDocument(_notifier); }\n  \n  /** Get the MIME content type of the document\n    * @return \"text/java\"\n    */\n  public String getContentType() { return \"text/java\"; }\n  \n  /** We want to use our ColoringView to render text, so here we return a factory that creates ColoringViews. */\n  public final ViewFactory getViewFactory() { return _factory; }\n  \n  /** Performs any needed operations on the model after project files have been closed.  This method is not \n    * responsible for closing any files; both the files in the project and the project file have already been \n    * closed (by MainFrame._closeProject()).  Resets interations unless suppressReset is true.\n * @param abstractGlobalModel TODO\n * @param suppressReset TODO\n    */\n  public void closeProject(AbstractGlobalModel abstractGlobalModel, boolean suppressReset) {\n    abstractGlobalModel.setDocumentNavigator(new AWTContainerNavigatorFactory<OpenDefinitionsDocument>().\n                           makeListNavigator(abstractGlobalModel.getDocumentNavigator()));\n    abstractGlobalModel.setFileGroupingState(abstractGlobalModel.makeFlatFileGroupingState());\n    \n    if (! suppressReset) abstractGlobalModel.resetInteractions(abstractGlobalModel.getWorkingDirectory());\n    abstractGlobalModel._notifier.projectClosed();\n    abstractGlobalModel.setActiveDocument(abstractGlobalModel.getDocumentNavigator().getDocuments().get(0));\n  }\n\n/** Brings the cursor to the beginning of the current word separated by whitespace or a delimiting character. */\n  static class BeginWordAction extends TextAction {\n    private boolean _select;\n        \n    BeginWordAction(String nm, boolean b) {\n      super(nm);\n      _select = b;\n    }\n    \n    public void actionPerformed(ActionEvent e) {\n      AbstractDJPane target = (AbstractDJPane) getTextComponent(e);\n      if (target != null) {\n        try {\n          int offs = target.getCaretPosition();\n          final String text = target.getDocument().getText(0, offs);\n          while(offs > 0) {\n            char chPrev = text.charAt(offs - 1);\n            if ((\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(chPrev) >= 0) || (Character.isWhitespace(chPrev))) {\n              break;\n            }\n            --offs;\n            if (offs == 0) break; // otherwise offs-1 below generates an index out of bounds\n            char ch = text.charAt(offs);\n            chPrev = text.charAt(offs - 1);\n            if ((\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(ch) >= 0) || (\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(chPrev) >= 0) \n                  || Character.isWhitespace(ch) || Character.isWhitespace(chPrev)) {\n              break;\n            }\n          }\n          if (_select) {\n            target.moveCaretPosition(offs);\n          } else {\n            target.setCaretPosition(offs);\n          }\n        }\n        catch(BadLocationException ble) { throw new UnexpectedException(ble); }\n      }\n    }\n  }\n  \n  /** Sets the cursor at the end of the current word separated by whitespace or a delimiting character. */\n  static class EndWordAction extends TextAction {\n    private boolean _select;\n    \n    EndWordAction(String nm, boolean b) {\n      super(nm);\n      _select = b;\n    }\n    \n    public void actionPerformed(ActionEvent e) {\n      AbstractDJPane target = (AbstractDJPane) getTextComponent(e);\n      if (target != null) {\n        try {\n          int offs = target.getCaretPosition();\n          final int iOffs = offs;\n          final String text = target.getDocument().getText(iOffs,target.getDocument().getLength()-iOffs);\n          while((offs-iOffs)<text.length()-1) {\n            ++offs;\n            char ch = text.charAt(offs-iOffs);\n            if ((\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(ch) >= 0) || Character.isWhitespace(ch)) {\n              break;\n            }\n          }\n          if (_select) {\n            target.moveCaretPosition(offs);\n          } else {\n            target.setCaretPosition(offs);\n          }\n        }\n        catch(BadLocationException ble) { throw new UnexpectedException(ble); }\n      }\n    }\n  }\n  \n  /** Moves the cursor to the beginning of the previous word. If the cursor is currently inside of a word, moves it to\n    * the beginning of that word.  Otherwise, moves the cursor to the beginning of the previous word.\n    * Also stops at delimiting characters and at the end of a line\n    */\n  static class PreviousWordAction extends TextAction {\n    private boolean _select;\n    \n    PreviousWordAction(String nm, boolean b) {\n      super(nm);\n      _select = b;\n    }\n    \n    public void actionPerformed(ActionEvent e) {\n      AbstractDJPane target = (AbstractDJPane) getTextComponent(e);\n      if (target != null) {\n        try {\n          int offs = target.getCaretPosition();\n          final String text = target.getDocument().getText(0,offs);\n          while(offs > 0) {\n            --offs;\n            if (offs == 0)\n              break;\n            char ch = text.charAt(offs);\n            char chPrev = text.charAt(offs - 1);\n            if (Character.isWhitespace(ch) && Character.isWhitespace(chPrev) && ch!='\\n'){\n              continue;\n            }\n            else if ((\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(ch) >= 0) || (\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(chPrev) >= 0) || \n                     ((offs>=2) && Character.isWhitespace(chPrev) && !Character.isWhitespace(text.charAt(offs - 2)) && ch!='\\n')) {\n              break;\n            }\n            else if (Character.isWhitespace(chPrev) && !Character.isWhitespace(ch)){\n              break;\n            }\n            else if (!Character.isWhitespace(chPrev) && ch == '\\n'){\n              break;\n            }\n            //used to fix incorrect behavior when a space is at the end of a line\n            else if (Character.isWhitespace(chPrev) && ch=='\\n'){\n              while(Character.isWhitespace(chPrev) && (offs>0)){\n                --offs;\n                ch = text.charAt(offs);\n                chPrev = text.charAt(offs - 1);\n              }            \n              break;\n            }\n          }\n          if (_select) {\n            target.moveCaretPosition(offs);\n          } else {\n            target.setCaretPosition(offs);\n          }\n        }\n        catch(BadLocationException ble) { throw new UnexpectedException(ble); }\n      }\n    }\n  }\n  \n  /** Moves the cursor from the current word to the beginning of the next word, stopping at delimiting characters and\n    * at the end of a line\n    */ \n  static class NextWordAction extends TextAction {\n    private boolean _select;\n    \n    NextWordAction(String nm, boolean b) {\n      super(nm);\n      _select = b;\n    }\n    \n    public void actionPerformed(ActionEvent e) {\n      AbstractDJPane target = (AbstractDJPane) getTextComponent(e);\n      if (target != null) {\n        try {\n          int offs = target.getCaretPosition();\n          final int iOffs = offs;\n          final String text = target.getDocument().getText(iOffs,target.getDocument().getLength() - iOffs);\n          final int len = text.length();\n          while((offs-iOffs) < len) {\n            ++offs;\n            if (offs-iOffs == len)\n              break;\n            char ch = text.charAt(offs-iOffs);\n            char chPrev = text.charAt(offs-iOffs - 1);\n            if ((\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(ch) >= 0) ||\n                (\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(chPrev) >= 0) ||\n                Character.isWhitespace(chPrev) ||\n                ch == '\\n') {\n              while((offs-iOffs<len) && Character.isWhitespace(ch) && ch != '\\n'){\n                if (\"!@%^&*()-=+[]{};:'\\\",.<>/?\".indexOf(chPrev) >= 0)\n                  break;\n                ++offs;\n                ch = text.charAt(offs-iOffs);\n              }\n              if (ch == '\\n' && Character.isWhitespace(text.charAt(offs - iOffs - 1)))\n                continue;\n              else\n                break;\n            }\n            //used to fix incorrect behavior when a space is at the end of a line\n            if (!Character.isWhitespace(chPrev) && Character.isWhitespace(ch)){\n              int offs0 = offs;\n              while((offs-iOffs)<(len-1) && ch!='\\n' && Character.isWhitespace(ch)){\n                ++offs; \n                ch = text.charAt(offs-iOffs);\n                chPrev = text.charAt(offs-iOffs - 1);               \n              }\n              offs = offs0;\n              if(ch=='\\n')\n                break;\n              else\n                continue;\n            }   \n          }\n          if (_select) {\n            target.moveCaretPosition(offs);\n          } else {\n            target.setCaretPosition(offs);\n          }\n        }\n        catch(BadLocationException ble) { throw new UnexpectedException(ble); }\n      }\n    }\n  }\n  \n  /** Defines the action for word selection as in when double-clicking a word. */\n  static class SelectWordAction extends TextAction {\n    private Action start;\n    private Action end;\n    \n    public SelectWordAction() {\n      super(selectWordAction);\n      start = new BeginWordAction(\"pigdog\", false);\n      end = new EndWordAction(\"pigdog\", true);\n    }\n    public void actionPerformed(ActionEvent e) {\n      start.actionPerformed(e);\n      end.actionPerformed(e);\n    }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 2,
                "candidates": [
                    {
                        "lineStart": 135,
                        "lineEnd": 149,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.AbstractGlobalModel\nRationale: The closeProject method directly manipulates the state and behavior of the AbstractGlobalModel instance, including resetting interactions and managing document navigation, making it a natural fit for this class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 122,
                        "lineEnd": 125,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.GlobalEventNotifier\nRationale: The method _createDefaultTypedDocument() uses _notifier, which suggests it is closely related to the GlobalEventNotifier class. Moving it there would encapsulate the document creation logic within the context of event notification.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 12873
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "createNewDocument",
                            "method_signature": "public DefinitionsDocument createNewDocument()",
                            "target_class": "DefinitionsDocumentFactory",
                            "rationale": "The method createNewDocument() is responsible for creating a new DefinitionsDocument, which is a separate concern from the DefinitionsEditorKit. Moving it to a DefinitionsDocumentFactory class would better encapsulate the document creation logic."
                        },
                        {
                            "method_name": "_createDefaultTypedDocument",
                            "method_signature": "private DefinitionsDocument _createDefaultTypedDocument()",
                            "target_class": "DefinitionsDocumentFactory",
                            "rationale": "This method is specifically focused on creating a DefinitionsDocument. It should be moved to a DefinitionsDocumentFactory class to separate document creation from the editor kit functionality."
                        },
                        {
                            "method_name": "closeProject",
                            "method_signature": "public void closeProject(AbstractGlobalModel abstractGlobalModel, boolean suppressReset)",
                            "target_class": "ProjectManager",
                            "rationale": "The closeProject method deals with project management tasks, which should be handled by a dedicated ProjectManager class. This will help in adhering to the Single Responsibility Principle."
                        },
                        {
                            "method_name": "getViewFactory",
                            "method_signature": "public final ViewFactory getViewFactory()",
                            "target_class": "ViewFactoryProvider",
                            "rationale": "The method getViewFactory() is responsible for providing a ViewFactory, which is a separate concern from the editor kit. Moving it to a ViewFactoryProvider class would improve separation of concerns."
                        }
                    ],
                    "llm_response_time": 3892
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "createNewDocument",
                            "method_signature": "public DefinitionsDocument createNewDocument()",
                            "target_class": "DefinitionsDocumentFactory",
                            "rationale": "The method createNewDocument() is responsible for creating a new DefinitionsDocument, which is a separate concern from the editor kit's functionality. Moving it to a DefinitionsDocumentFactory would better encapsulate the document creation logic."
                        },
                        {
                            "method_name": "closeProject",
                            "method_signature": "public void closeProject(AbstractGlobalModel abstractGlobalModel, boolean suppressReset)",
                            "target_class": "ProjectManager",
                            "rationale": "The closeProject() method deals with project management and state resetting, which is outside the scope of an editor kit. It should be moved to a ProjectManager class that handles project-related operations."
                        },
                        {
                            "method_name": "getViewFactory",
                            "method_signature": "public final ViewFactory getViewFactory()",
                            "target_class": "ViewFactoryProvider",
                            "rationale": "The getViewFactory() method is responsible for providing a view factory, which is a separate concern from the editor kit's functionality. Moving it to a ViewFactoryProvider would better encapsulate the view creation logic."
                        }
                    ],
                    "llm_response_time": 4519
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "createNewDocument",
                            "method_signature": "public DefinitionsDocument createNewDocument()",
                            "target_class": "DefinitionsDocumentFactory",
                            "rationale": "The method createNewDocument() is responsible for creating a new DefinitionsDocument, which is a separate concern from the editor kit's functionality. Moving it to a DefinitionsDocumentFactory class would better encapsulate the document creation logic."
                        },
                        {
                            "method_name": "closeProject",
                            "method_signature": "public void closeProject(AbstractGlobalModel abstractGlobalModel, boolean suppressReset)",
                            "target_class": "ProjectManager",
                            "rationale": "The closeProject() method deals with project management and state resetting, which is outside the scope of an editor kit. It should be moved to a ProjectManager class that handles project-related operations."
                        },
                        {
                            "method_name": "getViewFactory",
                            "method_signature": "public final ViewFactory getViewFactory()",
                            "target_class": "ViewFactoryProvider",
                            "rationale": "The getViewFactory() method is responsible for providing a view factory, which is a separate concern from the editor kit's primary responsibilities. It should be moved to a ViewFactoryProvider class that manages view creation."
                        }
                    ],
                    "llm_response_time": 3549
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "createNewDocument",
                            "method_signature": "public DefinitionsDocument createNewDocument()",
                            "target_class": "DefinitionsDocumentFactory",
                            "rationale": "The method createNewDocument() is responsible for creating a new DefinitionsDocument, which is a separate concern from the DefinitionsEditorKit. Moving it to a DefinitionsDocumentFactory class would better encapsulate the document creation logic."
                        },
                        {
                            "method_name": "_createDefaultTypedDocument",
                            "method_signature": "private DefinitionsDocument _createDefaultTypedDocument()",
                            "target_class": "DefinitionsDocumentFactory",
                            "rationale": "This method is specifically focused on creating a DefinitionsDocument. It should be moved to a DefinitionsDocumentFactory class to separate document creation from the editor kit functionality."
                        },
                        {
                            "method_name": "closeProject",
                            "method_signature": "public void closeProject(AbstractGlobalModel abstractGlobalModel, boolean suppressReset)",
                            "target_class": "ProjectManager",
                            "rationale": "The closeProject method deals with project management tasks, which should be handled by a dedicated ProjectManager class. This will help in adhering to the Single Responsibility Principle."
                        },
                        {
                            "method_name": "getViewFactory",
                            "method_signature": "public final ViewFactory getViewFactory()",
                            "target_class": "ViewFactoryProvider",
                            "rationale": "The method getViewFactory() is responsible for providing a ViewFactory, which is a separate concern from the editor kit. Moving it to a ViewFactoryProvider class would improve separation of concerns."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "closeProject",
                    "createNewDocument",
                    "getViewFactory",
                    "_createDefaultTypedDocument"
                ],
                "llm_response_time": 820
            },
            "targetClassMap": {
                "closeProject": {
                    "target_classes": [
                        {
                            "class_name": "AbstractGlobalModel",
                            "similarity_score": 0.44910387832489534
                        },
                        {
                            "class_name": "GlobalEventNotifier",
                            "similarity_score": 0.34169908462528226
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "AbstractGlobalModel",
                        "GlobalEventNotifier"
                    ],
                    "llm_response_time": 1149,
                    "similarity_computation_time": 10,
                    "similarity_metric": "cosine"
                },
                "createNewDocument": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1321,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "getViewFactory": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 2144,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "_createDefaultTypedDocument": {
                    "target_classes": [
                        {
                            "class_name": "GlobalEventNotifier",
                            "similarity_score": 0.3103303592284171
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "GlobalEventNotifier"
                    ],
                    "llm_response_time": 1018,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.MovingDocumentRegion::disableFindAgain():void need move to edu.rice.cs.drjava.ui.FindResultsPanel",
        "class_name": "edu.rice.cs.drjava.model.MovingDocumentRegion",
        "telemetry": {
            "id": "5d6a5222-146f-44ed-8af1-47baf45bd59f",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 127,
                "lineStart": 47,
                "lineEnd": 173,
                "bodyLineStart": 47,
                "language": "java",
                "sourceCode": "/** Class for a document region that moves with changes in the document; it also includes a lazy tool-tip and line\n  * boundaries.  TODO: convert _startPos and _endPos to _cachedStart and _cachedEnd which are updated by updateLines\n  * @version $Id: MovingDocumentRegion.java 5175 2010-01-20 08:46:32Z mgricken $Regiong\n  */\npublic class MovingDocumentRegion extends DocumentRegion {\n  \n//  /** Offset of end of last line of this region as recorded in last call on updateLines (or <init>). */\n//  protected volatile int _cachedLineEnd;\n  protected final Position _startPos;\n  protected final Position _endPos;\n  protected volatile Position _lineStartPos;\n  protected volatile Position _lineEndPos;\n    \n  /** Suspension that generates the JTree label excerpt for this region. */\n  protected final Thunk<String> _stringSuspension;\n  \n  /** Update _lineStartPos and _lineEndPos after line has been edited. */\n  public void update() {\n    try {  // _doc is inherited from DocumentRegion\n      _lineStartPos = _doc.createPosition(_doc._getLineStartPos(getStartOffset()));\n      _lineEndPos = _doc.createPosition(_doc._getLineEndPos(getEndOffset()));\n    }\n    catch (BadLocationException ble) { throw new UnexpectedException(ble); }  // should never happen\n  }\n    \n  /** Create a new moving document region. */\n  public MovingDocumentRegion(final OpenDefinitionsDocument doc, int start, int end, int lineStart, int lineEnd) {\n\n    super(doc, start, end);\n\n    assert doc != null;\n    \n    try {\n      _startPos = doc.createPosition(start);\n      _endPos = doc.createPosition(end);\n      _lineStartPos = doc.createPosition(lineStart);\n      _lineEndPos = doc.createPosition(lineEnd);\n    }\n    catch (BadLocationException ble) { throw new UnexpectedException(ble); }  // should never happen\n    \n    _stringSuspension = new Thunk<String>() {\n      public String value() {\n        try {\n          update();\n          int endSel = getEndOffset();\n          int startSel = getStartOffset();\n          int selLength = endSel - startSel;\n          \n          int excerptEnd = getLineEndOffset();\n          int excerptStart = getLineStartOffset();\n          \n          // the offsets within the excerpted string of the selection (figuratively in \"Red\")\n          int startRed = startSel - excerptStart;\n          int endRed = endSel - excerptStart;\n          \n          int excerptLength = Math.min(120, excerptEnd - excerptStart);\n          String text = doc.getText(excerptStart, excerptLength);\n          \n          // Construct the matching string and compressed selection prefix and suffix strings within text\n          String prefix, match, suffix;\n          if (excerptLength < startRed) { // selection not included in excerpt\n            prefix = StringOps.compress(text.substring(0, excerptLength));\n            match = \" ...\";\n            suffix = \"\";\n          }\n          else {\n            prefix = StringOps.compress(text.substring(0, startRed));\n            if (excerptLength < startRed + selLength) { // selection extends beyond excerpt\n              match = text.substring(startRed) + \" ...\";\n              suffix = \"\";\n            }\n            else {\n              match = text.substring(startRed, endRed);\n              suffix = StringOps.compress(text.substring(endRed, excerptLength));\n            }\n          }\n          \n          // COMMENT: We need a global invariant concerning non-displayable characters.  \n          \n          // create the excerpt string\n          StringBuilder sb = new StringBuilder(edu.rice.cs.plt.text.TextUtil.htmlEscape(prefix));\n          sb.append(\"<font color=#ff0000>\");\n//                sb.append(LEFT);\n          sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(match));\n          sb.append(\"</font>\");\n//                sb.append(RIGHT);\n          sb.append(edu.rice.cs.plt.text.TextUtil.htmlEscape(suffix));\n//                sb.append(\"</html>\");\n//                sb.append(StringOps.getBlankString(120 - sLength));  // move getBank to StringOps\n          return sb.toString();\n        }\n        catch(BadLocationException e) { return \"\";  /* Ignore the exception. */ }\n      }\n    };\n  }\n  \n  /** @return the document, or null if it hasn't been established yet */\n  public OpenDefinitionsDocument getDocument() { return _doc; }\n  \n  /** @return region start. */\n  public int getStartOffset() { return _startPos.getOffset(); }\n  \n  /** @return region end. */\n  public int getEndOffset() { return _endPos.getOffset(); }\n  \n  /** @return line start preeding region. */\n  public int getLineStartOffset() { return _lineStartPos.getOffset(); }\n  \n  /** @return line end following region. */\n  public int getLineEndOffset() { return _lineEndPos.getOffset(); }\n  \n  /** @return the string it was assigned */\n  public String getString() { return _stringSuspension.value(); }\n  \n  /** Disables \"Find Again\", e.g. because the document was closed. \n * @param findResultsPanel TODO*/\n  public void disableFindAgain(FindResultsPanel findResultsPanel) {\n    findResultsPanel._doc.clear(); \n    findResultsPanel.updateButtons(); \n  }\n\n/** @return true if objects a and b are equal; null values are handled correctly. */\n  public static boolean equals(Object a, Object b) {\n    if (a == null) return (b == null);\n    return a.equals(b);\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 2,
                "candidates": [
                    {
                        "lineStart": 160,
                        "lineEnd": 165,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.FindResultsPanel\nRationale: The method directly manipulates the state of the FindResultsPanel instance by clearing the document and updating buttons, making it more appropriate for this method to reside within the FindResultsPanel class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 167,
                        "lineEnd": 171,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.model.AbstractGlobalModel\nRationale: The equals method is a utility function for comparing objects, which is often relevant in models that manage or represent data. AbstractGlobalModel could serve as a base for various models, making it a suitable place for this method.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 6892
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "disableFindAgain",
                            "method_signature": "public void disableFindAgain(FindResultsPanel findResultsPanel)",
                            "target_class": "FindResultsPanel",
                            "rationale": "The disableFindAgain method directly manipulates the FindResultsPanel, which suggests that it should be part of that class to maintain better cohesion and encapsulation."
                        },
                        {
                            "method_name": "equals",
                            "method_signature": "public static boolean equals(Object a, Object b)",
                            "target_class": "ObjectUtils",
                            "rationale": "The equals method is a utility function that checks equality between two objects and does not belong to the MovingDocumentRegion class. It should be moved to a utility class like ObjectUtils for better organization and reusability."
                        }
                    ],
                    "llm_response_time": 2259
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "disableFindAgain",
                            "method_signature": "public void disableFindAgain(FindResultsPanel findResultsPanel)",
                            "target_class": "FindResultsPanel",
                            "rationale": "The disableFindAgain method directly manipulates the FindResultsPanel, which suggests it should be part of that class to maintain encapsulation and adhere to the Single Responsibility Principle."
                        },
                        {
                            "method_name": "equals",
                            "method_signature": "public static boolean equals(Object a, Object b)",
                            "target_class": "ObjectUtils",
                            "rationale": "The equals method is a utility function that checks equality between two objects and should be moved to a utility class like ObjectUtils to promote reusability and separation of concerns."
                        }
                    ],
                    "llm_response_time": 1919
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "disableFindAgain",
                            "method_signature": "public void disableFindAgain(FindResultsPanel findResultsPanel)",
                            "target_class": "FindResultsPanel",
                            "rationale": "The disableFindAgain method directly manipulates the FindResultsPanel, making it more appropriate for this method to reside within the FindResultsPanel class."
                        },
                        {
                            "method_name": "equals",
                            "method_signature": "public static boolean equals(Object a, Object b)",
                            "target_class": "ObjectUtils",
                            "rationale": "The equals method is a utility function that checks equality between two objects and should be moved to a utility class like ObjectUtils for better organization and reusability."
                        }
                    ],
                    "llm_response_time": 2169
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "disableFindAgain",
                            "method_signature": "public void disableFindAgain(FindResultsPanel findResultsPanel)",
                            "target_class": "FindResultsPanel",
                            "rationale": "The disableFindAgain method directly manipulates the FindResultsPanel, which suggests that it should be part of that class to maintain better cohesion and encapsulation."
                        },
                        {
                            "method_name": "equals",
                            "method_signature": "public static boolean equals(Object a, Object b)",
                            "target_class": "ObjectUtils",
                            "rationale": "The equals method is a utility function that checks equality between two objects and does not belong to the MovingDocumentRegion class. It should be moved to a utility class like ObjectUtils for better organization and reusability."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "disableFindAgain",
                    "equals"
                ],
                "llm_response_time": 438
            },
            "targetClassMap": {
                "disableFindAgain": {
                    "target_classes": [
                        {
                            "class_name": "FindResultsPanel",
                            "similarity_score": 0.3821148418431922
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "FindResultsPanel"
                    ],
                    "llm_response_time": 868,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "equals": {
                    "target_classes": [
                        {
                            "class_name": "Query",
                            "similarity_score": 0.39134317643780037
                        },
                        {
                            "class_name": "Region",
                            "similarity_score": 0.2571961718242198
                        },
                        {
                            "class_name": "DJError",
                            "similarity_score": 0.40829476266080256
                        },
                        {
                            "class_name": "DJDocument",
                            "similarity_score": 0.14620596218856355
                        },
                        {
                            "class_name": "FileRegion",
                            "similarity_score": 0.2675001880861359
                        },
                        {
                            "class_name": "FindResult",
                            "similarity_score": 0.258447771934956
                        },
                        {
                            "class_name": "Finalizable",
                            "similarity_score": 0.20218644975644703
                        },
                        {
                            "class_name": "GlobalModel",
                            "similarity_score": 0.23525319882781331
                        },
                        {
                            "class_name": "IHighlighted",
                            "similarity_score": 0.2589241164518679
                        },
                        {
                            "class_name": "EventNotifier",
                            "similarity_score": 0.26007047050064236
                        },
                        {
                            "class_name": "RegionManager",
                            "similarity_score": 0.2200595824602537
                        },
                        {
                            "class_name": "TestDocGetter",
                            "similarity_score": 0.30176468001910495
                        },
                        {
                            "class_name": "DocumentRegion",
                            "similarity_score": 0.36195138019479267
                        },
                        {
                            "class_name": "ILoadDocuments",
                            "similarity_score": 0.17149858514250885
                        },
                        {
                            "class_name": "DeadClassLoader",
                            "similarity_score": 0.22363475384157414
                        },
                        {
                            "class_name": "DrJavaFileUtils",
                            "similarity_score": 0.42087728210155595
                        },
                        {
                            "class_name": "DummyOpenDefDoc",
                            "similarity_score": 0.215288184982836
                        },
                        {
                            "class_name": "IDocumentRegion",
                            "similarity_score": 0.2473942787154344
                        },
                        {
                            "class_name": "JDKToolsLibrary",
                            "similarity_score": 0.35127653225461997
                        },
                        {
                            "class_name": "DummyGlobalModel",
                            "similarity_score": 0.19363141784796295
                        },
                        {
                            "class_name": "FileSaveSelector",
                            "similarity_score": 0.2250466503461923
                        },
                        {
                            "class_name": "GlobalIndentTest",
                            "similarity_score": 0.14043522730260866
                        },
                        {
                            "class_name": "EventNotifierTest",
                            "similarity_score": 0.26692060662139266
                        },
                        {
                            "class_name": "FileGroupingState",
                            "similarity_score": 0.24859680604055834
                        },
                        {
                            "class_name": "FinalizationEvent",
                            "similarity_score": 0.3294345637345082
                        },
                        {
                            "class_name": "GlobalModelIOTest",
                            "similarity_score": 0.20917590756694557
                        },
                        {
                            "class_name": "TestDocGetterTest",
                            "similarity_score": 0.21369595678213407
                        },
                        {
                            "class_name": "AbstractDJDocument",
                            "similarity_score": 0.29924036429155987
                        },
                        {
                            "class_name": "DefaultGlobalModel",
                            "similarity_score": 0.29996258858940045
                        },
                        {
                            "class_name": "DocumentRegionTest",
                            "similarity_score": 0.1788893973379397
                        },
                        {
                            "class_name": "FileMovedException",
                            "similarity_score": 0.23095609134944636
                        },
                        {
                            "class_name": "FindReplaceMachine",
                            "similarity_score": 0.2528203400880298
                        },
                        {
                            "class_name": "JarJDKToolsLibrary",
                            "similarity_score": 0.32058481753937773
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.17817481053499293
                        },
                        {
                            "class_name": "AbstractGlobalModel",
                            "similarity_score": 0.39967706823744686
                        },
                        {
                            "class_name": "DummyDocumentRegion",
                            "similarity_score": 0.2863731367143386
                        },
                        {
                            "class_name": "DummyOpenDefDocTest",
                            "similarity_score": 0.20181452176247744
                        },
                        {
                            "class_name": "GlobalEventNotifier",
                            "similarity_score": 0.27329152684596253
                        },
                        {
                            "class_name": "GlobalModelListener",
                            "similarity_score": 0.2156227768385025
                        },
                        {
                            "class_name": "GlobalModelTestCase",
                            "similarity_score": 0.2867255230020793
                        },
                        {
                            "class_name": "AlreadyOpenException",
                            "similarity_score": 0.2950076089376267
                        },
                        {
                            "class_name": "DummyGlobalModelTest",
                            "similarity_score": 0.22626443977085497
                        },
                        {
                            "class_name": "FinalizationListener",
                            "similarity_score": 0.1363988678940947
                        },
                        {
                            "class_name": "GlobalModelJUnitTest",
                            "similarity_score": 0.19604462819379453
                        },
                        {
                            "class_name": "GlobalModelOtherTest",
                            "similarity_score": 0.16924903728814317
                        },
                        {
                            "class_name": "BrowserDocumentRegion",
                            "similarity_score": 0.30936420461083936
                        },
                        {
                            "class_name": "BrowserHistoryManager",
                            "similarity_score": 0.3668791024790457
                        },
                        {
                            "class_name": "ClipboardHistoryModel",
                            "similarity_score": 0.3800229567348445
                        },
                        {
                            "class_name": "ConcreteRegionManager",
                            "similarity_score": 0.279813322405933
                        },
                        {
                            "class_name": "MultiThreadedTestCase",
                            "similarity_score": 0.35715660657751647
                        },
                        {
                            "class_name": "OrderedDocumentRegion",
                            "similarity_score": 0.13986051983174896
                        },
                        {
                            "class_name": "RegionManagerListener",
                            "similarity_score": 0.17682682338364944
                        },
                        {
                            "class_name": "AbstractDJDocumentTest",
                            "similarity_score": 0.06715816006790862
                        },
                        {
                            "class_name": "FindReplaceMachineTest",
                            "similarity_score": 0.16879565720970932
                        },
                        {
                            "class_name": "GlobalModelCompileTest",
                            "similarity_score": 0.24004432325782363
                        },
                        {
                            "class_name": "SingleDisplayModelTest",
                            "similarity_score": 0.22441993631393628
                        },
                        {
                            "class_name": "ClassAndInterfaceFinder",
                            "similarity_score": 0.3664587403695681
                        },
                        {
                            "class_name": "DocumentClosedException",
                            "similarity_score": 0.2508368075245958
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.25581024656805157
                        },
                        {
                            "class_name": "DummyGlobalModelListener",
                            "similarity_score": 0.31362095973344617
                        },
                        {
                            "class_name": "GlobalModelCompileIOTest",
                            "similarity_score": 0.1780357987679711
                        },
                        {
                            "class_name": "ClipboardHistoryModelTest",
                            "similarity_score": 0.1652097113122548
                        },
                        {
                            "class_name": "LightWeightParsingControl",
                            "similarity_score": 0.25053336554642197
                        },
                        {
                            "class_name": "MultiThreadedTestCaseTest",
                            "similarity_score": 0.27305715361245486
                        },
                        {
                            "class_name": "LightWeightParsingListener",
                            "similarity_score": 0.1143739277494535
                        },
                        {
                            "class_name": "ClassAndInterfaceFinderTest",
                            "similarity_score": 0.20585372060865534
                        },
                        {
                            "class_name": "GlobalModelCompileErrorsTest",
                            "similarity_score": 0.12992639651461976
                        },
                        {
                            "class_name": "GlobalModelCompileSuccessTest",
                            "similarity_score": 0.12345122360258474
                        },
                        {
                            "class_name": "DefaultLightWeightParsingControl",
                            "similarity_score": 0.33491660252419964
                        },
                        {
                            "class_name": "GlobalModelCompileSuccessTestCase",
                            "similarity_score": 0.1853967373054826
                        },
                        {
                            "class_name": "GlobalModelCompileSuccessOptionsTest",
                            "similarity_score": 0.2026163043537547
                        },
                        {
                            "class_name": "Query",
                            "similarity_score": 0.2656838035497962
                        },
                        {
                            "class_name": "Region",
                            "similarity_score": 0.13794014696151088
                        },
                        {
                            "class_name": "DJError",
                            "similarity_score": 0.2367750612517712
                        },
                        {
                            "class_name": "DJDocument",
                            "similarity_score": 0.036319861014112165
                        },
                        {
                            "class_name": "FileRegion",
                            "similarity_score": 0.11812488464372366
                        },
                        {
                            "class_name": "FindResult",
                            "similarity_score": 0.2605705299144868
                        },
                        {
                            "class_name": "Finalizable",
                            "similarity_score": 0.13794014696151088
                        },
                        {
                            "class_name": "GlobalModel",
                            "similarity_score": 0.05790456220321929
                        },
                        {
                            "class_name": "IHighlighted",
                            "similarity_score": 0.20991342856239584
                        },
                        {
                            "class_name": "EventNotifier",
                            "similarity_score": 0.22093023255813957
                        },
                        {
                            "class_name": "RegionManager",
                            "similarity_score": 0.04013467713171151
                        },
                        {
                            "class_name": "TestDocGetter",
                            "similarity_score": 0.2365436876621403
                        },
                        {
                            "class_name": "DocumentRegion",
                            "similarity_score": 0.23158903743957998
                        },
                        {
                            "class_name": "ILoadDocuments",
                            "similarity_score": 0.08495482076828986
                        },
                        {
                            "class_name": "DeadClassLoader",
                            "similarity_score": 0.21018795844474034
                        },
                        {
                            "class_name": "DrJavaFileUtils",
                            "similarity_score": 0.2754816853811212
                        },
                        {
                            "class_name": "DummyOpenDefDoc",
                            "similarity_score": 0.23615458321640062
                        },
                        {
                            "class_name": "IDocumentRegion",
                            "similarity_score": 0.15249857033260467
                        },
                        {
                            "class_name": "JDKToolsLibrary",
                            "similarity_score": 0.2432048665284352
                        },
                        {
                            "class_name": "DummyGlobalModel",
                            "similarity_score": 0.23618183775690738
                        },
                        {
                            "class_name": "FileSaveSelector",
                            "similarity_score": 0.1647172818672541
                        },
                        {
                            "class_name": "FileGroupingState",
                            "similarity_score": 0.06780828280007001
                        },
                        {
                            "class_name": "FinalizationEvent",
                            "similarity_score": 0.22619193331698287
                        },
                        {
                            "class_name": "AbstractDJDocument",
                            "similarity_score": 0.23202330098090754
                        },
                        {
                            "class_name": "DefaultGlobalModel",
                            "similarity_score": 0.22045869942006585
                        },
                        {
                            "class_name": "FileMovedException",
                            "similarity_score": 0.22026447615240016
                        },
                        {
                            "class_name": "FindReplaceMachine",
                            "similarity_score": 0.23923071633423215
                        },
                        {
                            "class_name": "JarJDKToolsLibrary",
                            "similarity_score": 0.23331324211074522
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.07204880221302937
                        },
                        {
                            "class_name": "AbstractGlobalModel",
                            "similarity_score": 0.23566431684130137
                        },
                        {
                            "class_name": "DummyDocumentRegion",
                            "similarity_score": 0.20138828357048288
                        },
                        {
                            "class_name": "GlobalEventNotifier",
                            "similarity_score": 0.2358682869720317
                        },
                        {
                            "class_name": "GlobalModelListener",
                            "similarity_score": 0.039374961547907886
                        },
                        {
                            "class_name": "AlreadyOpenException",
                            "similarity_score": 0.2319834879901146
                        },
                        {
                            "class_name": "FinalizationListener",
                            "similarity_score": 0.15249857033260467
                        },
                        {
                            "class_name": "BrowserDocumentRegion",
                            "similarity_score": 0.22255456510436653
                        },
                        {
                            "class_name": "BrowserHistoryManager",
                            "similarity_score": 0.24112141108520607
                        },
                        {
                            "class_name": "ClipboardHistoryModel",
                            "similarity_score": 0.2308929914644703
                        },
                        {
                            "class_name": "ConcreteRegionManager",
                            "similarity_score": 0.226401661626589
                        },
                        {
                            "class_name": "OrderedDocumentRegion",
                            "similarity_score": 0.1363988678940947
                        },
                        {
                            "class_name": "RegionManagerListener",
                            "similarity_score": 0.08495482076828986
                        },
                        {
                            "class_name": "ClassAndInterfaceFinder",
                            "similarity_score": 0.24102805569250177
                        },
                        {
                            "class_name": "DocumentClosedException",
                            "similarity_score": 0.22026447615240016
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.08798899308584625
                        },
                        {
                            "class_name": "DummyGlobalModelListener",
                            "similarity_score": 0.22771245736852036
                        },
                        {
                            "class_name": "LightWeightParsingControl",
                            "similarity_score": 0.053182796138920636
                        },
                        {
                            "class_name": "LightWeightParsingListener",
                            "similarity_score": 0.12227087189088336
                        },
                        {
                            "class_name": "DefaultLightWeightParsingControl",
                            "similarity_score": 0.2177333362364445
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "AbstractGlobalModel",
                        "GlobalModel",
                        "DocumentRegion",
                        "DrJavaFileUtils",
                        "DJError",
                        "Query",
                        "ClipboardHistoryModel",
                        "BrowserHistoryManager",
                        "ClassAndInterfaceFinder",
                        "MultiThreadedTestCase",
                        "JDKToolsLibrary",
                        "DefaultLightWeightParsingControl",
                        "FinalizationEvent",
                        "JarJDKToolsLibrary",
                        "DummyGlobalModelListener",
                        "BrowserDocumentRegion",
                        "TestDocGetter",
                        "DefaultGlobalModel",
                        "AbstractDJDocument",
                        "AlreadyOpenException",
                        "GlobalModelTestCase",
                        "DummyDocumentRegion",
                        "ConcreteRegionManager",
                        "GlobalEventNotifier",
                        "MultiThreadedTestCaseTest",
                        "FileRegion",
                        "EventNotifierTest",
                        "FindResult",
                        "EventNotifier",
                        "IHighlighted",
                        "Region",
                        "OpenDefinitionsDocument",
                        "FindReplaceMachine",
                        "DocumentClosedException",
                        "LightWeightParsingControl",
                        "FileGroupingState",
                        "IDocumentRegion",
                        "GlobalModelCompileTest",
                        "DummyGlobalModel",
                        "DummyOpenDefDoc",
                        "FileMovedException",
                        "DummyGlobalModelTest",
                        "FileSaveSelector",
                        "SingleDisplayModelTest",
                        "DeadClassLoader",
                        "RegionManager",
                        "GlobalModelListener",
                        "TestDocGetterTest",
                        "GlobalModelIOTest",
                        "ClassAndInterfaceFinderTest",
                        "GlobalModelCompileSuccessOptionsTest",
                        "Finalizable",
                        "DummyOpenDefDocTest",
                        "GlobalModelJUnitTest",
                        "GlobalModelCompileSuccessTestCase",
                        "DocumentRegionTest",
                        "SingleDisplayModel",
                        "GlobalModelCompileIOTest",
                        "RegionManagerListener",
                        "ILoadDocuments",
                        "GlobalModelOtherTest",
                        "FindReplaceMachineTest",
                        "ClipboardHistoryModelTest",
                        "FinalizationListener",
                        "DJDocument",
                        "GlobalIndentTest",
                        "OrderedDocumentRegion",
                        "GlobalModelCompileErrorsTest",
                        "GlobalModelCompileSuccessTest",
                        "LightWeightParsingListener",
                        "AbstractDJDocumentTest"
                    ],
                    "llm_response_time": 3000,
                    "similarity_computation_time": 122,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.ui.config.ConfigFrame::resetDebugFrame():void need move to edu.rice.cs.drjava.ui.MainFrame",
        "class_name": "edu.rice.cs.drjava.ui.config.ConfigFrame",
        "telemetry": {
            "id": "65d789c9-f848-4af7-a00c-d5bea631158e",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1894,
                "lineStart": 70,
                "lineEnd": 1963,
                "bodyLineStart": 70,
                "language": "java",
                "sourceCode": "/** The frame for setting Configuration options on the fly\n *  @version $Id: ConfigFrame.java 5363 2010-08-14 04:07:34Z mgricken $\n */\npublic class ConfigFrame extends SwingFrame {\n\n  private static final int FRAME_WIDTH = 850;\n  private static final int FRAME_HEIGHT = 550;\n\n  private final MainFrame _mainFrame;\n\n//  private JSplitPane _splitPane;\n  private final JTree _tree;\n  private final DefaultTreeModel _treeModel;\n  private final PanelTreeNode _rootNode;\n\n  private final JButton _okButton;\n  private final JButton _applyButton;\n  private final JButton _cancelButton;\n//  private final JButton _saveSettingsButton;\n  private final JPanel _mainPanel;\n  private final JFileChooser _fileOptionChooser;\n  private final JFileChooser _browserChooser;\n  private final JFileChooser _jarChooser;\n  private final DirectoryChooser _dirChooser;\n  private final ConfigOptionListeners.RequiresInteractionsRestartListener<Boolean> _junitLocationEnabledListener;\n  private final ConfigOptionListeners.RequiresInteractionsRestartListener<File> _junitLocationListener;\n  private final ConfigOptionListeners.RequiresInteractionsRestartListener<String> _concJUnitChecksEnabledListener;\n  private final ConfigOptionListeners.RequiresInteractionsRestartListener<File> _rtConcJUnitLocationListener;\n    \n  private StringOptionComponent javadocCustomParams;\n  \n  protected final String SEPS = \" \\t\\n-,;.(\";\n  \n  private OptionComponent.ChangeListener _changeListener = new OptionComponent.ChangeListener() {\n    public Object value(Object oc) {\n      _applyButton.setEnabled(true);\n      return null;\n    }\n  };\n  \n  /** Sets up the frame and displays it.  This a Swing view class!  With the exception of initialization,\n   *  this code should only be executed in the event-handling thread. */\n  public ConfigFrame(MainFrame frame) {\n    super(\"Preferences\");\n\n    _mainFrame = frame;\n    _junitLocationEnabledListener = new ConfigOptionListeners.\n      RequiresInteractionsRestartListener<Boolean>(this, \"Use External JUnit\");\n    _junitLocationListener = new ConfigOptionListeners.\n      RequiresInteractionsRestartListener<File>(this, \"JUnit Location\");\n    _concJUnitChecksEnabledListener = new ConfigOptionListeners.\n      RequiresInteractionsRestartListener<String>(this, \"Enabled ConcJUnit Checks\");\n    _rtConcJUnitLocationListener = new ConfigOptionListeners.\n      RequiresInteractionsRestartListener<File>(this, \"ConcJUnit Runtime Location\");\n    \n    Action applyAction = new AbstractAction(\"Apply\") {\n      public void actionPerformed(ActionEvent e) {\n        // Always save settings\n        try {\n//          _mainFrame.enableResetInteractions();\n          saveSettings(); \n          _applyButton.setEnabled(false); \n          \n        }\n        catch (IOException ioe) {\n        }\n      }\n    };\n\n    _applyButton = new JButton(applyAction);\n    _applyButton.setEnabled(false);\n    \n    Action okAction = new AbstractAction(\"OK\") {\n      public void actionPerformed(ActionEvent e) {\n        // Always apply and save settings\n        boolean successful = true;\n        try {\n//          _mainFrame.enableResetInteractions();\n          successful = saveSettings();\n        }\n        catch (IOException ioe) {\n          // oh well...\n        }\n        if (successful) _applyButton.setEnabled(false);\n        ConfigFrame.this.setVisible(false);\n      }\n    };\n    _okButton = new JButton(okAction);\n\n\n    Action cancelAction = new AbstractAction(\"Cancel\") {\n      public void actionPerformed(ActionEvent e) {\n        cancel();\n      }\n    };\n    _cancelButton = new JButton(cancelAction);\n\n    File workDir = _getWorkDir();\n    /* Following line was inserted becuase the statement below it would occasionally cause swing to throw a\n    NullPointerException. workDir == null is supposed to be impossible. */\n    if (workDir == null || workDir == FileOps.NULL_FILE) workDir = new File(System.getProperty(\"user.dir\"));\n    _fileOptionChooser = new JFileChooser(workDir);\n    _jarChooser = new JFileChooser(workDir);\n    _browserChooser = new JFileChooser(workDir);\n    _dirChooser = new DirectoryChooser(this);\n  \n    /* Create tree and initialize tree. */\n    _rootNode = new PanelTreeNode(\"Preferences\");\n    _treeModel = new DefaultTreeModel(_rootNode);\n    _tree = new JTree(_treeModel);\n    \n    _initTree();\n    \n    /* Create Panels. */\n    _createPanels();\n\n    _mainPanel= new JPanel();\n    _mainPanel.setLayout(new BorderLayout());\n    _tree.addTreeSelectionListener(new PanelTreeSelectionListener());\n\n    Container cp = getContentPane();\n    cp.setLayout(new BorderLayout());\n\n    // Select the first panel by default\n    if (_rootNode.getChildCount() != 0) {\n      PanelTreeNode firstChild = (PanelTreeNode)_rootNode.getChildAt(0);\n      TreeNode[] firstChildPath = firstChild.getPath();\n      TreePath path = new TreePath(firstChildPath);\n      _tree.expandPath(path);\n      _tree.setSelectionPath(path);\n    }\n\n    JScrollPane treeScroll = new JScrollPane(_tree);\n    JPanel treePanel = new JPanel();\n    treePanel.setLayout(new BorderLayout());\n    treeScroll.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), \"Categories\"));\n    treePanel.add(treeScroll, BorderLayout.CENTER);\n    cp.add(treePanel, BorderLayout.WEST);\n    cp.add(_mainPanel, BorderLayout.CENTER);\n\n    // Add buttons\n    JPanel bottom = new JPanel();\n    bottom.setBorder(new EmptyBorder(5,5,5,5));\n    bottom.setLayout(new BoxLayout(bottom, BoxLayout.X_AXIS));\n    bottom.add(Box.createHorizontalGlue());\n    //bottom.add(_saveSettingsButton);\n    //bottom.add(Box.createHorizontalGlue());\n    bottom.add(_applyButton);\n    bottom.add(_okButton);\n    bottom.add(_cancelButton);\n    bottom.add(Box.createHorizontalGlue());\n\n    cp.add(bottom, BorderLayout.SOUTH);\n\n    // Set all dimensions ----\n    Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();\n    if (dim.width>FRAME_WIDTH) { dim.width = FRAME_WIDTH; }\n    else { dim.width -= 80; }\n    if (dim.height>FRAME_HEIGHT) { dim.height = FRAME_HEIGHT; }\n    else { dim.height -= 80; }\n    setSize(dim);\n\n    _mainFrame.setPopupLoc(this);\n\n    // Make sure each row is expanded\n    int row = 0;\n    while(row<_tree.getRowCount()) {\n      _tree.expandRow(row);\n      ++row;\n    }\n    \n    initDone(); // call mandated by SwingFrame contract\n  }\n  \n  /** Performs deferred initialization.  Only runs in the event thread.  Some of this code occasionally generated swing\n   *  exceptions  when run in themain thread as part of MainFrame construction prior to making MainFrame visible. */\n  public void setUp() {\n    assert EventQueue.isDispatchThread();\n    /* Set up _fileOptionChooser, _browserChooser, and _dirChooser.  The line _dirChooser.setSelectedFile(...) caused\n     * java.lang.ArrayIndexOutOfBoundsException within swing code in a JUnit test setUp() routine that constructed a\n     * a MainFrame.\n     */\n\n    _fileOptionChooser.setDialogTitle(\"Select\");\n    _fileOptionChooser.setApproveButtonText(\"Select\");\n    _fileOptionChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n    _fileOptionChooser.setFileFilter(ClassPathFilter.ONLY);\n    \n    _jarChooser.setDialogTitle(\"Select\");\n    _jarChooser.setApproveButtonText(\"Select\");\n    _jarChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n    _jarChooser.setFileFilter(ClassPathFilter.ONLY);\n    \n    _browserChooser.setDialogTitle(\"Select Web Browser\");\n    _browserChooser.setApproveButtonText(\"Select\");\n    _browserChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);\n    \n    _dirChooser.setSelectedFile(_getWorkDir());\n    _dirChooser.setDialogTitle(\"Select\");\n    _dirChooser.setApproveButtonText(\"Select\");\n    _dirChooser.setMultiSelectionEnabled(false);\n  }\n  \n  private void enableChangeListeners() {\n    DrJava.getConfig().addOptionListener(OptionConstants.JUNIT_LOCATION_ENABLED,\n                                         _junitLocationEnabledListener);\n    DrJava.getConfig().addOptionListener(OptionConstants.JUNIT_LOCATION,\n                                         _junitLocationListener);\n    DrJava.getConfig().addOptionListener(OptionConstants.CONCJUNIT_CHECKS_ENABLED,\n                                         _concJUnitChecksEnabledListener);\n    DrJava.getConfig().addOptionListener(OptionConstants.RT_CONCJUNIT_LOCATION,\n                                         _rtConcJUnitLocationListener);\n  }\n\n  private void disableChangeListeners() {\n    DrJava.getConfig().removeOptionListener(OptionConstants.JUNIT_LOCATION_ENABLED,\n                                            _junitLocationEnabledListener);\n    DrJava.getConfig().removeOptionListener(OptionConstants.JUNIT_LOCATION,\n                                            _junitLocationListener);\n    DrJava.getConfig().removeOptionListener(OptionConstants.CONCJUNIT_CHECKS_ENABLED,\n                                            _concJUnitChecksEnabledListener);\n    DrJava.getConfig().removeOptionListener(OptionConstants.RT_CONCJUNIT_LOCATION,\n                                            _rtConcJUnitLocationListener);\n  }\n\n  /** Returns the current master working directory, or the user's current directory if none is set. 20040213 Changed default \n   *  value to user's current directory.\n   */\n  private File _getWorkDir() {\n    File workDir = _mainFrame.getModel().getMasterWorkingDirectory();  // cannot be null\n    assert workDir != null;\n    if (workDir.isDirectory()) return workDir;\n    \n    if (workDir.getParent() != null) workDir = workDir.getParentFile();\n    return workDir;\n  }\n\n  /** Call the update method to propagate down the tree, parsing input values into their config options. */\n  public boolean apply() {\n    // returns false if the update did not succeed\n    return _rootNode.update();\n  }\n\n  /** Resets the field of each option in the Preferences window to its actual stored value. */\n  public void resetToCurrent() {\n    _rootNode.resetToCurrent();\n    // must reset the \"current keystroke map\" when resetting\n    VectorKeyStrokeOptionComponent.resetCurrentKeyStrokeMap();\n  }\n\n  /** Resets the frame and hides it. */\n  public void cancel() {\n    resetToCurrent();\n    _applyButton.setEnabled(false);\n    ConfigFrame.this.setVisible(false);\n  }\n\n  /** Thunk that calls _cancel. */\n  protected final Runnable1<WindowEvent> CANCEL = new Runnable1<WindowEvent>() {\n    public void run(WindowEvent e) { cancel(); }\n  };\n  \n  /** Validates before changing visibility.  Only runs in the event thread.\n    * @param vis true if frame should be shown, false if it should be hidden.\n    */\n  public void setVisible(boolean vis) {\n    assert EventQueue.isDispatchThread();\n    validate();\n    // made modal for now\n    if (vis) {\n//      _mainFrame.hourglassOn();\n//      _mainFrame.installModalWindowAdapter(this, NO_OP, CANCEL);\n      enableChangeListeners();\n      toFront();\n    }\n    else {\n//      _mainFrame.removeModalWindowAdapter(this);\n//      _mainFrame.hourglassOff();\n      disableChangeListeners();\n      _mainFrame.toFront();\n    }\n    super.setVisible(vis);\n  }\n\n  /** Write the configured option values to disk. */\n  public boolean saveSettings() throws IOException {\n    boolean successful = apply();\n    if (successful) {\n      try { DrJava.getConfig().saveConfiguration(); }\n      catch (IOException ioe) {\n        JOptionPane.showMessageDialog(this,\n                                      \"Could not save changes to your \\\".drjava\\\" file in your home directory. \\n\\n\" + ioe,\n                                      \"Could Not Save Changes\",\n                                      JOptionPane.ERROR_MESSAGE);\n        //return false;\n        throw ioe;\n      }\n    }\n    return successful;\n  }\n\n  /** Sets the given ConfigPanel as the visible panel. */\n  private void _displayPanel(ConfigPanel cf) {\n\n    _mainPanel.removeAll();\n    _mainPanel.add(cf, BorderLayout.CENTER);\n    _mainPanel.revalidate();\n    _mainPanel.repaint();\n  }\n\n  /** Creates the JTree to display preferences categories. */\n  private void _initTree() {\n    _tree.setEditable(false);\n    _tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n    _tree.setShowsRootHandles(true);\n    _tree.setRootVisible(false);\n\n    DefaultTreeCellRenderer dtcr = new DefaultTreeCellRenderer();\n    dtcr.setLeafIcon(null);\n    dtcr.setOpenIcon(null);\n    dtcr.setClosedIcon(null);\n    _tree.setCellRenderer(dtcr);\n  }\n\n  /**Creates an individual panel, adds it to the JTree and the list of panels, and returns the tree node.\n   * @param t the title of this panel\n   * @param parent the parent tree node\n   * @return this tree node\n   */\n  private PanelTreeNode _createPanel(String t, PanelTreeNode parent) {\n    PanelTreeNode ptNode = new PanelTreeNode(t);\n    //parent.add(ptNode);\n    _treeModel.insertNodeInto(ptNode, parent, parent.getChildCount());\n\n    // Make sure tree node is visible\n    TreeNode[] pathArray = ptNode.getPath();\n    TreePath path = new TreePath(pathArray);\n//     System.out.println(\"path has class \" + pathArray.getClass());\n//     System.out.println(\"last path compenent has class \" + path.getLastPathComponent().getClass());\n    _tree.expandPath(path);\n\n    return ptNode;\n  }\n\n  /** Creates an individual panel, adds it to the JTree and the list of panels, and returns the tree node. Adds to the root node.\n   *  @param t the title of this panel\n   *  @return this tree node\n   */\n  private PanelTreeNode _createPanel(String t) { return _createPanel(t, _rootNode); }\n\n  /** Creates all of the panels contained within the frame. */\n  private void _createPanels() {\n\n    PanelTreeNode resourceLocNode = _createPanel(\"Resource Locations\");\n    _setupResourceLocPanel(resourceLocNode.getPanel());\n\n    PanelTreeNode displayNode = _createPanel(\"Display Options\");\n    _setupDisplayPanel(displayNode.getPanel());\n    \n    PanelTreeNode fontNode = _createPanel(\"Fonts\", displayNode);\n    _setupFontPanel(fontNode.getPanel());\n\n    PanelTreeNode colorNode = _createPanel(\"Colors\", displayNode);\n    _setupColorPanel(colorNode.getPanel());\n\n    PanelTreeNode positionsNode = _createPanel(\"Window Positions\", displayNode);\n    _setupPositionsPanel(positionsNode.getPanel());\n\n    PanelTreeNode keystrokesNode = _createPanel(\"Key Bindings\");\n    _setupKeyBindingsPanel(keystrokesNode.getPanel());\n    \n    PanelTreeNode compilerOptionsNode = _createPanel(\"Compiler Options\");\n    _setupCompilerPanel(compilerOptionsNode.getPanel());\n    \n    PanelTreeNode interactionsNode = _createPanel(\"Interactions Pane\");\n    _setupInteractionsPanel(interactionsNode.getPanel());\n    \n    PanelTreeNode debugNode = _createPanel(\"Debugger\");\n    _setupDebugPanel(debugNode.getPanel());\n\n    PanelTreeNode junitNode = _createPanel(\"JUnit\");\n    _setupJUnitPanel(junitNode.getPanel());\n    \n    PanelTreeNode javadocNode = _createPanel(\"Javadoc\");\n    _setupJavadocPanel(javadocNode.getPanel());\n\n    PanelTreeNode notificationsNode = _createPanel(\"Notifications\");\n    _setupNotificationsPanel(notificationsNode.getPanel());\n    \n    PanelTreeNode miscNode = _createPanel(\"Miscellaneous\");\n    _setupMiscPanel(miscNode.getPanel());\n    \n    PanelTreeNode fileTypesNode = _createPanel(\"File Types\", miscNode);\n    _setupFileTypesPanel(fileTypesNode.getPanel());\n    \n    PanelTreeNode jvmsNode = _createPanel(\"JVMs\", miscNode);\n    _setupJVMsPanel(jvmsNode.getPanel());\n    \n    // Expand the display options node\n    //DrJava.consoleOut().println(\"expanding path...\");\n    //_tree.expandPath(new TreePath(jvmsNode.getPath()));\n  }\n\n  public <X,C extends JComponent> void addOptionComponent(ConfigPanel panel, OptionComponent<X,C> oc) {\n    panel.addComponent(oc);\n    oc.addChangeListener(_changeListener);\n  }\n  \n  /** Add all of the components for the Resource Locations panel of the preferences window. */\n  private void _setupResourceLocPanel(ConfigPanel panel) {\n    FileOptionComponent browserLoc =\n      new FileOptionComponent(OptionConstants.BROWSER_FILE, \"Web Browser\", this,\n                              \"<html>Location of a web browser to use for Javadoc and Help links.<br>\" +\n                              \"If left blank, only the Web Browser Command will be used.<br>\" +\n                              \"This is not necessary if a default browser is available on your system.\",\n                              _browserChooser);\n    addOptionComponent(panel, browserLoc);    \n\n    StringOptionComponent browserCommand =\n      new StringOptionComponent(OptionConstants.BROWSER_STRING, \"Web Browser Command\", this,\n                              \"<html>Command to send to the web browser to view a web location.<br>\" +\n                              \"The string <code>&lt;URL&gt;</code> will be replaced with the URL address.<br>\" +\n                              \"This is not necessary if a default browser is available on your system.\");\n    addOptionComponent(panel, browserCommand);\n\n    FileOptionComponent javacLoc =\n      new FileOptionComponent(OptionConstants.JAVAC_LOCATION, \"Tools.jar Location\", this,\n                              \"Optional location of the JDK's tools.jar, which contains the compiler and debugger.\",\n                              _fileOptionChooser);\n    javacLoc.setFileFilter(ClassPathFilter.ONLY);\n    addOptionComponent(panel, javacLoc);\n\n    BooleanOptionComponent displayAllCompilerVersions =\n      new BooleanOptionComponent(OptionConstants.DISPLAY_ALL_COMPILER_VERSIONS, \"Display All Compiler Versions\", this,\n                              \"Display all compiler versions, even if they have the same major version.\");\n    addOptionComponent(panel, displayAllCompilerVersions );\n   \n    addOptionComponent(panel, new VectorFileOptionComponent(OptionConstants.EXTRA_CLASSPATH,\n                                                            \"Extra Classpath\", this,\n                                                            \"<html>Any directories or jar files to add to the classpath<br>\"+\n                                                            \"of the Compiler and Interactions Pane.</html>\", true));\n    \n    panel.displayComponents();\n    \n  }\n\n  /** Add all of the components for the Display Options panel of the preferences window. */\n  private void _setupDisplayPanel(ConfigPanel panel) {\n\n    final ForcedChoiceOptionComponent lookAndFeelComponent =\n      new ForcedChoiceOptionComponent(OptionConstants.LOOK_AND_FEEL, \"Look and Feel\", this,\n                                      \"Changes the general appearance of DrJava.\");\n    addOptionComponent(panel, lookAndFeelComponent);\n\n    final ForcedChoiceOptionComponent plasticComponent =\n      new ForcedChoiceOptionComponent(OptionConstants.PLASTIC_THEMES, \"Plastic Theme\", this,\n                                      \"Pick the theme to be used by the Plastic family of Look and Feels\");\n    lookAndFeelComponent.addChangeListener(new OptionComponent.ChangeListener() {\n      public Object value(Object oc) {\n        plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().startsWith(\"com.jgoodies.looks.plastic.\"));\n        return null;\n      }\n    });\n    plasticComponent.getComponent().setEnabled(lookAndFeelComponent.getCurrentComboBoxValue().startsWith(\"com.jgoodies.looks.plastic.\"));\n    addOptionComponent(panel, plasticComponent);\n\n    //ToolbarOptionComponent is a degenerate option component\n    addOptionComponent(panel, new ToolbarOptionComponent(\"Toolbar Buttons\", this,\n                                                  \"How to display the toolbar buttons.\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LINEENUM_ENABLED,\n                                                  \"Show All Line Numbers\", this,\n                                                  \"Whether to show line numbers on the left side of the Definitions Pane.\"));\n   \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.SHOW_SOURCE_WHEN_SWITCHING, \n                                                  \"Show sample of source code when fast switching\", \n                                                  this,\n                                                  \"Whether to show a sample of the source code under the document's filename when fast switching documents.\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.SHOW_CODE_PREVIEW_POPUPS, \n                                                  \"Show Code Preview Popups\", this,\n                                                  \"<html>Whether to show a popup window with a code preview when the mouse is hovering<br>\"+\n                                                  \"over an item in the Breakpoints, Bookmarks and Find All panes.</html>\"));\n        \n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.CLIPBOARD_HISTORY_SIZE,\n                                                  \"Size of Clipboard History\", this,\n                                                         \"Determines how many entries are kept in the clipboard history.\"));\n    \n    BooleanOptionComponent checkbox = \n      new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_FULLY_QUALIFIED,\n                                 \"<html><p align=\\\"right\\\">\" + \n                                 StringOps.\n                                   splitStringAtWordBoundaries(\"Display Fully-Qualified Class Names in \\\"Go to File\\\" Dialog\",\n                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,\n                                 \"<html>Whether to also display fully-qualified class names in the \\\"Go to File\\\" dialog.<br>\"+\n                                 \"Enabling this option on network drives might cause the dialog to display after a slight delay.</html>\");\n    addOptionComponent(panel, checkbox);\n    \n    checkbox =\n      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_SCAN_CLASS_FILES,\n                                 \"<html><p align=\\\"right\\\">\" + \n                                 StringOps.\n                                   splitStringAtWordBoundaries(\"Scan Class Files After Each Compile for Auto-Completion and Auto-Import\",\n                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,\n                                 \"<html>Whether to scan the class files after a compile to generate class names<br>\"+\n                                 \"used for auto-completion and auto-import.<br>\"+\n                                 \"Enabling this option will slow compiles down.</html>\");\n    addOptionComponent(panel, checkbox);\n    \n    checkbox =\n      new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_JAVAAPI,\n                                 \"<html><p align=\\\"right\\\">\" + \n                                 StringOps.\n                                   splitStringAtWordBoundaries(\"Consider Java API Classes for Auto-Completion\",\n                                                               40, \"<br>\", SEPS)+\"</p></html>\", this,\n                                 \"Whether to use the names of the Java API classes for auto-completion as well.\");\n    addOptionComponent(panel, checkbox);\n\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    \n    final BooleanOptionComponent drmComponent =\n      new BooleanOptionComponent(OptionConstants.DISPLAY_RIGHT_MARGIN, \"Display right margin\", this,\n                                 \"Whether to display a line at the right margin.\");\n    addOptionComponent(panel, drmComponent);\n    final IntegerOptionComponent rmcComponent =\n      new IntegerOptionComponent(OptionConstants.RIGHT_MARGIN_COLUMNS,\n                                 \"Right Margin Position\", this,\n                                 \"The number of columns after which the right margin is displayed.\");\n    addOptionComponent(panel, rmcComponent);\n\n    OptionComponent.ChangeListener drmListener = new OptionComponent.ChangeListener() {\n      public Object value(Object oc) {\n        rmcComponent.getComponent().setEnabled(drmComponent.getComponent().isSelected());\n        return null;\n      }\n    };\n    drmComponent.addChangeListener(drmListener);\n    drmListener.value(drmComponent);\n    \n    panel.displayComponents();\n  }\n\n  /** Add all of the components for the Font panel of the preferences window. */\n  private void _setupFontPanel(ConfigPanel panel) {\n    addOptionComponent(panel, new FontOptionComponent(OptionConstants.FONT_MAIN, \"Main Font\", this,\n                                               \"The font used for most text in DrJava.\"));\n    addOptionComponent(panel, new FontOptionComponent(OptionConstants.FONT_LINE_NUMBERS, \"Line Numbers Font\", this,\n                                               \"<html>The font for displaying line numbers on the left side of<br>\" +\n                                               \"the Definitions Pane if Show All Line Numbers is enabled.<br>\" +\n                                               \"Cannot be displayed larger than the Main Font.</html>\"));\n    addOptionComponent(panel, new FontOptionComponent(OptionConstants.FONT_DOCLIST, \"Document List Font\", this,\n                                               \"The font used in the list of open documents.\"));\n    addOptionComponent(panel, new FontOptionComponent(OptionConstants.FONT_TOOLBAR, \"Toolbar Font\", this,\n                                               \"The font used in the toolbar buttons.\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.TEXT_ANTIALIAS, \"Use anti-aliased text\", this,\n                                                    \"Whether to graphically smooth the text.\"));\n    panel.displayComponents();\n  }\n\n  /** Adds all of the components for the Color panel of the preferences window.\n   */\n  private void _setupColorPanel(ConfigPanel panel) {\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_NORMAL_COLOR, \"Normal Color\", this,\n                                                \"The default color for text in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_KEYWORD_COLOR, \"Keyword Color\", this,\n                                                \"The color for Java keywords in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_TYPE_COLOR, \"Type Color\", this,\n                                                \"The color for classes and types in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_COMMENT_COLOR, \"Comment Color\", this,\n                                                \"The color for comments in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_DOUBLE_QUOTED_COLOR, \"Double-quoted Color\", this,\n                                                \"The color for quoted strings (eg. \\\"...\\\") in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_SINGLE_QUOTED_COLOR, \"Single-quoted Color\", this,\n                                                \"The color for quoted characters (eg. 'a') in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_NUMBER_COLOR, \"Number Color\", this,\n                                                \"The color for numbers in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_BACKGROUND_COLOR, \"Background Color\", this,\n                                                \"The background color of the Definitions Pane.\", true));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_COLOR, \"Line Number Color\", this,\n                                                \"The color for line numbers in the Definitions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_LINE_NUMBER_BACKGROUND_COLOR, \"Line Number Background Color\", this,\n                                                \"The background color for line numbers in the Definitions Pane.\", true));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEFINITIONS_MATCH_COLOR, \"Brace-matching Color\", this,\n                                                \"The color for matching brace highlights in the Definitions Pane.\", true));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.COMPILER_ERROR_COLOR, \"Compiler Error Color\", this,\n                                                \"The color for compiler error highlights in the Definitions Pane.\", true));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.BOOKMARK_COLOR, \"Bookmark Color\", this,\n                                                \"The color for bookmarks in the Definitions Pane.\", true));\n    for (int i = 0; i < OptionConstants.FIND_RESULTS_COLORS.length; ++i) {\n      addOptionComponent(panel, new ColorOptionComponent(OptionConstants.FIND_RESULTS_COLORS[i], \"Find Results Color \"+(i+1), this,\n                                                         \"A color for highlighting find results in the Definitions Pane.\", true));\n    }\n    addOptionComponent(panel, \n                       new ColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_COLOR, \"Debugger Breakpoint Color\", this,\n                                                \"The color for breakpoints in the Definitions Pane.\", true));\n    addOptionComponent(panel, \n                       new ColorOptionComponent(OptionConstants.DEBUG_BREAKPOINT_DISABLED_COLOR, \"Disabled Debugger Breakpoint Color\", this,\n                                                \"The color for disabled breakpoints in the Definitions Pane.\", true));\n    addOptionComponent(panel, \n                       new ColorOptionComponent(OptionConstants.DEBUG_THREAD_COLOR, \"Debugger Location Color\", this,\n                                                \"The color for the location of the current suspended thread in the Definitions Pane.\", true));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_OUT_COLOR, \"System.out Color\", this,\n                                                       \"The color for System.out in the Interactions and Console Panes.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_ERR_COLOR, \"System.err Color\", this,\n                                                       \"The color for System.err in the Interactions and Console Panes.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.SYSTEM_IN_COLOR, \"System.in Color\", this,\n                                                       \"The color for System.in in the Interactions Pane.\"));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.INTERACTIONS_ERROR_COLOR, \"Interactions Error Color\", this,\n                                                       \"The color for interactions errors in the Interactions Pane.\", false, true));\n    addOptionComponent(panel, new ColorOptionComponent(OptionConstants.DEBUG_MESSAGE_COLOR, \"Debug Message Color\", this,\n                                                       \"The color for debugger messages in the Interactions Pane.\", false, true));\n    addOptionComponent(panel, \n                       new ColorOptionComponent(OptionConstants.DRJAVA_ERRORS_BUTTON_COLOR, \"DrJava Errors Button Background Color\", this,\n                                                \"The background color of the \\\"Errors\\\" button used to show internal DrJava errors.\", true));\n    addOptionComponent(panel, \n                       new ColorOptionComponent(OptionConstants.RIGHT_MARGIN_COLOR, \"Right Margin Color\", this,\n                                                \"The color of the right margin line, if displayed.\", true));\n    \n    panel.displayComponents();\n  }\n\n  /** Add all of the components for the Positions panel of the preferences window. */\n  private void _setupPositionsPanel(ConfigPanel panel) {\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.WINDOW_STORE_POSITION,\n                                                         \"Save Main Window Position\", this,\n                                                         \"Whether to save and restore the size and position of the main window.\", false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DIALOG_CLIPBOARD_HISTORY_STORE_POSITION,\n                                                  \"Save \\\"Clipboard History\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the size and position of the \\\"Clipboard History\\\" dialog.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) { _mainFrame.resetClipboardHistoryDialogPosition(); }\n    }, \"Reset \\\"Clipboard History\\\" Dialog Position and Size\", this, \"This resets the dialog position and size to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DIALOG_GOTOFILE_STORE_POSITION,\n                                                  \"Save \\\"Go to File\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the size and position of the \\\"Go to File\\\" dialog.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) { _mainFrame.resetGotoFileDialogPosition(); }\n    }, \"Reset \\\"Go to File\\\" Dialog Position and Size\", this, \"This resets the dialog position and size to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DIALOG_COMPLETE_WORD_STORE_POSITION,\n                                                  \"Save \\\"Auto-Complete Word\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the size and position of the \\\"Auto-Complete Word\\\" dialog.\", \n                                                  false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) { _mainFrame.resetCompleteWordDialogPosition(); }\n    }, \n                                                  \"Reset \\\"Auto-Complete Word\\\" Dialog Position and Size\", this, \n                                                  \"This resets the dialog position and size to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DIALOG_JAROPTIONS_STORE_POSITION,\n                                                  \"Save \\\"Create Jar File from Project\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the position of the \\\"Create Jar File from Project\\\" dialog.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        _mainFrame.resetJarOptionsDialogPosition();\n      }\n    }, \"Reset \\\"Create Jar File from Project\\\" Dialog Position\", this, \"This resets the dialog position to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_OPENJAVADOC_STORE_POSITION,\n                                                  \"Save \\\"Open Javadoc\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the size and position of the \\\"Open Javadoc\\\" dialog.\", false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) { _mainFrame.resetOpenJavadocDialogPosition(); }\n    }, \"Reset \\\"Open Javadoc\\\" Dialog Position and Size\", this, \"This resets the dialog position and size to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_AUTOIMPORT_STORE_POSITION,\n                                                  \"Save \\\"Auto Import\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the size and position of the \\\"Auto Import\\\" dialog.\", false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) { _mainFrame.resetAutoImportDialogPosition(); }\n    }, \"Reset \\\"Auto Import\\\" Dialog Position and Size\", this, \"This resets the dialog position and size to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DIALOG_EXTERNALPROCESS_STORE_POSITION,\n                                                  \"Save \\\"Execute External Process\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the position of the \\\"Execute External Process\\\" dialog.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        _mainFrame.resetExecuteExternalProcessPosition();\n      }\n    }, \"Reset \\\"Execute External Process\\\" Dialog Position\", this, \"This resets the dialog position to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_EDITEXTERNALPROCESS_STORE_POSITION,\n                                                  \"Save \\\"Edit External Process\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the position of the \\\"Edit External Process\\\" dialog.\", false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        _mainFrame.resetEditExternalProcessPosition();\n      }\n    }, \"Reset \\\"Execute External Process\\\" Dialog Position\", this, \"This resets the dialog position to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_OPENJAVADOC_STORE_POSITION,\n                                                  \"Save \\\"Open Javadoc\\\" Dialog Position\", this,\n                                                  \"Whether to save and restore the position of the \\\"Open Javadoc\\\" dialog.\", false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        _mainFrame.resetOpenJavadocDialogPosition();\n      }\n    }, \"Reset \\\"Open Javadoc\\\" Dialog Position\", this, \"This resets the dialog position to its default values.\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_TABBEDPANES_STORE_POSITION,\n                                                  \"Save \\\"Tabbed Panes\\\" Window Position\", this,\n                                                  \"Whether to save and restore the position of the \\\"Tabbed Panes\\\" window.\", false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        _mainFrame.resetTabbedPanesFrame();\n      }\n    }, \"Reset \\\"Tabbed Panes\\\" Window Position\", this, \"This resets the window position to its default values.\"));\n\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DETACH_TABBEDPANES,\n                                                  \"Detach Tabbed Panes\", \n                                                  this,\n                                                  \"Whether to detach the tabbed panes and display them in a separate window.\", \n                                                  false)\n                         .setEntireColumn(true));\n\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DIALOG_DEBUGFRAME_STORE_POSITION,\n                                                  \"Save \\\"Debugger\\\" Window Position\", \n                                                  this,\n                                                  \"Whether to save and restore the position of the \\\"Debugger\\\" window.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, new ButtonComponent(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        _mainFrame._configFrame.resetDebugFrame(_mainFrame);\n      }\n    }, \"Reset \\\"Debugger\\\" Window Position\", this, \"This resets the window position to its default values.\"));\n\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DETACH_DEBUGGER,\n                                                  \"Detach Debugger\", this,\n                                                  \"Whether to detach the debugger and display it in a separate window.\", false)\n                         .setEntireColumn(true));\n\n    panel.displayComponents();\n  }\n  \n  /** Adds all of the components for the Key Bindings panel of the preferences window.\n   */\n  private void _setupKeyBindingsPanel(ConfigPanel panel) {\n    // using a treemap because it automatically sorts element upon insertion\n    TreeMap<String,VectorKeyStrokeOptionComponent> _comps = new TreeMap<String,VectorKeyStrokeOptionComponent>();\n\n    VectorKeyStrokeOptionComponent vksoc;\n\n    for (KeyStrokeData ksd: KeyBindingManager.ONLY.getKeyStrokeData()) {\n      if (ksd.getOption() != null) {\n        // Get the tooltip, or default to its name, if none\n        Action a = ksd.getAction();\n        // pick the short description as name, if available\n        String name = (String) a.getValue(Action.SHORT_DESCRIPTION);\n        // if not available, pick the KeyStrokeData name instead\n        if (name == null || name.trim().equals(\"\")) name = ksd.getName();\n        // pick the long description as name, if available\n        String desc = (String) a.getValue(Action.LONG_DESCRIPTION);\n        // if not available, pick the name from above instead\n        if (desc == null || desc.trim().equals(\"\")) desc = name;\n        // if the map already contains this name, use the description instead\n        if (_comps.containsKey(name)) {\n          name = desc;\n          // if the map already contains the description as well (bad developers!), then use the option's name\n          if (_comps.containsKey(name)) {\n            name = ksd.getOption().getName();\n          }\n        }\n        vksoc = new VectorKeyStrokeOptionComponent(ksd.getOption(), name, this, desc);\n        if (vksoc != null) _comps.put(name, vksoc);\n      }\n    }\n\n    Iterator<VectorKeyStrokeOptionComponent> iter = _comps.values().iterator();\n    while (iter.hasNext()) {\n      VectorKeyStrokeOptionComponent x = iter.next();\n      addOptionComponent(panel, x);\n    }\n    panel.displayComponents();\n  }\n\n  /** Add all of the components for the Debugger panel of the preferences window. */\n  private void _setupDebugPanel(ConfigPanel panel) {\n    if (!_mainFrame.getModel().getDebugger().isAvailable()) {\n      // Explain how to use debugger\n      String howto =\n        \"\\nThe debugger is not currently available. To use the debugger,\\n\" +\n        \"you can enter the location of the tools.jar file in the\\n\" +\n        \"\\\"Resource Locations\\\" pane, in case DrJava does not automatically find it.\\n\" +\n        \"See the user documentation for more details.\\n\";\n      LabelComponent label = new LabelComponent(howto, this);\n      label.setEntireColumn(true);\n      addOptionComponent(panel, label);\n    }\n\n    VectorFileOptionComponent sourcePath =\n      new VectorFileOptionComponent(OptionConstants.DEBUG_SOURCEPATH, \"Sourcepath\", this,\n                                    \"<html>Any directories in which to search for source<br>\" +\n                                    \"files when stepping in the Debugger.</html>\", true);\n    // Source path can only include directories\n    sourcePath.getFileChooser().setFileFilter(new DirectoryFilter(\"Source Directories\"));\n    addOptionComponent(panel, sourcePath);\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DEBUG_STEP_JAVA,\n                                                  \"Step Into Java Classes\", \n                                                  this,\n                                                  \"<html>Whether the Debugger should step into Java library classes,<br>\" +\n                                                  \"including java.*, javax.*, sun.*, com.sun.*, com.apple.eawt.*, and com.apple.eio.*</html>\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_STEP_INTERPRETER,\n                                                  \"Step Into Interpreter Classes\", this,\n                                                  \"<html>Whether the Debugger should step into the classes<br>\" +\n                                                  \"used by the Interactions Pane (DynamicJava).</html>\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_STEP_DRJAVA,\n                                                  \"Step Into DrJava Classes\", this,\n                                                  \"Whether the Debugger should step into DrJava's own class files.\"));\n    addOptionComponent(panel, \n                       new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +\n                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +\n                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", \n                                          this, true));\n    addOptionComponent(panel, \n                       new VectorStringOptionComponent(OptionConstants.DEBUG_STEP_EXCLUDE,\n                                                       \"Classes/Packages To Exclude\", \n                                                       this,\n                                                       \"<html>Any classes that the debuggger should not step into.<br>\" +\n                                                       \"Should be a list of fully-qualified class names.<br>\" +\n                                                       \"To exclude a package, add <code>packagename.*</code> to the list.</html>\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_AUTO_IMPORT,\n                                                  \"Auto-Import after Breakpoint/Step\", this,\n                                                  \"<html>Whether the Debugger should automatically import packages<br>\"+\n                                                  \"and classes again after a breakpoint or step.</html>\"));\n    \n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.AUTO_STEP_RATE,\n                                                         \"Auto-Step Rate in ms\",\n                                                         this,\n                                                         \"<html>A defined rate in ms at which the debugger automatically steps into/over each line of code.<br>\" +\n                                                         \"Value entered must be an integer value. </html>\"));                                                            \n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DEBUG_EXPRESSIONS_AND_METHODS_IN_WATCHES,\n                                                         \"Allow Expressions and Method Calls in Watches\", this,\n                                                         \"<html>Whether the Debugger should allow expressions and method<br>\"+\n                                                         \"calls in watches. These may have side effects and can cause<br>\"+\n                                                         \"delays during the debug process.</html>\"));\n    panel.displayComponents();\n  }\n\n  /** Add all of the components for the Javadoc panel of the preferences window. */\n  private void _setupJavadocPanel(ConfigPanel panel) {\n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_API_REF_VERSION,\n                                                       \"Java Version for \\\"Open Java API Javadoc\\\"\", \n                                                       this,\n                                                       \"Version of the Java API documentation to be used.\"));\n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_ACCESS_LEVEL,\n                                                       \"Access Level\", \n                                                       this,\n                                                       \"<html>Fields and methods with access modifiers at this level<br>\" +\n                                                       \"or higher will be included in the generated Javadoc.</html>\"));\n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.JAVADOC_LINK_VERSION,\n                                                       \"Java Version for Javadoc Links\", \n                                                       this,\n                                                       \"Version of Java for generating links to online Javadoc documentation.\"));\n    addOptionComponent(panel, \n                       new StringOptionComponent(OptionConstants.JAVADOC_1_5_LINK,\n                                                 \"Javadoc 1.5 URL\", this,\n                                                 \"URL for the Java 1.5 API, for generating links to library classes.\"));\n    addOptionComponent(panel, \n                       new StringOptionComponent(OptionConstants.JAVADOC_1_6_LINK,\n                                                 \"Javadoc 1.6 URL\", this,\n                                                 \"URL for the Java 1.6 API, for generating links to library classes.\"));\n    addOptionComponent(panel, \n                       new StringOptionComponent(OptionConstants.JUNIT_LINK,\n                                                 \"JUnit URL\", this,\n                                                 \"URL for the JUnit API, for \\\"Open Java API Javadoc\\\".\"));\n\n    VectorStringOptionComponent additionalJavadoc =\n      new VectorStringOptionComponent(OptionConstants.JAVADOC_ADDITIONAL_LINKS, \"Additional Javadoc URLs\", this,\n                                      \"<html>Additional URLs with Javadoc, for \\\"Open Java API Javadoc\\\"<br>\" +\n                                      \"and auto-completion.</html>\") {\n      protected boolean verify(String s) {\n        // verify that the allclasses-frame.html file exists at that URL. do not actually parse it now\n        boolean result = true;\n        try {\n          java.net.URL url = new java.net.URL(s+\"/allclasses-frame.html\");\n          java.io.InputStream urls = url.openStream();\n          java.io.InputStreamReader is = null;\n          java.io.BufferedReader br = null;\n          try {\n            is = new java.io.InputStreamReader(urls);\n            br = new java.io.BufferedReader(is);\n            String line = br.readLine();\n            if (line == null) { result = false; }\n          }\n          finally {\n            if (br != null) { br.close(); }\n            if (is != null) { is.close(); }\n            if (urls != null) { urls.close(); }\n          }\n        }\n        catch(java.io.IOException ioe) { result = false; }\n        if (!result) {\n          JOptionPane.showMessageDialog(ConfigFrame.this,\n                                        \"Could not find the Javadoc at the URL\\n\"+\n                                        s,\n                                        \"Error Adding Javadoc\",\n                                        JOptionPane.ERROR_MESSAGE); \n        }\n        return result;\n      }\n    };\n    addOptionComponent(panel, additionalJavadoc);\n    \n    addOptionComponent(panel, \n                       new DirectoryOptionComponent(OptionConstants.JAVADOC_DESTINATION,\n                                                    \"Default Destination Directory\", this,\n                                                    \"Optional default directory for saving Javadoc documentation.\",\n                                                    _dirChooser));\n    \n    addOptionComponent(panel, \n                       javadocCustomParams = new StringOptionComponent(OptionConstants.JAVADOC_CUSTOM_PARAMS,\n                                                 \"Custom Javadoc Parameters\", this,\n                                                 \"Any extra flags or parameters to pass to Javadoc.\"));\n    \n    // Note: JAVADOC_FROM_ROOTS is intended to set the -subpackages flag, but I don't think that's something\n    // we should support -- in general, we only support performing operations on the files that are open.\n    // (dlsmith r4189)\n//    addOptionComponent(panel, \n//                       new BooleanOptionComponent(OptionConstants.JAVADOC_FROM_ROOTS,\n//                                                  \"Generate Javadoc From Source Roots\", this,\n//                                                  \"<html>Whether \\\"Javadoc All\\\" should generate Javadoc for all packages<br>\" +\n//                                                  \"in an open document's source tree, rather than just the document's<br>\" +\n//                                                  \"own package and sub-packages.</html>\"));\n    \n    panel.displayComponents();\n  }\n\n  /** Adds all of the components for the Prompts panel of the preferences window. */\n  private void _setupNotificationsPanel(ConfigPanel panel) {\n    // Quit\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.QUIT_PROMPT, \"Prompt Before Quit\", this,\n                                                         \"Whether DrJava should prompt the user before quitting.\", false)\n                         .setEntireColumn(true));\n\n    // Interactions\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT,\n                                                         \"Prompt Before Resetting Interactions Pane\", this,\n                                                         \"<html>Whether DrJava should prompt the user before<br>\" +\n                                                         \"manually resetting the interactions pane.</html>\", false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,\n                                                  \"Prompt if Interactions Pane Exits Unexpectedly\", \n                                                  this,\n                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +\n                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\",\n                                                  false)\n                         .setEntireColumn(true));\n\n    // Javadoc\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,\n                                                         \"Prompt for Javadoc Destination\", \n                                                         this,\n                                                         \"<html>Whether Javadoc should always prompt the user<br>\" +\n                                                         \"to select a destination directory.</html>\", \n                                                         false)\n                         .setEntireColumn(true));\n\n\n    // Clean\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.PROMPT_BEFORE_CLEAN,\n                                                         \"Prompt before Cleaning Build Directory\", this,\n                                                         \"<html>Whether DrJava should prompt before cleaning the<br>\" +\n                                                         \"build directory of a project</html>\", false)\n                         .setEntireColumn(true));\n\n    // Prompt to change the language level extensions (.dj0/.dj1->.dj, .dj2->.java)\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.PROMPT_RENAME_LL_FILES, \"Prompt to Rename Old Language Level Files When Saving\", this,\n                                                         \"<html>Whether DrJava should prompt the user to rename old language level files.<br>\"+\n                                                         \"DrJava suggests to rename .dj0 and .dj1 files to .dj, and .dj2 files to .java.</html>\", false)\n                         .setEntireColumn(true));\n\n    \n    // Save before X\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE,\n                                                         \"Automatically Save Before Compiling\", this,\n                                                         \"<html>Whether DrJava should automatically save before<br>\" +\n                                                         \"recompiling or ask the user each time.</html>\", false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JUNIT, \n                                                         \"Automatically Compile Before Testing\", this,\n                                                         \"<html>Whether DrJava should automatically compile before<br>\" +\n                                                         \"testing with JUnit or ask the user each time.</html>\", false)\n                         .setEntireColumn(true)); \n    \n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC,\n                                                         \"Automatically Save Before Generating Javadoc\", this,\n                                                         \"<html>Whether DrJava should automatically save before<br>\" +\n                                                         \"generating Javadoc or ask the user each time.</html>\", false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JAVADOC,\n                                                         \"Automatically Compile Before Generating Javadoc\", this,\n                                                         \"<html>Whether DrJava should automatically compile before<br>\" +\n                                                         \"generating Javadoc or ask the user each time.</html>\", false)\n                         .setEntireColumn(true));\n\n\n    // These are very problematic features, and so are disabled for the forseeable future.\n//    addOptionComponent(panel, \n//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_RUN, \n//                                                  \"Automatically Save and Compile Before Running Main Method\", \n//                                                  this,\n//                                                  \"<html>Whether DrJava automatically saves and compiles before running<br>\" +\n//                                                  \"a document's main method or explicitly asks the user each time.</html>\"));\n//    addOptionComponent(panel, \n//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_DEBUG, \n//                                                  \"Automatically Save and Compile Before Debugging\", \n//                                                  this,\n//                                                  \"<html>Whether DrJava automatically saves and compiles before<br>\" +\n//                                                  \"debugging or explicitly asks the user each time.</html>\"));\n    \n    // Warnings\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,\n                                                  \"Warn on Breakpoint if Out of Sync\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user if the class file<br>\" +\n                                                  \"is out of sync before setting a breakpoint in that file.</html>\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,\n                                                  \"Warn if Debugging Modified File\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +\n                                                  \"debugged has been modified since its last save.</html>\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,\n                                                  \"Warn to Restart to Change Look and Feel\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user that look and feel<br>\" +\n                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_THEME,\n                                                  \"Warn to Restart to Change Theme\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user that theme<br>\" +\n                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_DCP,\n                                                  \"Warn to Restart to Change Default Compiler Preference\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user that default compiler preference<br>\" +\n                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_MISC,\n                                                  \"Warn to Restart to Change Preferences (other)\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user that preference<br>\" +\n                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_INTERACTIONS,\n                                                  \"Warn to Reset to Change Interactions\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user that preference<br>\" +\n                                                  \"changes will not be applied until the Interactions Pane<br>\" +\n                                                  \"is reset.</html>.\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.WARN_PATH_CONTAINS_POUND,\n                                                  \"Warn if File's Path Contains a '#' Symbol\", \n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +\n                                                  \"saved has a path that contains a '#' symbol.<br>\" +\n                                                  \"Users cannot use such files in the Interactions Pane<br>\" +\n                                                  \"because of a bug in Java.</html>\", \n                                                  false)\n                         .setEntireColumn(true));\n\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED, \n                                                  \"Show a notification window when the first DrJava error occurs\", \n                                                  this,\n                                                  \"<html>Whether to show a notification window when the first DrJava error occurs.<br>\" +\n                                                  \"If this is disabled, only the \\\"DrJava Error\\\" button will appear.</html>\", \n                                                  false)\n                         .setEntireColumn(true));\n    addOptionComponent(panel,\n                       new BooleanOptionComponent(OptionConstants.WARN_IF_COMPIZ, \n                                                  \"Warn If Compiz Detected\",\n                                                  this,\n                                                  \"<html>Whether DrJava should warn the user if Compiz is running.<br>\"+\n                                                  \"Compiz and Java Swing are incompatible and can lead to crashes.</html>\",\n                                                  false)\n                         .setEntireColumn(true));\n    \n    \n    addOptionComponent(panel, \n                       new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +\n                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + \n                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", this, true));\n\n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.DELETE_LL_CLASS_FILES,\n                                                       \"Delete language level class files?\", this,\n                                                       \"Whether DrJava should delete class files in directories with language level files.\"));\n\n    addOptionComponent(panel, \n                       new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +\n                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + \n                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", this, true));\n\n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION,\n                                                       \"Check for new versions?\", this,\n                                                       \"Whether DrJava should check for new versions on drjava.org.\"));\n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION_DAYS,\n                                                         \"Days between new version check\", this,\n                                                         \"The number of days between automatic new version checks.\"));\n\n    panel.displayComponents();\n  }\n\n  /** Adds all of the components for the Miscellaneous panel of the preferences window. */\n  private void _setupMiscPanel(ConfigPanel panel) {\n    /* Dialog box options */\n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.INDENT_LEVEL,\n                                                  \"Indent Level\", this,\n                                                  \"The number of spaces to use for each level of indentation.\"));\n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.RECENT_FILES_MAX_SIZE, \"Recent Files List Size\", this,\n                                                  \"<html>The number of files to remember in<br>\" +\n                                                  \"the recently used files list in the File menu.</html>\"));\n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.BROWSER_HISTORY_MAX_SIZE,\n                                                         \"Maximum Size of Browser History\", \n                                                         this,\n                                                         \"Determines how many entries are kept in the browser history.\"));\n    \n    /* Check box options */\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.AUTO_CLOSE_COMMENTS, \"Automatically Close Block Comments\", \n                                                  this,\n                                                  \"<html>Whether to automatically insert a closing comment tag (\\\"*/\\\")<br>\" +\n                                                  \"when the enter key is pressed after typing a new block comment<br>\" +\n                                                  \"tag (\\\"/*\\\" or \\\"/**\\\").</html>\"));\n    String runWithAssertMsg = \n      \"<html>Whether to execute <code>assert</code> statements in classes running in the interactions pane.</html>\";\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.RUN_WITH_ASSERT, \"Enable Assert Statement Execution\", \n                                                  this,\n                                                  runWithAssertMsg));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.BACKUP_FILES, \"Keep Emacs-style Backup Files\", \n                                                  this,\n                                                  \"<html>Whether DrJava should keep a backup copy of each file that<br>\" +\n                                                  \"the user modifies, saved with a '~' at the end of the filename.</html>\"));\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.RESET_CLEAR_CONSOLE, \"Clear Console After Interactions Reset\", \n                                                  this,\n                                                  \"Whether to clear the Console output after resetting the Interactions Pane.\"));\n\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.FIND_REPLACE_FOCUS_IN_DEFPANE, \n                                                  \"Focus on the definitions pane after find/replace\", \n                                                  this,\n                                                  \"<html>Whether to focus on the definitions pane after executing a find/replace operation.<br>\" +\n                                                  \"If this is not selected, the focus will be in the Find/Replace pane.</html>\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DRJAVA_USE_FORCE_QUIT, \n                                                  \"Forcefully Quit DrJava\", this,\n                                                  \"<html>On some platforms, DrJava does not shut down properly when files are open<br>\"+\n                                                  \"(namely tablet PCs). Check this option to force DrJava to close.</html>\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.REMOTE_CONTROL_ENABLED, \n                                                  \"Enable Remote Control\", this,\n                                                  \"<html>Whether DrJava should listen to a socket (see below) so it<br>\"+\n                                                         \"can be remote controlled and told to open files.<br>\"+\n                                                         \"(Changes will not be applied until DrJava is restarted.)</html>\"));\n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.REMOTE_CONTROL_PORT, \n                                                         \"Remote Control Port\", this,\n                                                         \"<html>A running instance of DrJava can be remote controlled and<br>\"+\n                                                         \"told to open files. This specifies the port used for remote control.<br>\" + \n                                                         \"(Changes will not be applied until DrJava is restarted.)</html>\"));\n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.FOLLOW_FILE_DELAY, \n                                                         \"Follow File Delay\", this,\n                                                         \"<html>The delay in milliseconds that has to elapse before DrJava will check<br>\"+\n                                                         \"if a file that is being followed or the output of an external process has changed.</html>\"));\n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.FOLLOW_FILE_LINES, \n                                                         \"Maximum Lines in \\\"Follow File\\\" Window\", this,\n                                                         \"<html>The maximum number of lines to keep in a \\\"Follow File\\\"<br>\"+\n                                                         \"or \\\"External Process\\\" pane. Enter 0 for unlimited.</html>\"));\n    \n// Any lightweight parsing has been disabled until we have something that is beneficial and works better in the background.\n//    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.LIGHTWEIGHT_PARSING_ENABLED, \n//                                                  \"Perform lightweight parsing\", this,\n//                                                  \"<html>Whether to continuously parse the source file for useful information.<br>\" +\n//                                                  \"Enabling this option might introduce delays when editing files.<html>\"));\n//    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.DIALOG_LIGHTWEIGHT_PARSING_DELAY, \"Light-weight parsing delay in milliseconds\", this,\n//                                                  \"The amount of time DrJava will wait after the last keypress before beginning to parse.\"));\n    \n    panel.displayComponents();\n  }  \n\n  /** Adds all of the components for the JVMs panel of the preferences window. */\n  private void _setupJVMsPanel(ConfigPanel panel) {\n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.MASTER_JVM_XMX, \n                                                       \"Maximum Heap Size for Main JVM in MB\", \n                                                       this,\n                                                       \"The maximum heap the Main JVM can use. Select blank for default.\"));\n    addOptionComponent(panel, \n                       new StringOptionComponent(OptionConstants.MASTER_JVM_ARGS, \"JVM Args for Main JVM\", \n                                                 this,\n                                                 \"The command-line arguments to pass to the Main JVM.\"));\n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.SLAVE_JVM_XMX, \n                                                       \"Maximum Heap Size for Interactions JVM in MB\", \n                                                       this,\n                                                       \"The maximum heap the Interactions JVM can use. Select blank for default\"));\n    addOptionComponent(panel, \n                       new StringOptionComponent(OptionConstants.SLAVE_JVM_ARGS, \"JVM Args for Interactions JVM\", \n                                                 this,\n                                                 \"The command-line arguments to pass to the Interactions JVM.\"));    \n    panel.displayComponents();\n  }\n\n  /** Adds all of the components for the file types panel of the preferences window. */\n  private void _setupFileTypesPanel(ConfigPanel panel) {\n    if (PlatformFactory.ONLY.canRegisterFileExtensions()) {\n      addOptionComponent(panel, new LabelComponent(\"<html>Assign DrJava project files and DrJava extensions<br>\"+\n                                                   \"(with the extensions .drjava and .djapp) to DrJava.<br>\"+\n                                                   \"When double-clicking on a .drjava file, DrJava will open it.</html>\", this, true));\n      \n      panel.addComponent(new ButtonComponent(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n          if (PlatformFactory.ONLY.registerDrJavaFileExtensions()) {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Successfully set .drjava and .djapp file associations.\",\n                                          \"Success\",\n                                          JOptionPane.INFORMATION_MESSAGE); \n          }\n          else {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Could not set .drjava and .djapp file associations.\",\n                                          \"File Types Error\",\n                                          JOptionPane.ERROR_MESSAGE); \n          }\n        }\n      }, \"Associate .drjava and .djapp Files with DrJava\", this, \"This associates .drjava and .djapp files with DrJava.\"));\n\n      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n      \n      panel.addComponent(new ButtonComponent(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n          if (PlatformFactory.ONLY.unregisterDrJavaFileExtensions()) {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Successfully removed .drjava and .djapp file associations.\",\n                                          \"Success\",\n                                          JOptionPane.INFORMATION_MESSAGE); \n          }\n          else {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Could not remove .drjava and .djapp file associations.\",\n                                          \"File Types Error\",\n                                          JOptionPane.ERROR_MESSAGE); \n          }\n        }\n      }, \"Remove .drjava and .djapp File Associations\", this, \"This removes the association of .drjava and .djapp files with DrJava.\"));\n      \n      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n      addOptionComponent(panel, new LabelComponent(\"<html>Assign Java source files with the<br>\"+\n                                                   \"extension .java to DrJava. When double-clicking<br>\"+\n                                                   \"on a .java file, DrJava will open it.</html>\", this, true));\n\n      panel.addComponent(new ButtonComponent(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n          if (PlatformFactory.ONLY.registerJavaFileExtension()) {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Successfully set .java file association.\",\n                                          \"Success\",\n                                          JOptionPane.INFORMATION_MESSAGE); \n          }\n          else {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Could not set .java file association.\",\n                                          \"File Types Error\",\n                                          JOptionPane.ERROR_MESSAGE); \n          }\n        }\n      }, \"Associate .java Files with DrJava\", this, \"This associates .java source files with DrJava.\"));\n\n      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n\n      panel.addComponent(new ButtonComponent(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n          if (PlatformFactory.ONLY.unregisterJavaFileExtension()) {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Successfully removed .java file association.\",\n                                          \"Success\",\n                                          JOptionPane.INFORMATION_MESSAGE); \n          }\n          else {\n            JOptionPane.showMessageDialog(ConfigFrame.this,\n                                          \"Could not remove .java file association.\",\n                                          \"File Types Error\",\n                                          JOptionPane.ERROR_MESSAGE); \n          }\n        }\n      }, \"Remove .java File Association\", this, \"This removes the association of .java project files with DrJava.\"));\n\n      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n      addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n      \n      addOptionComponent(panel, new ForcedChoiceOptionComponent(OptionConstants.FILE_EXT_REGISTRATION,\n                                                                \"<html>Automatically assign .java, .drjava and .djapp Files to DrJava</html>\", this,\n                                                                \"<html>Assign files with the extensions .java, .drjava and .djapp to DrJava.<br>\"+\n                                                                \"When double-clicking those files, they will be opened in DrJava.<br><br>\"+\n                                                                \"Selecting 'always' will re-establish this association every time DrJava<br>\"+\n                                                                \"started, without asking. Selecting 'ask me' will ask the user at start up<br>\"+\n                                                                \"if the association has been changed. Selecting 'never' will not assign<br>\"+\n                                                                \".java, .drjava and .djapp files to DrJava.\"));\n    }\n    else {\n      addOptionComponent(panel, \n                         new LabelComponent(\"<html><br><br>\"+\n                                            (PlatformFactory.ONLY.isMacPlatform()?\n                                               \"File associations are managed automatically by Mac OS.\":\n                                               (PlatformFactory.ONLY.isWindowsPlatform()?\n                                                  \"To set file associations, please use the .exe file version of DrJava.<br>\"+\n                                                \"Configuring file associations is not supported for the .jar file version.\":\n                                                  \"Managing file associations is not supported yet on this operating system.\"))+\n                                            \"</html>\",\n                                            this, true));\n    }\n    panel.displayComponents();\n  }\n  \n  /** Adds all of the components for the Compiler Options Panel of the preferences window\n    */\n  private void _setupCompilerPanel(ConfigPanel panel) {\n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.SHOW_UNCHECKED_WARNINGS, \"Show Unchecked Warnings\", this, \n                                                  \"<html>Warn about unchecked conversions involving parameterized types.</html>\", false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.SHOW_DEPRECATION_WARNINGS, \"Show Deprecation Warnings\", this, \n                                                  \"<html>Warn about each use or override of a deprecated method, field, or class.</html>\", false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.SHOW_PATH_WARNINGS, \"Show Path Warnings\", this, \n                                                  \"<html>Warn about nonexistent members of the classpath and sourcepath.</html>\", false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.SHOW_SERIAL_WARNINGS, \"Show Serial Warnings\", this, \n                                                  \"<html>Warn about missing <code>serialVersionUID</code> definitions on serializable classes.</html>\", \n                                                  false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.SHOW_FINALLY_WARNINGS, \"Show Finally Warnings\", this,\n                                                  \"<html>Warn about <code>finally</code> clauses that cannot complete normally.</html>\", false)\n                         .setEntireColumn(true));\n    \n    addOptionComponent(panel, \n                       new BooleanOptionComponent(OptionConstants.SHOW_FALLTHROUGH_WARNINGS, \"Show Fall-Through Warnings\", this,\n                                                  \"<html>Warn about <code>switch</code> block cases that fall through to the next case.</html>\", \n                                                  false)\n                         .setEntireColumn(true));\n    /*\n     * The drop down box containing the compiler names\n     */\n    final ForcedChoiceOptionComponent CPC = new ForcedChoiceOptionComponent(OptionConstants.COMPILER_PREFERENCE_CONTROL.evaluate(), \"Compiler Preference\", \n                         this,\n                         \"Which compiler is prefered?\");\n    \n    /*\n     * Action listener that saves the selected compiler name into the DEFAULT_COMPILER_PREFERENCE setting\n     */\n    ActionListener CPCActionListener = new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        if(!edu.rice.cs.drjava.DrJava.getConfig().getSetting(OptionConstants.DEFAULT_COMPILER_PREFERENCE).equals(CPC.getCurrentComboBoxValue())){\n          edu.rice.cs.drjava.DrJava.getConfig().setSetting(OptionConstants.DEFAULT_COMPILER_PREFERENCE,CPC.getCurrentComboBoxValue());\n        }\n      }\n    };\n   \n    /*\n     * insures that the change is made only when the apply or ok button is hit\n     */\n    _applyButton.addActionListener(CPCActionListener);\n    _okButton.addActionListener(CPCActionListener);\n    \n    /*\n     * adds the drop down box to the panel\n     */\n    addOptionComponent(panel, \n                       CPC.setEntireColumn(false)\n                      );\n    \n    addOptionComponent(panel, \n                       new LabelComponent(\"<html><br><br>Note: Compiler warnings not shown if compiling any Java language level files.</html>\", \n                                          this, true));\n    panel.displayComponents();\n  }\n  \n  /** Add all of the components for the Interactions panel of the preferences window. */\n  private void _setupInteractionsPanel(ConfigPanel panel) {\n    final DirectoryOptionComponent wdComponent =\n      new DirectoryOptionComponent(OptionConstants.FIXED_INTERACTIONS_DIRECTORY,\n                                   \"Interactions Working Directory\", this,\n                                   \"<html>Working directory for the Interactions Pane (unless<br>\"+\n                                   \"a project working directory has been set).</html>\",\n                                   _dirChooser);\n    addOptionComponent(panel, wdComponent);\n    final BooleanOptionComponent stickyComponent = \n      new BooleanOptionComponent(OptionConstants.STICKY_INTERACTIONS_DIRECTORY,\n                                 \"<html><p align=\\\"right\\\">\" + \n                                 StringOps.\n                                   splitStringAtWordBoundaries(\"Restore last working directory of the Interactions pane on start up\",\n                                                               33, \"<br>\", SEPS), this,\n                                 \"<html>Whether to restore the last working directory of the Interaction pane on start up,<br>\" +\n                                 \"or to always use the value of the \\\"user.home\\\" Java property<br>\"+\n                                 \"(currently \"+System.getProperty(\"user.home\")+\").\");\n    addOptionComponent(panel, stickyComponent);\n    \n    OptionComponent.ChangeListener wdListener = new OptionComponent.ChangeListener() {\n      public Object value(Object oc) {\n        File f = wdComponent.getComponent().getFileFromField();\n        boolean enabled = (f == null) || (f.equals(FileOps.NULL_FILE));\n        stickyComponent.getComponent().setEnabled(enabled);\n        return null;\n      }\n    };\n    wdComponent.addChangeListener(wdListener);\n    wdListener.value(wdComponent);\n\n    addOptionComponent(panel, new BooleanOptionComponent\n                         (OptionConstants.SMART_RUN_FOR_APPLETS_AND_PROGRAMS, \n                          \"Smart Run Command\", this,\n                          \"<html>Whether the Run button and meni item should automatically detect<br>\"+\n                          \"applets and ACM Java Task Force programs (subclasses of acm.program.Program).</html>\"));\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n      \n    addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.HISTORY_MAX_SIZE, \"Size of Interactions History\", this,\n                                                  \"The number of interactions to remember in the history.\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DIALOG_AUTOIMPORT_ENABLED, \n                                                         \"Enable the \\\"Auto Import\\\" Dialog\", this,\n                                                         \"<html>Whether DrJava should open the \\\"Auto Import\\\" dialog when<br>\"+\n                                                         \"an undefined class is encountered in the Interactions Pane.</html>\"));\n    VectorStringOptionComponent autoImportClasses =\n      new VectorStringOptionComponent(OptionConstants.INTERACTIONS_AUTO_IMPORT_CLASSES, \"Classes to Auto-Import\", this,\n                                      \"<html>List of classes to auto-import every time the<br>\"+\n                                      \"Interaction Pane is reset or started. Examples:<br><br>\"+\n                                      \"java.io.File<br>\"+\n                                      \"java.util.*</html>\") {\n      protected boolean verify(String s) {\n        boolean result = true;\n        // verify that the string contains only Java identifier characters, dots and stars\n        for(int i = 0; i < s.length(); ++i) {\n          char ch = s.charAt(i);\n          if ((ch!='.') && (ch!='*') && (!Character.isJavaIdentifierPart(ch))) {\n            result = false;\n            break;\n          }\n        }\n        if (!result) {\n          JOptionPane.showMessageDialog(ConfigFrame.this,\n                                        \"This is not a valid class name:\\n\"+\n                                        s,\n                                        \"Error Adding Class Name\",\n                                        JOptionPane.ERROR_MESSAGE); \n        }\n        return result;\n      }\n    };\n    addOptionComponent(panel, autoImportClasses);\n\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n      \n    addOptionComponent(panel, \n                       new ForcedChoiceOptionComponent(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL,\n                                                       \"Enforce access control\", \n                                                       this,\n                                                       \"What kind of access control should DrJava enforce in the Interactions Pane?\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DYNAMICJAVA_REQUIRE_SEMICOLON, \n                                                         \"Require Semicolon\", this,\n                                                         \"<html>Whether DrJava should require a semicolon at the<br>\"+\n                                                         \"end of a statement in the Interactions Pane.</html>\"));\n    addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.DYNAMICJAVA_REQUIRE_VARIABLE_TYPE, \n                                                         \"Require Variable Type\", this,\n                                                         \"<html>Whether DrJava should require a variable type for<br>\"+\n                                                         \"variable declarations in the Interactions Pane.</html>\"));\n    \n    panel.displayComponents();\n  }\n\n  /** Add all of the components for the JUnit panel of the preferences window. */\n  private void _setupJUnitPanel(ConfigPanel panel) {\n    final BooleanOptionComponent junitLocEnabled =\n      new BooleanOptionComponent(OptionConstants.JUNIT_LOCATION_ENABLED, \"Use external JUnit\", this,\n                                 \"<html>If this is enabled, DrJava will use the JUnit configured<br>\"+\n                                 \"below under 'JUnit/ConcJUnit Location'. If it is disabled,<br>\"+\n                                 \"DrJava will use the JUnit that is built-in.</html>\", false)\n      .setEntireColumn(true);\n    addOptionComponent(panel, junitLocEnabled);\n    final FileOptionComponent junitLoc =\n      new FileOptionComponent(OptionConstants.JUNIT_LOCATION, \"JUnit/ConcJUnit Location\", this,\n                              \"<html>Optional location of the JUnit or ConcJUnit jar file.<br>\"+\n                              \"(Changes will not be applied until the Interactions Pane<br>\"+\n                              \"is reset.)</html>\",\n                              new FileSelectorComponent(this, _jarChooser, 30, 10f) {\n      public void setFileField(File file) {\n        if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(file) ||\n            edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(file)) {\n          super.setFileField(file);\n        }\n        else if (file.exists()) { // invalid JUnit/ConcJUnit file, but exists\n          new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(_parent, \"Invalid JUnit/ConcJUnit File\", \"Stack trace:\",\n                                                           edu.rice.cs.util.StringOps.getStackTrace(), 600, 400, false).show();\n          JOptionPane.showMessageDialog(_parent, \"The file '\"+ file.getName() + \"'\\nis not a valid JUnit/ConcJUnit file.\",\n                                        \"Invalid JUnit/ConcJUnit File\", JOptionPane.ERROR_MESSAGE);\n          resetFileField(); // revert if not valid          \n        }\n      }\n      public boolean validateTextField() {\n        String newValue = _fileField.getText().trim();\n        \n        File newFile = FileOps.NULL_FILE;\n        if (!newValue.equals(\"\"))\n          newFile = new File(newValue);\n        \n        if (newFile != FileOps.NULL_FILE && !newFile.exists()) {\n          JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis invalid because it does not exist.\",\n                                        \"Invalid File Name\", JOptionPane.ERROR_MESSAGE);\n          if (_file != null && ! _file.exists()) _file = FileOps.NULL_FILE;\n          resetFileField(); // revert if not valid\n          \n          return false;\n        }\n        else {\n          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(newFile) ||\n              edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(newFile) ||\n              FileOps.NULL_FILE.equals(newFile)) {\n            setFileField(newFile);\n            return true;\n          }\n          else {\n            new edu.rice.cs.drjava.ui.DrJavaScrollableDialog(_parent, \"Invalid JUnit/ConcJUnit File\", \"newFile is NULL_FILE? \"+(FileOps.NULL_FILE.equals(newFile)),\n                                                             edu.rice.cs.util.StringOps.getStackTrace(), 600, 400, false).show();\n            JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis not a valid JUnit/ConcJUnit file.\",\n                                          \"Invalid JUnit/ConcJUnit File\", JOptionPane.ERROR_MESSAGE);\n            resetFileField(); // revert if not valid\n            \n            return false;\n          }\n        }\n      }    \n    });\n    junitLoc.setFileFilter(ClassPathFilter.ONLY);\n    addOptionComponent(panel, junitLoc);\n\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n\n    final ForcedChoiceOptionComponent concJUnitChecksEnabledComponent =\n      new ForcedChoiceOptionComponent(OptionConstants.CONCJUNIT_CHECKS_ENABLED, \"Enabled ConcJUnit Checks\", this,\n                                      \"<html>The concurrent unit testing checks that should be performed.<br>\"+\n                                      \"'none' uses plain JUnit. ConcJUnit can also detect failures in<br>\"+\n                                      \"all threads ('all-threads'), detect threads that did not end in<br>\"+\n                                      \"time ('all-threads, join'), and threads that ended in time only<br>\"+\n                                      \"because they were lucky ('all-threads, nojoin, lucky).<br>\"+\n                                      \"The last setting requires a 'ConcJUnit Runtime Location' to be set.</html>\");\n    addOptionComponent(panel, concJUnitChecksEnabledComponent);\n\n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));    \n\n    final FileOptionComponent rtConcJUnitLoc =\n      new FileOptionComponent(OptionConstants.RT_CONCJUNIT_LOCATION, \"ConcJUnit Runtime Location\", this,\n                              \"<html>Optional location of the Java Runtime Library processed<br>\"+\n                              \"to generate &quot;lucky&quot; warnings. If left blank, &quot;lucky&quot; warnings<br>\"+\n                              \"will not be generated. This setting is deactivated if the path to<br>\"+\n                              \"ConcJUnit has not been specified above.<br>\" + \n                              \"(Changes will not be applied until the Interactions Pane is reset.)</html>\",\n                              new FileSelectorComponent(this, _jarChooser, 30, 10f) {\n      public void setFileField(File file) {\n        if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(file)) {\n          super.setFileField(file);\n        }\n        else if (file.exists()) { // invalid but exists\n          JOptionPane.showMessageDialog(_parent, \"The file '\"+ file.getName() + \"'\\nis not a valid ConcJUnit Runtime file.\",\n                                        \"Invalid ConcJUnit Runtime File\", JOptionPane.ERROR_MESSAGE);\n          resetFileField(); // revert if not valid          \n        }\n      }\n      public boolean validateTextField() {\n        String newValue = _fileField.getText().trim();\n        \n        File newFile = FileOps.NULL_FILE;\n        if (!newValue.equals(\"\"))\n          newFile = new File(newValue);\n        \n        if (newFile != FileOps.NULL_FILE && !newFile.exists()) {\n          JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis invalid because it does not exist.\",\n                                        \"Invalid File Name\", JOptionPane.ERROR_MESSAGE);\n          if (_file != null && ! _file.exists()) _file = FileOps.NULL_FILE;\n          resetFileField(); // revert if not valid\n          \n          return false;\n        }\n        else {\n          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(newFile) ||\n              FileOps.NULL_FILE.equals(newFile)) {\n            setFileField(newFile);\n            return true;\n          }\n          else {\n            JOptionPane.showMessageDialog(_parent, \"The file '\"+ newFile.getName() + \"'\\nis not a valid ConcJUnit Runtime file.\",\n                                          \"Invalid ConcJUnit Runtime File\", JOptionPane.ERROR_MESSAGE);\n            resetFileField(); // revert if not valid\n            \n            return false;\n          }\n        }\n      }    \n    });\n    rtConcJUnitLoc.setFileFilter(ClassPathFilter.ONLY);\n    \n    ActionListener processRTListener = new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        File concJUnitJarFile = FileOps.getDrJavaFile();\n        if (junitLocEnabled.getComponent().isSelected()) {\n          concJUnitJarFile = junitLoc.getComponent().getFileFromField();\n        }\n        File rtFile = rtConcJUnitLoc.getComponent().getFileFromField();\n        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.\n          showGenerateRTConcJUnitJarFileDialog(ConfigFrame.this,\n                                               rtFile,\n                                               concJUnitJarFile,\n                                               new Runnable1<File>() {\n          public void run(File targetFile) {\n            rtConcJUnitLoc.getComponent().setFileField(targetFile);\n          }\n        },\n                                               new Runnable() { public void run() { } });\n      }\n    };\n    final ButtonComponent processRT =\n      new ButtonComponent(processRTListener, \"Generate ConcJUnit Runtime File\", this,\n                          \"<html>Generate the ConcJUnit Runtime file specified above.<br>\"+\n                          \"This setting is deactivated if the path to ConcJUnit has not been specified above.</html>\");\n    \n    OptionComponent.ChangeListener rtConcJUnitListener = new OptionComponent.ChangeListener() {\n      public Object value(Object oc) {\n        File f = junitLoc.getComponent().getFileFromField();\n        boolean enabled = (!junitLocEnabled.getComponent().isSelected()) ||\n          edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f);\n        rtConcJUnitLoc.getComponent().setEnabled(enabled);\n        processRT.getComponent().setEnabled(enabled);\n        concJUnitChecksEnabledComponent.getComponent().setEnabled(enabled);\n        return null;\n      }\n    };\n\n    OptionComponent.ChangeListener junitLocListener = new OptionComponent.ChangeListener() {\n      public Object value(Object oc) {\n        boolean enabled = junitLocEnabled.getComponent().isSelected();\n        junitLoc.getComponent().setEnabled(enabled);\n        return null;\n      }\n    };\n    junitLocEnabled.addChangeListener(junitLocListener);\n    junitLocEnabled.addChangeListener(rtConcJUnitListener);\n    junitLoc.addChangeListener(rtConcJUnitListener);\n    addOptionComponent(panel, rtConcJUnitLoc);\n    addOptionComponent(panel, processRT);\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    final LabelComponent internalExternalStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);\n    final LabelComponent threadsStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);\n    final LabelComponent joinStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);\n    final LabelComponent luckyStatus = new LabelComponent(\"<html>&nbsp;</html>\", this, true);\n    OptionComponent.ChangeListener junitStatusChangeListener = new OptionComponent.ChangeListener() {\n      public Object value(Object oc) {\n        File f = junitLoc.getComponent().getFileFromField();\n        String[] s = new String[] { \" \", \" \", \" \", \" \" };\n        boolean isConcJUnit = true;\n        if ((!junitLocEnabled.getComponent().isSelected()) || (f==null) || FileOps.NULL_FILE.equals(f) || !f.exists()) {\n          s[0] = \"DrJava uses the built-in ConcJUnit framework.\";\n        }\n        else {\n          String type = \"ConcJUnit\";\n          if (!edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(f)) {\n            type = \"JUnit\";\n            isConcJUnit = false;\n          }\n          s[0] = \"DrJava uses an external \"+type+\" framework.\";\n        }\n        if (!isConcJUnit) {\n          s[1] = \"JUnit does not support all-thread, no-join\";\n          s[2] = \"or lucky checks. They are all disabled.\";\n        }\n        else {\n          s[1] = \"All-thread checks are disabled.\";\n          s[2] = \"No-join checks are disabled.\";\n          s[3] = \"Lucky checks are disabled.\";\n          if (!concJUnitChecksEnabledComponent.getCurrentComboBoxValue().\n                equals(OptionConstants.ConcJUnitCheckChoices.NONE)) {\n            s[1] = \"All-thread checks are enabled.\";\n            if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().\n                  equals(OptionConstants.ConcJUnitCheckChoices.ALL) ||\n                concJUnitChecksEnabledComponent.getCurrentComboBoxValue().\n                  equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY)) {\n              s[2] = \"No-join checks are enabled.\";\n              if (concJUnitChecksEnabledComponent.getCurrentComboBoxValue().\n                    equals(OptionConstants.ConcJUnitCheckChoices.ALL)) {\n                File rtf = rtConcJUnitLoc.getComponent().getFileFromField();\n                if ((rtf!=null) && !FileOps.NULL_FILE.equals(rtf) && rtf.exists() &&\n                    edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtf)) {\n                  s[3] = \"Lucky checks are enabled.\";\n                }\n              }\n            }\n          }\n        }\n        internalExternalStatus.getComponent().setText(s[0]);\n        threadsStatus.getComponent().setText(s[1]);\n        joinStatus.getComponent().setText(s[2]);\n        luckyStatus.getComponent().setText(s[3]);\n        return null;\n      }\n    };\n    concJUnitChecksEnabledComponent.addChangeListener(junitStatusChangeListener);\n    junitLocEnabled.addChangeListener(junitStatusChangeListener);\n    junitLoc.addChangeListener(junitStatusChangeListener);\n    rtConcJUnitLoc.addChangeListener(junitStatusChangeListener);\n    addOptionComponent(panel, internalExternalStatus);\n    addOptionComponent(panel, threadsStatus);\n    addOptionComponent(panel, joinStatus);\n    addOptionComponent(panel, luckyStatus);\n\n    junitLocListener.value(null);\n    rtConcJUnitListener.value(null);\n    junitStatusChangeListener.value(null);\n    \n    addOptionComponent(panel, new LabelComponent(\"<html>&nbsp;</html>\", this, true));\n    final BooleanOptionComponent forceTestSuffix  =\n      new BooleanOptionComponent(OptionConstants.FORCE_TEST_SUFFIX,\n                                 \"Require test classes in projects to end in \\\"Test\\\"\",\n                                 this,\n                                 \"Whether to force test classes in projects to end in \\\"Test\\\".\",\n                                 false)\n      .setEntireColumn(true);\n    addOptionComponent(panel, forceTestSuffix);\n    \n    panel.displayComponents();\n  }\n  \n  /** Reset the position of the \"Debugger\" dialog. \n * @param mainFrame TODO*/\n  public void resetDebugFrame(MainFrame mainFrame) {\n    if (mainFrame._debugFrame == null) return; // debugger isn't used\n    mainFrame._debugFrame.setFrameState(\"default\");\n    if (DrJava.getConfig().getSetting(DIALOG_DEBUGFRAME_STORE_POSITION).booleanValue()) {\n      DrJava.getConfig().setSetting(DIALOG_DEBUGFRAME_STATE, \"default\");\n    }\n  }\n\n/** Private class to handle rendering of tree nodes, each of which\n    *  corresponds to a ConfigPanel.  These nodes should only be accessed\n    *  from the event handling thread.\n    */\n  private class PanelTreeNode extends DefaultMutableTreeNode {\n    \n    private final ConfigPanel _panel;\n    \n    public PanelTreeNode(String t) {\n      super(t);\n      _panel = new ConfigPanel(t);\n    }\n\n    public PanelTreeNode(ConfigPanel c) {\n      super(c.getTitle());\n      _panel = c;\n    }\n    private ConfigPanel getPanel() { return _panel; }\n\n    /** Tells its panel to update, and tells all of its child nodes to update their panels.\n     *  @return whether the update succeeded.\n     */\n    private boolean update() {\n      \n      boolean isValidUpdate = _panel.update();\n       \n      //if this panel encountered an error while attempting to update, return false\n      if (!isValidUpdate) {\n        //System.out.println(\"Panel.update() returned false\");\n\n        //TreePath path = new TreePath(this.getPath());\n        // causes ClassCastException under jsr14 v2.0 for no apparent reason.\n        // Workaround:  store result of getPath() to temporary array.\n\n        TreeNode[] nodes = getPath();\n        TreePath path = new TreePath(nodes);\n        _tree.expandPath(path);\n        _tree.setSelectionPath(path);\n        return false;\n      }\n\n      Enumeration<?> childNodes = children();\n      while (childNodes.hasMoreElements()) {\n        boolean isValidUpdateChildren = ((PanelTreeNode)childNodes.nextElement()).update();\n        //if any of the children nodes encountered an error, return false\n        if (!isValidUpdateChildren) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    /** Tells its panel to reset its displayed value to the currently set value for this component, and tells all of\n      * its children to reset their panels.  Should be performed in the event thread!\n      */\n    public void resetToCurrent() {\n      _panel.resetToCurrent();\n\n      Enumeration<?> childNodes = children();\n      while (childNodes.hasMoreElements()) {\n        ((PanelTreeNode)childNodes.nextElement()).resetToCurrent();\n      }\n    }\n  }\n\n  private class PanelTreeSelectionListener implements TreeSelectionListener {\n    public void valueChanged(TreeSelectionEvent e) {\n      Object o = _tree.getLastSelectedPathComponent();\n      //System.out.println(\"Object o : \"+o);\n      if (o instanceof PanelTreeNode) {\n        //System.out.println(\"o is instanceof PanelTreeNode\");\n        PanelTreeNode child = (PanelTreeNode) _tree.getLastSelectedPathComponent();\n        _displayPanel(child.getPanel());\n      }\n    }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 19,
                "candidates": [
                    {
                        "lineStart": 353,
                        "lineEnd": 368,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.MainFrame\nRationale: The saveSettings() method is likely related to the overall application settings and configuration, which would be managed at the main application frame level.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 306,
                        "lineEnd": 310,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: The apply() method is responsible for updating the tree structure, which is directly related to the functionality of a tree node. It makes sense for this method to reside in the PanelTreeNode class, as it likely manages the state and behavior of the nodes in the tree.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 319,
                        "lineEnd": 324,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: The cancel() method is related to UI behavior, specifically resetting and hiding a frame, which aligns more closely with the responsibilities of a PanelTreeNode that manages visual components.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 294,
                        "lineEnd": 304,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.MainFrame\nRationale: The method _getWorkDir() directly accesses the _mainFrame instance to retrieve the master working directory, indicating that it is closely related to the MainFrame's responsibilities.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 272,
                        "lineEnd": 281,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.OptionComponent.ChangeListener\nRationale: The method 'enableChangeListeners()' is responsible for adding option listeners, which is directly related to the concept of change listeners. It is more appropriate for this method to reside in a class that deals with change events and listeners.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 283,
                        "lineEnd": 292,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.OptionComponent.ChangeListener\nRationale: The method disableChangeListeners() is responsible for removing option listeners, which directly relates to the functionality of change listeners. It is more appropriate for this method to reside in a class that manages or interacts with change listeners.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 413,
                        "lineEnd": 417,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: The method _createPanel is responsible for creating a panel and returning a tree node, which directly relates to the functionality of the PanelTreeNode class. It is more appropriate for this method to reside within the PanelTreeNode class as it deals with the creation and management of tree nodes.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 379,
                        "lineEnd": 391,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: The _initTree() method is responsible for initializing a JTree, which is likely related to displaying a tree structure of preferences. Since PanelTreeNode suggests a connection to a tree structure, it is more appropriate for this method to reside in this class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 477,
                        "lineEnd": 513,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: _setupResourceLocPanel is responsible for setting up components in a preferences panel, which aligns with the responsibilities of a PanelTreeNode that manages UI components.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 515,
                        "lineEnd": 608,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigPanel\nRationale: The _setupDisplayPanel method is responsible for adding components to a display options panel, which directly relates to the functionality of the ConfigPanel class. It manages the configuration settings and UI components, making it the most appropriate target class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 610,
                        "lineEnd": 625,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigPanel\nRationale: The method _setupFontPanel is responsible for setting up components related to font options within a configuration panel, making it most appropriate to reside in the ConfigPanel class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 627,
                        "lineEnd": 687,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigPanel\nRationale: The method _setupColorPanel is responsible for adding color-related components to a preferences window, which directly relates to the configuration and display of options within the ConfigPanel.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 840,
                        "lineEnd": 879,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigPanel\nRationale: The method _setupKeyBindingsPanel is responsible for setting up components specifically for the Key Bindings panel, which directly relates to the ConfigPanel class as it represents a configuration interface.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 881,
                        "lineEnd": 943,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.MainFrame\nRationale: The _setupDebugPanel method interacts with the main frame's model to check the availability of the debugger and adds various debugging options to a panel. Since it relies on the main frame's context and configuration, it is most appropriate for the MainFrame class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1615,
                        "lineEnd": 1873,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: _setupJUnitPanel is responsible for setting up components in a preferences panel, which aligns with the functionality of a PanelTreeNode that manages UI components.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1237,
                        "lineEnd": 1313,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigPanel\nRationale: The method _setupMiscPanel is responsible for adding various option components to a configuration panel, which directly relates to the functionality of the ConfigPanel class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1450,
                        "lineEnd": 1519,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: The method _setupCompilerPanel is responsible for setting up components in a preferences panel, which aligns with the responsibilities of a PanelTreeNode class that manages UI components.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1521,
                        "lineEnd": 1613,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigFrame.PanelTreeNode\nRationale: The method _setupInteractionsPanel is responsible for setting up components in a preferences panel, which aligns with the functionality of a PanelTreeNode that manages the structure and behavior of panels.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1338,
                        "lineEnd": 1448,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.config.ConfigPanel\nRationale: The method _setupFileTypesPanel is responsible for setting up components related to file type associations within a preferences window, which directly relates to the configuration settings managed by the ConfigPanel class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 41580
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "resetDebugFrame",
                            "method_signature": "public void resetDebugFrame(MainFrame mainFrame)",
                            "target_class": "MainFrame",
                            "rationale": "The resetDebugFrame method directly manipulates the MainFrame's debug frame, making it more appropriate for it to reside within the MainFrame class."
                        },
                        {
                            "method_name": "_getWorkDir",
                            "method_signature": "private File _getWorkDir()",
                            "target_class": "FileManager",
                            "rationale": "The method retrieves the working directory, which is more aligned with file management responsibilities. It should be moved to a dedicated FileManager class."
                        },
                        {
                            "method_name": "enableChangeListeners",
                            "method_signature": "private void enableChangeListeners()",
                            "target_class": "ConfigOptionListeners",
                            "rationale": "This method is responsible for adding option listeners, which is a concern of the ConfigOptionListeners class. It should be moved there for better separation of concerns."
                        },
                        {
                            "method_name": "disableChangeListeners",
                            "method_signature": "private void disableChangeListeners()",
                            "target_class": "ConfigOptionListeners",
                            "rationale": "Similar to enableChangeListeners, this method deals with removing option listeners and should be part of the ConfigOptionListeners class."
                        },
                        {
                            "method_name": "_createPanel",
                            "method_signature": "private PanelTreeNode _createPanel(String t, PanelTreeNode parent)",
                            "target_class": "PanelTreeNode",
                            "rationale": "The method creates a new PanelTreeNode and is closely related to the functionality of the PanelTreeNode class. It should be moved there to encapsulate related behavior."
                        },
                        {
                            "method_name": "_initTree",
                            "method_signature": "private void _initTree()",
                            "target_class": "PanelTreeNode",
                            "rationale": "This method initializes the JTree, which is a part of the tree node's responsibilities. It should be moved to the PanelTreeNode class."
                        }
                    ],
                    "llm_response_time": 8545
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "resetDebugFrame",
                            "method_signature": "public void resetDebugFrame(MainFrame mainFrame)",
                            "target_class": "MainFrame",
                            "rationale": "The resetDebugFrame method directly manipulates the MainFrame's debug frame, making it more appropriate for it to reside within the MainFrame class."
                        },
                        {
                            "method_name": "_getWorkDir",
                            "method_signature": "private File _getWorkDir()",
                            "target_class": "FileManager",
                            "rationale": "The method retrieves the working directory, which is more aligned with file management responsibilities. It should be moved to a dedicated FileManager class."
                        },
                        {
                            "method_name": "enableChangeListeners",
                            "method_signature": "private void enableChangeListeners()",
                            "target_class": "ConfigOptionListeners",
                            "rationale": "This method is responsible for adding option listeners, which is a concern of the ConfigOptionListeners class. It should be moved there for better separation of concerns."
                        },
                        {
                            "method_name": "disableChangeListeners",
                            "method_signature": "private void disableChangeListeners()",
                            "target_class": "ConfigOptionListeners",
                            "rationale": "Similar to enableChangeListeners, this method manages the removal of option listeners and should be part of the ConfigOptionListeners class."
                        },
                        {
                            "method_name": "_createPanel",
                            "method_signature": "private PanelTreeNode _createPanel(String t, PanelTreeNode parent)",
                            "target_class": "PanelTreeNode",
                            "rationale": "The method creates a new PanelTreeNode and is closely related to the functionality of the PanelTreeNode class. It should be moved there to encapsulate the creation logic."
                        },
                        {
                            "method_name": "_initTree",
                            "method_signature": "private void _initTree()",
                            "target_class": "TreeInitializer",
                            "rationale": "The method initializes the JTree, which is a specific responsibility that could be encapsulated in a separate TreeInitializer class for better organization."
                        },
                        {
                            "method_name": "_setupResourceLocPanel",
                            "method_signature": "private void _setupResourceLocPanel(ConfigPanel panel)",
                            "target_class": "ResourceLocationPanel",
                            "rationale": "This method is responsible for setting up the resource location panel, which could be better organized in a dedicated ResourceLocationPanel class."
                        },
                        {
                            "method_name": "_setupDisplayPanel",
                            "method_signature": "private void _setupDisplayPanel(ConfigPanel panel)",
                            "target_class": "DisplayOptionsPanel",
                            "rationale": "The method configures the display options panel, which should be encapsulated in a dedicated DisplayOptionsPanel class for better separation of concerns."
                        },
                        {
                            "method_name": "_setupFontPanel",
                            "method_signature": "private void _setupFontPanel(ConfigPanel panel)",
                            "target_class": "FontOptionsPanel",
                            "rationale": "This method sets up the font options panel, which could be better organized in a dedicated FontOptionsPanel class."
                        },
                        {
                            "method_name": "_setupColorPanel",
                            "method_signature": "private void _setupColorPanel(ConfigPanel panel)",
                            "target_class": "ColorOptionsPanel",
                            "rationale": "The method configures the color options panel, which should be encapsulated in a dedicated ColorOptionsPanel class for better organization."
                        },
                        {
                            "method_name": "_setupKeyBindingsPanel",
                            "method_signature": "private void _setupKeyBindingsPanel(ConfigPanel panel)",
                            "target_class": "KeyBindingsPanel",
                            "rationale": "This method is responsible for setting up the key bindings panel, which could be better organized in a dedicated KeyBindingsPanel class."
                        },
                        {
                            "method_name": "_setupDebugPanel",
                            "method_signature": "private void _setupDebugPanel(ConfigPanel panel)",
                            "target_class": "DebugOptionsPanel",
                            "rationale": "The method sets up the debug options panel, which should be encapsulated in a dedicated DebugOptionsPanel class for better separation of concerns."
                        },
                        {
                            "method_name": "_setupJUnitPanel",
                            "method_signature": "private void _setupJUnitPanel(ConfigPanel panel)",
                            "target_class": "JUnitOptionsPanel",
                            "rationale": "This method configures the JUnit options panel, which could be better organized in a dedicated JUnitOptionsPanel class."
                        },
                        {
                            "method_name": "_setupMiscPanel",
                            "method_signature": "private void _setupMiscPanel(ConfigPanel panel)",
                            "target_class": "MiscellaneousOptionsPanel",
                            "rationale": "The method sets up miscellaneous options, which should be encapsulated in a dedicated MiscellaneousOptionsPanel class for better organization."
                        },
                        {
                            "method_name": "_setupCompilerPanel",
                            "method_signature": "private void _setupCompilerPanel(ConfigPanel panel)",
                            "target_class": "CompilerOptionsPanel",
                            "rationale": "This method is responsible for setting up the compiler options panel, which could be better organized in a dedicated CompilerOptionsPanel class."
                        },
                        {
                            "method_name": "_setupInteractionsPanel",
                            "method_signature": "private void _setupInteractionsPanel(ConfigPanel panel)",
                            "target_class": "InteractionsOptionsPanel",
                            "rationale": "The method configures the interactions options panel, which should be encapsulated in a dedicated InteractionsOptionsPanel class."
                        },
                        {
                            "method_name": "_setupFileTypesPanel",
                            "method_signature": "private void _setupFileTypesPanel(ConfigPanel panel)",
                            "target_class": "FileTypesOptionsPanel",
                            "rationale": "This method sets up the file types panel, which could be better organized in a dedicated FileTypesOptionsPanel class."
                        },
                        {
                            "method_name": "_setupJVMsPanel",
                            "method_signature": "private void _setupJVMsPanel(ConfigPanel panel)",
                            "target_class": "JVMOptionsPanel",
                            "rationale": "The method configures the JVM options panel, which should be encapsulated in a dedicated JVMOptionsPanel class."
                        }
                    ],
                    "llm_response_time": 22830
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "resetDebugFrame",
                            "method_signature": "public void resetDebugFrame(MainFrame mainFrame)",
                            "target_class": "MainFrame",
                            "rationale": "The resetDebugFrame method directly manipulates the MainFrame's debug frame, making it more appropriate for it to reside within the MainFrame class."
                        },
                        {
                            "method_name": "_getWorkDir",
                            "method_signature": "private File _getWorkDir()",
                            "target_class": "FileManager",
                            "rationale": "The method retrieves the working directory, which is more aligned with file management responsibilities. Moving it to a FileManager class would encapsulate file-related operations."
                        },
                        {
                            "method_name": "saveSettings",
                            "method_signature": "public boolean saveSettings() throws IOException",
                            "target_class": "SettingsManager",
                            "rationale": "The saveSettings method is responsible for persisting configuration settings, which is a clear responsibility of a dedicated SettingsManager class."
                        },
                        {
                            "method_name": "apply",
                            "method_signature": "public boolean apply()",
                            "target_class": "ConfigPanel",
                            "rationale": "The apply method is responsible for applying configuration changes, which is a core function of a ConfigPanel class. Moving it there would enhance cohesion."
                        },
                        {
                            "method_name": "resetToCurrent",
                            "method_signature": "public void resetToCurrent()",
                            "target_class": "ConfigPanel",
                            "rationale": "The resetToCurrent method is related to resetting configuration values, which aligns with the responsibilities of a ConfigPanel class."
                        },
                        {
                            "method_name": "cancel",
                            "method_signature": "public void cancel()",
                            "target_class": "DialogManager",
                            "rationale": "The cancel method is responsible for handling the cancellation of the configuration frame, which is more appropriate for a DialogManager class that handles dialog-related actions."
                        }
                    ],
                    "llm_response_time": 6748
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "resetDebugFrame",
                            "method_signature": "public void resetDebugFrame(MainFrame mainFrame)",
                            "target_class": "MainFrame",
                            "rationale": "The resetDebugFrame method directly manipulates the MainFrame's debug frame, making it more appropriate for it to reside within the MainFrame class."
                        },
                        {
                            "method_name": "_getWorkDir",
                            "method_signature": "private File _getWorkDir()",
                            "target_class": "FileManager",
                            "rationale": "The method retrieves the working directory, which is more aligned with file management responsibilities. It should be moved to a dedicated FileManager class."
                        },
                        {
                            "method_name": "enableChangeListeners",
                            "method_signature": "private void enableChangeListeners()",
                            "target_class": "ConfigOptionListeners",
                            "rationale": "This method is responsible for adding option listeners, which is a concern of the ConfigOptionListeners class. It should be moved there for better separation of concerns."
                        },
                        {
                            "method_name": "disableChangeListeners",
                            "method_signature": "private void disableChangeListeners()",
                            "target_class": "ConfigOptionListeners",
                            "rationale": "Similar to enableChangeListeners, this method deals with removing option listeners and should be part of the ConfigOptionListeners class."
                        },
                        {
                            "method_name": "_createPanel",
                            "method_signature": "private PanelTreeNode _createPanel(String t, PanelTreeNode parent)",
                            "target_class": "PanelTreeNode",
                            "rationale": "The method creates a new PanelTreeNode and is closely related to the functionality of the PanelTreeNode class. It should be moved there to encapsulate related behavior."
                        },
                        {
                            "method_name": "_initTree",
                            "method_signature": "private void _initTree()",
                            "target_class": "PanelTreeNode",
                            "rationale": "This method initializes the JTree, which is a part of the tree node's responsibilities. It should be moved to the PanelTreeNode class."
                        },
                        {
                            "method_name": "_setupResourceLocPanel",
                            "method_signature": "private void _setupResourceLocPanel(ConfigPanel panel)",
                            "target_class": "ResourceLocationPanel",
                            "rationale": "This method is responsible for setting up the resource location panel, which could be better organized in a dedicated ResourceLocationPanel class."
                        },
                        {
                            "method_name": "_setupDisplayPanel",
                            "method_signature": "private void _setupDisplayPanel(ConfigPanel panel)",
                            "target_class": "DisplayOptionsPanel",
                            "rationale": "The method configures the display options panel, which should be encapsulated in a dedicated DisplayOptionsPanel class for better separation of concerns."
                        },
                        {
                            "method_name": "_setupFontPanel",
                            "method_signature": "private void _setupFontPanel(ConfigPanel panel)",
                            "target_class": "FontOptionsPanel",
                            "rationale": "This method sets up the font options panel, which could be better organized in a dedicated FontOptionsPanel class."
                        },
                        {
                            "method_name": "_setupColorPanel",
                            "method_signature": "private void _setupColorPanel(ConfigPanel panel)",
                            "target_class": "ColorOptionsPanel",
                            "rationale": "The method configures the color options panel, which should be encapsulated in a dedicated ColorOptionsPanel class for better organization."
                        },
                        {
                            "method_name": "_setupKeyBindingsPanel",
                            "method_signature": "private void _setupKeyBindingsPanel(ConfigPanel panel)",
                            "target_class": "KeyBindingsPanel",
                            "rationale": "This method is responsible for setting up the key bindings panel, which could be better organized in a dedicated KeyBindingsPanel class."
                        },
                        {
                            "method_name": "_setupDebugPanel",
                            "method_signature": "private void _setupDebugPanel(ConfigPanel panel)",
                            "target_class": "DebugOptionsPanel",
                            "rationale": "The method sets up the debug options panel, which should be encapsulated in a dedicated DebugOptionsPanel class for better separation of concerns."
                        },
                        {
                            "method_name": "_setupJUnitPanel",
                            "method_signature": "private void _setupJUnitPanel(ConfigPanel panel)",
                            "target_class": "JUnitOptionsPanel",
                            "rationale": "This method configures the JUnit options panel, which could be better organized in a dedicated JUnitOptionsPanel class."
                        },
                        {
                            "method_name": "_setupMiscPanel",
                            "method_signature": "private void _setupMiscPanel(ConfigPanel panel)",
                            "target_class": "MiscellaneousOptionsPanel",
                            "rationale": "The method sets up miscellaneous options, which should be encapsulated in a dedicated MiscellaneousOptionsPanel class for better organization."
                        },
                        {
                            "method_name": "_setupCompilerPanel",
                            "method_signature": "private void _setupCompilerPanel(ConfigPanel panel)",
                            "target_class": "CompilerOptionsPanel",
                            "rationale": "This method is responsible for setting up the compiler options panel, which could be better organized in a dedicated CompilerOptionsPanel class."
                        },
                        {
                            "method_name": "_setupInteractionsPanel",
                            "method_signature": "private void _setupInteractionsPanel(ConfigPanel panel)",
                            "target_class": "InteractionsOptionsPanel",
                            "rationale": "The method configures the interactions options panel, which should be encapsulated in a dedicated InteractionsOptionsPanel class."
                        },
                        {
                            "method_name": "_setupFileTypesPanel",
                            "method_signature": "private void _setupFileTypesPanel(ConfigPanel panel)",
                            "target_class": "FileTypesOptionsPanel",
                            "rationale": "This method sets up the file types panel, which could be better organized in a dedicated FileTypesOptionsPanel class."
                        },
                        {
                            "method_name": "_setupJVMsPanel",
                            "method_signature": "private void _setupJVMsPanel(ConfigPanel panel)",
                            "target_class": "JVMOptionsPanel",
                            "rationale": "The method configures the JVM options panel, which should be encapsulated in a dedicated JVMOptionsPanel class."
                        },
                        {
                            "method_name": "saveSettings",
                            "method_signature": "public boolean saveSettings() throws IOException",
                            "target_class": "SettingsManager",
                            "rationale": "The saveSettings method is responsible for persisting configuration settings, which is a clear responsibility of a dedicated SettingsManager class."
                        },
                        {
                            "method_name": "apply",
                            "method_signature": "public boolean apply()",
                            "target_class": "ConfigPanel",
                            "rationale": "The apply method is responsible for applying configuration changes, which is a core function of a ConfigPanel class. Moving it there would enhance cohesion."
                        },
                        {
                            "method_name": "resetToCurrent",
                            "method_signature": "public void resetToCurrent()",
                            "target_class": "ConfigPanel",
                            "rationale": "The resetToCurrent method is related to resetting configuration values, which aligns with the responsibilities of a ConfigPanel class."
                        },
                        {
                            "method_name": "cancel",
                            "method_signature": "public void cancel()",
                            "target_class": "DialogManager",
                            "rationale": "The cancel method is responsible for handling the cancellation of the configuration frame, which is more appropriate for a DialogManager class that handles dialog-related actions."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "saveSettings",
                    "apply",
                    "resetToCurrent",
                    "cancel",
                    "_getWorkDir",
                    "enableChangeListeners",
                    "disableChangeListeners",
                    "_createPanel",
                    "_initTree",
                    "_setupResourceLocPanel",
                    "_setupDisplayPanel",
                    "_setupFontPanel",
                    "_setupColorPanel",
                    "_setupKeyBindingsPanel",
                    "_setupDebugPanel",
                    "_setupJUnitPanel",
                    "_setupMiscPanel",
                    "_setupCompilerPanel",
                    "_setupInteractionsPanel",
                    "_setupFileTypesPanel",
                    "_setupJVMsPanel",
                    "resetDebugFrame"
                ],
                "llm_response_time": 3369
            },
            "targetClassMap": {
                "saveSettings": {
                    "target_classes": [
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.6028949582345184
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.4918543805917734
                        },
                        {
                            "class_name": "DirectoryChooser",
                            "similarity_score": 0.48566436426328624
                        },
                        {
                            "class_name": "StringOptionComponent",
                            "similarity_score": 0.4805809691826676
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.27229057431858544
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "MainFrame",
                        "StringOptionComponent",
                        "PanelTreeNode",
                        "DirectoryChooser",
                        "ChangeListener"
                    ],
                    "llm_response_time": 2705,
                    "similarity_computation_time": 16,
                    "similarity_metric": "cosine"
                },
                "apply": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.3987494971033641
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.18712029714127992
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1201,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "resetToCurrent": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1683,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "cancel": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.32302401179342993
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.30316953129541624
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1261,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "_getWorkDir": {
                    "target_classes": [
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.44723941538851814
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.35737401451808387
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.10341753799900383
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "MainFrame",
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1669,
                    "similarity_computation_time": 29,
                    "similarity_metric": "cosine"
                },
                "enableChangeListeners": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.2518226243734694
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.13453455879926252
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ChangeListener",
                        "PanelTreeNode"
                    ],
                    "llm_response_time": 1466,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "disableChangeListeners": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.2518226243734694
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.13453455879926252
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ChangeListener",
                        "PanelTreeNode"
                    ],
                    "llm_response_time": 1087,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "_createPanel": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.4496094575782257
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.10585122480499262
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1193,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "_initTree": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.3897976219636641
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.18670401120373464
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1440,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "_setupResourceLocPanel": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.3724019212940964
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.0618261078768907
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1078,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "_setupDisplayPanel": {
                    "target_classes": [
                        {
                            "class_name": "ConfigPanel",
                            "similarity_score": 0.4286438973998089
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.4458760901919703
                        },
                        {
                            "class_name": "StringOptionComponent",
                            "similarity_score": 0.3256852159257639
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.09219544457292887
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ConfigPanel",
                        "PanelTreeNode",
                        "StringOptionComponent",
                        "ChangeListener"
                    ],
                    "llm_response_time": 2105,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "_setupFontPanel": {
                    "target_classes": [
                        {
                            "class_name": "ConfigPanel",
                            "similarity_score": 0.24313713912665622
                        },
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.34059860131503716
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.2660492373142046
                        },
                        {
                            "class_name": "DirectoryChooser",
                            "similarity_score": 0.31234299191136583
                        },
                        {
                            "class_name": "StringOptionComponent",
                            "similarity_score": 0.2634760936268346
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.09580954005489309
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ConfigPanel",
                        "MainFrame",
                        "DirectoryChooser",
                        "PanelTreeNode",
                        "StringOptionComponent",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1085,
                    "similarity_computation_time": 40,
                    "similarity_metric": "cosine"
                },
                "_setupColorPanel": {
                    "target_classes": [
                        {
                            "class_name": "ConfigPanel",
                            "similarity_score": 0.22051405872807933
                        },
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.2505646471496431
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.17944131363335086
                        },
                        {
                            "class_name": "DirectoryChooser",
                            "similarity_score": 0.22594968833262932
                        },
                        {
                            "class_name": "StringOptionComponent",
                            "similarity_score": 0.19393434826900377
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.08901780264158766
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ConfigPanel",
                        "MainFrame",
                        "PanelTreeNode",
                        "ChangeListener",
                        "DirectoryChooser",
                        "StringOptionComponent"
                    ],
                    "llm_response_time": 4459,
                    "similarity_computation_time": 18,
                    "similarity_metric": "cosine"
                },
                "_setupKeyBindingsPanel": {
                    "target_classes": [
                        {
                            "class_name": "ConfigPanel",
                            "similarity_score": 0.5339354919394391
                        },
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.6722202519564172
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.4553193263352819
                        },
                        {
                            "class_name": "DirectoryChooser",
                            "similarity_score": 0.5406488818236295
                        },
                        {
                            "class_name": "StringOptionComponent",
                            "similarity_score": 0.4221452160429191
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.1307397251901871
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ConfigPanel",
                        "MainFrame",
                        "StringOptionComponent",
                        "ChangeListener",
                        "PanelTreeNode",
                        "DirectoryChooser"
                    ],
                    "llm_response_time": 2926,
                    "similarity_computation_time": 22,
                    "similarity_metric": "cosine"
                },
                "_setupDebugPanel": {
                    "target_classes": [
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.4133964700042726
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.3255006688461069
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.0589736170280161
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "MainFrame",
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1645,
                    "similarity_computation_time": 20,
                    "similarity_metric": "cosine"
                },
                "_setupJUnitPanel": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.5582808500728699
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.20945791901172908
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1427,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "_setupMiscPanel": {
                    "target_classes": [
                        {
                            "class_name": "ConfigPanel",
                            "similarity_score": 0.2836609250768285
                        },
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.387578881148305
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.33358277714884454
                        },
                        {
                            "class_name": "DirectoryChooser",
                            "similarity_score": 0.36166606290078007
                        },
                        {
                            "class_name": "StringOptionComponent",
                            "similarity_score": 0.22791419961539872
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.05309303270963477
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ConfigPanel",
                        "MainFrame",
                        "DirectoryChooser",
                        "PanelTreeNode",
                        "StringOptionComponent",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1186,
                    "similarity_computation_time": 19,
                    "similarity_metric": "cosine"
                },
                "_setupCompilerPanel": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.3244307140375659
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.12201575677649269
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1184,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "_setupInteractionsPanel": {
                    "target_classes": [
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.47004892517316865
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.10901013161880668
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1243,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "_setupFileTypesPanel": {
                    "target_classes": [
                        {
                            "class_name": "ConfigPanel",
                            "similarity_score": 0.3151624208808412
                        },
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.5203324399857024
                        },
                        {
                            "class_name": "PanelTreeNode",
                            "similarity_score": 0.3691853106029899
                        },
                        {
                            "class_name": "DirectoryChooser",
                            "similarity_score": 0.42090662102225
                        },
                        {
                            "class_name": "StringOptionComponent",
                            "similarity_score": 0.416832342811736
                        },
                        {
                            "class_name": "ChangeListener",
                            "similarity_score": 0.18345859675886916
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ConfigPanel",
                        "MainFrame",
                        "DirectoryChooser",
                        "StringOptionComponent",
                        "PanelTreeNode",
                        "ChangeListener"
                    ],
                    "llm_response_time": 1158,
                    "similarity_computation_time": 31,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.config.ConfigOptionListeners.SlaveJVMXMXListener::getSelectedCompilerErrorPanel():CompilerErrorPanel need move to edu.rice.cs.drjava.ui.MainFrame",
        "class_name": "edu.rice.cs.drjava.config.ConfigOptionListeners.SlaveJVMXMXListener",
        "telemetry": {
            "id": "c1867119-14cd-42f1-98a2-e5c52b5e2545",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 611,
                "lineStart": 52,
                "lineEnd": 662,
                "bodyLineStart": 52,
                "language": "java",
                "sourceCode": "/** @version $Id: ConfigOptionListeners.java 5186 2010-03-03 00:14:02Z fro21888 $ */\npublic class ConfigOptionListeners implements OptionConstants {\n  public static class DisplayAllCompilerVersionsListener implements OptionListener<Boolean>, OptionConstants {\n    protected JFrame _parent;\n    public DisplayAllCompilerVersionsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<Boolean> oe) {\n      JOptionPane.showMessageDialog(_parent, \"You will have to restart DrJava before the change takes effect.\");\n    }\n  }\n  \n  public static class SlaveJVMArgsListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public SlaveJVMArgsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n//      final OptionListener<String> slaveJvmArgsListener = this;\n      DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, this);\n      if (!oe.value.equals(\"\")) {\n        int result = JOptionPane.\n          showConfirmDialog(_parent,\n                            \"Specifying Interations JVM Args is an advanced option. Invalid arguments may cause\\n\" +\n                            \"the Interactions Pane to stop working.\\n\" + \"Are you sure you want to set this option?\\n\" +\n                            \"(You will have to reset the interactions pane before changes take effect.)\",\n                            \"Confirm Interactions JVM Arguments\", JOptionPane.YES_NO_OPTION);\n        if (result!=JOptionPane.YES_OPTION) {\n          DrJava.getConfig().setSetting(oe.option, \"\");\n        }\n        else {\n          sanitizeSlaveJVMArgs(_parent, oe.value, this);\n        }\n      }\n      DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, this);\n    }\n  }\n\n  @SuppressWarnings(\"fallthrough\")\n  public static void sanitizeSlaveJVMArgs(JFrame parent,\n                                          String value,\n                                          final OptionListener<String> l) {\n    int pos = value.indexOf(\"-Xmx\");\n    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||\n        (pos == 0)) {\n      int endpos = pos+(\"-Xmx\".length());\n      while(endpos<value.length() && (! Character.isWhitespace(value.charAt(endpos)))) {\n        ++endpos;\n      }\n      \n      int startpos = pos+(\"-Xmx\".length());\n      String size = value.substring(startpos,endpos);\n      long factor = 1;\n      long heapSize;\n      switch(size.toLowerCase().charAt(size.length()-1)) {\n        case 'g': {\n          factor *= 1024; // fall-through intended\n        }\n        case 'm': {\n          factor *= 1024; // fall-through intended\n        }\n        case 'k': {\n          factor *= 1024; // fall-through intended\n          break;\n        }\n        default: {\n          if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1))) factor = 0;\n        }\n      }\n      try {\n        if (factor == 1)  heapSize = new Long(size);\n        else if (factor > 1) heapSize = new Long(size.substring(0,size.length()-1)) * factor;\n        else heapSize = -1;\n      }\n      catch(NumberFormatException nfe) { heapSize = -1; /* invalid */ }\n      long heapSizeMB = (heapSize / 1024) / 1024;\n      // find the next bigger of the choices\n      String newSetting = getNextBiggerHeapSize(heapSizeMB);\n      int result;\n      if (heapSize >= 0) {\n        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\", \"Clean \\\"Slave JVM Args\\\"\", \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\" + \n                           \"Would you like to copy the value \\\"\" + newSetting + \"\\\" into the \\\"Maximum Heap\\\" setting,\\n\" + \n                           \"just clean up \\\"JVM Args for Interactions JVM\\\", or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n      }\n      else {\n        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\",\n          \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\" + \n                           \"Furthermore, the specified heap size \\\"\" + size + \"\\\" is invalid.\\n\" + \n                           \"Would you like to clean up the \\\"JVM Args for Interactions JVM\\\"\\n\" + \n                           \"or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result==1) { result = 2; }\n      }\n      if (result!=2) {\n        // clean up\n        while((endpos<value.length()) &&\n              (Character.isWhitespace(value.charAt(endpos)))) {\n          ++endpos;\n        }\n        String newValue = value.substring(0,pos) + value.substring(endpos);\n        DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, l);\n        DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, new OptionListener<String>() {\n          public void optionChanged(OptionEvent<String> oe) {\n            DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, this);\n            EventQueue.invokeLater(new Runnable() { \n              public void run() { DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, l); }\n            });\n          }\n        });\n        DrJava.getConfig().setSetting(SLAVE_JVM_ARGS, newValue);\n        if (result == 0) {\n          // copy\n          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, newSetting);\n        }\n        else {\n          JOptionPane.showMessageDialog(parent,\n                                        \"You will have to reset the interactions pane before changes take effect.\");\n        }\n      }\n    }\n  }\n  \n  public static class SlaveJVMXMXListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public SlaveJVMXMXListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      DrJava.getConfig().removeOptionListener(SLAVE_JVM_XMX, this);\n      sanitizeSlaveJVMXMX(_parent, oe.value);\n      DrJava.getConfig().addOptionListener(SLAVE_JVM_XMX, this);\n      JOptionPane.showMessageDialog(_parent,\n                                    \"You will have to reset the interactions pane before changes take effect.\");\n    }\n\t/** Returns the currently shown error panel if there is one. Otherwise returns null. \n\t * @param mainFrame TODO*/\n\t  public CompilerErrorPanel getSelectedCompilerErrorPanel(MainFrame mainFrame) {\n\t    Component c = mainFrame._tabbedPane.getSelectedComponent();\n\t    if (c instanceof CompilerErrorPanel) return (CompilerErrorPanel) c;\n\t    return null;\n\t  }\n  }\n  \n  public static void sanitizeSlaveJVMXMX(JFrame parent, String value) {\n    if ((!value.equals(\"\")) &&\n        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {\n      long heapSize;\n      String size = value.trim();\n      try {\n        heapSize = new Long(size);\n      }\n      catch(NumberFormatException nfe) {\n        heapSize = -1; // invalid\n      }\n      if (heapSize < 0) {\n        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",\n          \"Ignore\" };\n        int result = JOptionPane.\n          showOptionDialog(parent,\n                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + \n                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",\n                           \"Invalid Maximum Heap Size\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result == 0) {\n          // clean up\n          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n      else if (heapSize > 0) {\n        if (!checkHeapSize(heapSize)) {\n          JOptionPane.\n            showMessageDialog(parent,\n                              \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting is too big: \\\"\" + size + \"\\\"\\n\" + \n                              \"DrJava has reset the heap size to the default. You should choose something smaller.\",\n                              \"Maximum Heap Size Too Big\",\n                              JOptionPane.ERROR_MESSAGE);\n          // clean up\n          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n    }\n  }\n  \n  /** Return the next bigger heap size setting. */\n  static String getNextBiggerHeapSize(long heapSizeMB) {\n    String newSetting = OptionConstants.heapSizeChoices.get(0);\n    for(int i=1; i < OptionConstants.heapSizeChoices.size(); ++i) {\n      try {\n        newSetting = OptionConstants.heapSizeChoices.get(i);\n        float choice = new Float(newSetting);\n        if (choice>=heapSizeMB) {\n          return newSetting;\n        }\n      }\n      catch(NumberFormatException nfe) {\n        return OptionConstants.heapSizeChoices.get(0);\n      }\n    }\n    return newSetting;\n  }\n  \n  public static class MasterJVMArgsListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public MasterJVMArgsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);\n//      final OptionListener<String> masterJvmArgsListener = this;\n      if (!oe.value.equals(\"\")) {\n        int result = JOptionPane.\n          showConfirmDialog(_parent,\n                            \"Specifying Main JVM Args is an advanced option. Invalid arguments may cause\\n\" +\n                            \"DrJava to fail on start up.  You may need to edit or delete your .drjava preferences file\\n\" +\n                            \"to recover.\\n Are you sure you want to set this option?\\n\" +\n                            \"(You will have to restart Drjava before changes take effect.)\",\n                            \"Confirm Main JVM Arguments\", JOptionPane.YES_NO_OPTION);\n        if (result!=JOptionPane.YES_OPTION) {\n          DrJava.getConfig().setSetting(oe.option, \"\");\n        }\n        else {\n          sanitizeMasterJVMArgs(_parent, oe.value, this);\n        }\n      }\n      DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, this);\n    }\n  }\n  \n  @SuppressWarnings(\"fallthrough\")\n  public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l) {\n    int pos = value.indexOf(\"-Xmx\");\n    if ((pos > 1 && Character.isWhitespace(value.charAt(pos-1))) || pos == 0) {\n      int endpos = pos+(\"-Xmx\".length());\n      while((endpos<value.length()) &&\n            (!Character.isWhitespace(value.charAt(endpos)))) {\n        ++endpos;\n      }\n      \n      int startpos = pos+(\"-Xmx\".length());\n      String size = value.substring(startpos,endpos);\n      long factor = 1;\n      long heapSize;\n      switch(size.toLowerCase().charAt(size.length()-1)) {\n        case 'g': { factor *= 1024; /* fall-through intended */ }\n        case 'm': { factor *= 1024; /* fall-through intended */ }\n        case 'k': {\n          factor *= 1024; /* fall-through intended */\n          break;\n        }\n        default: { if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1)))  factor = 0; }\n      }\n      try {\n        if (factor==1)  heapSize = new Long(size);\n        else if (factor>1)  heapSize = new Long(size.substring(0,size.length()-1)) * factor;\n        else  heapSize = -1;\n      }\n      catch(NumberFormatException nfe) { heapSize = -1; /* invalid */ }\n      long heapSizeMB = (heapSize / 1024) / 1024;\n      \n      // find the next bigger of the choices\n      String newSetting = getNextBiggerHeapSize(heapSizeMB);\n      int result;\n      if (heapSize >= 0) {\n        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\", \"Clean \\\"Master JVM Args\\\"\", \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\" + \n                           \"Would you like to copy the value \\\"\" + newSetting + \"\\\" into the \\\"Maximum Heap\\\" setting,\\n\" + \n                           \"just clean up \\\"JVM Args for Main JVM\\\", or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n      }\n      else {\n        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\", \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\" + \n                           \"Furthermore, the specified heap size \\\"\" + size + \"\\\" is invalid.\\n\" + \n                           \"Would you like to clean up the \\\"JVM Args for Main JVM\\\"\\n\" + \n                           \"or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result==1) { result = 2; }\n      }\n      if (result!=2) {\n        // clean up\n        while(endpos<value.length() && Character.isWhitespace(value.charAt(endpos))) ++endpos;\n\n        String newValue = value.substring(0,pos) + value.substring(endpos);\n        DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, l);\n        DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, new OptionListener<String>() {\n          public void optionChanged(OptionEvent<String> oe) {\n            DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);\n            EventQueue.invokeLater(new Runnable() { \n              public void run() { DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, l); }\n            });\n          }\n        });\n        DrJava.getConfig().setSetting(MASTER_JVM_ARGS, newValue);\n        if (result == 0) DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);   // copy\n        else JOptionPane.showMessageDialog(parent, \"You will have to restart DrJava before the change takes effect.\");\n      }\n    }\n  }\n  \n  public static class MasterJVMXMXListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public MasterJVMXMXListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      DrJava.getConfig().removeOptionListener(MASTER_JVM_XMX, this);\n      sanitizeMasterJVMXMX(_parent, oe.value);\n      JOptionPane.showMessageDialog(_parent, \"You will have to restart DrJava before the change takes effect.\");\n      DrJava.getConfig().addOptionListener(MASTER_JVM_XMX, this);\n    }\n  }\n  \n  public static void sanitizeMasterJVMXMX(JFrame parent, String value) {\n    if ((!value.equals(\"\")) &&\n        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {\n      String size = value.trim();\n      long heapSize;\n      try {\n        heapSize = new Long(size);\n      }\n      catch(NumberFormatException nfe) {\n        heapSize = -1; // invalid\n      }\n      if (heapSize < 0) {\n        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",\n          \"Ignore\" };\n        int result = JOptionPane.\n          showOptionDialog(parent,\n                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + \n                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",\n                           \"Invalid Maximum Heap Size\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result == 0) {\n          // clean up\n          DrJava.getConfig().setSetting(MASTER_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n      else if (heapSize > 0) {\n        if (!checkHeapSize(heapSize)) {\n          JOptionPane.\n            showMessageDialog(parent,\n                              \"The \\\"Maximum Heap Memory for Main JVM\\\" setting is too big: \\\"\" + size + \"\\\"\\n\" + \n                              \"DrJava has reset the heap size to the default. You should choose something smaller.\",\n                              \"Maximum Heap Size Too Big\",\n                              JOptionPane.ERROR_MESSAGE);\n          // clean up\n          DrJava.getConfig().setSetting(MASTER_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n    }\n  }\n  \n  /** @return true if a JVM can be created with the specified heap size (in MB) */\n  public static boolean checkHeapSize(long heapSize) {\n    int exitValue = 1;\n    try {\n      JVMBuilder jvmb = JVMBuilder.DEFAULT.jvmArguments(\"-Xmx\"+heapSize+\"M\");\n      Process p = jvmb.start(MemoryCheckDummy.class.getName());\n      exitValue = p.waitFor();\n    }\n    catch(java.io.IOException e) { exitValue = 1; }\n    catch(InterruptedException e) { exitValue = 1; }\n    return (exitValue==0);\n  }\n  \n  /** Class that gets executed to check if the selected heap size is possible. */\n  public static class MemoryCheckDummy {\n    public static void main(String[] args) {\n      final StringBuilder sb = new StringBuilder(\"DrJava Version : \");\n      sb.append(edu.rice.cs.drjava.Version.getVersionString());\n      sb.append(\"\\nDrJava Build Time: \");\n      sb.append(edu.rice.cs.drjava.Version.getBuildTimeString());\n      sb.append(\"\\n\\nUsed memory: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory()));\n      sb.append(\"\\nFree memory: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().freeMemory()));\n      sb.append(\"\\nTotal memory: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()));\n      sb.append(\"\\nTotal memory can expand to: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().maxMemory()));\n      System.out.println(sb.toString());\n      System.exit(0);\n    }\n  }\n  \n  public static class JavadocCustomParamsListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public JavadocCustomParamsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      sanitizeJavadocCustomParams(_parent, oe.value);\n    }\n  }\n  \n  public static void sanitizeJavadocCustomParams(JFrame parent,\n                                                 String value) {\n    boolean containsPrivate = (value.indexOf(\"-private\") >= 0);\n    boolean containsProtected = (value.indexOf(\"-protected\") >= 0);\n    boolean containsPublic = (value.indexOf(\"-public\") >= 0);\n    boolean containsPackage = (value.indexOf(\"-package\") >= 0);\n\n    if (containsPrivate || containsProtected || containsPublic || containsPackage) {\n      StringBuilder sb = new StringBuilder();\n      if (containsPublic) { sb.append(\"-public \"); }\n      if (containsProtected) { sb.append(\"-protected \"); }\n      if (containsPrivate) { sb.append(\"-private \"); }\n      if (containsPackage) { sb.append(\"-package \"); }      \n      String[] options = new String[] { \"Copy to \\\"Access Level\\\" Setting\",\n        \"Clean \\\"Custom Javadoc Parameters\\\"\",\n        \"Ignore\" };\n      int result = JOptionPane.\n        showOptionDialog(parent,\n                         \"You seem to have specified \" + sb.toString() + \"as part of the\\n\" +\n                         \"\\\"Custom Javadoc Parameters\\\" setting. The \\\"Access Level\\\"\\n\" + \n                         \"setting should be used instead. Would you like to copy the\\n\" + \n                         \"parameter into the \\\"Access Level\\\" setting, just clean up\\n\" + \n                         \"\\\"Custom Javadoc Parameters\\\", or ignore this potential problem?\",\n                         \"Access Level Set in Custom Javadoc Parameters\",\n                         0,\n                         JOptionPane.QUESTION_MESSAGE,\n                         null,\n                         options,\n                         options[0]);\n      if (result!=2) {\n        if (result == 0) {\n          // copy\n          if (containsPublic) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"public\"); }\n          else if (containsProtected) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"protected\"); }\n          else if (containsPrivate) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"private\"); }\n          else if (containsPackage) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"package\"); }\n        }\n        // clean up\n        String[] params = value.split(\"(-private|-protected|-package|-public)\");\n        sb = new StringBuilder();\n        for(int i = 0; i < params.length; i++){\n          if(!params[i].trim().equals(\"\")) { sb.append(params[i].trim()); sb.append(' '); }\n        }\n        DrJava.getConfig().setSetting(JAVADOC_CUSTOM_PARAMS, sb.toString().trim());\n      }\n    }\n  }\n  \n  public static class LookAndFeelListener implements OptionListener<String> {\n    protected JFrame _parent;\n    public LookAndFeelListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n//        try {\n//          UIManager.setLookAndFeel(oe.value);\n//          SwingUtilities.updateComponentTreeUI(MainFrame.this);\n//          if (_debugPanel != null) {\n//            SwingUtilities.updateComponentTreeUI(_debugPanel);\n//          }\n//          if (_configFrame != null) {\n//            SwingUtilities.updateComponentTreeUI(_configFrame);\n//          }\n//          if (_helpFrame != null) {\n//            SwingUtilities.updateComponentTreeUI(_helpFrame);\n//          }\n//          if (_aboutDialog != null) {\n//            SwingUtilities.updateComponentTreeUI(_aboutDialog);\n//          }\n//          SwingUtilities.updateComponentTreeUI(_navPanePopupMenu);\n//          SwingUtilities.updateComponentTreeUI(_interactionsPanePopupMenu);\n//          SwingUtilities.updateComponentTreeUI(_consolePanePopupMenu);\n//          SwingUtilities.updateComponentTreeUI(_openChooser);\n//          SwingUtilities.updateComponentTreeUI(_saveChooser);\n//          Iterator<TabbedPanel> it = _tabs.iterator();\n//          while (it.hasNext()) {\n//            SwingUtilities.updateComponentTreeUI(it.next());\n//          }\n//        }\n//        catch (Exception ex) {\n//          _showError(ex, \"Could Not Set Look and Feel\",\n//                     \"An error occurred while trying to set the look and feel.\");\n//        }\n      \n      String title = \"Apply Look and Feel\";\n      String msg = \"Look and feel changes will take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_LAF).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_LAF, Boolean.FALSE);\n        }\n      }\n    }\n  }\n  \n  public static class PlasticThemeListener implements OptionListener<String> {\n    protected JFrame _parent;\n    public PlasticThemeListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      String title = \"Apply Theme\";\n      String msg = \"Changes to the theme will take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_THEME).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_THEME, Boolean.FALSE);\n        }\n      }\n    }\n  }  \n  \n  public static class RequiresDrJavaRestartListener<T> implements OptionListener<T> {\n    protected JFrame _parent;\n    protected String _description;\n    public RequiresDrJavaRestartListener(JFrame parent, String description) {\n      _parent = parent;\n      _description = description;\n    }\n    public void optionChanged(OptionEvent<T> oe) {      \n      String title = \"Apply Preference Changes\";\n      String msg = \"Changes to the '\"+_description+\"' preferences\\nwill only take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_MISC).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_MISC, Boolean.FALSE);\n        }\n      }\n    }\n  }\n\n  public static class RequiresInteractionsRestartListener<T> implements OptionListener<T> {\n    protected JFrame _parent;\n    protected String _description;\n    public RequiresInteractionsRestartListener(JFrame parent, String description) {\n      _parent = parent;\n      _description = description;\n    }\n    public void optionChanged(OptionEvent<T> oe) {\n      String title = \"Apply Preference Changes\";\n      String msg = \"Changes to the '\"+_description+\"' preferences\\nwill only take effect when you reset the Interactions Pane.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_INTERACTIONS).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_INTERACTIONS, Boolean.FALSE);\n        }\n      }\n    }\n  }\n  \n   public static class DefaultCompilerListener implements OptionListener<String> {\n    protected JFrame _parent;\n    public DefaultCompilerListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {      \n      String title = \"Apply Default Compiler Preference Change\";\n      String msg = \"Default Compiler Preference will take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_DCP).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_DCP, Boolean.FALSE);\n        }\n      }\n    }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 5,
                "candidates": [
                    {
                        "lineStart": 85,
                        "lineEnd": 188,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method deals with JVM arguments and settings, which are likely part of the configuration setup for the DrJava application. Moving it to DrJavaPropertySetup aligns it with the management of application properties.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 296,
                        "lineEnd": 383,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method sanitizeMasterJVMArgs deals with JVM arguments and settings, which are likely part of the configuration setup for the DrJava application. DrJavaPropertySetup is a suitable class for managing such properties.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 481,
                        "lineEnd": 527,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method deals with Javadoc parameters and settings, which are likely part of the configuration setup for the DrJava application. Moving it to DrJavaPropertySetup aligns it with the management of application properties.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 440,
                        "lineEnd": 451,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method checkHeapSize() is related to configuring the Java Virtual Machine (JVM) settings, which aligns with the responsibilities of DrJavaPropertySetup in managing properties related to the DrJava environment.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 253,
                        "lineEnd": 269,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.OptionConstants\nRationale: The method getNextBiggerHeapSize() directly interacts with OptionConstants.heapSizeChoices, making it logical to move this method to the OptionConstants class, which likely manages various option settings.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 15011
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "sanitizeSlaveJVMArgs",
                            "method_signature": "public static void sanitizeSlaveJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMSettings",
                            "rationale": "The method sanitizeSlaveJVMArgs is responsible for validating and sanitizing JVM arguments, which is more related to JVM configuration than to the ConfigOptionListeners class."
                        },
                        {
                            "method_name": "sanitizeMasterJVMArgs",
                            "method_signature": "public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMSettings",
                            "rationale": "Similar to sanitizeSlaveJVMArgs, this method deals with the validation and sanitization of master JVM arguments, making it more suitable for a dedicated JVM settings class."
                        },
                        {
                            "method_name": "sanitizeJavadocCustomParams",
                            "method_signature": "public static void sanitizeJavadocCustomParams(JFrame parent, String value)",
                            "target_class": "JavadocSettings",
                            "rationale": "This method is focused on sanitizing Javadoc parameters, which should be handled by a class specifically designed for Javadoc settings."
                        },
                        {
                            "method_name": "checkHeapSize",
                            "method_signature": "public static boolean checkHeapSize(long heapSize)",
                            "target_class": "JVMSettings",
                            "rationale": "The checkHeapSize method is concerned with validating heap sizes for JVM, which aligns with JVM configuration responsibilities."
                        },
                        {
                            "method_name": "getNextBiggerHeapSize",
                            "method_signature": "static String getNextBiggerHeapSize(long heapSizeMB)",
                            "target_class": "JVMSettings",
                            "rationale": "This method determines the next larger heap size, which is a concern of JVM settings and should be moved to a dedicated class for better organization."
                        }
                    ],
                    "llm_response_time": 5133
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "sanitizeSlaveJVMArgs",
                            "method_signature": "public static void sanitizeSlaveJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMArgumentSanitizer",
                            "rationale": "The method sanitizes JVM arguments and should be moved to a dedicated class that handles JVM argument validation and sanitization."
                        },
                        {
                            "method_name": "sanitizeMasterJVMArgs",
                            "method_signature": "public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMArgumentSanitizer",
                            "rationale": "Similar to sanitizeSlaveJVMArgs, this method also deals with sanitizing JVM arguments and should be part of a dedicated class for better organization."
                        },
                        {
                            "method_name": "sanitizeJavadocCustomParams",
                            "method_signature": "public static void sanitizeJavadocCustomParams(JFrame parent, String value)",
                            "target_class": "JavadocParameterSanitizer",
                            "rationale": "This method is responsible for sanitizing Javadoc parameters and should be moved to a dedicated class that handles Javadoc parameter validation."
                        },
                        {
                            "method_name": "checkHeapSize",
                            "method_signature": "public static boolean checkHeapSize(long heapSize)",
                            "target_class": "HeapSizeValidator",
                            "rationale": "This method checks if a JVM can be created with the specified heap size and should be moved to a dedicated class that handles heap size validation."
                        },
                        {
                            "method_name": "getNextBiggerHeapSize",
                            "method_signature": "static String getNextBiggerHeapSize(long heapSizeMB)",
                            "target_class": "HeapSizeCalculator",
                            "rationale": "This method calculates the next bigger heap size and should be moved to a dedicated class that focuses on heap size calculations."
                        }
                    ],
                    "llm_response_time": 4270
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "sanitizeSlaveJVMArgs",
                            "method_signature": "public static void sanitizeSlaveJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMArgumentSanitizer",
                            "rationale": "The method sanitizeSlaveJVMArgs is responsible for validating and sanitizing JVM arguments. It would be more appropriate to move this method to a dedicated class that handles JVM argument sanitization."
                        },
                        {
                            "method_name": "sanitizeMasterJVMArgs",
                            "method_signature": "public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMArgumentSanitizer",
                            "rationale": "Similar to sanitizeSlaveJVMArgs, this method deals with sanitizing master JVM arguments and should be moved to a dedicated class for better separation of concerns."
                        },
                        {
                            "method_name": "sanitizeJavadocCustomParams",
                            "method_signature": "public static void sanitizeJavadocCustomParams(JFrame parent, String value)",
                            "target_class": "JavadocParameterSanitizer",
                            "rationale": "This method is focused on sanitizing Javadoc parameters and should be moved to a dedicated class that handles Javadoc parameter validation."
                        },
                        {
                            "method_name": "checkHeapSize",
                            "method_signature": "public static boolean checkHeapSize(long heapSize)",
                            "target_class": "HeapSizeValidator",
                            "rationale": "The checkHeapSize method is responsible for validating heap sizes and should be moved to a dedicated class that focuses on heap size validation."
                        },
                        {
                            "method_name": "getNextBiggerHeapSize",
                            "method_signature": "static String getNextBiggerHeapSize(long heapSizeMB)",
                            "target_class": "HeapSizeCalculator",
                            "rationale": "This method calculates the next bigger heap size and should be moved to a dedicated class that handles heap size calculations."
                        }
                    ],
                    "llm_response_time": 4313
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "sanitizeSlaveJVMArgs",
                            "method_signature": "public static void sanitizeSlaveJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMSettings",
                            "rationale": "The method sanitizeSlaveJVMArgs is responsible for validating and sanitizing JVM arguments, which is more related to JVM configuration than to the ConfigOptionListeners class."
                        },
                        {
                            "method_name": "sanitizeMasterJVMArgs",
                            "method_signature": "public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l)",
                            "target_class": "JVMSettings",
                            "rationale": "Similar to sanitizeSlaveJVMArgs, this method deals with the validation and sanitization of master JVM arguments, making it more suitable for a dedicated JVM settings class."
                        },
                        {
                            "method_name": "sanitizeJavadocCustomParams",
                            "method_signature": "public static void sanitizeJavadocCustomParams(JFrame parent, String value)",
                            "target_class": "JavadocSettings",
                            "rationale": "This method is focused on sanitizing Javadoc parameters, which should be handled by a class specifically designed for Javadoc settings."
                        },
                        {
                            "method_name": "checkHeapSize",
                            "method_signature": "public static boolean checkHeapSize(long heapSize)",
                            "target_class": "JVMSettings",
                            "rationale": "The checkHeapSize method is concerned with validating heap sizes for JVM, which aligns with JVM configuration responsibilities."
                        },
                        {
                            "method_name": "getNextBiggerHeapSize",
                            "method_signature": "static String getNextBiggerHeapSize(long heapSizeMB)",
                            "target_class": "JVMSettings",
                            "rationale": "This method determines the next larger heap size, which is a concern of JVM settings and should be moved to a dedicated class for better organization."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "sanitizeSlaveJVMArgs",
                    "sanitizeMasterJVMArgs",
                    "sanitizeJavadocCustomParams",
                    "checkHeapSize",
                    "getNextBiggerHeapSize"
                ],
                "llm_response_time": 1202
            },
            "targetClassMap": {
                "sanitizeSlaveJVMArgs": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.5022101459204045
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.1307808376377743
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.41451333614483915
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.592418012171128
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.4035466178442546
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4933862433862434
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.3333059018776367
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6671687121218196
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3900890943467719
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.6080978781836597
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3461281218288633
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.6502387627621212
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.32948079029415284
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.5201543739723907
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3348781342647053
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3870111152784012
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.28005601680560194
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6799180487623075
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.6017460306229417
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.3610507445388753
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2883658559625699
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.5199401549558602
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.22059658062612805
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5291251279921817
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6649220756221502
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.3470653390787221
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6692324234232697
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5759873568351142
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5717547174692134
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.4592926511200384
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.5010907907239613
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6288096107582709
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.47331913943124887
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.36641405439646996
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.5031789634624948
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.54158686782656
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.41119969792768635
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5521568920593694
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5816495218751393
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.38018588439126494
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.43362666451534176
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.7820441990489998
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.55012528478634
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.4733360795504957
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.5883900140288104
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.36174523711294704
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.45552525800483057
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5857600500059299
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3640890911118309
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5543630041628614
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.43653188395191234
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.39293158532995354
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.5056998232295327
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.6086611075698954
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5678950849707911
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5658750210007698
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.24221879844735017
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.3603955979584714
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11074321899691639
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3615913429822787
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3615913429822787
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3615913429822787
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.28980029497627835
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.35864536204028274
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.31833650668318925
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.3516107215757399
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3512085593894638
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.28340443852253533
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.35050237358745495
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.34192771521937726
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.29160592175990213
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3708114661328734
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3503980090211551
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.29160592175990213
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.31104631654389564
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.33759782358136636
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.26636030162946683
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.2963555539297452
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.2457017552816338
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.23437252874355
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.3579757419679019
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.34363889494255956
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.3387946751716872
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3688921477798919
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.35444007304383374
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.1954693897510495
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3414903847838388
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.38281747344888717
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.38927456627585333
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.35345042397849036
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3318608823749688
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.285199818619858
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.16562108096584038
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.35916534917411935
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.3733350456661923
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.3439496209272696
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "OptionListener",
                        "ConfigProperty",
                        "OptionMapLoader",
                        "FileProperty",
                        "KeyStrokeOption",
                        "VectorOption",
                        "FileListProperty",
                        "RecursiveFileListProperty",
                        "PropertyMaps",
                        "DrJavaProperty",
                        "FontOption",
                        "OptionMapLoaderTest",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "UnaryOpProperty",
                        "BinaryOpProperty",
                        "ResourceBundleConfiguration",
                        "NonNegativeIntegerOptionTest",
                        "ForcedChoiceOptionTest",
                        "IntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "BooleanOptionTest",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "SavableConfigurationTest",
                        "VectorOptionTest",
                        "Option",
                        "DefaultOptionMap",
                        "ColorOption",
                        "MutableFileProperty",
                        "StringOptionTest",
                        "ConstantProperty",
                        "OptionParseException",
                        "DrJavaPropertySetupTest",
                        "JavaSystemProperty",
                        "FileOption",
                        "FileConfiguration",
                        "LongOption",
                        "NonNegativeIntegerOption",
                        "OptionParser",
                        "IntegerOption",
                        "ForcedChoiceOption",
                        "VariableProperty",
                        "SavableConfiguration",
                        "DrJavaActionProperty",
                        "BooleanOption",
                        "FontOptionTest",
                        "StringOption",
                        "OptionConstants",
                        "EagerProperty",
                        "OptionEvent",
                        "ParseStrategy",
                        "FormatStrategy",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1725,
                    "similarity_computation_time": 74,
                    "similarity_metric": "cosine"
                },
                "sanitizeMasterJVMArgs": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.5036068100151253
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.12626477539542125
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.4106249236109923
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.5790621630903761
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3974897106928899
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4725176380923566
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.32684412529506573
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6487458189086621
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.4060935245175548
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.5988376292379923
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.35675691512150237
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.6367170534596654
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3283426920334306
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.5208425457549641
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3331270104119959
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3800148462033265
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2837341062835794
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6662014268730657
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.6015946339763976
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.35266806873318435
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.29276097432369724
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.5005171276888538
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.21839989017608283
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5120398211088578
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6444646915934624
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.37335441479772663
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6457349760028682
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5760926656773234
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5790053200057741
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.453673404758043
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.4678705686396916
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6260815489060042
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.4638643394867804
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3679075652659514
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4800098953857396
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5215209974368137
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.4062951596394763
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5315303675105103
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5884657469541248
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3822825757962039
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.42908561296611514
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.7684323093680016
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.5351956620094132
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.46245535779186786
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.5773322041301183
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.36354532937191636
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.4615657983129302
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5922915436229222
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.36137882115332476
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5275838871068054
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.4409734737891263
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.38996445254774126
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.5077320200924531
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.5801088829639928
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5463016123732747
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5403270587738722
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.24854284261346934
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.37257747665498625
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.10180898296477446
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.36765331659255013
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.36765331659255013
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.36765331659255013
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.28621182947071916
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.370910133002362
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.32969575085118175
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.3663003408343088
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.35709646865510325
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.29157893363466303
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.3647111019577019
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.35003719645855197
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2655273953168417
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3798149698379113
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.363774037444954
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2655273953168417
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.2859525795719834
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.34583198446927543
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.27269468625979537
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.3018847082135045
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.2523902829218678
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.24006322097836216
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.3693532099578466
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3564569893828287
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.3485668418697244
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3712024875017097
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.3646901742929706
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.20021549265126143
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3542283375215077
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.38521502628496057
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.39183340853355986
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.3556640535152678
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.33748458042517016
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2906125602153213
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.1696424507246007
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.36556705446656623
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.3830297358916037
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.35820771952448077
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "OptionListener",
                        "ConfigProperty",
                        "FileProperty",
                        "OptionMapLoader",
                        "KeyStrokeOption",
                        "VectorOption",
                        "FileListProperty",
                        "DrJavaProperty",
                        "PropertyMaps",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "RecursiveFileListProperty",
                        "FontOption",
                        "BinaryOpProperty",
                        "OptionMapLoaderTest",
                        "UnaryOpProperty",
                        "ResourceBundleConfiguration",
                        "NonNegativeIntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "IntegerOptionTest",
                        "ForcedChoiceOptionTest",
                        "BooleanOptionTest",
                        "ColorOptionTest",
                        "SavableConfigurationTest",
                        "Option",
                        "LongOptionTest",
                        "VectorOptionTest",
                        "ColorOption",
                        "DefaultOptionMap",
                        "StringOptionTest",
                        "MutableFileProperty",
                        "OptionParseException",
                        "ConstantProperty",
                        "DrJavaPropertySetupTest",
                        "JavaSystemProperty",
                        "FileOption",
                        "FileConfiguration",
                        "OptionParser",
                        "LongOption",
                        "NonNegativeIntegerOption",
                        "ForcedChoiceOption",
                        "IntegerOption",
                        "OptionConstants",
                        "VariableProperty",
                        "SavableConfiguration",
                        "DrJavaActionProperty",
                        "BooleanOption",
                        "StringOption",
                        "FontOptionTest",
                        "EagerProperty",
                        "OptionEvent",
                        "FormatStrategy",
                        "ParseStrategy",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 3235,
                    "similarity_computation_time": 35,
                    "similarity_metric": "cosine"
                },
                "sanitizeJavadocCustomParams": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.43126917521980596
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11155309082447186
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.37377450982551835
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.57268049139608
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.35710265715535494
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.48996909082126894
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.3321848874067578
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6894690145192681
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.29362832555834695
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.589274007889287
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.2801922639636523
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.6139584005746497
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.37581990374627816
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.4627483463330917
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3136320405897705
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.35847349773203774
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2270571041406971
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.7190843653674144
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.5926486180243398
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.32563321434696096
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.23142373666655786
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.5109566453732676
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.21844531905252418
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5131788824590501
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6924890562486055
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.2619278775263332
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6541259264525706
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5442953163013639
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5247159586153981
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.4324965514216731
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.5270489516300568
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6446469152728517
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.44265719111951557
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3357992520529721
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4955264334128008
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5303781145110013
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.37233647384839474
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5426167427101986
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5346265740369874
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3202781984163613
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.4112146276000562
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.7429428680768505
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.5209194887357864
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.448230374206605
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.5466543872994377
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3243886306502387
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.4065419160552896
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5388982444329147
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.2912392068742611
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5522093890122737
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.31592984402762664
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.37425335333754806
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.47955514522623865
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.6292708392671622
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5424101360057683
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5642575021158952
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.20681039951560043
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.3713483312942951
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11496953551251148
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.37458353655796345
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.37458353655796345
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.37458353655796345
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.29363936385487877
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.3717491312509271
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3265602460854442
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.3545411484981936
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3638276933305353
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.2866863986308904
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.3644627435303294
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.36165155072368793
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.3121529471316362
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3891507013562561
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3659313329767786
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.3121529471316362
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.3229168418603133
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.3481450953231137
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.2657360678415704
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.30235547083375536
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.24123411199120048
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.2394482988564823
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.37208231925877766
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3519159253053053
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.35245439005751134
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.38836420285511375
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.35933845996047964
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.19970264051559242
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.35932984159469833
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.3940684781975636
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.4024348799842549
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.36383833120429426
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.34194642107142936
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.285668945035477
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.16920791145892175
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.36665771362870087
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.3885946740131833
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.349465174317924
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "ConfigProperty",
                        "KeyStrokeOption",
                        "FileProperty",
                        "OptionMapLoader",
                        "FileListProperty",
                        "RecursiveFileListProperty",
                        "VectorOption",
                        "DrJavaProperty",
                        "PropertyMaps",
                        "FontOption",
                        "NonNegativeIntegerOptionTest",
                        "ForcedChoiceOptionTest",
                        "OptionMapLoaderTest",
                        "UnaryOpProperty",
                        "IntegerOptionTest",
                        "ResourceBundleConfiguration",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "BooleanOptionTest",
                        "DefaultOptionMap",
                        "BinaryOpProperty",
                        "KeyStrokeOptionTest",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "VectorOptionTest",
                        "ColorOption",
                        "SavableConfigurationTest",
                        "MutableFileProperty",
                        "StringOptionTest",
                        "ConstantProperty",
                        "Option",
                        "JavaSystemProperty",
                        "OptionParseException",
                        "VariableProperty",
                        "BooleanOption",
                        "LongOption",
                        "IntegerOption",
                        "NonNegativeIntegerOption",
                        "FileOption",
                        "FileConfiguration",
                        "SavableConfiguration",
                        "StringOption",
                        "EagerProperty",
                        "ForcedChoiceOption",
                        "DrJavaActionProperty",
                        "OptionEvent",
                        "OptionParser",
                        "FontOptionTest",
                        "OptionListener",
                        "DrJavaPropertySetupTest",
                        "ParseStrategy",
                        "FormatStrategy",
                        "OptionConstants",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1075,
                    "similarity_computation_time": 18,
                    "similarity_metric": "cosine"
                },
                "checkHeapSize": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.39120595879235354
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11868931087888489
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3667543418508897
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.4746750703974286
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3602775422804802
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4856238539211126
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.3758340350425746
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6515394518080068
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3112420908990512
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.5312582409410521
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.28934086078211235
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.5541104161101753
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.32288829996897417
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.45620035056196956
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.34558827067302966
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3562626515972127
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.22390553775994956
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6498724382992573
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.5384857445549427
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.32203747293023505
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2175970699446223
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.49157757399657115
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.2279211529192759
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.4349604158445194
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5026347052584254
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.582335495405328
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.3520700814260412
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.5962020483436553
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5656449322551804
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5265134668779847
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.42357954248770385
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.46261771638703103
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6180498074239881
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.42145591476476446
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.35557950110937975
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.513707393708107
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5102624443640013
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.36887052626510813
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5220368976638744
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5308180361709335
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3054448640892811
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.42358687104367887
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.6111478939131373
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.5157457641880903
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.48524366066821706
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.531334722112013
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3344849253542769
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.4735752231884302
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5317108279430159
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.30048021306698885
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5221166705785193
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.2255986756016621
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.370366148398511
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.5416037115563531
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.5793204503533727
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.4937634612372659
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5390519482441095
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.24831222786326923
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.3235765894610792
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.09296647613532098
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3394514291136108
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3394514291136108
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3394514291136108
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.27247463045653303
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.33540102562855695
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.29791678788934267
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.33701971188265994
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3297043740550192
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.2678222129683647
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.33501365726001897
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3271119466578582
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.26111648393354675
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3473227352427738
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3324007413453537
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.26111648393354675
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.26111648393354675
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.35428311972999765
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.3337891536756912
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.3103401918899219
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.28961646905374744
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.24945589327939088
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.2151358759909815
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.33590241436966206
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3194437129996473
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.31491832864888675
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.3228529696391083
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.17942579968289865
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.33040347578663
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.350033298449319
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.36563621206356534
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.32318121905169506
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3098753415048175
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2759132637573981
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.15202735801492656
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3266372899592439
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.34913864913011416
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.3147315304839234
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "JavaSystemProperty",
                        "FileProperty",
                        "ConfigProperty",
                        "FileListProperty",
                        "OptionMapLoader",
                        "KeyStrokeOption",
                        "RecursiveFileListProperty",
                        "UnaryOpProperty",
                        "VectorOption",
                        "SavableConfigurationTest",
                        "NonNegativeIntegerOptionTest",
                        "DrJavaProperty",
                        "QuaternaryOpProperty",
                        "OptionMapLoaderTest",
                        "PropertyMaps",
                        "TernaryOpProperty",
                        "BinaryOpProperty",
                        "ForcedChoiceOptionTest",
                        "IntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "VectorOptionTest",
                        "BooleanOptionTest",
                        "ColorOptionTest",
                        "ResourceBundleConfiguration",
                        "LongOptionTest",
                        "ColorOption",
                        "MutableFileProperty",
                        "FontOption",
                        "OptionParseException",
                        "DefaultOptionMap",
                        "Configuration",
                        "ClassPathOption",
                        "ConstantProperty",
                        "StringOptionTest",
                        "Option",
                        "OptionEvent",
                        "NonNegativeIntegerOption",
                        "FileConfiguration",
                        "FileOption",
                        "LongOption",
                        "IntegerOption",
                        "VariableProperty",
                        "OptionConstants",
                        "EagerProperty",
                        "BooleanOption",
                        "DrJavaActionProperty",
                        "ForcedChoiceOption",
                        "StringOption",
                        "SavableConfiguration",
                        "FontOptionTest",
                        "OptionParser",
                        "ParseStrategy",
                        "FormatStrategy",
                        "OptionListener",
                        "RecursiveFileListPropertyTest",
                        "DrJavaPropertySetupTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1138,
                    "similarity_computation_time": 13,
                    "similarity_metric": "cosine"
                },
                "getNextBiggerHeapSize": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.42755487470184383
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11716404227796842
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.4533304253811686
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.5288715145201525
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.39811302879679994
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.5637345210021216
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.32735666148146897
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.70182900531698
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.38750156233455285
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.589744836269383
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.38382692718851086
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.5663054231459933
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3615945316606385
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.5078046052654189
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.48360418509577147
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.39964129940203186
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.25260359118026904
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6656382996339169
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.6067769773699201
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.3339275108696662
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.24548656477288622
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.515624921321887
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.24106302110709238
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.44495682619913596
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5192533040339872
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6379621767340855
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.2969351293014861
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6063258530211526
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.6189489581863588
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5405620211111191
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.5437301576257939
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.6148626653124584
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6536863817332982
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.43947867492679543
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.37608211297324684
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4781283006928457
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5352238316928125
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.4217724268329625
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5475742762157305
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5438253264854712
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3670409764295107
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.4181433837626493
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.6345955452883616
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.4811869805638256
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.4922748066044886
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.4958570554574397
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.4344558965419409
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.43872826378089297
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.544046318046072
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3019155250235218
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.564584941687748
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.1502213574582511
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.39172135409636205
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.47834460310746046
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.6547518942759106
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5967118742300536
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.574205911039682
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.230471083707187
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.39699135025640464
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.10925210715205451
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3958470856962791
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3958470856962791
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3958470856962791
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.28818543935741636
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.38577991572865217
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3509007870361994
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.37521281224481456
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3844806779921202
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.30183950348998506
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.37830769686996607
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3736509777126882
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.30685820596610774
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3967372055079601
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3778522462322105
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.30685820596610774
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.30685820596610774
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.4441019053226951
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.3796795169991607
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.27704180984252297
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.33481015250715046
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.2595142115495482
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.2507589721301414
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.3857222040145296
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3757861151199216
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.36083279807468976
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.3761941973155936
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.20913587236374473
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3734366130765737
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.4085143369505323
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.42539056009055665
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.37717600582758154
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3613572969308877
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2918223432663729
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.17720068238680045
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.38090403580779264
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.40388893488073907
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.36378903996483264
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OptionConstants",
                        "Configuration",
                        "FileProperty",
                        "ConfigProperty",
                        "RecursiveFileListProperty",
                        "FileListProperty",
                        "KeyStrokeOption",
                        "DrJavaPropertySetup",
                        "UnaryOpProperty",
                        "DefaultOptionMap",
                        "DrJavaProperty",
                        "OptionMapLoader",
                        "ResourceBundleConfiguration",
                        "PropertyMaps",
                        "NonNegativeIntegerOptionTest",
                        "VectorOption",
                        "ForcedChoiceOptionTest",
                        "ColorOption",
                        "IntegerOptionTest",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "ConstantProperty",
                        "BinaryOpProperty",
                        "BooleanOptionTest",
                        "FontOption",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "OptionMapLoaderTest",
                        "MutableFileProperty",
                        "EagerProperty",
                        "KeyStrokeOptionTest",
                        "SavableConfigurationTest",
                        "VectorOptionTest",
                        "FileOption",
                        "ClassPathOption",
                        "StringOptionTest",
                        "OptionParseException",
                        "DrJavaActionProperty",
                        "Option",
                        "FileConfiguration",
                        "JavaSystemProperty",
                        "IntegerOption",
                        "LongOption",
                        "BooleanOption",
                        "VariableProperty",
                        "NonNegativeIntegerOption",
                        "OptionParser",
                        "StringOption",
                        "SavableConfiguration",
                        "ForcedChoiceOption",
                        "FontOptionTest",
                        "OptionEvent",
                        "ParseStrategy",
                        "FormatStrategy",
                        "OptionListener",
                        "RecursiveFileListPropertyTest",
                        "DrJavaPropertySetupTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1123,
                    "similarity_computation_time": 12,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.DJError::getPosition(DJError):Position need move to edu.rice.cs.drjava.model.compiler.CompilerErrorModel",
        "class_name": "edu.rice.cs.drjava.model.DJError",
        "telemetry": {
            "id": "904041ae-f2ce-4274-ba5d-1a690209cab0",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 160,
                "lineStart": 50,
                "lineEnd": 209,
                "bodyLineStart": 50,
                "language": "java",
                "sourceCode": "/** A class to represent source errors and warnings generated by the compiler, JUnit, etc.  This class enables DrJava\n  * to highlight the error text.\n  * @version $Id: DJError.java 5175 2010-01-20 08:46:32Z mgricken $\n  */\npublic class DJError implements Comparable<DJError>, Serializable {\n  private File _file;\n  \n  /** zero-based line number. */\n  private int _lineNumber;\n  \n  /** zero-based column number. */\n  private final int _startColumn;\n  private final String _message;\n  private final boolean _isWarning;\n  \n  /** This boolean is true when the DJError does not have a location (lineNumber is -1). */\n  private boolean _noLocation;\n  \n  /** Constructor.\n    * @param     file the file where the error occurred\n    * @param     lineNumber the line number of the error\n    * @param     startColumn the starting column of the error\n    * @param     message  the error message\n    */\n  public DJError(File file, int lineNumber, int startColumn, String message, boolean isWarning) {\n//    System.err.println(\"instance of DJError (or subclass) constructed; file = \" + file + \"; message = \" + message);\n    // need to precisely match the CompilerError message, otherwise a file name containing\n    // \"CompilerError\" may trigger an UnexpectedException (see bug 2872797)\n    if (message != null && message.startsWith(\"Compile exception: sun.tools.java.CompilerError\"))\n      throw new UnexpectedException(message);\n    _file = file;\n    _lineNumber = lineNumber;\n    _startColumn = startColumn;\n    _message = message;\n    _isWarning = isWarning;\n    if (lineNumber < 0) _noLocation = true;\n  }\n  \n  /** Constructor for an DJError with an associated file but no location in the source */\n  public DJError(File file, String message, boolean isWarning) { this(file, -1, -1, message, isWarning); }\n  \n  /** Constructor for CompilerErrors without files.\n    * @param message the error message\n    */\n  public DJError(String message, boolean isWarning) { this(null, message, isWarning); }\n  \n  /** This function returns true if and only if the given error has no location */\n  public boolean hasNoLocation() { return _noLocation; }\n  \n  /** Gets a String representation of the error. Abstract.\n    * @return the error as a String\n    */\n  public String toString() {\n    return this.getClass().toString() + \"(file=\" + fileName() + \", line=\" + _lineNumber + \", col=\" + _startColumn + \n      \", msg=\" + _message + \")\";\n  }\n  \n  /** Gets the file.\n    * @return the file with errors.\n    */\n  public File file() { return _file; }\n  \n  /** Gets the full name of the file.\n    * @return the file name.\n    */\n  public String fileName() {\n    if (_file == null) return \"\";\n    return _file.getAbsolutePath();\n  }\n  \n  /** Gets the zero-based line number of the error.  NOTE: javac/javadoc produces zero-based line numbers internally, \n    * but prints one-based line numbers to the command line.\n    * @return the zero-based line number\n    */\n  public int lineNumber() { return  _lineNumber; }\n  \n  /** Sets the line number.\n    * @param ln line number\n    */\n  public void setLineNumber(int ln) { _lineNumber = ln; }\n  \n  /** Gets the column where the error begins.\n    * @return the starting column\n    */\n  public int startColumn() { return  _startColumn; }\n  \n  /** Gets the error message.\n    * @return the error message.\n    */\n  public String message() { return  _message; }\n  \n  /** This function returns a message telling the file this error is from appropriate to display to a user, indicating\n    * if there is no file associated with this error.\n    */\n  public String getFileMessage() {\n    if (_file == null || _file == FileOps.NULL_FILE) return \"(no associated file)\";\n    return fileName();\n  }\n  \n  /** This function returns a message telling the line this error is from appropriate to display to a user, indicating\n    * if there is no file associated with this error.  This is adjusted to show one-based numbers,\n    * since internally we store a zero-based index.\n    */\n  public String getLineMessage() {\n    if (_file == null || _file == FileOps.NULL_FILE || this._lineNumber < 0) return \"(no source location)\";\n    return \"\" + (_lineNumber + 1);\n  }\n  \n  /** Determines if the error is a warning.\n    * @return true if the error is a warning.\n    */\n  public boolean isWarning() { return  _isWarning; }\n  \n  /** Compares by file, then by line, then by column.  Errors without files are considered equal, but less than any \n    * errors with files.  Warnings are considered greater than errors when they are otherwise equal.\n    */\n  public int compareTo(DJError other) {\n    \n    // Determine if I have a file\n    if (_file != null) {\n      // \"this\" has a file\n      if (other.file() != null) {\n        // \"this\" and other have files; compare them\n        int fileComp = _file.compareTo(other.file());\n        if (fileComp != 0) return fileComp;\n        // This and other have equal files; compare positions\n        return compareByPosition(other);\n      }\n      else return 1; // Other has no file so \"this\" is bigger   \n    }\n    // \"this\" has no file\n    if (other.file() != null) return -1; // Other has a file so \"this\" is smaller\n    // Neither error has a file\n//    boolean otherWarning = other.isWarning();\n    return compareErrorWarning(other);\n  }\n  \n  /** Compares this error's postion with other error's, based first on line number, then by column. */\n  private int compareByPosition(DJError other) {\n    // Compare by line unless lines are equal\n    int byLine = _lineNumber - other.lineNumber();\n    if (byLine != 0) return byLine;\n    \n    int byCol = _startColumn - other.startColumn();\n    if (byCol != 0) return byCol;\n    return compareErrorWarning(other);\n  }\n  \n  /** Compare otherwise equal errors. */\n  private int compareErrorWarning(DJError other) {\n    return (isWarning()? (other.isWarning()? 0 : 1) : (other.isWarning()? -1 : 0));\n  }\n\n/** Returns the position of the given error in the document representing its file. \n * @param compilerErrorModel TODO*/\n  public Position getPosition(CompilerErrorModel compilerErrorModel) {\n    int spot = Arrays.binarySearch(compilerErrorModel._errors, this);\n    return compilerErrorModel._positions[spot];\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 202,
                        "lineEnd": 207,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.compiler.CompilerErrorModel\nRationale: The method getPosition() directly interacts with the internal data structures of CompilerErrorModel, specifically accessing its _errors and _positions arrays. This indicates that it is closely related to the functionality of CompilerErrorModel, making it more appropriate for this method to reside within that class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 5080
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "getPosition",
                            "method_signature": "public Position getPosition(CompilerErrorModel compilerErrorModel)",
                            "target_class": "CompilerErrorModel",
                            "rationale": "The getPosition method directly interacts with the CompilerErrorModel class to retrieve positions based on errors. It would be more appropriate for this method to reside within the CompilerErrorModel class, as it pertains to the model's functionality."
                        }
                    ],
                    "llm_response_time": 1407
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "getPosition",
                            "method_signature": "public Position getPosition(CompilerErrorModel compilerErrorModel)",
                            "target_class": "CompilerErrorModel",
                            "rationale": "The getPosition method directly interacts with the CompilerErrorModel class to retrieve positions based on errors. It would be more appropriate for this method to reside within the CompilerErrorModel class, as it pertains to the model's functionality."
                        }
                    ],
                    "llm_response_time": 1128
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "getPosition",
                            "method_signature": "public Position getPosition(CompilerErrorModel compilerErrorModel)",
                            "target_class": "CompilerErrorModel",
                            "rationale": "The getPosition method directly interacts with the CompilerErrorModel class to retrieve positions based on errors. It would be more appropriate for this method to reside within the CompilerErrorModel class, as it pertains to the model's functionality."
                        }
                    ],
                    "llm_response_time": 1432
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "getPosition",
                            "method_signature": "public Position getPosition(CompilerErrorModel compilerErrorModel)",
                            "target_class": "CompilerErrorModel",
                            "rationale": "The getPosition method directly interacts with the CompilerErrorModel class to retrieve positions based on errors. It would be more appropriate for this method to reside within the CompilerErrorModel class, as it pertains to the model's functionality."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "getPosition"
                ],
                "llm_response_time": 1022
            },
            "targetClassMap": {
                "getPosition": {
                    "target_classes": [
                        {
                            "class_name": "CompilerErrorModel",
                            "similarity_score": 0.5413758900620727
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "CompilerErrorModel"
                    ],
                    "llm_response_time": 1712,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "- method edu.rice.cs.drjava.model.repl.newjvm.MainJVM::junitJVMReady():void need move to edu.rice.cs.drjava.model.junit.DefaultJUnitModel",
        "class_name": "edu.rice.cs.drjava.model.repl.newjvm.MainJVM",
        "telemetry": {
            "id": "e79fd165-26a8-4ab9-9b50-d5ebf5e9f828",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1037,
                "lineStart": 74,
                "lineEnd": 1110,
                "bodyLineStart": 74,
                "language": "java",
                "sourceCode": "/**\n * <p>Manages a remote JVM.  Includes methods for communication in both directions: MainJVMRemoteI\n * provides callbacks allowing the remote JVM to access the model, and a variety of delegating\n * methods wrap calls to the InterpreterJVMRemoteI methods, taking care of any RMI-related errors.\n * In the case of errors, these interpreter-delegating methods communicate the failure via the\n * return value.  (Note that it is impossible to guarantee success of these methods -- the remote\n * process may exit arbitrarily at any time -- and clients should behave gracefully when failures\n * occur.)</p>\n * \n * <p>The current design is flawed: strictly speaking, two sequential interpreter-delegating calls to\n * this object may communicate with <em>different</em> JVMs if the remote JVM happens to reset in\n * the interim.  A better design would return a separate object for interfacing with each unique remote\n * JVM.  In this way, clients would know that all calls to a certain object would be forwarded to\n * the same remote JVM.</p>\n * \n * @version $Id: MainJVM.java 5181 2010-02-24 16:53:27Z mgricken $\n */\npublic class MainJVM extends AbstractMasterJVM implements MainJVMRemoteI {\n  \n  /** Number of slave startup failures allowed before aborting the startup process. */\n  private static final int MAX_STARTUP_FAILURES = 3;\n  \n  /** Number of milliseconds to block while waiting for an InterpreterJVM stub. */\n  private static final int STARTUP_TIMEOUT = 10000;  \n  \n  /** Contains the current InterpreterJVM stub, or {@code null} if it is not running. */\n  private final StateMonitor<State> _state;\n  \n  /** Instance of inner class to handle interpret result. */\n  private final ResultHandler _handler = new ResultHandler();\n  \n  /** Listens to interactions-related events. */\n  private volatile InteractionsModelCallback _interactionsModel;\n  \n  /** Listens to JUnit-related events. */\n  private volatile JUnitModelCallback _junitModel;\n  \n  /** Listens to debug-related events */\n  private volatile DebugModelCallback _debugModel;\n  \n  \n  /* JVM execution options */\n  \n  /** Whether to allow \"assert\" statements to run in the remote JVM. */\n  private volatile boolean _allowAssertions = false;\n  \n  /** Class path to use for starting the interpreter JVM */\n  private volatile Iterable<File> _startupClassPath;\n  \n  /** Working directory for slave JVM */\n  private volatile File _workingDir;\n  \n  /** Creates a new MainJVM to interface to another JVM;  the MainJVM has a link to the partially initialized \n    * global model.  The MainJVM but does not automatically start the Interpreter JVM.  Callers must set the\n    * InteractionsModel and JUnitModel and then call startInterpreterJVM().\n    */\n  public MainJVM(File wd) {\n    super(InterpreterJVM.class.getName());\n    _workingDir = wd;\n    _interactionsModel = new DummyInteractionsModel();\n    _junitModel = new DummyJUnitModel();\n    _debugModel = new DummyDebugModel();\n    _state = new StateMonitor<State>(new FreshState());\n    _startupClassPath = ReflectUtil.SYSTEM_CLASS_PATH;\n  }\n  \n  \n  /*\n   * === Startup and shutdown methods ===\n   */\n  \n  /** Starts the interpreter if it's not running already. */\n  public void startInterpreterJVM() { _state.value().start(); }\n  \n  /**\n   * Stop the interpreter if it's current running.  (Note that, until {@link #startInterpreterJVM} is called\n   * again, all methods that delegate to the interpreter JVM will fail, returning \"false\" or \"none\".)\n   */\n  public void stopInterpreterJVM() { _state.value().stop(); }\n  \n  /**\n   * Get a \"fresh\" interpreter JVM.  Has the same effect as {@link #startInterpreterJVM} if no interpreter\n   * is running.  If a currently-running JVM is already \"fresh\", it is still stopped and restarted when\n   * {@code force} is true.\n   */\n  public void restartInterpreterJVM(boolean force) { _state.value().restart(force); }\n    \n  /**\n   * Stop the interpreter JVM, do not restart it, and terminate the RMI server associated with this object.\n   * May be useful when a number of different MainJVM objects are created (such as when running tests).\n   */\n  public void dispose() { _state.value().dispose(); }\n  \n  \n  /*\n   * === AbstractMasterJVM methods ===\n   */\n\n  /**\n   * Callback for when the slave JVM has connected, and the bidirectional communications link has been \n   * established.  Provides access to the newly-created slave JVM.\n   */\n  protected void handleSlaveConnected(SlaveRemote newSlave) {\n    InterpreterJVMRemoteI slaveCast = (InterpreterJVMRemoteI) newSlave;\n    _state.value().started(slaveCast);\n  }\n\n  /**\n   * Callback for when the slave JVM has quit.\n   * @param status The exit code returned by the slave JVM.\n   */\n  protected void handleSlaveQuit(int status) {\n    debug.logValue(\"Slave quit\", \"status\", status);\n    _state.value().stopped(status);\n  }\n    \n  /**\n   * Callback for when the slave JVM fails to either run or respond to {@link SlaveRemote#start}.\n   * @param e  Exception that occurred during startup.\n   */\n  protected void handleSlaveWontStart(Exception e) {\n    debug.log(\"Slave won't start\", e);\n    _state.value().startFailed(e);\n  }\n    \n  \n\n  /*\n   * === MainJVMRemoteI methods ===\n   */\n  \n  // TODO: export other objects, such as the interactionsModel, thus avoiding the need to delegate here?\n  \n  /** Forwards a call to System.err from InterpreterJVM to the local InteractionsModel.\n    * @param s String that was printed in the other JVM\n    */\n  public void systemErrPrint(String s) {\n    debug.logStart();\n    _interactionsModel.replSystemErrPrint(s);\n//    Utilities.clearEventQueue();               // wait for event queue task to complete\n    debug.logEnd();\n  }\n  \n  /** Forwards a call to System.out from InterpreterJVM to the local InteractionsModel.\n    * @param s String that was printed in the other JVM\n    */\n  public void systemOutPrint(String s) {\n    debug.logStart();\n    _interactionsModel.replSystemOutPrint(s); \n//    Utilities.clearEventQueue();                // wait for event queue task to complete\n    debug.logEnd();\n  }\n  \n  /** Asks the main jvm for input from the console.\n   * @return the console input\n   */\n  public String getConsoleInput() { \n    String s = _interactionsModel.getConsoleInput(); \n    // System.err.println(\"MainJVM.getConsoleInput() returns '\" + s + \"'\");\n    return s; \n  }\n \n  /** Called if JUnit is invoked on a non TestCase class.  Forwards from the other JVM to the local JUnit model.\n   * @param isTestAll whether or not it was a use of the test all button\n    * @param didCompileFail whether or not a compile before this JUnit attempt failed\n   */\n  public void nonTestCase(boolean isTestAll, boolean didCompileFail) {\n    _junitModel.nonTestCase(isTestAll, didCompileFail);\n  }\n \n  /** Called if the slave JVM encounters an illegal class file in testing.  Forwards from\n   * the other JVM to the local JUnit model.\n   * @param e the ClassFileError describing the error when loading the class file\n   */\n  public void classFileError(ClassFileError e) {\n    _junitModel.classFileError(e);\n  }\n  \n  /** Called to indicate that a suite of tests has started running.\n   * Forwards from the other JVM to the local JUnit model.\n   * @param numTests The number of tests in the suite to be run.\n   */\n  public void testSuiteStarted(int numTests) {\n    _junitModel.testSuiteStarted(numTests);\n  }\n\n  /** Called when a particular test is started.  Forwards from the slave JVM to the local JUnit model.\n   * @param testName The name of the test being started.\n   */\n  public void testStarted(String testName) {\n    _junitModel.testStarted(testName);\n  }\n \n  /** Called when a particular test has ended. Forwards from the other JVM to the local JUnit model.\n   * @param testName The name of the test that has ended.\n   * @param wasSuccessful Whether the test passed or not.\n   * @param causedError If not successful, whether the test caused an error or simply failed.\n   */\n  public void testEnded(String testName, boolean wasSuccessful, boolean causedError) {\n    _junitModel.testEnded(testName, wasSuccessful, causedError);\n  }\n \n  /** Called when a full suite of tests has finished running. Forwards from the other JVM to the local JUnit model.\n   * @param errors The array of errors from all failed tests in the suite.\n   */\n  public void testSuiteEnded(JUnitError[] errors) {\n    _junitModel.testSuiteEnded(errors);\n  }\n \n  /** Called when the JUnitTestManager wants to open a file that is not currently open.\n   * @param className the name of the class for which we want to find the file\n   * @return the file associated with the given class\n   */\n  public File getFileForClassName(String className) {\n    return _junitModel.getFileForClassName(className);\n  }\n \n//  /** Notifies the main jvm that an assignment has been made in the given debug interpreter.\n//   * Does not notify on declarations.\n//   *\n//   * This method is not currently necessary, since we don't copy back values in a debug interpreter until the thread\n//   * has resumed.\n//   *\n//   * @param name the name of the debug interpreter\n//   */\n//   public void notifyDebugInterpreterAssignment(String name) {\n//   }\n \n    \n  /*\n   * === Local getters and setters ===\n   */\n  \n  /** Provides an object to listen to interactions-related events. */\n  public void setInteractionsModel(InteractionsModelCallback model) { _interactionsModel = model; }\n  \n  /** Provides an object to listen to test-related events.*/\n  public void setJUnitModel(JUnitModelCallback model) { _junitModel = model; }\n  \n  /** Provides an object to listen to debug-related events.\n    * @param model the debug model\n    */\n  public void setDebugModel(DebugModelCallback model) { _debugModel = model; }\n  \n  /** Sets whether the remote JVM will run \"assert\" statements after the next restart. */\n  public void setAllowAssertions(boolean allow) { _allowAssertions = allow; }\n  \n  /**\n   * Sets the class path to use for starting the interpreter JVM. Must include the classes for the interpreter.\n   * @param classPath Class path for the interpreter JVM\n   */\n  public void setStartupClassPath(String classPath) {\n    _startupClassPath = IOUtil.parsePath(classPath);\n  }\n  \n  /** Sets the working directory for the interpreter (takes effect on next startup). */\n  public void setWorkingDirectory(File dir) {\n    _workingDir = dir;\n  }\n  \n  /** Declared as a getter in order to allow subclasses to override the standard behavior. */\n  protected InterpretResult.Visitor<Void> resultHandler() { return _handler; }\n  \n  \n  /* === Wrappers for InterpreterJVMRemoteI methods === */\n\n  /** Interprets string s in the remote JVM.  Blocks until the interpreter is connected and evaluation completes.\n    * @return  {@code true} if successful; {@code false} if the subprocess is unavailable, the subprocess dies\n    *          during the call, or an unexpected exception occurs.\n    */\n  public boolean interpret(final String s) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(true);\n    if (remote == null) { return false; }\n    try {\n      debug.logStart(\"Interpreting \" + s);\n      InterpretResult result = remote.interpret(s);\n      result.apply(resultHandler());\n      debug.logEnd(\"result\", result);\n      return true;\n    }\n    catch (RemoteException e) { debug.logEnd(); _handleRemoteException(e); return false; }\n  }\n  \n  /**\n   * Gets the string representation of the value of a variable in the current interpreter, or \"none\"\n   * if the remote JVM is unavailable or an error occurs.  Blocks until the interpreter is connected.\n   * @param var the name of the variable\n   */\n  public Option<Pair<String,String>> getVariableToString(String var) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return Option.none(); }\n    try { return Option.some(remote.getVariableToString(var)); }\n    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }\n  }\n  \n  /**\n   * Blocks until the interpreter is connected.  Returns {@code true} if the change was successfully passed to\n   * the remote JVM.\n   */\n  public boolean addProjectClassPath(File f) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.addProjectClassPath(f); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /**\n   * Blocks until the interpreter is connected.  Returns {@code true} if the change was successfully passed to\n   * the remote JVM.\n   */\n  public boolean addBuildDirectoryClassPath(File f) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.addBuildDirectoryClassPath(f); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /**\n   * Blocks until the interpreter is connected.  Returns {@code true} if the change was successfully passed to\n   * the remote JVM.\n   */\n  public boolean addProjectFilesClassPath(File f) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.addProjectFilesClassPath(f); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /**\n   * Blocks until the interpreter is connected.  Returns {@code true} if the change was successfully passed to\n   * the remote JVM.\n   */\n  public boolean addExternalFilesClassPath(File f) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.addExternalFilesClassPath(f); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /**\n   * Blocks until the interpreter is connected.  Returns {@code true} if the change was successfully passed to\n   * the remote JVM.\n   */\n  public boolean addExtraClassPath(File f) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.addExtraClassPath(f); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /** Returns the current class path of the interpreter as a list of unique entries.  The result is \"none\"\n   * if the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n    */\n  public Option<Iterable<File>> getClassPath() {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return Option.none(); }\n    try { return Option.some(remote.getClassPath()); }\n    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }\n  }\n  \n  /** Sets the Interpreter to be in the given package.  Blocks until the interpreter is connected.\n    * @param packageName Name of the package to enter.\n    */\n  public boolean setPackageScope(String packageName) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.interpret(\"package \" + packageName + \";\"); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /** Sets up a JUnit test suite in the Interpreter JVM and finds which classes are really TestCase\n    * classes (by loading them).  Blocks until the interpreter is connected and the operation completes.\n    * @param classNames the class names to run in a test\n    * @param files the associated file\n    * @return the class names that are actually test cases\n    */\n  public Option<List<String>> findTestClasses(List<String> classNames, List<File> files) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return Option.none(); }\n    try { return Option.some(remote.findTestClasses(classNames, files)); }\n    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }\n  }\n  \n  /**\n   * Runs the JUnit test suite already cached in the Interpreter JVM.  Blocks until the remote JVM is available.\n   * Returns {@code false} if no test suite is cached, the remote JVM is unavailable, or an error occurs.\n   */\n  public boolean runTestSuite() { \n    InterpreterJVMRemoteI remote = _state.value().interpreter(true);\n    if (remote == null) { return false; }\n    try { return remote.runTestSuite(); }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n//  /** Updates the security manager in slave JVM */\n//  public void enableSecurityManager() throws RemoteException {\n//    _interpreterJVM().enableSecurityManager();\n//  }\n//  \n//  /** Updates the security manager in slave JVM */\n//  public void disableSecurityManager() throws RemoteException{\n//    _interpreterJVM().disableSecurityManager();\n//  }\n  \n  \n  /**\n   * Adds a named interpreter to the list.  The result is {@code false} if the remote JVM is unavailable or\n   * if an exception occurs.  Blocks until the interpreter is connected.\n   * @param name the unique name for the interpreter\n   * @throws IllegalArgumentException if the name is not unique\n   */\n  public boolean addInterpreter(String name) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.addInterpreter(name); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /** Removes the interpreter with the given name, if it exists.  The result is {@code false} if\n   * the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n    * @param name Name of the interpreter to remove\n    */\n  public boolean removeInterpreter(String name) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.removeInterpreter(name); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /** Sets the current interpreter to the one specified by name.  The result is \"none\" if\n   * the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n    * @param name the unique name of the interpreter to set active\n    * @return Status flags: whether the current interpreter changed, and whether it is busy; or \"none\" on an error\n    */\n  public Option<Pair<Boolean, Boolean>> setActiveInterpreter(String name) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return Option.none(); }\n    try { return Option.some(remote.setActiveInterpreter(name)); }\n    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }\n  }\n  \n  /** Sets the default interpreter to be the current one.  The result is \"none\" if\n   * the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n    * @return Status flags: whether the current interpreter changed, and whether it is busy; or \"none\" on an error\n    */\n  public Option<Pair<Boolean, Boolean>> setToDefaultInterpreter() {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return Option.none(); }\n    try { return Option.some(remote.setToDefaultInterpreter()); }\n    catch (RemoteException e) { _handleRemoteException(e); return Option.none(); }\n  }\n\n  /** Sets the interpreter to enforce access to all members.  The result is {@code false} if\n   * the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n   */\n  public boolean setEnforceAllAccess(boolean enforce) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.setEnforceAllAccess(enforce); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /** Sets the interpreter to enforce access to private members.  The result is {@code false} if\n   * the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n   */\n  public boolean setEnforcePrivateAccess(boolean enforce) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.setEnforcePrivateAccess(enforce); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /** Require a semicolon at the end of statements. The result is {@code false} if\n   * the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n   */\n  public boolean setRequireSemicolon(boolean require) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.setRequireSemicolon(require); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /** Require variable declarations to include an explicit type. The result is {@code false} if\n   * the remote JVM is unavailable or if an exception occurs.  Blocks until the interpreter is connected.\n   */\n  public boolean setRequireVariableType(boolean require) {\n    InterpreterJVMRemoteI remote = _state.value().interpreter(false);\n    if (remote == null) { return false; }\n    try { remote.setRequireVariableType(require); return true; }\n    catch (RemoteException e) { _handleRemoteException(e); return false; }\n  }\n  \n  /*\n   * === Helper methods ===\n   */\n  \n  /** Call invokeSlave with the appropriate JVMBuilder. */\n  private void _doStartup() {\n    File dir = _workingDir;\n    // TODO: Eliminate NULL_FILE.  It is a bad idea!  The correct behavior when it is used always depends on\n    // context, so it can never be treated transparently.  In this case, the process won't start.\n    if (dir == FileOps.NULL_FILE) { dir = IOUtil.WORKING_DIRECTORY; }\n\n    List<String> jvmArgs = new ArrayList<String>();\n    \n    // ConcJUnit argument: -Xbootclasspath/p:rt.concjunit.jar\n    // ------------------------------------------------------\n    // this section here loops if the rt.concjunit.jar file is\n    // being re-generated or the settings are changed\n    final CompletionMonitor cm = new CompletionMonitor();\n    boolean repeat;\n    do {\n      repeat = false;\n      File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);\n      // ConcJUnit is available if (a) the built-in framework is used, or (b) the external\n      // framework is a valid ConcJUnit jar file.\n      boolean concJUnitAvailable =\n        !DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) ||\n        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(junitLocation);\n      \n      File rtLocation = DrJava.getConfig().getSetting(OptionConstants.RT_CONCJUNIT_LOCATION);\n      boolean rtLocationConfigured =\n        edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidRTConcJUnitFile(rtLocation);\n      \n      if (DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\n            equals(OptionConstants.ConcJUnitCheckChoices.ALL) && // \"lucky\" enabled\n          !rtLocationConfigured && // not valid\n          (rtLocation != null) && // not null\n          (!FileOps.NULL_FILE.equals(rtLocation)) && // not NULL_FILE\n          (rtLocation.exists())) { // but exists\n        // invalid file, clear setting\n        DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,\n                                      OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);\n        rtLocationConfigured = false;\n        javax.swing.JOptionPane.showMessageDialog(null,\n                                                  \"The selected file is invalid and was disabled:\\n\"+rtLocation,\n                                                  \"Invalid ConcJUnit Runtime File\",\n                                                  javax.swing.JOptionPane.ERROR_MESSAGE);\n      }\n      if (concJUnitAvailable && // ConcJUnit available\n          rtLocationConfigured && // runtime configured\n          DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\n            equals(OptionConstants.ConcJUnitCheckChoices.ALL)) { // and \"lucky\" enabled\n        try {\n          // NOTE: this is a work-around\n          // it seems like it's impossible to pass long file names here on Windows\n          // so we are using a clumsy method that determines the short file name\n          File shortF = FileOps.getShortFile(rtLocation);\n          \n          // check the JavaVersion of the rt.concjunit.jar file to make sure it is compatible\n          if (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isCompatibleRTConcJUnitFile(shortF)) {\n            // enabled, valid and compatible\n            // add the JVM argument\n            jvmArgs.add(\"-Xbootclasspath/p:\"+shortF.getAbsolutePath().replace(File.separatorChar, '/'));\n          }\n          else {\n            // enabled, valid but incompatible\n            // ask to regenerate\n            repeat = true; // re-check settings\n            cm.reset();\n            boolean attempted = edu.rice.cs.drjava.model.junit.ConcJUnitUtils.\n              showIncompatibleWantToRegenerateDialog(null,\n                                                     new Runnable() { public void run() { cm.signal(); } }, // yes\n                                                     new Runnable() { public void run() { cm.signal(); } }); // no\n            while(!cm.attemptEnsureSignaled()); // wait for dialog to finish\n            if (!attempted) { repeat = false; }\n          }\n        }\n        catch(IOException ioe) {\n          // we couldn't get the short file name (on Windows), disable \"lucky\" warnings\n          DrJava.getConfig().setSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED,\n                                        OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);\n          rtLocationConfigured = false;\n          javax.swing.JOptionPane.showMessageDialog(null,\n                                                    \"There was a problem with the selected file, and it was disabled:\\n\"+rtLocation,\n                                                    \"Invalid ConcJUnit Runtime File\",\n                                                    javax.swing.JOptionPane.ERROR_MESSAGE);\n        }\n      }\n    } while(repeat);\n    // end of the section that may loop\n    // ------------------------------------------------------\n    \n    if (_allowAssertions) { jvmArgs.add(\"-ea\"); }\n    int debugPort = _getDebugPort();\n    if (debugPort > -1) {\n      jvmArgs.add(\"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=\" + debugPort);\n      jvmArgs.add(\"-Xdebug\");\n      jvmArgs.add(\"-Xnoagent\");\n      jvmArgs.add(\"-Djava.compiler=NONE\");\n    }\n    String slaveMemory = DrJava.getConfig().getSetting(OptionConstants.SLAVE_JVM_XMX);\n    if (!\"\".equals(slaveMemory) && !OptionConstants.heapSizeChoices.get(0).equals(slaveMemory)) {\n      jvmArgs.add(\"-Xmx\" + slaveMemory + \"M\");\n    }\n    String slaveArgs = DrJava.getConfig().getSetting(OptionConstants.SLAVE_JVM_ARGS);\n    if (PlatformFactory.ONLY.isMacPlatform()) {\n      jvmArgs.add(\"-Xdock:name=Interactions\");\n    }\n    \n    // add additional boot class path items specified by the selected compiler\n    for (File f: _interactionsModel.getCompilerBootClassPath()) {\n      try {\n        // NOTE: this is a work-around\n        // it seems like it's impossible to pass long file names here on Windows\n        // so we are using a clumsy method that determines the short file name\n        File shortF = FileOps.getShortFile(f);\n        jvmArgs.add(\"-Xbootclasspath/a:\"+shortF.getAbsolutePath().replace(File.separatorChar, '/'));\n      }\n      catch(IOException ioe) {\n        // TODO: figure out what to do here. error? warn?\n      }\n    }\n    \n    jvmArgs.addAll(ArgumentTokenizer.tokenize(slaveArgs));\n    \n    JVMBuilder jvmb = new JVMBuilder(_startupClassPath).directory(dir).jvmArguments(jvmArgs);\n    \n    // extend classpath if JUnit/ConcJUnit location specified\n    File junitLocation = DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION);\n    boolean junitLocationConfigured =\n      (edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidJUnitFile(junitLocation) ||\n       edu.rice.cs.drjava.model.junit.ConcJUnitUtils.isValidConcJUnitFile(junitLocation));\n    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) && // enabled\n        !junitLocationConfigured && // not valid \n        (junitLocation != null) && // not null\n        (!FileOps.NULL_FILE.equals(junitLocation)) && // not NULL_FILE\n        (junitLocation.exists())) { // but exists\n      // invalid file, clear setting\n      DrJava.getConfig().setSetting(OptionConstants.JUNIT_LOCATION_ENABLED, false);\n      junitLocationConfigured = false;\n    }\n    ArrayList<File> extendedClassPath = new ArrayList<File>();\n    if (DrJava.getConfig().getSetting(OptionConstants.JUNIT_LOCATION_ENABLED) &&\n        junitLocationConfigured) {\n      extendedClassPath.add(junitLocation);\n    }\n    for(File f: jvmb.classPath()) { extendedClassPath.add(f); }\n    jvmb = jvmb.classPath(edu.rice.cs.plt.iter.IterUtil.asSizedIterable(extendedClassPath));\n    \n    // add Java properties controlling ConcJUnit\n    Map<String, String> props = jvmb.propertiesCopy();\n    \n    // settings are mutually exclusive\n    boolean all = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\n      equals(OptionConstants.ConcJUnitCheckChoices.ALL);\n    boolean noLucky = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\n      equals(OptionConstants.ConcJUnitCheckChoices.NO_LUCKY);\n    boolean onlyThreads = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\n      equals(OptionConstants.ConcJUnitCheckChoices.ONLY_THREADS);\n    boolean none = DrJava.getConfig().getSetting(OptionConstants.CONCJUNIT_CHECKS_ENABLED).\n      equals(OptionConstants.ConcJUnitCheckChoices.NONE);\n    // \"threads\" is enabled as long as the setting isn't NONE\n    props.put(\"edu.rice.cs.cunit.concJUnit.check.threads.enabled\",\n              new Boolean(!none).toString());\n    // \"join\" is enabled for ALL and NO_LUCKY\n    props.put(\"edu.rice.cs.cunit.concJUnit.check.join.enabled\",\n              new Boolean(all || noLucky).toString());\n    // \"lucky\" is enabled only for ALL\n    props.put(\"edu.rice.cs.cunit.concJUnit.check.lucky.enabled\",\n              new Boolean(all).toString());\n    \n    jvmb = jvmb.properties(props);\n    \n    invokeSlave(jvmb);\n  }\n  \n  /** Returns the debug port to use, as specified by the model. Returns -1 if no usable port could be found. */\n  private int _getDebugPort() {\n    int port = -1;\n    try {  port = _interactionsModel.getDebugPort(); }\n    catch (IOException ioe) {\n      /* Can't find port; don't use debugger */\n    }\n    return port;\n  }\n  \n  /** Lets the model know if any exceptions occur while communicating with the Interpreter JVM. */\n  private void _handleRemoteException(RemoteException e) {\n    if (e instanceof UnmarshalException) {\n      /* Interpreter JVM has disappeared (perhaps reset); just ignore the error. */\n      if (e.getCause() instanceof EOFException) return;\n      /* Deals with bug 2688586: Reset during debugging throws UnmarshalException\n       * We may want to extend this to all kinds of SocketExceptions. */\n      if ((e.getCause() instanceof SocketException) &&\n          (e.getCause().getMessage().equals(\"Connection reset\"))) return;\n    }\n    DrJavaErrorHandler.record(e);\n  }\n  \n  /*\n   * Helper classes\n   */\n\n  /** Called when the JVM used for unit tests has registered.  Does not necessarily run in even thread. \n * @param defaultJUnitModel TODO*/\n  public void junitJVMReady(DefaultJUnitModel defaultJUnitModel) {\n    if (! defaultJUnitModel._testInProgress) return;\n    \n    JUnitError[] errors = new JUnitError[1];\n    errors[0] = new JUnitError(\"Previous test suite was interrupted\", true, \"\");\n    defaultJUnitModel._junitErrorModel = new JUnitErrorModel(errors, defaultJUnitModel._model, true);\n    defaultJUnitModel._notifyJUnitEnded();\n    defaultJUnitModel._testInProgress = false;\n  }\n\n/** State-based implementation of the starting/stopping functionality. */\n  private abstract class State {\n    /**\n     * Get the current interpreter -- null if unavailable.  Block if necessary.\n     * @param used  Whether this access will lead to a used JVM -- one that should be reset even when not forced \n     */\n    public abstract InterpreterJVMRemoteI interpreter(boolean used); \n    /** Ensure that the interpreter is starting or running.  Block if necessary. */\n    public abstract void start();\n    /** Ensure that the interpreter is stopping or not running. Block if necessary. */\n    public abstract void stop();\n    /**\n     * Ensure that the interpreter is stopping or not running, to be started again.  Block if necessary.\n     * @param force  Whether an unused, running JVM should be restarted\n     */\n    public abstract void restart(boolean force);\n    public abstract void dispose();\n    /** React to a completed startup. */\n    public void started(InterpreterJVMRemoteI i) { throw new IllegalStateException(\"Unexpected started() call\"); }\n    /** React to a failed startup. */\n    public void startFailed(Exception e) { throw new IllegalStateException(\"Unexpected startFailed() call\"); }\n    /** React to a completed shutdown (requested or spontaneous). */\n    public void stopped(int status) { throw new IllegalStateException(\"Unexpected stopped() call\"); }\n  }\n  \n  /** Fresh, hasn't yet been started. */\n  private class FreshState extends State {\n    public InterpreterJVMRemoteI interpreter(boolean used) { return null; } \n    public void start() {\n      if (_state.compareAndSet(this, new StartingState())) { _doStartup(); }\n      else { _state.value().start(); }\n    }\n    public void stop() { }\n    public void restart(boolean force) { start(); }\n    public void dispose() {\n      if (_state.compareAndSet(this, new DisposedState())) { MainJVM.super.dispose(); }\n      else { _state.value().dispose(); }\n    }\n  }\n  \n  /** Has been started, waiting for startup to complete. */\n  private class StartingState extends State {\n    private final int _failures;\n    public StartingState() { _failures = 0; }\n    private StartingState(int failures) { _failures = failures; }\n    \n    public InterpreterJVMRemoteI interpreter(boolean used) {\n      try { return _state.ensureNotState(this, STARTUP_TIMEOUT).interpreter(used); }\n      catch (TimeoutException e) { return null; }\n      catch (InterruptedException e) { throw new UnexpectedException(e); }\n    }\n    \n    public void start() { }\n    \n    public void restart(boolean force) {\n      try { _state.ensureNotState(this, STARTUP_TIMEOUT).restart(force); }\n      catch (Exception e) { throw new UnexpectedException(e); }\n    }\n    \n    public void stop() {\n      try { _state.ensureNotState(this, STARTUP_TIMEOUT).stop(); }\n      catch (Exception e) { throw new UnexpectedException(e); }\n    }\n    \n    public void dispose() { stop(); _state.value().dispose(); }\n\n    @Override public void started(InterpreterJVMRemoteI i) {\n      if (_state.compareAndSet(this, new FreshRunningState(i))) {\n        boolean enforceAllAccess = DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL)\n          .equals(OptionConstants.DynamicJavaAccessControlChoices.PRIVATE_AND_PACKAGE); // \"all\"\n        try { i.setEnforceAllAccess(enforceAllAccess); }\n        catch (RemoteException re) { _handleRemoteException(re); }\n        \n        boolean enforcePrivateAccess = !DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_ACCESS_CONTROL)\n          .equals(OptionConstants.DynamicJavaAccessControlChoices.DISABLED); // not \"none\"\n        try { i.setEnforcePrivateAccess(enforcePrivateAccess); }\n        catch (RemoteException re) { _handleRemoteException(re); }\n        \n        Boolean requireSemicolon = DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_REQUIRE_SEMICOLON);\n        try { i.setRequireSemicolon(requireSemicolon); }\n        catch (RemoteException re) { _handleRemoteException(re); }\n        \n        Boolean requireVariableType = DrJava.getConfig().getSetting(OptionConstants.DYNAMICJAVA_REQUIRE_VARIABLE_TYPE);\n        try { i.setRequireVariableType(requireVariableType); }\n        catch (RemoteException re) { _handleRemoteException(re); }\n        \n        // Note that _workingDir isn't guaranteed to be the dir at the time startup began.  Is that a problem?\n        // (Is the user ever going to see a working dir message that doesn't match the actual setting?)\n        _interactionsModel.interpreterReady(_workingDir);\n        _junitModel.junitJVMReady();        \n      }\n      else { _state.value().started(i); }\n    }\n    \n    @Override public void startFailed(Exception e) {\n      int count = _failures + 1;\n      if (count < MAX_STARTUP_FAILURES) {\n        if (_state.compareAndSet(this, new StartingState(count))) { _doStartup(); }\n        else { _state.value().startFailed(e); }\n      }\n      else {\n        if (_state.compareAndSet(this, new FreshState())) { _interactionsModel.interpreterWontStart(e); }\n        else { _state.value().startFailed(e); }\n      }\n    }\n  }\n  \n  /** Has an active interpreter available. */\n  private class RunningState extends State {\n    protected final InterpreterJVMRemoteI _interpreter;\n    public RunningState(InterpreterJVMRemoteI interpreter) { _interpreter = interpreter; }\n    public InterpreterJVMRemoteI interpreter(boolean used) { return _interpreter; }\n    public void start() { }\n    \n    public void stop() {\n      if (_state.compareAndSet(this, new StoppingState())) { quitSlave(); }\n      else { _state.value().stop(); }\n    }\n    \n    public void restart(boolean force) {\n      if (_state.compareAndSet(this, new RestartingState())) {\n        _interactionsModel.interpreterResetting();\n        quitSlave();\n      }\n      else { _state.value().restart(force); }\n    }\n    \n    public void dispose() { stop(); _state.value().dispose(); }\n\n    @Override public void stopped(int status) {\n      if (_state.compareAndSet(this, new RestartingState())) {\n        _interactionsModel.replCalledSystemExit(status);\n        _interactionsModel.interpreterResetting();\n      }\n      _state.value().stopped(status); // delegate whether state changed here or in another thread\n    }\n  }\n  \n  /** Variant of RunningState where the interpreter JVM has not yet been used. */\n  private class FreshRunningState extends RunningState {\n    public FreshRunningState(InterpreterJVMRemoteI interpreter) { super(interpreter); }\n    @Override public InterpreterJVMRemoteI interpreter(boolean used) {\n      if (used) {\n        _state.compareAndSet(this, new RunningState(_interpreter));\n        return _state.value().interpreter(used); // delegate whether state changed here or in another thread\n      }\n      else { return super.interpreter(used); }\n    }\n    @Override public void restart(boolean force) {\n      if (force) { super.restart(force); }\n      else {\n        // otherwise, ignore and say that we are ready\n        _interactionsModel.interpreterReady(_workingDir);\n      }\n    }\n  }\n  \n  /** Waiting for stop, should automatically start when that happens. */\n  private class RestartingState extends State {\n\n    public InterpreterJVMRemoteI interpreter(boolean used) {\n      try { return _state.ensureNotState(this, STARTUP_TIMEOUT).interpreter(used); }\n      catch (TimeoutException e) { return null; }\n      catch (InterruptedException e) { throw new UnexpectedException(e); }\n    }\n\n    public void start() { }\n\n    public void stop() {\n      if (!_state.compareAndSet(this, new StoppingState())) { _state.value().stop(); }\n    }\n\n    public void restart(boolean force) { }\n\n    public void dispose() {\n      if (_state.compareAndSet(this, new DisposedState())) { MainJVM.super.dispose(); }\n      else { _state.value().dispose(); }\n    }\n    \n    @Override public void stopped(int status) {\n      if (_state.compareAndSet(this, new StartingState())) { _doStartup(); }\n      else { _state.value().stopped(status); }\n    }\n  }\n  \n  /** Waiting for stop, no restart. */\n  private class StoppingState extends State {\n    public InterpreterJVMRemoteI interpreter(boolean used) { return null; }\n\n    public void start() {\n      try { _state.ensureNotState(this, STARTUP_TIMEOUT).start(); }\n      catch (Exception e) { throw new UnexpectedException(e); }\n    }\n\n    public void stop() { }\n\n    public void restart(boolean force) {\n      if (!_state.compareAndSet(this, new RestartingState())) { _state.value().restart(force); }\n    }\n\n    public void dispose() {\n      if (_state.compareAndSet(this, new DisposedState())) { MainJVM.super.dispose(); }\n      else { _state.value().dispose(); }\n    }\n    \n    @Override public void stopped(int status) {\n      if (!_state.compareAndSet(this, new FreshState())) { _state.value().stopped(status); } \n    }\n  }\n  \n  private class DisposedState extends State {\n    public InterpreterJVMRemoteI interpreter(boolean used) { throw new IllegalStateException(\"MainJVM is disposed\"); }\n    public void start() { throw new IllegalStateException(\"MainJVM is disposed\"); }\n    public void stop() { throw new IllegalStateException(\"MainJVM is disposed\"); }\n    public void restart(boolean force) { throw new IllegalStateException(\"MainJVM is disposed\"); }\n    public void dispose() { }\n    public void stopped() { /* may occur if transitioned here from Restarting or Stopping */ }\n  }\n\n  \n  /** Performs the appropriate action to return any type of result from a call to interpret back to the GlobalModel. */\n  private class ResultHandler implements InterpretResult.Visitor<Void> {\n    /** Lets the model know that void was returned. */\n    public Void forNoValue() {\n      _interactionsModel.replReturnedVoid();\n      return null;\n    }\n    \n    /** Calls replReturnedResult() */\n    public Void forObjectValue(String objString, String objTypeString) {\n      _interactionsModel.replReturnedResult(objString, InteractionsDocument.OBJECT_RETURN_STYLE);\n      return null;\n    }\n    \n    /** Calls replReturnedResult() */\n    public Void forStringValue(String s) {\n      _interactionsModel.replReturnedResult('\"' + s + '\"', InteractionsDocument.STRING_RETURN_STYLE);\n      return null;\n    }\n    \n    /** Calls replReturnedResult() */\n    public Void forCharValue(Character c) {\n      _interactionsModel.replReturnedResult(\"'\" + c + \"'\", InteractionsDocument.CHARACTER_RETURN_STYLE);\n      return null;\n    }\n    \n    /** Calls replReturnedResult() */\n    public Void forNumberValue(Number n) {\n      _interactionsModel.replReturnedResult(n.toString(), InteractionsDocument.NUMBER_RETURN_STYLE);\n      return null;\n    }\n    \n    /** Calls replReturnedResult() */\n    public Void forBooleanValue(Boolean b) {\n      _interactionsModel.replReturnedResult(b.toString(), InteractionsDocument.OBJECT_RETURN_STYLE);\n      return null;\n    }\n    \n    /** Calls replThrewException() */\n    public Void forEvalException(String message, StackTraceElement[] stackTrace) {\n      // TODO: restore location/syntax highlighting functionality\n      _interactionsModel.replThrewException(message, stackTrace);\n      return null;\n    }\n    \n    /** Calls replThrewException() */\n    public Void forException(String message) {\n      // TODO: restore location/syntax highlighting functionality\n      _interactionsModel.replThrewException(message);\n      return null;\n    }\n    \n    public Void forUnexpectedException(Throwable t) {\n      _interactionsModel.replReturnedVoid();\n      throw new UnexpectedException(t);\n    }\n    \n    public Void forBusy() {\n      _interactionsModel.replReturnedVoid();\n      throw new UnexpectedException(\"MainJVM.interpret() called when InterpreterJVM was busy!\");\n    }\n  }\n  \n  /** InteractionsModel which does not react to events. */\n  public static class DummyInteractionsModel implements InteractionsModelCallback {\n    public int getDebugPort() throws IOException { return -1; }\n    public void replSystemOutPrint(String s) { }\n    public void replSystemErrPrint(String s) { }\n    public String getConsoleInput() {\n      throw new IllegalStateException(\"Cannot request input from dummy interactions model!\");\n    }\n    public void setInputListener(InputListener il) {\n      throw new IllegalStateException(\"Cannot set the input listener of dummy interactions model!\");\n    }\n    public void changeInputListener(InputListener from, InputListener to) {\n      throw new IllegalStateException(\"Cannot change the input listener of dummy interactions model!\");\n    }\n    public void replReturnedVoid() { }\n    public void replReturnedResult(String result, String style) { }\n    public void replThrewException(String message, StackTraceElement[] stackTrace) { }\n    public void replThrewException(String message) { }\n    public void replReturnedSyntaxError(String errorMessage, String interaction, int startRow, int startCol, int endRow,\n                                        int endCol) { }\n    public void replCalledSystemExit(int status) { }\n    public void interpreterResetting() { }\n    public void interpreterResetFailed(Throwable th) { }\n    public void interpreterWontStart(Exception e) { }\n    public void interpreterReady(File wd) { }\n    public List<File> getCompilerBootClassPath() { return new ArrayList<File>(); }\n    public String transformCommands(String interactionsString) { return interactionsString; }\n  }\n  \n  /** JUnitModel which does not react to events. */\n  public static class DummyJUnitModel implements JUnitModelCallback {\n    public void nonTestCase(boolean isTestAll, boolean didCompileFail) { }\n    public void classFileError(ClassFileError e) { }\n    public void testSuiteStarted(int numTests) { }\n    public void testStarted(String testName) { }\n    public void testEnded(String testName, boolean wasSuccessful, boolean causedError) { }\n    public void testSuiteEnded(JUnitError[] errors) { }\n    public File getFileForClassName(String className) { return null; }\n    public Iterable<File> getClassPath() { return IterUtil.empty(); }\n    public void junitJVMReady() { }\n  }\n  \n  /** DebugModelCallback which does not react to events. */\n  public static class DummyDebugModel implements DebugModelCallback {\n    public void notifyDebugInterpreterAssignment(String name) {\n    }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 0,
                "candidates": []
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 34163
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "systemErrPrint",
                            "method_signature": "public void systemErrPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method forwards a call to System.err from InterpreterJVM to the local InteractionsModel, making it more appropriate for the InteractionsModelCallback class."
                        },
                        {
                            "method_name": "systemOutPrint",
                            "method_signature": "public void systemOutPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method forwards a call to System.out from InterpreterJVM to the local InteractionsModel, making it more appropriate for the InteractionsModelCallback class."
                        },
                        {
                            "method_name": "getConsoleInput",
                            "method_signature": "public String getConsoleInput()",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method is responsible for getting console input, which is a direct interaction with the InteractionsModel, making it suitable for the InteractionsModelCallback class."
                        },
                        {
                            "method_name": "nonTestCase",
                            "method_signature": "public void nonTestCase(boolean isTestAll, boolean didCompileFail)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method forwards information about non-TestCase invocations to the local JUnit model, making it more appropriate for the JUnitModelCallback class."
                        },
                        {
                            "method_name": "classFileError",
                            "method_signature": "public void classFileError(ClassFileError e)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method handles class file errors and should be part of the JUnitModelCallback class, which deals with JUnit-related events."
                        },
                        {
                            "method_name": "testSuiteStarted",
                            "method_signature": "public void testSuiteStarted(int numTests)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates the start of a test suite and should be part of the JUnitModelCallback class, which manages JUnit-related events."
                        },
                        {
                            "method_name": "testStarted",
                            "method_signature": "public void testStarted(String testName)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates that a particular test has started and should be part of the JUnitModelCallback class."
                        },
                        {
                            "method_name": "testEnded",
                            "method_signature": "public void testEnded(String testName, boolean wasSuccessful, boolean causedError)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates that a particular test has ended and should be part of the JUnitModelCallback class."
                        },
                        {
                            "method_name": "testSuiteEnded",
                            "method_signature": "public void testSuiteEnded(JUnitError[] errors)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates that a test suite has finished running and should be part of the JUnitModelCallback class."
                        },
                        {
                            "method_name": "getFileForClassName",
                            "method_signature": "public File getFileForClassName(String className)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method retrieves the file associated with a given class name and should be part of the JUnitModelCallback class."
                        }
                    ],
                    "llm_response_time": 10449
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "systemErrPrint",
                            "method_signature": "public void systemErrPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method forwards a call from the InterpreterJVM to the local InteractionsModel, which indicates that it is more appropriate for it to reside within the InteractionsModelCallback interface or its implementations."
                        },
                        {
                            "method_name": "systemOutPrint",
                            "method_signature": "public void systemOutPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "Similar to systemErrPrint, this method forwards output from the InterpreterJVM to the local InteractionsModel, suggesting it should be part of the InteractionsModelCallback interface."
                        },
                        {
                            "method_name": "getConsoleInput",
                            "method_signature": "public String getConsoleInput()",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method retrieves console input from the InteractionsModel, indicating it should be part of the InteractionsModelCallback interface."
                        },
                        {
                            "method_name": "nonTestCase",
                            "method_signature": "public void nonTestCase(boolean isTestAll, boolean didCompileFail)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method forwards information about non-TestCase invocations to the local JUnit model, making it suitable for inclusion in the JUnitModelCallback interface."
                        },
                        {
                            "method_name": "classFileError",
                            "method_signature": "public void classFileError(ClassFileError e)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method handles class file errors during testing, which aligns with the responsibilities of the JUnitModelCallback interface."
                        },
                        {
                            "method_name": "testSuiteStarted",
                            "method_signature": "public void testSuiteStarted(int numTests)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates the start of a test suite, which is a responsibility of the JUnitModelCallback interface."
                        },
                        {
                            "method_name": "testStarted",
                            "method_signature": "public void testStarted(String testName)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method signals the start of an individual test, which is relevant to the JUnitModelCallback interface."
                        },
                        {
                            "method_name": "testEnded",
                            "method_signature": "public void testEnded(String testName, boolean wasSuccessful, boolean causedError)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method communicates the end of a test, which is a key responsibility of the JUnitModelCallback interface."
                        },
                        {
                            "method_name": "testSuiteEnded",
                            "method_signature": "public void testSuiteEnded(JUnitError[] errors)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates the end of a test suite, which is appropriate for the JUnitModelCallback interface."
                        },
                        {
                            "method_name": "getFileForClassName",
                            "method_signature": "public File getFileForClassName(String className)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method retrieves the file associated with a given class name, which is relevant to the JUnitModelCallback interface."
                        },
                        {
                            "method_name": "notifyDebugInterpreterAssignment",
                            "method_signature": "public void notifyDebugInterpreterAssignment(String name)",
                            "target_class": "DebugModelCallback",
                            "rationale": "This method notifies about assignments in the debug interpreter, which aligns with the responsibilities of the DebugModelCallback interface."
                        }
                    ],
                    "llm_response_time": 10565
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "systemErrPrint",
                            "method_signature": "public void systemErrPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method forwards a call from the InterpreterJVM to the local InteractionsModel, which indicates that it is primarily concerned with interaction events. Moving it to the InteractionsModelCallback would better encapsulate the behavior related to interaction handling."
                        },
                        {
                            "method_name": "systemOutPrint",
                            "method_signature": "public void systemOutPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "Similar to systemErrPrint, this method is responsible for forwarding output from the InterpreterJVM to the local InteractionsModel. It should be moved to the InteractionsModelCallback to maintain a clear separation of concerns."
                        },
                        {
                            "method_name": "getConsoleInput",
                            "method_signature": "public String getConsoleInput()",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method is directly related to obtaining input from the console, which is a responsibility of the InteractionsModel. Moving it there would align the method with its intended purpose."
                        },
                        {
                            "method_name": "nonTestCase",
                            "method_signature": "public void nonTestCase(boolean isTestAll, boolean didCompileFail)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method handles events related to JUnit tests, which is the responsibility of the JUnitModelCallback. Moving it there would improve the organization of the code."
                        },
                        {
                            "method_name": "classFileError",
                            "method_signature": "public void classFileError(ClassFileError e)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method deals with class file errors during testing, which is a concern of the JUnitModel. It should be moved to maintain a clear separation of responsibilities."
                        },
                        {
                            "method_name": "testSuiteStarted",
                            "method_signature": "public void testSuiteStarted(int numTests)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method is related to the start of a test suite, which is a JUnit-specific event. Moving it to the JUnitModelCallback would better encapsulate JUnit-related functionality."
                        },
                        {
                            "method_name": "testStarted",
                            "method_signature": "public void testStarted(String testName)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method is responsible for handling the start of individual tests, which is a JUnit-specific concern. It should be moved to the JUnitModelCallback."
                        },
                        {
                            "method_name": "testEnded",
                            "method_signature": "public void testEnded(String testName, boolean wasSuccessful, boolean causedError)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method handles the end of a test, which is a JUnit-specific event. Moving it to the JUnitModelCallback would improve the organization of the code."
                        },
                        {
                            "method_name": "testSuiteEnded",
                            "method_signature": "public void testSuiteEnded(JUnitError[] errors)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method deals with the end of a test suite, which is a JUnit-specific concern. It should be moved to the JUnitModelCallback to maintain a clear separation of responsibilities."
                        },
                        {
                            "method_name": "getFileForClassName",
                            "method_signature": "public File getFileForClassName(String className)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method retrieves the file associated with a given class name, which is a responsibility of the JUnitModel. Moving it there would improve the organization of the code."
                        }
                    ],
                    "llm_response_time": 11108
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "systemErrPrint",
                            "method_signature": "public void systemErrPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method forwards a call to System.err from InterpreterJVM to the local InteractionsModel, making it more appropriate for the InteractionsModelCallback class."
                        },
                        {
                            "method_name": "systemOutPrint",
                            "method_signature": "public void systemOutPrint(String s)",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method forwards a call to System.out from InterpreterJVM to the local InteractionsModel, making it more appropriate for the InteractionsModelCallback class."
                        },
                        {
                            "method_name": "getConsoleInput",
                            "method_signature": "public String getConsoleInput()",
                            "target_class": "InteractionsModelCallback",
                            "rationale": "This method is responsible for getting console input, which is a direct interaction with the InteractionsModel, making it suitable for the InteractionsModelCallback class."
                        },
                        {
                            "method_name": "nonTestCase",
                            "method_signature": "public void nonTestCase(boolean isTestAll, boolean didCompileFail)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method forwards information about non-TestCase invocations to the local JUnit model, making it more appropriate for the JUnitModelCallback class."
                        },
                        {
                            "method_name": "classFileError",
                            "method_signature": "public void classFileError(ClassFileError e)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method handles class file errors and should be part of the JUnitModelCallback class, which deals with JUnit-related events."
                        },
                        {
                            "method_name": "testSuiteStarted",
                            "method_signature": "public void testSuiteStarted(int numTests)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates the start of a test suite and should be part of the JUnitModelCallback class, which manages JUnit-related events."
                        },
                        {
                            "method_name": "testStarted",
                            "method_signature": "public void testStarted(String testName)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates that a particular test has started and should be part of the JUnitModelCallback class."
                        },
                        {
                            "method_name": "testEnded",
                            "method_signature": "public void testEnded(String testName, boolean wasSuccessful, boolean causedError)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates that a particular test has ended and should be part of the JUnitModelCallback class."
                        },
                        {
                            "method_name": "testSuiteEnded",
                            "method_signature": "public void testSuiteEnded(JUnitError[] errors)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method indicates that a test suite has finished running and should be part of the JUnitModelCallback class."
                        },
                        {
                            "method_name": "getFileForClassName",
                            "method_signature": "public File getFileForClassName(String className)",
                            "target_class": "JUnitModelCallback",
                            "rationale": "This method retrieves the file associated with a given class name and should be part of the JUnitModelCallback class."
                        },
                        {
                            "method_name": "notifyDebugInterpreterAssignment",
                            "method_signature": "public void notifyDebugInterpreterAssignment(String name)",
                            "target_class": "DebugModelCallback",
                            "rationale": "This method notifies about assignments in the debug interpreter, which aligns with the responsibilities of the DebugModelCallback interface."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "getConsoleInput",
                    "systemErrPrint",
                    "systemOutPrint",
                    "nonTestCase",
                    "classFileError",
                    "testSuiteStarted",
                    "testStarted",
                    "testEnded",
                    "testSuiteEnded",
                    "getFileForClassName",
                    "notifyDebugInterpreterAssignment"
                ],
                "llm_response_time": 1932
            },
            "targetClassMap": {
                "getConsoleInput": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1681,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "systemErrPrint": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1344,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "systemOutPrint": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1530,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "nonTestCase": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1207,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "classFileError": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1086,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "testSuiteStarted": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 3832,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "testStarted": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1323,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "testEnded": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1362,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "testSuiteEnded": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1081,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "getFileForClassName": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1269,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "notifyDebugInterpreterAssignment": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1041,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.AbstractDJDocument::testSecondLineMisindented():void need move to edu.rice.cs.drjava.model.definitions.indent.ActionStartPrevLinePlusTest",
        "class_name": "edu.rice.cs.drjava.model.AbstractDJDocument",
        "telemetry": {
            "id": "70fef025-48d7-43a5-8065-63146f0b9e11",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1844,
                "lineStart": 74,
                "lineEnd": 1917,
                "bodyLineStart": 74,
                "language": "java",
                "sourceCode": "/** This class contains code supporting the concept of a \"DJDocument\"; it is shared between DefinitionsDocument and \n  * InteractionsDJDocument. This partial implementation of <code>Document</code> contains a \"reduced model\". The reduced\n  * model is automatically kept in sync when this document is updated. Also, that synchronization is maintained even \n  * across undo/redo -- this is done by making the undo/redo commands know how to restore the reduced model state.\n  *\n  * The reduced model is not thread-safe, so it is essential that its methods are only called from the event thread.  In\n  * addition, any information from the reduced model should be obtained through helper methods in this class/subclasses.\n  *\n  * @see edu.rice.cs.drjava.model.definitions.reducedmodel.BraceReduction\n  * @see edu.rice.cs.drjava.model.definitions.reducedmodel.ReducedModelControl\n  * @see edu.rice.cs.drjava.model.definitions.reducedmodel.ReducedModelComment\n  * @see edu.rice.cs.drjava.model.definitions.reducedmodel.ReducedModelBrace\n  */\npublic abstract class AbstractDJDocument extends SwingDocument implements DJDocument, OptionConstants {\n  \n  /*-------- CONSTANTS ----------*/\n  \n  protected static final String delimiters = \" \\t\\n\\r{}()[].+-/*;:=!@#$%^&*~<>?,\\\"`'<>|\";\n  protected static final char newline = '\\n';\n  /** A set of normal endings for lines. */\n  protected static final HashSet<String> _normEndings = _makeNormEndings();\n  /** A set of Java keywords. */\n  protected static final HashSet<String> _keywords = _makeKeywords();\n  /** A set of Java keywords. */\n  protected static final HashSet<String> _primTypes = _makePrimTypes();\n  /** The default indent setting. */\n  protected volatile int _indent = 2;\n  /** Initial number of elements in _queryCache (see below). */\n  private static final int INIT_CACHE_SIZE = 0x10000;  // 16**4 = 16384 \n  /** Constant specifying how large pos must be before incremental analysis is applied in posInBlockComment */\n  public static final int POS_THRESHOLD = 10000; \n//  /** Constant specifying how large pos must be before incremental analysis is applied in posInParenPhrase */\n//  public static final int POS_THRESHOLD = 10000; \n  /** The set of closing braces recognized in most indenting operations. */ \n  public static final char[] CLOSING_BRACES = new char[] {'}', ')'};\n  \n  /*-------- FIELDS ----------*/\n  \n//  /** Whether a block indent operation is in progress on this document. */\n//  private volatile boolean _indentInProgress = false;\n  \n  /** The reduced model of the document (stored in field _reduced) handles most of the document logic and keeps \n    * track of state.  This field together with _currentLocation function as a virtual object for purposes of \n    * synchronization.  All operations that access or modify this virtual object should be synchronized on _reduced.\n    */\n  public final ReducedModelControl _reduced = new ReducedModelControl();  // public only for locking purposes\n  \n  /** The absolute character offset in the document. Treated as part of the _reduced (model) for locking \n    * purposes. */\n  protected volatile int _currentLocation = 0;\n  \n  /* The fields _queryCache, _offsetToQueries, and _cacheModified function as an extension of the reduced model. \n   * When enabled in blockIndent, this data structure caches calls to the reduced model to speed up indent performance.\n   * Must be cleared every time the document is changed.  Use by calling _checkCache, _storeInCache, and _clearCache.\n   * When _queryCache = null, the cache is disabled.\n   */\n  private volatile HashMap<Query, Object> _queryCache;\n  \n  /** Records the set of queries (as a list) for each offset. */\n  private volatile SortedMap<Integer, List<Query>> _offsetToQueries;\n  \n  /** The instance of the indent decision tree used by Definitions documents. */\n  private volatile Indenter _indenter;\n  \n  /* Saved here to allow the listener to be removed easily. This is needed to allow for garbage collection. */\n  private volatile OptionListener<Integer> _listener1;\n  private volatile OptionListener<Boolean> _listener2;\n  \n  /*-------- CONSTRUCTORS --------*/\n  \n  /** Constructor used in super calls from DefinitionsDocument and InteractionsDJDocument. */\n  protected AbstractDJDocument() { \n    this(new Indenter(DrJava.getConfig().getSetting(INDENT_LEVEL).intValue()));\n  }\n  \n  /** Constructor used from anonymous test classes. */\n  protected AbstractDJDocument(int indentLevel) { \n    this(new Indenter(indentLevel));\n  }\n  \n  /** Constructor used to build a new document with an existing indenter.  Used in tests and super calls from \n    * DefinitionsDocument and interactions documents. */\n  protected AbstractDJDocument(Indenter indenter) { \n    _indenter = indenter;\n    _queryCache = null;\n    _offsetToQueries = null;\n    _initNewIndenter();\n//     System.err.println(\"AbstractDJDocument constructor with indent level \" + indenter.getIndentLevel() \n//    + \" invoked on \" + this);\n  }\n  \n  //-------- METHODS ---------//\n  \n  /** Get the indenter.\n    * @return the indenter\n    */\n  private Indenter getIndenter() { return _indenter; }\n  \n  /** Get the indent level.\n    * @return the indent level\n    */\n  public int getIndent() { return _indent; }\n  \n  /** Set the indent to a particular number of spaces.\n    * @param indent the size of indent that you want for the document\n    */\n  public void setIndent(final int indent) {\n    DrJava.getConfig().setSetting(INDENT_LEVEL, indent);\n    this._indent = indent;\n  }\n  \n  protected void _removeIndenter() {\n//    System.err.println(\"REMOVE INDENTER called\");\n    DrJava.getConfig().removeOptionListener(INDENT_LEVEL, _listener1);\n    DrJava.getConfig().removeOptionListener(AUTO_CLOSE_COMMENTS, _listener2);\n  }\n  \n  /** Only called from within getIndenter(). */\n  private void _initNewIndenter() {\n    // Create the indenter from the config values\n    \n    final Indenter indenter = _indenter;\n//    System.err.println(\"Installing Indent Option Listener for \" + this);\n    _listener1 = new OptionListener<Integer>() {\n      public void optionChanged(OptionEvent<Integer> oce) {\n//        System.err.println(\"Changing INDENT_LEVEL for \" + this + \" to \" + oce.value);\n        indenter.buildTree(oce.value);\n      }\n    };\n    \n    _listener2 = new OptionListener<Boolean>() {\n      public void optionChanged(OptionEvent<Boolean> oce) {\n//        System.err.println(\"Reconfiguring indenter to use AUTO_CLOSE_COMMENTS = \" + oce.value);\n        indenter.buildTree(DrJava.getConfig().getSetting(INDENT_LEVEL));\n      }\n    };\n    \n    DrJava.getConfig().addOptionListener(INDENT_LEVEL, _listener1);\n    DrJava.getConfig().addOptionListener(AUTO_CLOSE_COMMENTS, _listener2);\n  }\n  \n  \n  /** Create a set of normal endings, i.e., semi-colons and braces for the purposes of indenting.\n    * @return the set of normal endings\n    */\n  protected static HashSet<String> _makeNormEndings() {\n    HashSet<String> normEndings = new HashSet<String>();\n    normEndings.add(\";\");\n    normEndings.add(\"{\");\n    normEndings.add(\"}\");\n    normEndings.add(\"(\");\n    return  normEndings;\n  }\n  \n  /** Create a set of Java/GJ keywords for special coloring.\n    * @return the set of keywords\n    */\n  protected static HashSet<String> _makeKeywords() {\n    final String[] words =  {\n      \"import\", \"native\", \"package\", \"goto\", \"const\", \"if\", \"else\", \"switch\", \"while\", \"for\", \"do\", \"true\", \"false\",\n      \"null\", \"this\", \"super\", \"new\", \"instanceof\", \"return\", \"static\", \"synchronized\", \"transient\", \"volatile\", \n      \"final\", \"strictfp\", \"throw\", \"try\", \"catch\", \"finally\", \"throws\", \"extends\", \"implements\", \"interface\", \"class\",\n      \"break\", \"continue\", \"public\", \"protected\", \"private\", \"abstract\", \"case\", \"default\", \"assert\", \"enum\"\n    };\n    HashSet<String> keywords = new HashSet<String>();\n    for (int i = 0; i < words.length; i++) { keywords.add(words[i]); }\n    return  keywords;\n  }\n  \n  /** Create a set of Java/GJ primitive types for special coloring.\n    * @return the set of primitive types\n    */\n  protected static HashSet<String> _makePrimTypes() {\n    final String[] words =  {\n      \"boolean\", \"char\", \"byte\", \"short\", \"int\", \"long\", \"float\", \"double\", \"void\",\n    };\n    HashSet<String> prims = new HashSet<String>();\n    for (String w: words) { prims.add(w); }\n    return prims;\n  }\n  \n//  /** Computes the maximum of x and y. */ \n//  private int max(int x, int y) { return x <= y? y : x; }\n  \n  /** Return all highlight status info for text between start and end. This should collapse adjoining blocks with the\n    * same status into one.  ONLY runs in the event thread.  Perturbs _currentLocation to improve performance.\n    */\n  public ArrayList<HighlightStatus> getHighlightStatus(int start, int end) {\n    \n    assert EventQueue.isDispatchThread();\n    \n    if (start == end) return new ArrayList<HighlightStatus>(0);\n    ArrayList<HighlightStatus> v;\n    \n    setCurrentLocation(start);\n    /* Now ask reduced model for highlight status for chars till end */\n    v = _reduced.getHighlightStatus(start, end - start);\n    \n    /* Go through and find any NORMAL blocks. Within them check for keywords. */\n    for (int i = 0; i < v.size(); i++) {\n      HighlightStatus stat = v.get(i);\n      if (stat.getState() == HighlightStatus.NORMAL) i = _highlightKeywords(v, i);\n    }\n    \n    /* bstoler: Previously we moved back to the old location. This implementation choice severely slowed down \n     * rendering when scrolling because parts are rendered in order. Thus, if old location is 0, but now we've\n     * scrolled to display 100000-100100, if we keep jumping back to 0 after getting every bit of highlight, it \n     * slows stuff down incredibly. */\n    //setCurrentLocation(oldLocation);\n    return v;\n  }\n  \n  /** Distinguishes keywords from normal text in the given HighlightStatus element. Specifically, it looks to see\n    * if the given text contains a keyword. If it does, it splits the HighlightStatus block into separate blocks\n    * so that each keyword has its own block. This process identifies all keywords in the given block.\n    * Note that the given block must have state NORMAL.  Only runs in the event thread.\n    * @param v Vector with highlight info\n    * @param i Index of the single HighlightStatus to check for keywords in\n    * @return the index into the vector of the last processed element\n    */\n  private int _highlightKeywords(ArrayList<HighlightStatus> v, int i) {\n    // Basically all non-alphanumeric chars are delimiters\n    final HighlightStatus original = v.get(i);\n    final String text;\n    \n    \n    try { text = getText(original.getLocation(), original.getLength()); }\n    catch (BadLocationException e) { throw new UnexpectedException(e); }\n    \n    // Because this text is not quoted or commented, we can use the simpler tokenizer StringTokenizer. We have \n    // to return delimiters as tokens so we can keep track of positions in the original string.\n    StringTokenizer tokenizer = new StringTokenizer(text, delimiters, true);\n    \n    // start and length of the text that has not yet been put back into the vector.\n    int start = original.getLocation();\n    int length = 0;\n    \n    // Remove the old element from the vector.\n    v.remove(i);\n    \n    // Index where we are in the vector. It's the location we would insert new things into.\n    int index = i;\n    \n    boolean process;\n    int state = 0;\n    while (tokenizer.hasMoreTokens()) {\n      String token = tokenizer.nextToken();\n      \n      //first check to see if we need highlighting\n      process = false;\n      if (_isType(token)) {\n        //right now keywords incl prim types, so must put this first\n        state = HighlightStatus.TYPE;\n        process = true;\n      } \n      else if (_keywords.contains(token)) {\n        state = HighlightStatus.KEYWORD;\n        process = true;\n      } \n      else if (_isNum(token)) {\n        state = HighlightStatus.NUMBER;\n        process = true;\n      }\n      \n      if (process) {\n        // first check if we had any text before the token\n        if (length != 0) {\n          HighlightStatus newStat = new HighlightStatus(start, length, original.getState());\n          v.add(index, newStat);\n          index++;\n          start += length;\n          length = 0;\n        }\n        \n        // Now pull off the keyword\n        int keywordLength = token.length();\n        v.add(index, new HighlightStatus(start, keywordLength, state));\n        index++;\n        // Move start to the end of the keyword\n        start += keywordLength;\n      }\n      else {\n        // This is not a keyword, so just keep accumulating length\n        length += token.length();\n      }\n    }\n    // Now check if there was any text left after the keywords.\n    if (length != 0) {\n      HighlightStatus newStat = new HighlightStatus(start, length, original.getState());\n      v.add(index, newStat);\n      index++;\n      length = 0;\n    }\n    // return one before because we need to point to the last one we inserted\n    return index - 1;\n  }\n  \n  /** Checks to see if the current string is a number\n    * @return true if x is a parseable number, i.e. either parsable as a double or as a long after chopping off a possible trailing 'L' or 'l'\n    */\n  static boolean _isNum(String x) {\n    try {\n      Double.parseDouble(x);\n      return true;\n    } \n    catch (NumberFormatException e) {\n      int radix = 10;\n      int begin = 0;\n      int end = x.length();\n      int bits = 32;\n      if (end-begin>1) {\n        // string is not empty\n        char ch = x.charAt(end-1);\n        if ((ch=='l')||(ch=='L')) { // skip trailing 'l' or 'L'\n          --end;\n          bits = 64;  \n        }\n        if (end-begin>1) {\n          // string is not empty\n          if (x.charAt(0) == '0') { // skip leading '0' of octal or hexadecimal literal\n            ++begin;\n            radix = 8;\n            if (end-begin>1) {\n              // string is not empty\n              ch = x.charAt(1);\n              if ((ch=='x')||(ch=='X')) { // skip 'x' or 'X' from hexadecimal literal\n                ++begin;\n                radix = 16;\n              }\n            }\n          }\n        }\n      }\n      try {\n        // BigInteger can parse hex numbers representing negative longs; Long can't\n        java.math.BigInteger val = new java.math.BigInteger(x.substring(begin, end), radix);\n        return (val.bitLength() <= bits);\n      }\n      catch (NumberFormatException e2) {\n        return false;\n      }\n    }\n  }\n  \n  /** Checks to see if the current string is a type. A type is assumed to be a primitive type OR\n    * anything else that begins with a capitalized character\n    */\n  private boolean _isType(String x) {\n    if (_primTypes.contains(x)) return true;\n    \n    try { return Character.isUpperCase(x.charAt(0)); } \n    catch (IndexOutOfBoundsException e) { return false; }\n  }\n  \n  /** Returns whether the given text only has spaces. */\n  public static boolean hasOnlySpaces(String text) { return (text.trim().length() == 0); }\n  \n  /** Fire event that styles changed from current location to the end.\n    * Right now we do this every time there is an insertion or removal.\n    * Two possible future optimizations:\n    * <ol>\n    * <li>Only fire changed event if text other than that which was inserted\n    *    or removed *actually* changed status. If we didn't changed the status\n    *    of other text (by inserting or deleting unmatched pair of quote or\n    *    comment chars), no change need be fired.\n    * <li>If a change must be fired, we could figure out the exact end\n    *    of what has been changed. Right now we fire the event saying that\n    *    everything changed to the end of the document.\n    * </ol>\n    *\n    * I don't think we'll need to do either one since it's still fast now.\n    * I think this is because the UI only actually paints the things on the screen anyway.\n    */\n  protected abstract void _styleChanged(); \n  \n  /** Add a character to the underlying reduced model. ASSUMEs _reduced lock is already held!\n    * @param curChar the character to be added. */\n  private void _addCharToReducedModel(char curChar) {\n//    _clearCache(_currentLocation);  // redundant; already done in insertUpdate\n    _reduced.insertChar(curChar);\n  }\n  \n  /** Get the current location of the cursor in the document.  Unlike the usual swing document model, which is \n    * stateless, we maintain a cursor position within our implementation of the reduced model.  Can be modified \n    * by any thread locking _reduced.  The returned value may be stale if _reduced lock is not held\n    * @return where the cursor is as the number of characters into the document\n    */\n  public int getCurrentLocation() { return _currentLocation; }\n  \n  /** Change the current location of the document.  Only runs in the event thread.\n    * @param loc the new absolute location \n    */\n  public void setCurrentLocation(int loc) {\n    if (loc < 0) {\n      throw new UnexpectedException(\"Illegal location \" + loc);  // was loc = 0\n    }\n    if (loc > getLength()) {\n      throw new UnexpectedException(\"Illegal location \" + loc); // was loc = getLength();\n    }\n    int dist = loc - _currentLocation;  // _currentLocation and _reduced can be updated asynchronously\n    _currentLocation = loc;\n    _reduced.move(dist);   // must call _reduced.move here; this._move changes _currentLocation\n//    System.err.println(\"_setCurrentLocation(\" + loc + \") executed\");\n  }\n  \n  /** Moves _currentLocation the specified distance.\n    * Identical to _setCurrentLocation, except that input arg is relative rather than absolute and the new location\n    * is bounds checked.  Only runs in the event thread.\n    * @param dist the distance from the current location to the new location.\n    */\n  public void move(int dist) {\n    int newLocation = _currentLocation + dist;\n    if (0 <= newLocation && newLocation <= getLength()) {\n      _reduced.move(dist);\n      _currentLocation = newLocation;\n    }\n    else throw new IllegalArgumentException(\"AbstractDJDocument.move(\" + dist + \") places the cursor at \" + \n                                            newLocation + \" which is out of range\");\n  } \n  \n  /** Finds the match for the closing brace immediately to the left, assuming there is such a brace. On failure, \n    * returns -1.  Only runs in the event thread.\n    * @return the relative distance backwards to the offset before the matching brace.\n    */\n  public int balanceBackward() { \n    int origPos = _currentLocation;\n    try {\n      if (_currentLocation < 2) return -1;\n      char prevChar = _getText(_currentLocation - 1, 1).charAt(0);\n//      Utilities.show(\"_currentLocation = \" + _currentLocation + \"; prevChar = '\" + prevChar + \"'\");\n      if (prevChar != '}' && prevChar != ')' && prevChar != ']') return -1;\n      return _reduced.balanceBackward();\n    }\n    finally { setCurrentLocation(origPos); }\n  }\n  \n  /** FindS the match for the open brace immediately to the right, assuming there is such a brace.  On failure, \n    * returns -1.  Only runs in event thread.\n    * @return the relative distance forwards to the offset after the matching brace.\n    */\n  public int balanceForward() {\n    int origPos = _currentLocation;\n    try {\n      if (_currentLocation == 0) return -1;\n      char prevChar = _getText(_currentLocation - 1, 1).charAt(0);\n//      System.err.println(\"_currentLocation = \" + _currentLocation + \"; prevChar = '\" + prevChar + \"'\");\n      if (prevChar != '{' && prevChar != '(' && prevChar != '[') return -1;\n//      System.err.println(\"Calling _reduced.balanceForward()\");\n      return _reduced.balanceForward() ; \n    }\n    finally { setCurrentLocation(origPos); }\n  }\n  \n  /** This method is used ONLY inside of document Read Lock.  This method is UNSAFE in any other context!\n    * @return The reduced model of this document.\n    */\n  public ReducedModelControl getReduced() { return _reduced; } \n  \n  /** Assumes that read lock and reduced lock are already held. */\n  public ReducedModelState stateAtRelLocation(int dist) { return _reduced.moveWalkerGetState(dist); }\n  \n  /** Assumes that read lock and reduced lock are already held. */\n  public ReducedModelState getStateAtCurrent() { \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    return _reduced.getStateAtCurrent(); \n  }\n  \n  /** Assumes that read lock and reduced lock are already held. */\n  public void resetReducedModelLocation() { _reduced.resetLocation(); }\n  \n  /** Searching backwards, finds the position of the enclosing brace of specified type.  Ignores comments.  Only runs in\n    * event thread.  TODO: implement this method by iterating getEnclosingBrace until brace of specified form is found\n    * @param pos Position to start from\n    * @param opening opening brace character\n    * @param closing closing brace character\n    * @return position of enclosing brace, or ERROR_INDEX (-1) if beginning\n    * of document is reached.\n    */\n  public int findPrevEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException {\n    \n    // assert EventQueue.isDispatchThread();\n    // Check cache\n    final Query key = new Query.PrevEnclosingBrace(pos, opening, closing);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null) return cached.intValue();\n    \n    if (pos >= getLength() || pos <= 0) { return -1; }\n    \n    final char[] delims = {opening, closing};\n    int reducedPos = pos;\n    int i;  // index of for loop below\n    int braceBalance = 0;\n    \n    String text = getText(0, pos);\n    \n    final int origPos = _currentLocation;\n    // Move reduced model to location pos\n    setCurrentLocation(pos);  // reduced model points to pos == reducedPos\n    \n    // Walk backwards from specificed position\n    for (i = pos - 1; i >= 0; i--) {\n      /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, \n       * 0 <= i < reducedPos <= pos */\n      \n      if (match(text.charAt(i), delims)) {\n        // Move reduced model to walker's location\n        setCurrentLocation(i);  // reduced model points to i\n        reducedPos = i;          // reduced model points to reducedPos\n        \n        // Check if matching char should be ignored because it is within a comment, \n        // quotes, or ignored paren phrase\n        if (isShadowed()) continue;  // ignore matching char \n        else {\n          // found valid matching char\n          if (text.charAt(i) == closing) ++braceBalance;\n          else {\n            if (braceBalance == 0) break; // found our opening brace\n            --braceBalance;\n          }\n        }\n      }\n    }\n    \n    /* Invariant: same as for loop except that -1 <= i <= reducedPos <= pos */\n    \n    setCurrentLocation(origPos);    // Restore the state of the reduced model;\n    \n    if (i == -1) reducedPos = -1; // No matching char was found\n    _storeInCache(key, reducedPos, pos - 1);\n    \n    // Return position of matching char or ERROR_INDEX (-1) \n    return reducedPos;  \n  }\n  \n  /** @return true iff _currentLocation is inside comment pr string. */\n  public boolean isShadowed() { return _reduced.isShadowed(); }\n  \n  /** @return true iff specified pos is inside comment pr string. */\n  public boolean isShadowed(int pos) {\n    int origPos = _currentLocation;\n    setCurrentLocation(pos);\n    boolean result = isShadowed();\n    setCurrentLocation(origPos);\n    return result;\n  }\n  \n  /** Searching forward, finds the position of the enclosing brace, which may be a pointy bracket. NB: ignores comments.\n    * Only runs in event thread.\n    * @param pos Position to start from\n    * @param opening opening brace character\n    * @param closing closing brace character\n    * @return position of enclosing brace, or ERROR_INDEX (-1) if beginning of document is reached.\n    */\n  public int findNextEnclosingBrace(final int pos, final char opening, final char closing) throws BadLocationException {\n    assert EventQueue.isDispatchThread();\n    \n    // Check cache\n    final Query key = new Query.NextEnclosingBrace(pos, opening, closing);\n    final Integer cached = (Integer) _checkCache(key);\n    \n    if (cached != null) return cached.intValue();\n    if (pos >= getLength() - 1) { return -1; }\n    \n    final char[] delims = {opening, closing};\n    int reducedPos = pos;\n    int i;  // index of for loop below\n    int braceBalance = 0;\n    \n    String text = getText();\n    \n    final int origPos = _currentLocation;\n    // Move reduced model to location pos\n    setCurrentLocation(pos);  // reduced model points to pos == reducedPos\n    \n    // Walk forward from specificed position\n    for (i = pos + 1; i < text.length(); i++) {\n      /* Invariant: reduced model points to reducedPos, text[pos:i-1] contains no valid delims, \n       * pos <= reducedPos < i <= text.length() */\n      \n      if (match(text.charAt(i),delims)) {\n        // Move reduced model to walker's location\n        setCurrentLocation(i);  // reduced model points to i\n        reducedPos = i;          // reduced model points to reducedPos\n        \n        // Check if matching char should be ignored because it is within a comment, quotes, or ignored paren phrase\n        if (isShadowed()) continue;  // ignore matching char \n        else {\n          // found valid matching char\n          if (text.charAt(i) == opening) ++braceBalance;\n          else {\n            if (braceBalance == 0) break; // found our closing brace\n            --braceBalance;\n          }\n        }\n      }\n    }\n    \n    /* Invariant: same as for loop except that pos <= reducedPos <= i <= text.length() */\n    \n    setCurrentLocation(origPos);    // Restore the state of the reduced model;\n    \n    if (i == text.length()) reducedPos = -1; // No matching char was found\n    _storeInCache(key, reducedPos, reducedPos);\n    // Return position of matching char or ERROR_INDEX (-1)     \n    return reducedPos;  \n  }\n  \n  /** Searching backwards, finds the position of the first character that is one of the given delimiters.  Does\n    * not look for delimiters inside bracketed phrases (e.g., skips semicolons used inside for statements.).  \n    * Bracketed phrases exclude those ending a delimiter (e.g., '}' if a delimiter).\n    * NB: ignores comments.\n    * @param pos Position to start from\n    * @param delims array of characters to search for\n    * @return position of first matching delimiter, or ERROR_INDEX (-1) if beginning of document is reached.\n    */\n  public int findPrevDelimiter(int pos, char[] delims) throws BadLocationException {\n    return findPrevDelimiter(pos, delims, true);\n  }\n  \n  /** Searching backwards, finds position of first character that is a given delimiter, skipping over balanced braces\n    * if so instructed.  Does not look for delimiters inside a brace phrase if skipBracePhrases is true.  Ignores\n    * comments.  Only runs in event thread.\n    * @param pos Position to start from\n    * @param delims array of characters to search for\n    * @param skipBracePhrases whether to look for delimiters inside brace phrases\n    * @return position of first matching delimiter, or ERROR_INDEX (-1) if beginning of document is reached.\n    */\n  public int findPrevDelimiter(final int pos, final char[] delims, final boolean skipBracePhrases)\n    throws BadLocationException {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    // Check cache\n    final Query key = new Query.PrevDelimiter(pos, delims, skipBracePhrases);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null) {\n//      System.err.println(cached.intValue() + \" found in cache\");\n      return cached.intValue();\n    }\n    \n    int reducedPos = pos;\n    int i;  // index for for loop below\n    int lineStartPos = _getLineStartPos(pos);\n    if (lineStartPos < 0) lineStartPos = 0;\n    \n    if (lineStartPos >= pos) i = lineStartPos - 1;  // the line containing pos is empty  \n    else { \n      assert lineStartPos < pos;\n      String line = getText(lineStartPos, pos - lineStartPos);  // the line containing pos\n      final int origPos = _currentLocation;\n      \n      // Walk backwards from specificed position, scanning current line for a delimiter\n      for (i = pos - 1; i >= lineStartPos; i--) {\n        /* Invariant: reduced model points to reducedPos, text[i+1:pos] contains no valid delims, \n         * 0 <= i < reducedPos <= pos */\n        // Move reduced model to location pos\n        int irel = i - lineStartPos;\n        setCurrentLocation(i);  // reduced model points to i\n        if (isShadowed() || isCommentOpen(line, irel)) {\n//            System.err.println(text.charAt(i) + \" at pos \" + i + \" is shadowed\");\n          continue;\n        }\n        char ch = line.charAt(irel);\n        \n        if (match(ch, delims) /* && ! isShadowed() && (! skipParenPhrases || ! posInParenPhrase())*/) {\n          reducedPos = i;    // record valid match                                                                              \n          break;\n        }\n        \n        if (skipBracePhrases && match(ch, CLOSING_BRACES) ) {  // note that delims have already been matched\n//            Utilities.show(\"closing bracket is '\" + ch + \"' at pos \" + i);\n          setCurrentLocation(i + 1); // move cursor immediately to right of ch (a brace)\n//            Utilities.show(\"_currentLocation = \" + _currentLocation);\n          int dist = balanceBackward();  // bypasses redundant read locking\n          if (dist == -1) { // if braces do not balance, return failure\n            i = -1;\n//              Utilities.show(\"dist = \" + dist + \" No matching brace found\");\n            break;\n          }\n          assert dist > 0;\n//            Utilities.show(\"text = '\" + getText(i + 1 - dist, dist) + \"' dist = \" + dist + \" matching bracket is '\" \n//            + text.charAt(i) + \"' at pos \" + i);\n          setCurrentLocation(i + 1 - dist);  // skip over balanced brace text, decrementing _currentLocation\n          i = _currentLocation;\n          // Decrementing i skips over matching brace; could skip back into text preceding current line\n          continue;\n        }\n      }  // end for\n      \n      setCurrentLocation(origPos);    // Restore the state of the reduced model;\n    } // end processing of text on same line as pos\n    \n    /* Invariant: same as for loop except that lineStartPos-1 <= i <= reducedPos <= pos && 0 <= reducedPos */\n    \n    if (i < lineStartPos) {  // No matching char was found on line containing pos; must look at preceding text\n      if (i <= 0) reducedPos = -1;  // No preceding text left to search\n      else reducedPos = findPrevDelimiter(i, delims, skipBracePhrases); \n    }\n    \n    _storeInCache(key, reducedPos, pos - 1);\n//      Utilities.show(\"findPrevDelimiter returning \" + reducedPos);\n    \n    // Return position of matching char or ERROR_INDEX (-1) \n    return reducedPos;  \n  }\n  \n  private static boolean match(char c, char[] delims) {\n    for (char d : delims) { if (c == d) return true; } // Found matching delimiter\n    return false;\n  }\n  \n  /** This function finds the given character in the same statement as the given position, and before the given\n    * position.  It is used by QuestionExistsCharInStmt and QuestionExistsCharInPrevStmt\n    */\n  public boolean findCharInStmtBeforePos(char findChar, int position) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    if (position == -1) {\n      String msg = \n        \"Argument endChar to QuestionExistsCharInStmt must be a char that exists on the current line.\";\n      throw new UnexpectedException(new IllegalArgumentException(msg));\n    }\n    \n    char[] findCharDelims = {findChar, ';', '{', '}'};\n    int prevFindChar;\n    \n    // Find the position of the preceding occurrence findChar position (looking in paren phrases as well)\n    boolean found;\n    \n    try {\n      prevFindChar = this.findPrevDelimiter(position, findCharDelims, false);\n      \n      if ((prevFindChar == -1) || (prevFindChar < 0)) return false; // no such char\n      \n      // Determine if prevFindChar is findChar or the end of statement delimiter\n      String foundString = getText(prevFindChar, 1);\n      char foundChar = foundString.charAt(0);\n      found = (foundChar == findChar);\n    }\n    catch (Throwable t) { throw new UnexpectedException(t); }\n    return found;\n  }\n  \n//  /** Finds the position of the first non-whitespace, non-comment character before pos.  Skips comments and all \n//    * whitespace, including newlines.\n//    * @param pos Position to start from\n//    * @param whitespace chars considered as white space\n//    * @return position of first non-whitespace character before pos OR ERROR_INDEX (-1) if no such char\n//    */\n//  public int findPrevCharPos(int pos, char[] whitespace) throws BadLocationException {\n//    return _findPrevCharPos(pos, whitespace); }\n//  }\n  \n  /** Finds the position of the first non-whitespace, non-comment character before pos.  Skips comments and all \n    * whitespace, including newlines.\n    * @param pos Position to start from\n    * @param whitespace chars considered as white space\n    * @return position of first non-whitespace character before pos OR ERROR_INDEX (-1) if no such char\n    */\n  public int _findPrevCharPos(final int pos, final char[] whitespace) throws BadLocationException {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    // Check cache\n    final Query key = new Query.PrevCharPos(pos, whitespace);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null)  return cached.intValue();\n    \n    int reducedPos = pos;\n    int i = pos - 1;\n    String text;\n    text = getText(0, pos); \n    \n    final int oldPos = _currentLocation;\n    // Move reduced model to location reducedPpos\n    setCurrentLocation(reducedPos);\n    \n    // Walk backward from specified position\n    \n    while (i >= 0) { \n      /* Invariant: reduced model points to reducedPos, 0 <= i < reducedPos <= pos, \n       * text[i+1:pos-1] contains invalid chars */\n      \n      if (match(text.charAt(i), whitespace)) {\n        // ith char is whitespace\n        i--;\n        continue;\n      }\n      \n      // Found a non-whitespace char;  move reduced model to location i\n      setCurrentLocation(i);\n      reducedPos = i;                  // reduced model points to i == reducedPos\n      \n      // Check if matching char is within a comment (not including opening two characters)\n      if ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||\n          (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT))) {\n        i--;\n        continue;\n      }\n      \n      if (i > 0 && _isStartOfComment(text, i - 1)) { /* char i is second character in opening comment marker */  \n        // Move i past the first comment character and continue searching\n        i = i - 2;\n        continue;\n      }\n      \n      // Found valid previous character\n      break;\n    }\n    \n    /* Exit invariant same as for loop except that i <= reducedPos because at break i = reducedPos */\n    setCurrentLocation(oldPos);\n    \n    int result = reducedPos;\n    if (i < 0) result = -1;\n    _storeInCache(key, result, pos - 1);\n    return result;\n  }\n  \n  /** Checks the query cache for a stored value.  Returns the value if it has been cached, or null \n    * otherwise. Calling convention for keys: methodName:arg1:arg2.\n    * @param key Name of the method and arguments\n    */\n  protected Object _checkCache(final Query key) {\n    if (_queryCache == null) return null;\n    return _queryCache.get(key); \n  }\n  \n  /** Stores the given result in the helper method cache. Query classes define equality structurally.\n    * @param query  A canonical description of the query\n    * @param answer  The answer returned for the query\n    * @param offset  The offset bounding the right edge of the text on which the query depends; if (0:offset) in\n    *                the document is unchanged, the query should return the same answer.\n    */\n  protected void _storeInCache(final Query query, final Object answer, final int offset) {\n    if (_queryCache == null) return;\n    _queryCache.put(query, answer);\n    _addToOffsetsToQueries(query, offset);\n  }\n  \n  /** Clears the memozing cache of queries with offset >= than specified value.  Should be called every time the \n    * document is modified. \n    */\n  protected void _clearCache(int offset) {\n    if (_queryCache == null) return;\n    \n    if (offset <= 0) {\n      _queryCache.clear();\n      _offsetToQueries.clear();\n      return;\n    }\n    // The Integer[] copy of the key set is required to avoid ConcurrentModifiationExceptions.  Ugh!\n    Integer[] deadOffsets = _offsetToQueries.tailMap(offset).keySet().toArray(new Integer[0]);\n    for (int i: deadOffsets) {\n      for (Query query: _offsetToQueries.get(i)) _queryCache.remove(query);  // remove query entry from cache\n      _offsetToQueries.remove(i);   // remove query bucket for i from offsetToQueries table\n    }\n  }\n  \n  /** Add <query,offset> pair to _offsetToQueries map. Assumes lock on _queryCache is already held. */\n  private void _addToOffsetsToQueries(final Query query, final int offset) {\n    List<Query> selectedQueries = _offsetToQueries.get(offset);\n    if (selectedQueries == null) {\n      selectedQueries = new LinkedList<Query>();\n      _offsetToQueries.put(offset, selectedQueries);\n    }\n    selectedQueries.add(query);\n  }\n  \n  /** Default indentation - uses OTHER flag and no progress indicator.  Assume write lock is already held.\n    * @param selStart the offset of the initial character of the region to indent\n    * @param selEnd the offset of the last character of the region to indent\n    */\n  public void indentLines(int selStart, int selEnd) {\n    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    try { indentLines(selStart, selEnd, Indenter.IndentReason.OTHER, null); }\n    catch (OperationCanceledException oce) {\n      // Indenting without a ProgressMonitor should never be cancelled!\n      throw new UnexpectedException(oce);\n    }\n  }\n  \n  /** Parameterized indentation for special-case handling.  If selStart == selEnd, then the line containing the\n    * currentLocation is indented.  The values of selStart and selEnd are ignored!\n    * \n    * @param selStart the offset of the initial character of the region to indent\n    * @param selEnd the offset of the last character of the region to indent\n    * @param reason a flag from {@link Indenter} to indicate the reason for the indent\n    *        (indent logic may vary slightly based on the trigger action)\n    * @param pm used to display progress, null if no reporting is desired\n    */\n  public void indentLines(int selStart, int selEnd, Indenter.IndentReason reason, ProgressMonitor pm)\n    throws OperationCanceledException {\n    \n    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    // Begins a compound edit.\n    // int key = startCompoundEdit(); // commented out in connection with the FrenchKeyBoard Fix\n    \n    try {\n      if (selStart == selEnd) {  // single line to indent\n//          Utilities.showDebug(\"selStart = \" + selStart + \" currentLocation = \" + _currentLocation);\n        Position oldPosition = createUnwrappedPosition(_currentLocation);\n        int lineStart = _getLineStartPos(selStart);\n        if (lineStart <  0) lineStart = 0;  // selStart on first line\n        setCurrentLocation(lineStart);\n        // Indent, updating current location if necessary.\n//          Utilities.showDebug(\"Indenting line at offset \" + selStart);\n        if (_indentLine(reason)) {\n          setCurrentLocation(oldPosition.getOffset()); // moves currentLocation back to original offset on line\n          if (onlyWhiteSpaceBeforeCurrent()) move(_getWhiteSpace());  // passes any additional spaces before firstNonWS\n        }\n      }\n      else _indentBlock(selStart, selEnd, reason, pm);\n    }\n    catch (BadLocationException e) { throw new UnexpectedException(e); }\n    \n    // Ends the compound edit.\n    //endCompoundEdit(key);   //Changed to endLastCompoundEdit in connection with the FrenchKeyBoard Fix\n    endLastCompoundEdit();\n  }\n  \n  /** Indents the lines between and including the lines containing points start and end.  Only runs in event thread.\n    * @param start Position in document to start indenting from\n    * @param end Position in document to end indenting at\n    * @param reason a flag from {@link Indenter} to indicate the reason for the indent\n    *        (indent logic may vary slightly based on the trigger action)\n    * @param pm used to display progress, null if no reporting is desired\n    */\n  private void _indentBlock(final int start, final int end, Indenter.IndentReason reason, ProgressMonitor pm)\n    throws OperationCanceledException, BadLocationException {\n    \n    // Set up the query cache;\n    _queryCache = new HashMap<Query, Object>(INIT_CACHE_SIZE);\n    _offsetToQueries = new TreeMap<Integer, List<Query>>();\n    \n    // Keep marker at the end. This Position will be the correct endpoint no matter how we change \n    // the doc doing the indentLine calls.\n    final Position endPos = this.createUnwrappedPosition(end);\n    // Iterate, line by line, until we get to/past the end\n    int walker = start;\n//    _indentInProgress = true;\n    while (walker < endPos.getOffset()) {\n      setCurrentLocation(walker);\n      // Keep pointer to walker position that will stay current regardless of how indentLine changes things\n      Position walkerPos = this.createUnwrappedPosition(walker);\n      // Indent current line\n      // We ignore current location info from each line, because it probably doesn't make sense in a block context.\n      _indentLine(reason);  // this operation is atomic\n      // Move back to walker spot\n      setCurrentLocation(walkerPos.getOffset());\n      walker = walkerPos.getOffset();\n      \n      if (pm != null) {\n        pm.setProgress(walker); // Update ProgressMonitor.\n        if (pm.isCanceled()) throw new OperationCanceledException(); // Check for cancel button-press.\n      }\n      \n      // Adding 1 makes us point to the first character AFTER the next newline. We don't actually move the\n      // location yet. That happens at the top of the loop, after we check if we're past the end. \n      walker += _reduced.getDistToNextNewline() + 1;\n//      _indentInProgress = false;\n    }\n    \n    // disable the query cache\n    _queryCache = null;\n    _offsetToQueries = null;\n  }\n  \n  /** Indents a line using the Indenter.  Public ONLY for testing purposes. */\n  public boolean _indentLine(Indenter.IndentReason reason) { return getIndenter().indent(this, reason); }\n  \n  /** Returns the \"intelligent\" beginning of line.  If currPos is to the right of the first \n    * non-whitespace character, the position of the first non-whitespace character is returned.  \n    * If currPos is at or to the left of the first non-whitespace character, the beginning of\n    * the line is returned.\n    * @param currPos A position on the current line\n    */\n  public int getIntelligentBeginLinePos(int currPos) throws BadLocationException {\n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    String prefix;\n    int firstChar;\n    firstChar = _getLineStartPos(currPos);\n    prefix = getText(firstChar, currPos-firstChar);\n    \n    // Walk through string until we find a non-whitespace character\n    int i;\n    int len = prefix.length();\n    \n    for (i = 0; i < len; i++ ) { if (! Character.isWhitespace(prefix.charAt(i))) break; }\n    \n    // If we found a non-WS char left of curr pos, return it\n    if (i < len) {\n      int firstRealChar = firstChar + i;\n      if (firstRealChar < currPos) return firstRealChar;\n    }\n    // Otherwise, return the beginning of the line\n    return firstChar;\n  }\n  \n  /** Returns the number of blanks in the indent prefix for the start of the statement identified by pos.  Uses a \n    * default set of delimiters. (';', '{', '}') and a default set of whitespace characters (' ', '\\t', n', ',')\n    * @param pos Cursor position\n    */\n  public int _getIndentOfCurrStmt(int pos) {\n    char[] delims = {';', '{', '}'};\n    char[] whitespace = {' ', '\\t', '\\n', ','};\n    return _getIndentOfCurrStmt(pos, delims, whitespace);\n  }\n  \n  /** Returns the number of blanks in the indent prefix of the start of the statement identified by pos.  Uses a \n    * default set of whitespace characters: {' ', '\\t', '\\n', ','}\n    * @param pos Cursor position\n    */\n  public int _getIndentOfCurrStmt(int pos, char[] delims) {\n    char[] whitespace = {' ', '\\t', '\\n',','};\n    return _getIndentOfCurrStmt(pos, delims, whitespace);\n  }\n  \n  /** Returns the number of blanks in the indent prefix of the start of the statement identified by pos,\n    * assuming that the statement is already properly indented\n    * @param pos  the position identifying the current statement\n    * @param delims  delimiter characters denoting end of statement\n    * @param whitespace  characters to skip when looking for beginning of next statement\n    */\n  public int _getIndentOfCurrStmt(final int pos, final char[] delims, final char[] whitespace)  {\n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    try {\n      // Check cache\n      int lineStart = _getLineStartPos(pos);  // returns 0 for initial line\n      \n      final Query key = new Query.IndentOfCurrStmt(lineStart, delims, whitespace);\n      final Integer cached = (Integer) _checkCache(key);\n      if (cached != null) return cached;  // relying on auto-unboxing\n      \n      // Find the previous delimiter (typically an enclosing brace or closing symbol) skipping over balanced braces\n      // that are not delims\n      boolean reachedStart = false;\n      int prevDelim = findPrevDelimiter(lineStart, delims, /* skipBracePhrases */ true);\n      \n      if (prevDelim == -1) reachedStart = true; // no delimiter found\n      \n      // From the previous delimiter or start, find the next non-whitespace character (why?)\n      int nextNonWSChar;\n      if (reachedStart) nextNonWSChar = getFirstNonWSCharPos(0);\n      else nextNonWSChar = getFirstNonWSCharPos(prevDelim + 1, whitespace, false);\n      \n      // If the end of the document was reached\n      if (nextNonWSChar == -1) nextNonWSChar = getLength();\n      \n      // The following statement looks right; otherwise, the indenting of the current line depends on how it is indented\n//        if (nextNonWSChar >= lineStart) nextNonWSChar = prevDelim;  \n      \n      // Get the start of the line of the non-ws char\n      int newLineStart = _getLineStartPos(nextNonWSChar);\n      \n      // Get the position of the first non-ws character on this line (or end of line if no such char\n      int firstNonWS = _getLineFirstCharPos(newLineStart);\n      int wSPrefix = firstNonWS - newLineStart;\n      _storeInCache(key, wSPrefix, firstNonWS);  // relying on autoboxing\n      return wSPrefix;\n    }\n    catch(BadLocationException e) { throw new UnexpectedException(e); }\n//    Utilities.show(\"getIdentCurrStmt(...) call completed\");     \n  }\n  \n// Not current used.\n//  /** Gets the white space prefix preceding the first non-blank/tab character on the line identified by pos. \n//    * Assumes that line has nonWS character.\n//    */\n//  public String getWSPrefix(int pos) {\n//  assert EventQueue.isDispatchThread();\n//    try {\n//        \n//        // Get the start of this line\n//        int lineStart = _getLineStartPos(pos);\n//        // Get the position of the first non-ws character on this line\n//        int firstNonWSPos = _getLineFirstCharPos(pos);\n//        return StringOps.getBlankString(firstNonWSPos - lineStart);\n//    }\n//    catch(BadLocationException e) { throw new UnexpectedException(e); }\n//  }\n  \n  /** Determines if the given character exists on the line where the given cursor position is.  Does not search\n    * inside quotes or comments. <b>Does not work if character being searched for is a '/' or a '*'</b>.  Only\n    * read lock is already held.\n    * @param pos Cursor position\n    * @param findChar Character to search for\n    * @return true if this node's rule holds.\n    */\n  public int findCharOnLine(final int pos, final char findChar) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();  // violated in some unit tests\n    \n    // Check cache\n    final Query key = new Query.CharOnLine(pos, findChar);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null) return cached.intValue();\n    \n    int i;\n    int matchIndex; // absolute index of matching character \n    \n    try {\n      final int oldPos = _currentLocation;\n      int lineStart = _getLineStartPos(pos);\n      int lineEnd = _getLineEndPos(pos);\n      String lineText = getText(lineStart, lineEnd - lineStart);\n      i = lineText.indexOf(findChar, 0);\n      matchIndex = i + lineStart;\n      \n      while (i != -1) { // match found\n        /* Invariant: reduced model points to original location (here), lineText[0:i-1] does not contain valid \n         *            findChar, lineText[i] == findChar which may or may not be valid. */\n        \n        // Move reduced model to location of ith char\n        setCurrentLocation(matchIndex);  // move reduced model to location matchIndex\n        \n        // Check if matching char is in comment or quotes\n        if (_reduced.getStateAtCurrent().equals(FREE)) break; // found matching char\n        \n        // matching character is not valid, try again\n        i = lineText.indexOf(findChar, i+1);\n      }\n      setCurrentLocation(oldPos);  // restore old position\n      \n      if (i == -1) matchIndex = -1;\n      _storeInCache(key, matchIndex, Math.max(pos - 1, matchIndex));\n    }\n    catch (BadLocationException e) { throw new UnexpectedException(e); }\n    \n    return matchIndex;\n  }\n  \n  /** Returns the absolute position of the beginning of the current line.  (Just after most recent newline, or 0.) \n    * Doesn't ignore comments.\n    * @param pos Any position on the current line\n    * @return position of the beginning of this line\n    */\n  public int _getLineStartPos(final int pos) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    if (pos < 0 || pos > getLength()) return -1;\n    // Check cache\n    final Query key = new Query.LineStartPos(pos);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null) return cached.intValue();\n    \n    int dist;\n    \n    final int oldPos = _currentLocation;\n    setCurrentLocation(pos);\n    dist = _reduced.getDistToStart(0);\n    setCurrentLocation(oldPos);\n    \n    int newPos = 0;\n    if (dist >= 0)  newPos = pos - dist;\n    _storeInCache(key, newPos, pos - 1);\n    return newPos;  // may equal 0\n  }\n  \n  /** Returns the absolute position of the end of the current line.  (At the next newline, or the end of the document.)\n    * @param pos Any position on the current line\n    * @return position of the end of this line\n    */\n  public int _getLineEndPos(final int pos) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    if (pos < 0 || pos > getLength()) return -1;\n    \n    // Check cache\n    final Query key = new Query.LineEndPos(pos);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null) return cached.intValue();\n    \n    int dist, newPos;\n    \n    final int oldPos = _currentLocation;\n    setCurrentLocation(pos);\n    dist = _reduced.getDistToNextNewline();\n    setCurrentLocation(oldPos);\n    \n    newPos = pos + dist;\n    assert newPos == getLength() || _getText(newPos, 1).charAt(0) == newline;\n    _storeInCache(key, newPos, newPos);\n    return newPos;\n  }\n  \n  /** Returns the absolute position of the first non-blank/tab character on the current line including comment text or\n    * the end of the line if no non-blank/tab character is found.\n    * TODO: get rid of tab character references in AbstractDJDocument and related files and prevent insertion of tabs\n    * @param pos position on the line\n    * @return position of first non-blank/tab character on this line, or the end of the line if no non-blank/tab \n    *         character is found.\n    */\n  public int _getLineFirstCharPos(final int pos) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    // Check cache\n    final Query key = new Query.LineFirstCharPos(pos);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null)  return cached.intValue();\n    \n    final int startLinePos = _getLineStartPos(pos);\n    final int endLinePos = _getLineEndPos(pos);\n    int nonWSPos = endLinePos;\n    \n    // Get all text on this line and search for first nonWS char\n    String text = _getText(startLinePos, endLinePos - startLinePos);\n    int walker = 0;\n    while (walker < text.length()) {\n      if (text.charAt(walker) == ' ' || text.charAt(walker) == '\\t') walker++;\n      else {\n        nonWSPos = startLinePos + walker;\n        break;\n      }\n    }\n    _storeInCache(key, nonWSPos, Math.max(pos - 1, nonWSPos));\n    return nonWSPos;  // may equal lineEndPos\n  }\n  \n  /** Finds the position of the first non-whitespace character after pos. NB: Skips comments and all whitespace, \n    * including newlines.\n    * @param pos Position to start from\n    * @return position of first non-whitespace character after pos, or ERROR_INDEX (-1) if end of document is reached\n    */\n  public int getFirstNonWSCharPos(int pos) throws BadLocationException {\n    char[] whitespace = {' ', '\\t', '\\n'};\n    return getFirstNonWSCharPos(pos, whitespace, false);\n  }\n  \n  /** Similar to the single-argument version, but allows including comments.\n    * @param pos Position to start from\n    * @param acceptComments if true, find non-whitespace chars in comments\n    * @return position of first non-whitespace character after pos,\n    * or ERROR_INDEX (-1) if end of document is reached\n    */\n  public int getFirstNonWSCharPos(int pos, boolean acceptComments) throws BadLocationException {\n    char[] whitespace = {' ', '\\t', '\\n'};\n    return getFirstNonWSCharPos(pos, whitespace, acceptComments);\n  }\n  \n  /** Finds the position of the first non-whitespace character after pos. NB: Skips comments and all whitespace, \n    * including newlines.\n    * @param pos Position to start from\n    * @param whitespace array of whitespace chars to ignore\n    * @param acceptComments if true, find non-whitespace chars in comments\n    * @return position of first non-whitespace character after pos, or ERROR_INDEX (-1) if end of document is reached\n    */\n  public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments) throws \n    BadLocationException {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    // Check cache\n    final Query key = new Query.FirstNonWSCharPos(pos, whitespace, acceptComments);\n    final Integer cached = (Integer) _checkCache(key);\n    if (cached != null)  return cached.intValue();\n    \n    final int docLen = getLength();\n    final int origPos = _currentLocation;\n    final int endPos = _getLineEndPos(pos);\n    \n    String line = getText(pos, endPos - pos);   // Get text from pos to end of line\n    setCurrentLocation(pos);  // Move reduced model to location pos\n    try {\n      int i = pos;\n      int reducedPos = pos;\n      // Walk forward from specificed position\n      while (i < endPos) {\n        \n        // Check if character is whitespace\n        if (match(line.charAt(i-pos), whitespace)) {\n          i++;\n          continue;\n        }\n        // Found a non whitespace character\n        // Move reduced model to walker's location for subsequent processing\n        setCurrentLocation(i);  // reduced model points to location i\n        reducedPos = i;\n        \n        // Check if non-ws char is within comment and if we want to ignore them.\n        if (! acceptComments &&\n            ((_reduced.getStateAtCurrent().equals(INSIDE_LINE_COMMENT)) ||\n             (_reduced.getStateAtCurrent().equals(INSIDE_BLOCK_COMMENT)))) {\n          i++;  // TODO: increment i to skip over entire comment\n          continue;\n        }\n        \n        // Check if non-ws char is part of comment opening bracket and if we want to ignore them\n        if (! acceptComments && _isStartOfComment(line, i - pos)) {\n          // ith char is first char in comment open market; skip past this marker and continue searching\n          i = i + 2;  // TODO: increment i to skip over entire comment\n          continue;\n        }\n        \n        // Return position of matching char\n        _storeInCache(key, reducedPos, reducedPos);  // Cached answer depends only on text(0:reducedPos]\n//          _setCurrentLocation(origPos);\n        return reducedPos;\n      }\n      \n      // No matching char found on this line\n      if (endPos + 1 >= docLen) { // No matching char found in doc\n        _storeInCache(key, -1, Integer.MAX_VALUE);  // Any change to the document invalidates this result!\n//          _setCurrentLocation(origPos);\n        return -1;\n      }\n    }\n    finally { setCurrentLocation(origPos); }  // restore _currentLocation\n    \n    // Search through remaining lines of document; recursion depth is bounded by number of blank lines following pos\n    return getFirstNonWSCharPos(endPos + 1, whitespace, acceptComments);\n  }\n  \n  public int _findPrevNonWSCharPos(int pos) throws BadLocationException {\n    char[] whitespace = {' ', '\\t', '\\n'};\n    return _findPrevCharPos(pos, whitespace);\n  }\n  \n  /** Helper method for getFirstNonWSCharPos Determines whether the current character is the start of a comment: \n    * \"/*\" or \"//\"\n    */\n  protected static boolean _isStartOfComment(String text, int pos) {\n    char currChar = text.charAt(pos);\n    if (currChar == '/') {\n      try {\n        char afterCurrChar = text.charAt(pos + 1);\n        if ((afterCurrChar == '/') || (afterCurrChar == '*'))  return true;\n      } catch (StringIndexOutOfBoundsException e) { }\n    }\n    return false;\n  }\n  \n  // Never used\n//  /** Determines if _currentLocation is the start of a comment. */\n//  private boolean _isStartOfComment(int pos) { return _isStartOfComment(getText(), pos); }\n  \n//  /** Helper method for findPrevNonWSCharPos. Determines whether the current character is the start of a comment\n//    * encountered from the end: '/' or '*' preceded by a '/'.\n//    * @return true if (pos-1,pos) == '/*' or '//'\n//    */\n//  protected static boolean _isOneCharPastStartOfComment(String text, int pos) {\n//    char currChar = text.charAt(pos);\n//    if (currChar == '/' || currChar == '*') {\n//      try {\n//        char beforeCurrChar = text.charAt(pos - 1);\n//        if (beforeCurrChar == '/')  return true;\n//      } catch (StringIndexOutOfBoundsException e) { /* do nothing */ }\n//    }\n//    return false;\n//  }\n  \n  \n  /** Returns true if the given position is inside a paren phrase.\n    * @param pos the position we're looking at\n    * @return true if pos is immediately inside parentheses\n    */\n  public boolean _inParenPhrase(final int pos) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    // Check cache\n    final Query key = new Query.PosInParenPhrase(pos);\n    Boolean cached = (Boolean) _checkCache(key);\n    if (cached != null) return cached.booleanValue();\n    \n    boolean _inParenPhrase;\n    \n    final int oldPos = _currentLocation;\n    // assert pos == here if read lock and reduced already held before call\n    setCurrentLocation(pos);\n    _inParenPhrase = _inParenPhrase();\n    setCurrentLocation(oldPos);\n    _storeInCache(key, _inParenPhrase, pos - 1);\n    \n    return _inParenPhrase;\n  }\n  \n  /** Cached version of _reduced.getLineEnclosingBrace().  Assumes that read lock and reduced lock are already held. */\n  public BraceInfo _getLineEnclosingBrace() {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    // Check cache\n    final int lineStart = _getLineStartPos(_currentLocation);\n//    System.err.println(\"_currentLocation = \" + origPos + \" lineStart = \" + lineStart);\n    if (lineStart < 0) return BraceInfo.NULL;\n    final int keyPos = lineStart;\n    final Query key = new Query.LineEnclosingBrace(keyPos);\n    final BraceInfo cached = (BraceInfo) _checkCache(key);\n    if (cached != null) return cached;\n    \n//    BraceInfo b = _reduced.getLineEnclosingBrace(lineStart);  // optimized version to be developed\n    BraceInfo b = _reduced._getLineEnclosingBrace();\n    \n    _storeInCache(key, b, keyPos - 1);\n    return b;\n  }\n  \n  /** Cached version of _reduced.getEnclosingBrace().  Assumes that read lock and reduced lock are already held. */\n  public BraceInfo _getEnclosingBrace() {\n    int pos = _currentLocation;\n    // Check cache\n    final Query key = new Query.EnclosingBrace(pos);\n    final BraceInfo cached = (BraceInfo) _checkCache(key);\n    if (cached != null) return cached;\n    BraceInfo b = _reduced._getEnclosingBrace();\n    _storeInCache(key, b, pos - 1);\n    return b;\n  }\n  \n  /** Returns true if the reduced model's current position is inside a paren phrase.  Only runs in the event thread.\n    * @return true if pos is immediately inside parentheses\n    */\n  private boolean _inParenPhrase() {\n    \n    BraceInfo info = _reduced._getEnclosingBrace(); \n    return info.braceType().equals(BraceInfo.OPEN_PAREN);\n//    return _getLineEnclosingBrace(_currentLocation).braceType().equals(IndentInfo.openParen);\n  }\n  \n//  /** @return true if the start of the current line is inside a block comment. Assumes that write lock or read lock\n//    * and reduced lock are already held. */\n//  public boolean posInBlockComment() {\n//    int pos = _currentLocation;\n//    final int lineStart = getLineStartPos(pos);\n//    if (lineStart < POS_THRESHOLD) return posInBlockComment(lineStart);\n//    return cachedPosInBlockComment(lineStart);\n//  }\n  \n//  /** Returns true if given position is inside a block comment using cached information.  Only runs in event thread/\n//    * @param pos a position at the beginning of a line.\n//    * @return true if pos is immediately inside a block comment.\n//    */\n//  private boolean cachedPosInBlockComment(final int pos) {\n//    \n//    // Check cache\n//    final Query key = new Query.PosInBlockComment(pos);\n//    final Boolean cached = (Boolean) _checkCache(key);\n//    if (cached != null) return cached.booleanValue();\n//    \n//    boolean result;\n//    \n//    final int startPrevLine = getLineStartPos(pos - 1);\n//    final Query prevLineKey = new Query.PosInBlockComment(startPrevLine);\n//    final Boolean cachedPrevLine = (Boolean) _checkCache(prevLineKey);\n//    \n//    if (cachedPrevLine != null) result = posInBlockComment(cachedPrevLine, startPrevLine, pos - startPrevLine); \n//    else result = posInBlockComment(pos);\n//    \n//    _storeInCache(key, result, pos - 1);\n//    return result;\n//  }    \n  \n  /** Determines if pos lies within a block comment using the reduced model (ignoring the cache).  Assumes that read\n    * lock and reduced lock are already held. \n    */\n  public boolean _inBlockComment(final int pos) {\n    final int here = _currentLocation;\n    final int distToStart = here - _getLineStartPos(here);\n    _reduced.resetLocation();\n    ReducedModelState state = stateAtRelLocation(-distToStart);\n    \n    return (state.equals(INSIDE_BLOCK_COMMENT));\n  }\n  \n//  /** Determines if pos lies within a block comment using the cached result for previous line.  Assumes that read lock\n//    * and _reduced lock are already held. \n//    * @param resultPrevLine whether the start of the previous line is inside a block comment\n//    * @param startPrevLine the document offset of the start of the previous line\n//    * @param the len length of the previous line\n//    */  \n//  private boolean posInBlockComment(final boolean resultPrevLine, final int startPrevLine, final int len) {\n//    try {\n//      final String text = getText(startPrevLine, len);    // text of previous line\n//      if (resultPrevLine) return text.indexOf(\"*/\") < 0;  // inside a block comment unless \"*/\" found \n//      int startLineComment = text.indexOf(\"//\");\n//      int startBlockComment = text.indexOf(\"/*\"); \n//      /* inside a block comment if \"/*\" found and it precedes \"//\" (if present) */\n//      return startBlockComment >= 0 && (startLineComment == -1 || startLineComment > startBlockComment);\n//    }\n//    catch(BadLocationException e) { throw new UnexpectedException(e); }\n//  }\n  \n  /** Returns true if the given position is not inside a paren/brace/etc phrase.  Assumes that read lock and reduced\n    * lock are already held.\n    * @param pos the position we're looking at\n    * @return true if pos is immediately inside a paren/brace/etc\n    */\n  protected boolean notInBlock(final int pos) {\n    // Check cache\n    final Query key = new Query.PosNotInBlock(pos);\n    final Boolean cached = (Boolean) _checkCache(key);\n    if (cached != null) return cached.booleanValue();\n    \n    final int oldPos = _currentLocation;\n    setCurrentLocation(pos);\n    final BraceInfo info = _reduced._getEnclosingBrace();\n    final boolean notInParenPhrase = info.braceType().equals(BraceInfo.NONE);\n    setCurrentLocation(oldPos);\n    _storeInCache(key, notInParenPhrase, pos - 1);\n    return notInParenPhrase;\n  }\n  \n  /** Returns true if the current line has only blanks before the current location. Serves as a check so that\n    * indentation will only move the caret when it is at or before the \"smart\" beginning of a line (i.e. the first\n    * non-blank character). Only runs in the event thread.\n    * @return true if there are only blank characters before the current location on the current line.\n    */\n  private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException{\n    \n    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    int lineStart = _getLineStartPos(_currentLocation);\n    if (lineStart < 0) lineStart = 0;    // _currentLocation on first line\n    int prefixSize = _currentLocation - lineStart;\n    \n    // get prefix of _currentLocation (the text after the previous new line, but before the current location)\n    String prefix = getText(lineStart, prefixSize);\n    \n    //check all positions in the prefix to determine if there are any blank chars\n    int pos = prefixSize - 1;\n    while (pos >= 0 && prefix.charAt(pos) == ' ') pos--;\n    return (pos < 0);\n  }\n  \n  /** Gets the number of blank characters between the current location and the first non-blank character or the end of\n    * the document, whichever comes first.  TODO: cache it.\n    * (The method is misnamed.)\n    * @return the number of whitespace characters\n    */\n  private int _getWhiteSpace() throws BadLocationException {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    int lineEnd = _getLineEndPos(_currentLocation);  // index of next '\\n' char or end of document\n    int lineLen = lineEnd - _currentLocation;\n    String line = getText(_currentLocation, lineLen);\n    int i;\n    for (i = 0; i < lineLen && line.charAt(i) == ' '; i++) ;\n    return i;\n  }\n  \n  /** Returns the size of the white space prefix before the current location. If the prefix contains any\n    * non white space chars, returns 0.  Use definition of white space in String.trim()\n    * Assumes that the read lock is already held.\n    * @return true if there are only blank characters before the current location on the current line.\n    */\n  private int _getWhiteSpacePrefix() throws BadLocationException {\n    \n//    System.err.println(\"lockState = \" + _lockState);\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    int lineStart = _getLineStartPos(_currentLocation);\n    if (lineStart < 0) lineStart = 0;    // _currentLocation on first line\n    int prefixSize = _currentLocation - lineStart;\n    \n    // get prefix of _currentLocation (the text after the previous new line, but before the current location)\n    String prefix = getText(lineStart, prefixSize);\n    \n    //check all positions in the prefix to determine if there are any blank chars\n    int pos = prefixSize - 1;\n    while (pos >= 0 && prefix.charAt(pos) == ' ') pos--;\n    return (pos < 0) ? prefixSize : 0;\n  }\n  \n  /** Inserts the number of blanks specified as the whitespace prefix for the line identified by pos.  The prefix \n    * replaces the prefix is already there.  Assumes that the prefix consists of blanks.  ASSUMES write lock is\n    * already held.g1\n    * @param tab  The string to be placed between previous newline and first non-whitespace character\n    */\n  public void setTab(int tab, int pos) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    try {\n      int startPos = _getLineStartPos(pos);\n      int firstNonWSPos = _getLineFirstCharPos(pos);\n      int len = firstNonWSPos - startPos;\n      \n      // Adjust prefix\n      if (len != tab) {\n        // Only add or remove the difference\n        int diff = tab - len;\n        if (diff > 0) insertString(firstNonWSPos, StringOps.getBlankString(diff), null);\n        else remove(firstNonWSPos + diff, -diff);\n      }\n      /* else do nothing */ \n    }\n    catch (BadLocationException e) {\n      // Should never see a bad location\n      throw new UnexpectedException(e);\n    }\n  }\n  \n  /** Inserts the string specified by tab at the beginning of the line identified by pos.  ASSUMES write lock is\n    * already held.\n    * @param tab  The string to be placed between previous newline and first non-whitespace character\n    */\n  public void setTab(String tab, int pos) {\n    \n    /* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    try {\n      int startPos = _getLineStartPos(pos);\n      int firstNonWSPos = _getLineFirstCharPos(pos);\n      int len = firstNonWSPos - startPos;\n      \n      // Remove the whole prefix, then add the new one\n      remove(startPos, len);\n      insertString(startPos, tab, null);\n    }\n    catch (BadLocationException e) {\n      // Should never see a bad location\n      throw new UnexpectedException(e);\n    }\n  }\n  \n  /** Updates document structure as a result of text insertion. This happens after the text has actually been inserted.\n    * Here we update the reduced model (using an {@link AbstractDJDocument.InsertCommand InsertCommand}) and store \n    * information for how to undo/redo the reduced model changes inside the {@link \n    * javax.swing.text.AbstractDocument.DefaultDocumentEvent DefaultDocumentEvent}.\n    * NOTE: an exclusive read lock on the document is already held when this code runs.\n    * @see edu.rice.cs.drjava.model.AbstractDJDocument.InsertCommand\n    * @see javax.swing.text.AbstractDocument.DefaultDocumentEvent\n    * @see edu.rice.cs.drjava.model.definitions.DefinitionsDocument.CommandUndoableEdit\n    */\n  protected void insertUpdate(AbstractDocument.DefaultDocumentEvent chng, AttributeSet attr) {\n    \n    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    super.insertUpdate(chng, attr);\n    \n    try {\n      final int offset = chng.getOffset();\n      final int length = chng.getLength();\n      final String str = getText(offset, length);\n      \n      if (length > 0) _clearCache(offset);    // Selectively clear the query cache\n      \n      Runnable doCommand = \n        (length == 1) ? new CharInsertCommand(offset, str.charAt(0)) : new InsertCommand(offset, str);\n      RemoveCommand undoCommand = new UninsertCommand(offset, length, str);\n      \n      // add the undo/redo\n      addUndoRedo(chng, undoCommand, doCommand);\n      //chng.addEdit(new CommandUndoableEdit(undoCommand, doCommand));\n      // actually do the insert\n      doCommand.run();  // This method runs in the updating thread with exclusive access to the updated document\n    }\n    catch (BadLocationException ble) { throw new UnexpectedException(ble); }\n  }\n  \n  /** Updates document structure as a result of text removal. This happens within the swing remove operation before\n    * the text has actually been removed. Updates the reduced model (using a {@link AbstractDJDocument.RemoveCommand\n    * RemoveCommand}) and store information for how to undo/redo the reduced model changes inside the \n    * {@link javax.swing.text.AbstractDocument.DefaultDocumentEvent DefaultDocumentEvent}.\n    * NOTE: an exclusive read lock on the document is already held when this code runs.\n    * @see AbstractDJDocument.RemoveCommand\n    * @see javax.swing.text.AbstractDocument.DefaultDocumentEvent\n    */\n  protected void removeUpdate(AbstractDocument.DefaultDocumentEvent chng) {\n    \n    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    try {\n      final int offset = chng.getOffset();\n      final int length = chng.getLength();\n      \n      final String removedText = getText(offset, length);\n      super.removeUpdate(chng);\n      \n      if (length > 0) _clearCache(offset);  // Selectively clear the query cache\n      \n      Runnable doCommand = new RemoveCommand(offset, length, removedText);\n      Runnable undoCommand = new UnremoveCommand(offset, removedText);\n      \n      // add the undo/redo info\n      addUndoRedo(chng, undoCommand, doCommand);\n      // actually do the removal from the reduced model\n      doCommand.run();\n    }\n    catch (BadLocationException e) { throw new UnexpectedException(e); }\n  }\n  \n  /** Returns the byte image (as written to a file) of this document. */\n  public byte[] getBytes() { return getText().getBytes(); }\n  \n  public void clear() {\n    try { remove(0, getLength()); }\n    catch(BadLocationException e) { throw new UnexpectedException(e); }\n  }\n  \n  /** @return true if pos is the position of one of the chars in an occurrence of \"//\" or \"/*\" in text. */\n  private static boolean isCommentOpen(String text, int pos) {\n    int len = text.length();\n    if (len < 2) return false;\n    if (pos == len - 1) return isCommentStart(text, pos - 1);\n    if (pos == 0) return isCommentStart(text, 0);\n    return isCommentStart(text, pos - 1) || isCommentStart(text, pos);\n  }\n  \n  /** @return true if pos is index of string \"//\" or \"/*\" in text.  Assumes pos < text.length() - 1 */\n  private static boolean isCommentStart(String text, int pos) {\n    char ch1 = text.charAt(pos);\n    char ch2 = text.charAt(pos + 1);\n    return ch1 == '/' && (ch2 == '/' || ch2 == '*');\n  }\n  \n  //Two abstract methods to delegate to the undo manager, if one exists.\n  protected abstract int startCompoundEdit();\n  protected abstract void endCompoundEdit(int i);\n  protected abstract void endLastCompoundEdit();\n  protected abstract void addUndoRedo(AbstractDocument.DefaultDocumentEvent chng, Runnable undoCommand, \n                                      Runnable doCommand);\n  \n  //Checks if the document is closed, and then throws an error if it is.\n  \n  //-------- INNER CLASSES ------------\n  \n  //--- Fields set only by InsertCommand, CharInsertCommand, and RemoveCommand\n  \n  /** Offset marking where line number changes begin due to an insertion or deletion. */\n  private volatile int _numLinesChangedAfter = -1;\n  \n  //--- Private methods that only support these inner classes\n  \n  /** Updates _numLinesChanged given that a newline was inserted or removed at the specified offset. */\n  private void _numLinesChanged(int offset) {\n    if (_numLinesChangedAfter < 0) {\n      _numLinesChangedAfter =  offset;\n      return;\n    }\n    _numLinesChangedAfter = Math.min(_numLinesChangedAfter, offset);\n  }\n  \n  /** Gets the value of _numLinesChangedAfter field and reset it -1. */\n  public int getAndResetNumLinesChangedAfter() {\n    int result = _numLinesChangedAfter;\n    _numLinesChangedAfter = -1;\n    return result;\n  }\n  \n  public void testSecondLineMisindented(ActionStartPrevLinePlusTest actionStartPrevLinePlusTest) throws javax.swing.text.BadLocationException {\n    actionStartPrevLinePlusTest._setDocText(\"  foo\\n bar\");\n    setCurrentLocation(9);\n    actionStartPrevLinePlusTest.makeAction(\"abc\").testIndentLine(this, Indenter.IndentReason.OTHER);\n    Assert.assertEquals(14, getLength());\n    Assert.assertEquals(\"  foo\\n  abcbar\", getText());\n  }\n\nprotected class InsertCommand implements Runnable {\n    protected final int _offset;\n    protected final String _text;\n    \n    public InsertCommand(final int offset, final String text) {\n      _offset = offset;\n      _text = text;\n    }\n    \n    /** Inserts chars in reduced model and moves location to end of insert; cache has already been cleared. */\n    public void run() {\n      \n      _reduced.move(_offset - _currentLocation);  \n      int len = _text.length();\n      // Record any change to line numbering\n      int newLineOffset = _text.indexOf(newline);\n      if (newLineOffset >= 0) _numLinesChanged(_offset + newLineOffset);\n      // loop over string, inserting characters into reduced model and recording any change to line numbering\n      for (int i = 0; i < len; i++) { _addCharToReducedModel(_text.charAt(i)); }\n      \n      _currentLocation = _offset + len;  // update _currentLocation to match effects on the reduced model\n      _styleChanged();  // update the color highlighting of the remainder of the document\n      \n//      if (getClass() ==  InsertCommand.class) \n//        System.err.println(\"Inserted '\" + _text + \"' loc is now \" + _currentLocation);\n    }\n  }\n  \n  // command that undoes a RemoveCommand; same as InsertCommand except the cursor is placed before the inserted text\n  protected class UnremoveCommand extends InsertCommand {\n    public UnremoveCommand(final int offset, final String text) { super(offset, text); }\n    public void run() {\n      super.run();\n//      System.err.println(\"Before restoration, currentLocation in unremove operation = \" + getCurrentLocation());\n      // The following command effectively modifies a document in a document listener; the invokeLater\n      // call moves it out of the listener; pending events reset _currentLocation\n      EventQueue.invokeLater(new Runnable() { public void run() { setCurrentLocation(_offset); } });\n    }\n  }\n  \n  protected class CharInsertCommand implements Runnable {\n    protected final int _offset;\n    protected final char _ch;\n    \n    public CharInsertCommand(final int offset, final char ch) {\n      _offset = offset;\n      _ch = ch;\n    }\n    \n    /** Inserts chars in reduced model and moves location to end of insert; cache has already been cleared. */\n    public void run() {\n      \n      _reduced.move(_offset - _currentLocation);  \n      if (_ch == newline) _numLinesChanged(_offset);  // record change to line numbering\n      _addCharToReducedModel(_ch);\n      _currentLocation = _offset + 1;  // update _currentLocation to match effects on the reduced model\n      _styleChanged();\n    }\n  }\n  \n  protected class RemoveCommand implements Runnable {\n    protected final int _offset;\n    protected final int _length;\n    protected final String _removedText;\n    \n    public RemoveCommand(final int offset, final int length, final String removedText) {\n      _offset = offset;\n      _length = length;\n      _removedText = removedText;\n    }\n    \n    /** Removes chars from reduced model; cache has already been selectively cleared. */\n    public void run() {\n      setCurrentLocation(_offset);\n      if (_removedText.indexOf(newline) >= 0) _numLinesChanged(_offset);  // record change to line numbering\n      _reduced.delete(_length);    \n      _styleChanged(); \n    }\n  }\n  \n  // command that undoes an InsertCommand; identical to RemoveCommand; separate for debugging purposes\n  protected class UninsertCommand extends RemoveCommand {\n    public UninsertCommand(final int offset, final int length, String text) { super(offset, length, text); }\n    public void run() { super.run(); }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 1675,
                        "lineEnd": 1696,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.definitions.indent.Indenter\nRationale: The setTab method is responsible for inserting a tab at the beginning of a line, which is directly related to formatting and indentation. The Indenter class is likely focused on managing indentation and formatting of text, making it the most appropriate class for this method.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 49170
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "getHighlightStatus",
                            "method_signature": "public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)",
                            "target_class": "HighlightManager",
                            "rationale": "The method getHighlightStatus is primarily concerned with managing highlight statuses, which could be better encapsulated in a dedicated HighlightManager class."
                        },
                        {
                            "method_name": "_highlightKeywords",
                            "method_signature": "private int _highlightKeywords(ArrayList<HighlightStatus> v, int i)",
                            "target_class": "KeywordHighlighter",
                            "rationale": "The method _highlightKeywords is focused on identifying and processing keywords, which is a specific responsibility that can be moved to a separate KeywordHighlighter class."
                        },
                        {
                            "method_name": "balanceBackward",
                            "method_signature": "public int balanceBackward()",
                            "target_class": "BraceMatcher",
                            "rationale": "The method balanceBackward is responsible for finding matching braces, which aligns with the responsibilities of a BraceMatcher class."
                        },
                        {
                            "method_name": "balanceForward",
                            "method_signature": "public int balanceForward()",
                            "target_class": "BraceMatcher",
                            "rationale": "Similar to balanceBackward, the balanceForward method deals with brace matching and should be moved to a BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevEnclosingBrace",
                            "method_signature": "public int findPrevEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "This method is also related to brace matching and should be part of a dedicated BraceMatcher class."
                        },
                        {
                            "method_name": "findNextEnclosingBrace",
                            "method_signature": "public int findNextEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "Like findPrevEnclosingBrace, this method is focused on finding enclosing braces and should be moved to a BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevDelimiter",
                            "method_signature": "public int findPrevDelimiter(int pos, char[] delims)",
                            "target_class": "DelimiterFinder",
                            "rationale": "The method findPrevDelimiter is responsible for finding delimiters, which can be encapsulated in a separate DelimiterFinder class."
                        },
                        {
                            "method_name": "findNextDelimiter",
                            "method_signature": "public int findNextDelimiter(int pos, char[] delims)",
                            "target_class": "DelimiterFinder",
                            "rationale": "Similar to findPrevDelimiter, this method should also be part of a DelimiterFinder class."
                        },
                        {
                            "method_name": "getFirstNonWSCharPos",
                            "method_signature": "public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments)",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method getFirstNonWSCharPos deals with whitespace management and should be moved to a dedicated WhitespaceManager class."
                        },
                        {
                            "method_name": "onlyWhiteSpaceBeforeCurrent",
                            "method_signature": "private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException",
                            "target_class": "WhitespaceManager",
                            "rationale": "This method is focused on checking whitespace and should be part of a WhitespaceManager class."
                        },
                        {
                            "method_name": "_getWhiteSpace",
                            "method_signature": "private int _getWhiteSpace() throws BadLocationException",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method _getWhiteSpace is related to whitespace handling and should be moved to a WhitespaceManager class."
                        }
                    ],
                    "llm_response_time": 13229
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "getHighlightStatus",
                            "method_signature": "public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)",
                            "target_class": "HighlightManager",
                            "rationale": "The method getHighlightStatus is responsible for managing highlight statuses, which could be better encapsulated in a dedicated HighlightManager class."
                        },
                        {
                            "method_name": "_highlightKeywords",
                            "method_signature": "private int _highlightKeywords(ArrayList<HighlightStatus> v, int i)",
                            "target_class": "KeywordHighlighter",
                            "rationale": "The method _highlightKeywords is focused on identifying and processing keywords, which should be handled by a separate KeywordHighlighter class."
                        },
                        {
                            "method_name": "balanceBackward",
                            "method_signature": "public int balanceBackward()",
                            "target_class": "BraceMatcher",
                            "rationale": "The method balanceBackward is specifically designed to find matching braces, which is a responsibility that should belong to a BraceMatcher class."
                        },
                        {
                            "method_name": "balanceForward",
                            "method_signature": "public int balanceForward()",
                            "target_class": "BraceMatcher",
                            "rationale": "Similar to balanceBackward, the balanceForward method is also focused on brace matching and should be moved to a BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevEnclosingBrace",
                            "method_signature": "public int findPrevEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "The method findPrevEnclosingBrace is concerned with finding enclosing braces, which aligns with the responsibilities of a BraceMatcher class."
                        },
                        {
                            "method_name": "findNextEnclosingBrace",
                            "method_signature": "public int findNextEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "The method findNextEnclosingBrace is also focused on brace matching and should be moved to a BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevDelimiter",
                            "method_signature": "public int findPrevDelimiter(int pos, char[] delims)",
                            "target_class": "DelimiterFinder",
                            "rationale": "The method findPrevDelimiter is responsible for finding delimiters, which should be encapsulated in a dedicated DelimiterFinder class."
                        },
                        {
                            "method_name": "findFirstNonWSCharPos",
                            "method_signature": "public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments)",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method getFirstNonWSCharPos is focused on managing whitespace and should be moved to a WhitespaceManager class."
                        },
                        {
                            "method_name": "onlyWhiteSpaceBeforeCurrent",
                            "method_signature": "private boolean onlyWhiteSpaceBeforeCurrent()",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method onlyWhiteSpaceBeforeCurrent is concerned with whitespace management and should be moved to a WhitespaceManager class."
                        },
                        {
                            "method_name": "_getWhiteSpace",
                            "method_signature": "private int _getWhiteSpace()",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method _getWhiteSpace is focused on whitespace handling and should be encapsulated in a WhitespaceManager class."
                        },
                        {
                            "method_name": "_getWhiteSpacePrefix",
                            "method_signature": "private int _getWhiteSpacePrefix()",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method _getWhiteSpacePrefix is also related to whitespace management and should be moved to a WhitespaceManager class."
                        }
                    ],
                    "llm_response_time": 12798
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "getHighlightStatus",
                            "method_signature": "public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)",
                            "target_class": "HighlightManager",
                            "rationale": "The method getHighlightStatus is primarily concerned with managing and retrieving highlight statuses, which could be better encapsulated in a dedicated HighlightManager class."
                        },
                        {
                            "method_name": "balanceBackward",
                            "method_signature": "public int balanceBackward()",
                            "target_class": "BraceMatcher",
                            "rationale": "The balanceBackward method is focused on finding matching braces, which is a specific responsibility that could be handled by a BraceMatcher class."
                        },
                        {
                            "method_name": "balanceForward",
                            "method_signature": "public int balanceForward()",
                            "target_class": "BraceMatcher",
                            "rationale": "Similar to balanceBackward, the balanceForward method is also related to brace matching and should be moved to a dedicated BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevEnclosingBrace",
                            "method_signature": "public int findPrevEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "This method is specifically designed to find enclosing braces, which aligns with the responsibilities of a BraceMatcher class."
                        },
                        {
                            "method_name": "findNextEnclosingBrace",
                            "method_signature": "public int findNextEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "Like findPrevEnclosingBrace, this method is also focused on brace matching and should be moved to a BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevDelimiter",
                            "method_signature": "public int findPrevDelimiter(int pos, char[] delims)",
                            "target_class": "DelimiterFinder",
                            "rationale": "The findPrevDelimiter method is responsible for finding delimiters, which could be better organized in a dedicated DelimiterFinder class."
                        },
                        {
                            "method_name": "findNextDelimiter",
                            "method_signature": "public int findNextDelimiter(int pos, char[] delims)",
                            "target_class": "DelimiterFinder",
                            "rationale": "Similar to findPrevDelimiter, this method is focused on finding delimiters and should be moved to a DelimiterFinder class."
                        },
                        {
                            "method_name": "getFirstNonWSCharPos",
                            "method_signature": "public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments)",
                            "target_class": "WhitespaceManager",
                            "rationale": "This method deals with finding non-whitespace characters, which could be better managed in a dedicated WhitespaceManager class."
                        },
                        {
                            "method_name": "onlyWhiteSpaceBeforeCurrent",
                            "method_signature": "private boolean onlyWhiteSpaceBeforeCurrent()",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method checks for whitespace before the current position, which aligns with the responsibilities of a WhitespaceManager class."
                        },
                        {
                            "method_name": "setTab",
                            "method_signature": "public void setTab(int tab, int pos)",
                            "target_class": "TabManager",
                            "rationale": "The setTab method is responsible for managing tab settings, which could be better organized in a dedicated TabManager class."
                        },
                        {
                            "method_name": "setTab",
                            "method_signature": "public void setTab(String tab, int pos)",
                            "target_class": "TabManager",
                            "rationale": "Similar to the previous setTab method, this one also deals with tab management and should be moved to a TabManager class."
                        }
                    ],
                    "llm_response_time": 19851
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "getHighlightStatus",
                            "method_signature": "public ArrayList<HighlightStatus> getHighlightStatus(int start, int end)",
                            "target_class": "HighlightManager",
                            "rationale": "The method getHighlightStatus is primarily concerned with managing highlight statuses, which could be better encapsulated in a dedicated HighlightManager class."
                        },
                        {
                            "method_name": "_highlightKeywords",
                            "method_signature": "private int _highlightKeywords(ArrayList<HighlightStatus> v, int i)",
                            "target_class": "KeywordHighlighter",
                            "rationale": "The method _highlightKeywords is focused on identifying and processing keywords, which is a specific responsibility that can be moved to a separate KeywordHighlighter class."
                        },
                        {
                            "method_name": "balanceBackward",
                            "method_signature": "public int balanceBackward()",
                            "target_class": "BraceMatcher",
                            "rationale": "The method balanceBackward is responsible for finding matching braces, which aligns with the responsibilities of a BraceMatcher class."
                        },
                        {
                            "method_name": "balanceForward",
                            "method_signature": "public int balanceForward()",
                            "target_class": "BraceMatcher",
                            "rationale": "Similar to balanceBackward, the balanceForward method deals with brace matching and should be moved to a BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevEnclosingBrace",
                            "method_signature": "public int findPrevEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "This method is also related to brace matching and should be part of a dedicated BraceMatcher class."
                        },
                        {
                            "method_name": "findNextEnclosingBrace",
                            "method_signature": "public int findNextEnclosingBrace(final int pos, final char opening, final char closing)",
                            "target_class": "BraceMatcher",
                            "rationale": "Like findPrevEnclosingBrace, this method is focused on finding enclosing braces and should be moved to a BraceMatcher class."
                        },
                        {
                            "method_name": "findPrevDelimiter",
                            "method_signature": "public int findPrevDelimiter(int pos, char[] delims)",
                            "target_class": "DelimiterFinder",
                            "rationale": "The method findPrevDelimiter is responsible for finding delimiters, which can be encapsulated in a separate DelimiterFinder class."
                        },
                        {
                            "method_name": "findNextDelimiter",
                            "method_signature": "public int findNextDelimiter(int pos, char[] delims)",
                            "target_class": "DelimiterFinder",
                            "rationale": "Similar to findPrevDelimiter, this method should also be part of a DelimiterFinder class."
                        },
                        {
                            "method_name": "getFirstNonWSCharPos",
                            "method_signature": "public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments)",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method getFirstNonWSCharPos deals with whitespace management and should be moved to a dedicated WhitespaceManager class."
                        },
                        {
                            "method_name": "onlyWhiteSpaceBeforeCurrent",
                            "method_signature": "private boolean onlyWhiteSpaceBeforeCurrent() throws BadLocationException",
                            "target_class": "WhitespaceManager",
                            "rationale": "This method is focused on checking whitespace and should be part of a WhitespaceManager class."
                        },
                        {
                            "method_name": "_getWhiteSpace",
                            "method_signature": "private int _getWhiteSpace() throws BadLocationException",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method _getWhiteSpace is related to whitespace handling and should be moved to a WhitespaceManager class."
                        },
                        {
                            "method_name": "findFirstNonWSCharPos",
                            "method_signature": "public int getFirstNonWSCharPos(final int pos, final char[] whitespace, final boolean acceptComments)",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method getFirstNonWSCharPos is focused on managing whitespace and should be moved to a WhitespaceManager class."
                        },
                        {
                            "method_name": "_getWhiteSpacePrefix",
                            "method_signature": "private int _getWhiteSpacePrefix()",
                            "target_class": "WhitespaceManager",
                            "rationale": "The method _getWhiteSpacePrefix is also related to whitespace management and should be moved to a WhitespaceManager class."
                        },
                        {
                            "method_name": "setTab",
                            "method_signature": "public void setTab(int tab, int pos)",
                            "target_class": "TabManager",
                            "rationale": "The setTab method is responsible for managing tab settings, which could be better organized in a dedicated TabManager class."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "getHighlightStatus",
                    "_highlightKeywords",
                    "balanceBackward",
                    "balanceForward",
                    "findPrevEnclosingBrace",
                    "findNextEnclosingBrace",
                    "findPrevDelimiter",
                    "findNextDelimiter",
                    "getFirstNonWSCharPos",
                    "onlyWhiteSpaceBeforeCurrent",
                    "_getWhiteSpace",
                    "_getWhiteSpacePrefix",
                    "setTab",
                    "findFirstNonWSCharPos"
                ],
                "llm_response_time": 3130
            },
            "targetClassMap": {
                "getHighlightStatus": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1746,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "_highlightKeywords": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1641,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "balanceBackward": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1119,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "balanceForward": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1435,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "findPrevEnclosingBrace": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1243,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "findNextEnclosingBrace": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 4497,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "findPrevDelimiter": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1762,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "getFirstNonWSCharPos": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 4554,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "onlyWhiteSpaceBeforeCurrent": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1535,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "_getWhiteSpace": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1350,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "_getWhiteSpacePrefix": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1240,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "setTab": {
                    "target_classes": [
                        {
                            "class_name": "ReducedModelControl",
                            "similarity_score": 0.6866029000382811
                        },
                        {
                            "class_name": "Indenter",
                            "similarity_score": 0.46595068426173086
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "Indenter",
                        "ReducedModelControl"
                    ],
                    "llm_response_time": 1874,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "- method edu.rice.cs.drjava.ui.InteractionsController::tempFile(int):File need move to edu.rice.cs.drjava.model.GlobalModelTestCase",
        "class_name": "edu.rice.cs.drjava.ui.InteractionsController",
        "telemetry": {
            "id": "8414fa4c-c648-4d8c-ac32-5f0d8bd9a946",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 834,
                "lineStart": 96,
                "lineEnd": 929,
                "bodyLineStart": 96,
                "language": "java",
                "sourceCode": "/** This class installs listeners and actions between an InteractionsDocument (the model) and an InteractionsPane \n  * (the view).  We may want to refactor this class into a different package. <p>\n  * (The PopupConsole was introduced in version 1.29 of this file and subsequently removed.)\n  *\n  * @version $Id: InteractionsController.java 5362 2010-08-14 01:49:04Z mgricken $\n  */\npublic class InteractionsController extends AbstractConsoleController {\n  \n  /* InteractionsDocument _adapter is inherited from AbstractConsoleController. */\n  /* InteractionsPane _pane is inherited from AbstractConsoleController. */\n  \n  private static final String INPUT_ENTERED_NAME = \"Input Entered\";\n  private static final String INSERT_NEWLINE_NAME = \"Insert Newline\";\n  private static final String INSERT_END_OF_STREAM = \"Insert End of Stream\";\n  private static final String UNDO_NAME = \"Undo\";\n  private static final String REDO_NAME = \"Redo\";\n  \n  /** Style for System.in box */\n  public static final String INPUT_BOX_STYLE = \"input.box.style\";\n  \n  /** The symbol used in the document for the input box. */\n  public static final String INPUT_BOX_SYMBOL = \"[DrJava Input Box]\";\n  \n  /** InteractionsModel to handle interpretation. */\n  private volatile InteractionsModel _model;\n  \n  /** GUI-agnostic interactions document from the model. */\n  private volatile InteractionsDocument _doc;\n  \n  /** Style to use for error messages. */\n  private volatile SimpleAttributeSet _errStyle;\n  \n  /** Style to use for debug messages. */\n  private final SimpleAttributeSet _debugStyle;\n  \n  /** Lambda used to input text into the embedded System.in input box. */\n  private volatile Lambda<String, String> _insertTextCommand;\n  \n  /** Runnable command used to force the System.in input to complete <p>\n    * <b>NOTE:</b> This command must be executed on swing's event handling thread.\n    */\n  private volatile Runnable _inputCompletionCommand;\n  \n  /** Runnable command that disables the \"Close System.in\" menu command. */\n  private final Runnable _disableCloseSystemInMenuItemCommand;\n  \n  /** Default implementation of the insert text in input command */\n  private static final Lambda<String, String> _defaultInsertTextCommand = \n    new Lambda<String,String>() {\n    public String value(String input) {\n      throw new UnsupportedOperationException(\"Cannot insert text. There is no console input in progress\");\n    }\n  };\n  \n  /** Default implementation of the input completion command */\n  private static final Runnable _defaultInputCompletionCommand = \n    new Runnable() { public void run() { /* Do nothing */ } };\n  \n  /** A temporary variable used to hold a box allocated inside getConsoleInput below. */\n  private volatile InputBox _box;\n  /** A temporary variable used to hold the result fetched from _box in getConsoleInput below. */\n  private volatile String _result;\n  /** A variable indicating whether the input stream has been closed. */\n  private volatile boolean _endOfStream = false;\n  \n  /** Listens for input requests from System.in, displaying an input box as needed. */\n  protected volatile InputListener _inputListener = new InputListener() {\n    public String getConsoleInput() {\n      if (_endOfStream) return \"\"; // input stream has been closed, don't ask for more input\n      final CompletionMonitor completionMonitor = new CompletionMonitor();\n      _box = new InputBox(_endOfStream);\n      // add all focus listeners to the Input Box\n      for(FocusListener fl: _undoRedoInteractionFocusListeners) {\n        _box.addFocusListener(fl);\n      }\n      \n      // Embed the input box into the interactions pane. This operation must be performed in the UI thread\n      EventQueue.invokeLater(new Runnable() {  // why EventQueue.invokeLater?\n        public void run() { \n          \n          // These commands only run in the event thread\n          final Lambda<String,String> insertTextCommand = _box.makeInsertTextCommand();  // command for testing\n          \n          final Runnable inputCompletionCommand = new Runnable() {  // command for terminating each input interaction\n            public void run() {\n              assert EventQueue.isDispatchThread();\n              // Reset the commands to their default inactive state\n              _setConsoleInputCommands(_defaultInputCompletionCommand, _defaultInsertTextCommand);\n              \n              _box.disableInputs();\n              _result = _box.getText();\n              if (_box.wasClosedWithEnter()) {\n                _result += \"\\n\";\n              }\n              setEndOfStream(_box.isEndOfStream());\n              \n              /* Move the cursor back to the end of the interactions pane while preventing _doc from changing in the \n               * interim. */\n              _pane.setEditable(true);\n              _pane.setCaretPosition(_doc.getLength()); \n              _pane.requestFocusInWindow();\n              \n              // use undo/redo for the Interactions Pane again\n              _undoAction.setDelegatee(_pane.getUndoAction());\n              _redoAction.setDelegatee(_pane.getRedoAction());\n              \n              completionMonitor.signal();\n            }\n          };\n          \n          _box.setInputCompletionCommand(inputCompletionCommand);\n          _setConsoleInputCommands(inputCompletionCommand, insertTextCommand);\n          _pane.setEditable(true);\n          \n          // create an empty MutableAttributeSet for _box\n          MutableAttributeSet inputAttributes = new SimpleAttributeSet();\n          \n          // initialize MutableAttributeSet to the attributes of the _box component\n          StyleConstants.setComponent(inputAttributes, _box);\n          \n          /* Insert box in document. */\n          _doc.insertBeforeLastPrompt(\" \", InteractionsDocument.DEFAULT_STYLE);\n          \n          // bind INPUT_BOX_STYLE to inputAttributes in the associated InteractionsDJDocument \n          _interactionsDJDocument.setDocStyle(INPUT_BOX_STYLE, inputAttributes);\n          \n          // and insert the symbol for the input box with the correct style (identifying it as our InputBox)\n          _doc.insertBeforeLastPrompt(INPUT_BOX_SYMBOL, INPUT_BOX_STYLE);\n          \n          _doc.insertBeforeLastPrompt(\"\\n\", InteractionsDocument.DEFAULT_STYLE);\n          \n          _box.setVisible(true);\n          EventQueue.invokeLater(new Runnable() { public void run() { _box.requestFocusInWindow(); } });\n          \n          _undoAction.setDelegatee(_box.getUndoAction());\n          _redoAction.setDelegatee(_box.getRedoAction());\n          _pane.setEditable(false);\n        }\n      });\n      fireConsoleInputStarted();\n      \n      // Wait for the inputCompletionCommand to be invoked\n      completionMonitor.attemptEnsureSignaled();\n      \n      fireConsoleInputCompleted(_result);\n      \n      return _result;\n    }\n  };\n  \n  private ArrayList<ConsoleStateListener> _consoleStateListeners;\n  \n  private InteractionsListener _viewListener = new InteractionsListener() {\n    public void interactionStarted() { }\n    public void interactionEnded() { _pane.requestFocusInWindow(); }    \n    public void interactionErrorOccurred(int offset, int length) { }    \n    \n    public void interpreterResetting() {\n      assert EventQueue.isDispatchThread(); \n      _interactionsDJDocument.clearColoring();\n      _endOfStream = false;\n    }\n    \n    public void interpreterReady(File wd) { }\n    public void interpreterResetFailed(Throwable t) { }\n    public void interpreterExited(int status) { }\n    public void interpreterChanged(boolean inProgress) { }\n    public void interactionIncomplete() { }\n  };\n  \n  /** Glue together the given model and a new view.\n    * @param model An InteractionsModel\n    * @param adapter InteractionsDJDocument being used by the model's doc\n    */\n  public InteractionsController(final InteractionsModel model,\n                                InteractionsDJDocument adapter,\n                                Runnable disableCloseSystemInMenuItemCommand) {\n    this(model, adapter, new InteractionsPane(adapter) {  // creates InteractionsPane\n      public int getPromptPos() { return model.getDocument().getPromptPos(); }\n    }, disableCloseSystemInMenuItemCommand);\n    _undoAction.setDelegatee(_pane.getUndoAction());\n    _redoAction.setDelegatee(_pane.getRedoAction());\n  }\n  \n  /** Glue together the given model and view.\n    * @param model An InteractionsModel\n    * @param adapter InteractionsDJDocument being used by the model's doc\n    * @param pane An InteractionsPane\n    */\n  public InteractionsController(InteractionsModel model,\n                                InteractionsDJDocument adapter,\n                                InteractionsPane pane,\n                                Runnable disableCloseSystemInMenuItemCommand) {\n    super(adapter, pane);\n    _disableCloseSystemInMenuItemCommand = disableCloseSystemInMenuItemCommand;\n    DefaultEditorKit d = InteractionsPane.EDITOR_KIT;\n    \n    for (Action a : d.getActions()) {\n      if (a.getValue(Action.NAME).equals(DefaultEditorKit.upAction))  defaultUpAction = a;\n      if (a.getValue(Action.NAME).equals(DefaultEditorKit.downAction)) defaultDownAction = a;\n    }\n    \n    _model = model;\n    _doc = model.getDocument();\n    _errStyle = new SimpleAttributeSet();\n    _debugStyle = new SimpleAttributeSet();\n    \n    _model.setInputListener(_inputListener);\n    _model.addListener(_viewListener);\n    _model.setUpPane(pane);    // sets the interactions pane within the model and initializes the caret\n    \n    _inputCompletionCommand = _defaultInputCompletionCommand;\n    _insertTextCommand = _defaultInsertTextCommand;\n    _consoleStateListeners = new ArrayList<ConsoleStateListener>();\n//    _pane.addCaretListener(new CaretListener() {  // Update the cachedCaretPosition \n//      public void caretUpdate(CaretEvent e) { \n//        _log.log(\"Caret Event: \" + e + \" from source \" + e.getSource());\n////        setCachedCaretPos(e.getDot()); \n//      }\n//    });\n    \n    // Add key binding option listener for Input Box.\n    // Done here, not in InputBox's constructor, so we only create one. Otherwise we might\n    // create one per InputBox, and it would be difficult to remove them again.\n    DrJava.getConfig().addOptionListener(OptionConstants.KEY_UNDO, _keyBindingOptionListener);\n    DrJava.getConfig().addOptionListener(OptionConstants.KEY_REDO, _keyBindingOptionListener);\n    \n    _init();  // residual superclass initialization\n  }\n  \n  public void addConsoleStateListener(ConsoleStateListener listener) {\n    _consoleStateListeners.add(listener);\n  }\n  \n  public void removeConsoleStateListener(ConsoleStateListener listener) {\n    _consoleStateListeners.remove(listener);\n  }\n  \n  private void fireConsoleInputStarted() {\n    for(ConsoleStateListener listener : _consoleStateListeners) {\n      listener.consoleInputStarted(this);\n    }\n  }\n  \n  private void fireConsoleInputCompleted(String text) {\n    for(ConsoleStateListener listener : _consoleStateListeners) { listener.consoleInputCompleted(text, this); }\n  }\n  \n  /** Sets the end of stream flag. */\n  public void setEndOfStream(boolean tf) {\n    _endOfStream = tf;\n    if (_box != null) { _box.setEndOfStream(tf); }\n    if (tf) { _disableCloseSystemInMenuItemCommand.run(); }\n  }\n  \n  \n  /** Gets the input listener for console input requests.  ONLY used in unit tests.\n    * @return the input listener for console input requests.\n    */\n  public InputListener getInputListener() { return _inputListener; }\n  \n  /** Forces console input to complete without the user hitting <Enter>.  Called by MainFrame when reset is called so \n    * that this lock is released.  This method is thread safe.\n    * @throws UnsupportedOperationException If the interactions pane is not receiving console input\n    */\n  public void interruptConsoleInput() { EventQueue.invokeLater(_inputCompletionCommand); }\n  \n  /** Inserts text into the console.  Can only be called from the event thread.  ONLY used in unit tests.\n    * @param input The text to insert into the console input box\n    * @throws UnsupportedOperationException If the the interactions pane is not receiving console input\n    */\n  public void insertConsoleText(String input) { _insertTextCommand.value(input); }\n  \n  /** Accessor method for the InteractionsModel.\n    * @return the interactions model\n    */\n  public InteractionsModel getInteractionsModel() {  return _model; }\n  \n  /** Allows the abstract superclass to use the document.\n    * @return the InteractionsDocument\n    */\n  public ConsoleDocument getConsoleDoc() { return _doc; }\n  \n  /** Accessor method for the InteractionsDocument. */\n  public InteractionsDocument getDocument() { return _doc; }\n  \n  /** Adds AttributeSets as named styles to the document adapter. */\n  protected void _addDocumentStyles() {\n    // Add AbstractConsoleController styles\n    super._addDocumentStyles();\n    \n    // Error\n    _errStyle.addAttributes(_defaultStyle);\n    _errStyle.addAttribute(StyleConstants.Foreground, \n                           DrJava.getConfig().getSetting(OptionConstants.INTERACTIONS_ERROR_COLOR));\n    _errStyle.addAttribute(StyleConstants.Bold, Boolean.TRUE);\n    _interactionsDJDocument.setDocStyle(InteractionsDocument.ERROR_STYLE, _errStyle);\n    DrJava.getConfig().addOptionListener(OptionConstants.INTERACTIONS_ERROR_COLOR, new OptionListener<Color>() {\n      public void optionChanged(OptionEvent<Color> oe) {\n        _errStyle.addAttribute(StyleConstants.Foreground, oe.value);\n      }\n    });\n    \n    // Debug\n    _debugStyle.addAttributes(_defaultStyle);\n    _debugStyle.addAttribute(StyleConstants.Foreground, \n                             DrJava.getConfig().getSetting(OptionConstants.DEBUG_MESSAGE_COLOR));\n    _debugStyle.addAttribute(StyleConstants.Bold, Boolean.TRUE);\n    _interactionsDJDocument.setDocStyle(InteractionsDocument.DEBUGGER_STYLE, _debugStyle);\n    DrJava.getConfig().addOptionListener(OptionConstants.DEBUG_MESSAGE_COLOR, new OptionListener<Color>() {\n      public void optionChanged(OptionEvent<Color> oe) {\n        _debugStyle.addAttribute(StyleConstants.Foreground, oe.value);\n      }\n    });\n  }\n  \n  /** Adds listeners to the model. */\n  protected void _setupModel() { _doc.setBeep(_pane.getBeep()); }\n  \n  /** Adds actions to the view. */\n  protected void _setupView() {\n    super._setupView();\n    \n    // Get proper cross-platform mask.\n    int mask = Toolkit.getDefaultToolkit().getMenuShortcutKeyMask();\n    \n    // Add actions with keystrokes\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, 0), evalAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, java.awt.Event.SHIFT_MASK), newLineAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_B, mask), clearCurrentAction);\n    \n    // Up and down need to be bound both for keypad and not\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_UP, 0), moveUpAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_UP, 0), moveUpAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_UP, mask), historyPrevAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_DOWN, 0), moveDownAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, 0), moveDownAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_DOWN, mask), historyNextAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), historyReverseSearchAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, java.awt.Event.SHIFT_MASK),\n                                historyForwardSearchAction);\n    \n//    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_TAB, 0), indentKeyActionTab);\n//    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER, java.awt.Event.SHIFT_MASK), indentKeyActionLine);\n\n    // Potential additions: actions must be copied from DefinitionsPane\n//    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke('}'), indentKeyActionCurly);\n//    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke('{'), indentKeyActionOpenCurly);\n//    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(':'), indentKeyActionColon);\n    \n    // Left needs to be prevented from rolling cursor back before the prompt.\n    // Both left and right should lock when caret is before the prompt.\n    // Caret is allowed before the prompt for the purposes of mouse-based copy-\n    // and-paste.\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_LEFT, 0), moveLeftAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_LEFT, 0), moveLeftAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_KP_RIGHT, 0), moveRightAction);\n    _pane.addActionForKeyStroke(KeyStroke.getKeyStroke(KeyEvent.VK_RIGHT, 0), moveRightAction);\n    \n    // Prevent previous word action from going past the prompt\n    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_PREVIOUS_WORD), prevWordAction);\n    DrJava.getConfig().addOptionListener(OptionConstants.KEY_PREVIOUS_WORD, new OptionListener<Vector<KeyStroke>>() {\n      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {\n        _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_PREVIOUS_WORD), prevWordAction);\n      }\n    });\n    \n    _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_NEXT_WORD), nextWordAction);\n    DrJava.getConfig().addOptionListener(OptionConstants.KEY_NEXT_WORD, new OptionListener<Vector<KeyStroke>>() {\n      public void optionChanged(OptionEvent<Vector<KeyStroke>> oe) {\n        _pane.addActionForKeyStroke(DrJava.getConfig().getSetting(OptionConstants.KEY_NEXT_WORD), nextWordAction);\n      }\n    });\n  }\n  \n  /** Sets the commands used to manipulate the console input process.  Only runs in the event thread. */\n  private void _setConsoleInputCommands(Runnable inputCompletionCommand, Lambda<String,String> insertTextCommand) {\n    _insertTextCommand = insertTextCommand;\n    _inputCompletionCommand = inputCompletionCommand;\n  }\n  \n  // The fields below were made package private for testing purposes.\n  \n  /** Evaluates the interaction on the current line. */\n  AbstractAction evalAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) { _model.interpretCurrentInteraction(); }\n  };\n  \n//  /** Evaluates the current text following the prompt in the interactions document.*/\n//  private void _evalCurrentInteraction() {\n//    \n//    if (! _interactionsDJDocument._inBlockComment()) {\n//       \n//    String toEval;\n//    if (_doc.inProgress()) return;  // Don't start a new interaction while one is in progress\n//      \n//      String text = _doc.getCurrentInteraction();\n//      toEval = text.trim();\n//      if (toEval.startsWith(\"java \")) toEval = _testClassCall(toEval);\n////          System.err.println(\"Preparing to interpret '\" + text  + \"'\");\n//      _prepareToInterpret(text);  // Writes a newLine!\n//    }\n//    try { _model.interpret(toEval); }\n//    catch (Throwable t) { DrJavaErrorHandler.record(t); }\n//  };\n//  \n//  /** Performs pre-interpretation preparation of the interactions document and notifies the view.  Must run in the\n//    * event thread for newline to be inserted at proper time.  Assumes that Write Lock is already held. */\n//  private void _prepareToInterpret(String text) {\n//    _addNewline();\n//    _notifyInteractionStarted();\n//    _doc.setInProgress(true);\n//    _model.setAddToHistory(text); // _document.addToHistory(text);\n//    //Do not add to history immediately in case the user is not finished typing when they press return\n//  }\n//  \n//  /** Appends a newLine to _document assuming that the Write Lock is already held. Must run in the event thread. */\n//  private void _addNewline() { append(StringOps.NEWLINE, InteractionsDocument.DEFAULT_STYLE); }\n         \n  /** Recalls the previous command from the history. */\n  AbstractAction historyPrevAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      if (! _busy()) {\n        if (_doc.recallPreviousInteractionInHistory()) moveToEnd();\n        if (!_isCursorAfterPrompt()) moveToPrompt();\n      }\n    }\n  };\n  \n  /** Recalls the next command from the history. */\n  AbstractAction historyNextAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      if (! _busy() && (_doc.recallNextInteractionInHistory() || !_isCursorAfterPrompt())) moveToPrompt(); \n    }\n  };\n  \n  /** Added feature for up. If the cursor is on the first line of the current interaction, it goes into the history.\n    * Otherwise, stays within the current interaction\n    */\n  AbstractAction moveUpAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      if (! _busy()) {\n        if (_shouldGoIntoHistory(_doc.getPromptPos(), _pane.getCaretPosition())) \n          historyPrevAction.actionPerformed(e);\n        else {\n          defaultUpAction.actionPerformed(e);\n          if (! _isCursorAfterPrompt()) moveToPrompt();\n        }\n      }\n    }\n  };\n  \n  /** Added feature for down. If the cursor is on the last line of the current interaction, it goes into the history.\n    * Otherwise, stays within the current interaction\n    */\n  AbstractAction moveDownAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      if (! _busy()) {\n        if (_shouldGoIntoHistory(_pane.getCaretPosition(), _interactionsDJDocument.getLength())) {\n          historyNextAction.actionPerformed(e);\n        } else { defaultDownAction.actionPerformed(e); }\n      }\n    }\n  };\n  \n  /** Tests whether or not to move into the history.  Should be executed in the event thread to ensure\n    * that caret and prompt positions are in consistent states.\n    * @return true iff there are no \"\\n\" characters between the start and the end\n    */  \n  private boolean _shouldGoIntoHistory(int start, int end) {\n    if (_isCursorAfterPrompt() && end >= start) {\n      String text = \"\";\n      try { text = _interactionsDJDocument.getText(start, end - start); }\n      catch(BadLocationException ble) {\n        throw new UnexpectedException(ble); //The conditional should prevent this from ever happening\n      }\n      if (text.indexOf(\"\\n\") != -1) return false;\n    }\n    return true;\n  }\n  \n  private boolean _isCursorAfterPrompt() { return _pane.getCaretPosition() >= _doc.getPromptPos(); }\n  \n  Action defaultUpAction;\n  Action defaultDownAction;\n  \n  /** Reverse searches in the history. */\n  AbstractAction historyReverseSearchAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      if (!_busy()) {\n        _doc.reverseSearchInteractionsInHistory();\n        moveToEnd();\n      }\n    }\n  };\n  \n  /** Forward searches in the history. */\n  AbstractAction historyForwardSearchAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      if (! _busy()) {\n        _doc.forwardSearchInteractionsInHistory();\n        moveToEnd();\n      }\n    }\n  };\n  \n  /** Moves the caret left or wraps around. */\n  AbstractAction moveLeftAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      if (! _busy()) {\n        int promptPos = _doc.getPromptPos();\n        int pos = _pane.getCaretPosition();\n        if (pos < promptPos) moveToPrompt();\n        else if (pos == promptPos) moveToEnd(); // Wrap around to the end\n        else _pane.setCaretPosition(pos - 1); // pos > promptPos\n      }\n    }\n  };\n  \n  /** Moves the caret right or wraps around. */\n  AbstractAction moveRightAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      int pos = _pane.getCaretPosition();\n      if (pos < _doc.getPromptPos()) moveToEnd();\n      else if (pos >= _doc.getLength()) moveToPrompt(); // Wrap around to the star\n      else {\n        _pane.setCaretPosition(pos + 1); // position between prompt and end\n//          setCachedCaretPos(pos + 1);\n      }\n    }\n  };\n  \n  /** Skips back one word.  Doesn't move past the prompt. */\n  AbstractAction prevWordAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      int position = _pane.getCaretPosition();\n      int promptPos = _doc.getPromptPos();\n      if (position < promptPos) moveToPrompt();\n      else if (position == promptPos) moveToEnd(); // Wrap around to the end\n      else _pane.getActionMap().get(DefaultEditorKit.previousWordAction).actionPerformed(e);\n    }\n  };\n  \n  /** Skips forward one word.  Doesn't move past the prompt. */\n  AbstractAction nextWordAction = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) {\n      int position = _pane.getCaretPosition();\n      int promptPos = _doc.getPromptPos();\n      if (position < promptPos) moveToEnd();\n      else if (position >= _doc.getLength()) moveToPrompt(); // Wrap around to the start\n      else _pane.getActionMap().get(DefaultEditorKit.nextWordAction).actionPerformed(e);\n    }\n  };\n  \n  /** Indents the selected text. */\n  AbstractAction indentKeyActionTab = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) { _pane.indent(); }\n  };\n   \n  /** Indents in preparation for typing next line */\n  AbstractAction indentKeyActionLine = new AbstractAction() {\n    public void actionPerformed(ActionEvent e) { \n      _doc.append(\"\\n\", null);  // null style\n      _pane.indent(Indenter.IndentReason.ENTER_KEY_PRESS); }\n  };\n  \n  private final DelegatingAction _undoAction = new DelegatingAction();\n  private final DelegatingAction _redoAction = new DelegatingAction();\n  private final ArrayList<FocusListener> _undoRedoInteractionFocusListeners = new ArrayList<FocusListener>();\n  \n  /** Add a focus listener to the Interactions Pane and the Input Box. */\n  public void addFocusListener(FocusListener listener) {\n    _pane.addFocusListener(listener);\n    // we need to store the focus listeners, because they need to be added to future\n    // Input Boxes too.\n    _undoRedoInteractionFocusListeners.add(listener);\n    if (_box != null) {\n      for(FocusListener fl: _undoRedoInteractionFocusListeners) {\n        _box.addFocusListener(fl);\n      }\n    }\n  }\n  \n  /** @return the undo action. */\n  public Action getUndoAction() { return _undoAction; }\n  \n  /** @return the redo action. */\n  public Action getRedoAction() { return _redoAction; }\n \n  /** Create a new temporary file in _tempDir.  Calls with the same int will return the same filename, while calls\n   *  with different ints will return different filenames.\n * @param globalModelTestCase TODO\n * @param i TODO\n   */\n  public File tempFile(GlobalModelTestCase globalModelTestCase, int i) throws IOException {\n    return File.createTempFile(\"DrJava-test\" + i, \".java\", globalModelTestCase._tempDir).getCanonicalFile();\n  }\n\n/** OptionListener responding to changes for the undo/redo key bindings. */\n  private final OptionListener<Vector<KeyStroke>> _keyBindingOptionListener = new OptionListener<Vector<KeyStroke>>() {\n    public void optionChanged(OptionEvent<Vector<KeyStroke>> oce) {\n      if (_box != null) { _box.updateKeyBindings(); }\n    }\n  };\n  \n  /** A box that can be inserted into the interactions pane for separate input.  Do not confuse with \n    * edu.rice.cs.util.swing.InputBox. */\n  private static class InputBox extends JTextArea {\n    private static final int BORDER_WIDTH = 1;\n    private static final int INNER_BUFFER_WIDTH = 3;\n    private static final int OUTER_BUFFER_WIDTH = 2;\n    private volatile Color _bgColor = DrJava.getConfig().getSetting(OptionConstants.DEFINITIONS_BACKGROUND_COLOR);\n    private volatile Color _fgColor = DrJava.getConfig().getSetting(OptionConstants.DEFINITIONS_NORMAL_COLOR);\n    private volatile Color _sysInColor = DrJava.getConfig().getSetting(OptionConstants.SYSTEM_IN_COLOR);\n    private volatile boolean _antiAliasText = DrJava.getConfig().getSetting(OptionConstants.TEXT_ANTIALIAS);\n    private volatile boolean _endOfStream = false;\n    private volatile boolean _closedWithEnter = false;\n    private final InputMap _oldInputMap = new InputMap();\n    \n    public InputBox(boolean endOfStream) {\n      _endOfStream = endOfStream;\n      setForeground(_sysInColor);\n      setBackground(_bgColor);\n      setCaretColor(_fgColor);\n      setBorder(_createBorder());\n      setLineWrap(true);\n      \n      DrJava.getConfig().addOptionListener(OptionConstants.DEFINITIONS_NORMAL_COLOR,\n                                           new OptionListener<Color>() {\n        public void optionChanged(OptionEvent<Color> oe) {\n          _fgColor = oe.value;\n          setBorder(_createBorder());\n          setCaretColor(oe.value);\n        }\n      });\n      DrJava.getConfig().addOptionListener(OptionConstants.DEFINITIONS_BACKGROUND_COLOR,\n                                           new OptionListener<Color>() {\n        public void optionChanged(OptionEvent<Color> oe) {\n          _bgColor = oe.value;\n          setBorder(_createBorder());\n          setBackground(oe.value);\n        }\n      });\n      DrJava.getConfig().addOptionListener(OptionConstants.SYSTEM_IN_COLOR,\n                                           new OptionListener<Color>() {\n        public void optionChanged(OptionEvent<Color> oe) {\n          _sysInColor = oe.value;\n          setForeground(oe.value);\n        }\n      });\n      DrJava.getConfig().addOptionListener(OptionConstants.TEXT_ANTIALIAS,\n                                           new OptionListener<Boolean>() {\n        public void optionChanged(OptionEvent<Boolean> oce) {\n          _antiAliasText = oce.value.booleanValue();\n          InputBox.this.repaint();\n        }\n      });\n      \n      final InputMap im = getInputMap(WHEN_FOCUSED);\n      final ActionMap am = getActionMap();\n      \n      // Add the input listener for <Shift+Enter> and <Cntl+Enter>\n      final Action newLineAction = new AbstractAction() {\n        public void actionPerformed(ActionEvent e) { insert(\"\\n\", getCaretPosition()); }\n      };      \n      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.SHIFT_MASK), INSERT_NEWLINE_NAME);\n      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,java.awt.Event.CTRL_MASK), INSERT_NEWLINE_NAME);      \n      am.put(INSERT_NEWLINE_NAME, newLineAction);\n      \n      // Link undo/redo to this InputBox\n      // First clone the InputMap so we can change the keystroke mappings\n      if (im.keys()!=null) { // im.keys() may be null!\n        for(KeyStroke ks: im.keys()) { _oldInputMap.put(ks, im.get(ks)); }\n      }\n      \n      final UndoManager undo = new UndoManager();\n      final Document doc = getDocument(); \n      \n      final Action undoAction = new AbstractAction(\"Undo\") {\n        public void actionPerformed(ActionEvent e) {\n          try {\n            if (undo.canUndo()) { undo.undo(); }           \n          }\n          catch (CannotUndoException cue) { } \n          setEnabled(undo.canUndo() && isEditable());\n          am.get(REDO_NAME).setEnabled(undo.canRedo() && isEditable());\n        }\n      };\n      am.put(UNDO_NAME, undoAction);\n      final Action redoAction = new AbstractAction(\"Redo\") {\n        public void actionPerformed(ActionEvent e) {\n          try {\n            if (undo.canRedo()) { undo.redo(); }\n          }\n          catch (CannotRedoException cue) { }\n          undoAction.setEnabled(undo.canUndo() && isEditable());\n          setEnabled(undo.canRedo() && isEditable());\n        }\n      };\n      am.put(REDO_NAME, redoAction);\n      \n      updateKeyBindings();\n      \n      // Listen for undo and redo events\n      doc.addUndoableEditListener(new UndoableEditListener() {\n        public void undoableEditHappened(UndoableEditEvent evt) {\n          undo.addEdit(evt.getEdit());\n          undoAction.setEnabled(undo.canUndo() && isEditable());\n          redoAction.setEnabled(undo.canRedo() && isEditable());\n        }\n      });\n      undoAction.setEnabled(undo.canUndo() && isEditable());\n      redoAction.setEnabled(undo.canRedo() && isEditable());\n    }\n    \n    /** Update the key bindings for undo and redo. */\n    public void updateKeyBindings() {\n      // first restore old InputMap.\n      final InputMap im = getInputMap(WHEN_FOCUSED);\n      if (im.keys()!=null) { // im.keys() may be null!\n        for(KeyStroke ks: im.keys()) { im.remove(ks); }\n      }\n      if (_oldInputMap.keys()!=null) { // keys() may return null!\n        for(KeyStroke ks: _oldInputMap.keys()) { im.put(ks, _oldInputMap.get(ks)); }\n      }\n      \n      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_UNDO)) { im.put(ks, UNDO_NAME); }\n      for(KeyStroke ks: DrJava.getConfig().getSetting(OptionConstants.KEY_REDO)) { im.put(ks, REDO_NAME); }\n    }\n    \n    /** Returns true if this stream has been closed. */\n    public boolean isEndOfStream() { return _endOfStream; }\n\n    /** Setter for end of stream flag. */\n    public void setEndOfStream(boolean tf) { _endOfStream = tf; }\n    \n    /** Was Enter pressed? */\n    public boolean wasClosedWithEnter() { return _closedWithEnter; }\n    \n    private Border _createBorder() {\n      Border outerouter = BorderFactory.createLineBorder(_bgColor, OUTER_BUFFER_WIDTH);\n      Border outer = BorderFactory.createLineBorder(_fgColor, BORDER_WIDTH);\n      Border inner = BorderFactory.createLineBorder(_bgColor, INNER_BUFFER_WIDTH);\n      Border temp = BorderFactory.createCompoundBorder(outer, inner);\n      return BorderFactory.createCompoundBorder(outerouter, temp);\n    }\n    \n    /** Enable anti-aliased text by overriding paintComponent. */\n    protected void paintComponent(Graphics g) {\n      if (_antiAliasText && g instanceof Graphics2D) {\n        Graphics2D g2d = (Graphics2D) g;\n        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);\n      }\n      super.paintComponent(g);\n    }\n    \n    /** Specifies what to do when the <Enter> or <Ctrl+D> keys are hit. */\n    void setInputCompletionCommand(final Runnable command) {\n      final InputMap im = getInputMap(WHEN_FOCUSED);\n      im.put(KeyStroke.getKeyStroke(KeyEvent.VK_ENTER,0), INPUT_ENTERED_NAME);\n      for(KeyStroke k: DrJava.getConfig().getSetting(OptionConstants.KEY_CLOSE_SYSTEM_IN)) im.put(k, INSERT_END_OF_STREAM);\n      \n      final ActionMap am = getActionMap();\n      am.put(INPUT_ENTERED_NAME, new AbstractAction() {\n        public void actionPerformed(ActionEvent e) {\n          _closedWithEnter = true; // add newline later\n          command.run();\n        }\n      });\n\n      // Add the input listener for <Ctrl+D>\n      am.put(INSERT_END_OF_STREAM, new AbstractAction() {\n        public void actionPerformed(ActionEvent e) {\n          _endOfStream = true;\n          command.run();\n        }\n      });\n    }\n    \n    /** Generates a lambda that can be used to insert text into this input box.  Only runs in event thread.\n      * @return A lambda that inserts the given text into the textbox when applied\n      */\n    Lambda<String,String> makeInsertTextCommand() {\n      return new Lambda<String, String>() {\n        public String value(String input) {\n          insert(input, getCaretPosition());\n          return input;\n        }\n      };\n    }\n    \n    /** Behaves somewhat like setEnable(false) in that it disables all\n      * input to the text box, but it does not change the appearance of the text.\n      */\n    void disableInputs() {\n      setEditable(false);\n      \n      ActionMap am = getActionMap();\n      Action action;\n      \n      action = am.get(INPUT_ENTERED_NAME);\n      if (action != null) action.setEnabled(false);\n      \n      action = am.get(INSERT_NEWLINE_NAME);\n      if (action != null) action.setEnabled(false);\n      \n      getCaret().setVisible(false);\n    }\n    \n    /** @return the undo action. */\n    public Action getUndoAction() { return getActionMap().get(UNDO_NAME); }\n    \n    /** @return the redo action. */\n    public Action getRedoAction() { return getActionMap().get(REDO_NAME); }\n  }\n  \n  /** A listener interface that allows for others outside the interactions controller to be notified when the input\n    * console is enabled in the interactions pane.\n    */\n  public interface ConsoleStateListener extends EventListener {\n    \n    /** Called when the input console is started in the interactions pane. <p>\n      * This method is called from the thread that initiated the console input,\n      */\n    public void consoleInputStarted(InteractionsController c);\n    \n    /** Called when the console input is complete. <p>\n      * This method is called from the thread that initiated the console input.\n      * @param result The text that was inputted to the console\n      */\n    public void consoleInputCompleted(String result, InteractionsController c);\n    \n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 6,
                "candidates": [
                    {
                        "lineStart": 362,
                        "lineEnd": 366,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.repl.InteractionsListener\nRationale: The method insertConsoleText() is specifically designed to interact with the console input, which aligns more closely with the responsibilities of the InteractionsListener class, as it likely handles user interactions and input events.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 356,
                        "lineEnd": 360,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.repl.InputListener\nRationale: The method 'interruptConsoleInput()' is related to handling console input, which aligns more closely with the responsibilities of an InputListener class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 333,
                        "lineEnd": 337,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.repl.InputListener\nRationale: The method fireConsoleInputStarted() is related to notifying listeners about the start of console input, which aligns with the responsibilities of an InputListener class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 339,
                        "lineEnd": 341,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.repl.InputListener\nRationale: The method 'fireConsoleInputCompleted' is related to notifying listeners about console input completion, which aligns with the responsibilities of an InputListener class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 665,
                        "lineEnd": 676,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.repl.InputListener\nRationale: The method is primarily concerned with adding focus listeners to an input box, which suggests that it is more relevant to the InputListener class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 684,
                        "lineEnd": 691,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.GlobalModelTestCase\nRationale: The method tempFile() directly uses the _tempDir field from the GlobalModelTestCase class, indicating that it is closely related to the functionality and context of this class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 18712
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "tempFile",
                            "method_signature": "public File tempFile(GlobalModelTestCase globalModelTestCase, int i) throws IOException",
                            "target_class": "FileUtils",
                            "rationale": "The tempFile method is responsible for creating temporary files, which is a utility function that does not belong in the InteractionsController class. It should be moved to a utility class like FileUtils."
                        },
                        {
                            "method_name": "addFocusListener",
                            "method_signature": "public void addFocusListener(FocusListener listener)",
                            "target_class": "InteractionsPane",
                            "rationale": "The addFocusListener method is primarily concerned with adding focus listeners to the InteractionsPane. It would be more appropriate for this method to reside in the InteractionsPane class, which is responsible for managing its own focus behavior."
                        },
                        {
                            "method_name": "fireConsoleInputStarted",
                            "method_signature": "private void fireConsoleInputStarted()",
                            "target_class": "ConsoleStateNotifier",
                            "rationale": "The fireConsoleInputStarted method is responsible for notifying listeners about console input events. This functionality should be encapsulated in a dedicated notifier class, such as ConsoleStateNotifier, to separate concerns and improve maintainability."
                        },
                        {
                            "method_name": "fireConsoleInputCompleted",
                            "method_signature": "private void fireConsoleInputCompleted(String text)",
                            "target_class": "ConsoleStateNotifier",
                            "rationale": "Similar to fireConsoleInputStarted, the fireConsoleInputCompleted method is also related to notifying listeners about console input events. It should be moved to the ConsoleStateNotifier class for better separation of concerns."
                        },
                        {
                            "method_name": "insertConsoleText",
                            "method_signature": "public void insertConsoleText(String input)",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The insertConsoleText method is focused on handling text input into the console. It would be more appropriate to move this method to a dedicated class like ConsoleInputHandler that manages console input operations."
                        },
                        {
                            "method_name": "interruptConsoleInput",
                            "method_signature": "public void interruptConsoleInput()",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The interruptConsoleInput method is related to managing console input interruptions. It should be moved to a ConsoleInputHandler class to encapsulate all console input-related functionalities."
                        }
                    ],
                    "llm_response_time": 6550
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "tempFile",
                            "method_signature": "public File tempFile(GlobalModelTestCase globalModelTestCase, int i) throws IOException",
                            "target_class": "FileUtils",
                            "rationale": "The tempFile method is responsible for creating temporary files, which is a utility function that does not belong in the InteractionsController class. It should be moved to a utility class like FileUtils."
                        },
                        {
                            "method_name": "addFocusListener",
                            "method_signature": "public void addFocusListener(FocusListener listener)",
                            "target_class": "FocusManager",
                            "rationale": "The addFocusListener method manages focus events, which is more appropriate for a class dedicated to managing focus behavior, such as FocusManager."
                        },
                        {
                            "method_name": "fireConsoleInputStarted",
                            "method_signature": "private void fireConsoleInputStarted()",
                            "target_class": "ConsoleEventDispatcher",
                            "rationale": "The fireConsoleInputStarted method is responsible for notifying listeners about console input events, which is better suited for a dedicated event dispatcher class like ConsoleEventDispatcher."
                        },
                        {
                            "method_name": "fireConsoleInputCompleted",
                            "method_signature": "private void fireConsoleInputCompleted(String text)",
                            "target_class": "ConsoleEventDispatcher",
                            "rationale": "Similar to fireConsoleInputStarted, this method handles the completion of console input events and should be moved to a dedicated event dispatcher class."
                        },
                        {
                            "method_name": "insertConsoleText",
                            "method_signature": "public void insertConsoleText(String input)",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The insertConsoleText method is specifically for inserting text into the console, which is a responsibility that should belong to a class focused on handling console input, such as ConsoleInputHandler."
                        },
                        {
                            "method_name": "interruptConsoleInput",
                            "method_signature": "public void interruptConsoleInput()",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The interruptConsoleInput method is related to managing console input and should be moved to a class that handles console input operations, like ConsoleInputHandler."
                        }
                    ],
                    "llm_response_time": 5320
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "tempFile",
                            "method_signature": "public File tempFile(GlobalModelTestCase globalModelTestCase, int i) throws IOException",
                            "target_class": "FileUtils",
                            "rationale": "The tempFile method is responsible for creating temporary files, which is a utility function that does not belong in the InteractionsController class. It should be moved to a utility class like FileUtils."
                        },
                        {
                            "method_name": "addFocusListener",
                            "method_signature": "public void addFocusListener(FocusListener listener)",
                            "target_class": "InteractionsPane",
                            "rationale": "The addFocusListener method is primarily concerned with adding focus listeners to the InteractionsPane. It would be more appropriate for this method to reside in the InteractionsPane class, which manages its own focus behavior."
                        },
                        {
                            "method_name": "fireConsoleInputStarted",
                            "method_signature": "private void fireConsoleInputStarted()",
                            "target_class": "ConsoleStateNotifier",
                            "rationale": "The fireConsoleInputStarted method is responsible for notifying listeners about console input events. This functionality should be encapsulated in a dedicated notifier class, such as ConsoleStateNotifier, to separate concerns."
                        },
                        {
                            "method_name": "fireConsoleInputCompleted",
                            "method_signature": "private void fireConsoleInputCompleted(String text)",
                            "target_class": "ConsoleStateNotifier",
                            "rationale": "Similar to fireConsoleInputStarted, the fireConsoleInputCompleted method is also related to notifying listeners about console input events. It should be moved to the ConsoleStateNotifier class for better separation of concerns."
                        },
                        {
                            "method_name": "insertConsoleText",
                            "method_signature": "public void insertConsoleText(String input)",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The insertConsoleText method is responsible for inserting text into the console. This functionality should be moved to a dedicated class like ConsoleInputHandler that manages console input operations."
                        },
                        {
                            "method_name": "interruptConsoleInput",
                            "method_signature": "public void interruptConsoleInput()",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The interruptConsoleInput method is related to managing console input. It should be moved to a ConsoleInputHandler class that encapsulates all console input-related operations."
                        }
                    ],
                    "llm_response_time": 5644
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "tempFile",
                            "method_signature": "public File tempFile(GlobalModelTestCase globalModelTestCase, int i) throws IOException",
                            "target_class": "FileUtils",
                            "rationale": "The tempFile method is responsible for creating temporary files, which is a utility function that does not belong in the InteractionsController class. It should be moved to a utility class like FileUtils."
                        },
                        {
                            "method_name": "addFocusListener",
                            "method_signature": "public void addFocusListener(FocusListener listener)",
                            "target_class": "InteractionsPane",
                            "rationale": "The addFocusListener method is primarily concerned with adding focus listeners to the InteractionsPane. It would be more appropriate for this method to reside in the InteractionsPane class, which is responsible for managing its own focus behavior."
                        },
                        {
                            "method_name": "fireConsoleInputStarted",
                            "method_signature": "private void fireConsoleInputStarted()",
                            "target_class": "ConsoleStateNotifier",
                            "rationale": "The fireConsoleInputStarted method is responsible for notifying listeners about console input events. This functionality should be encapsulated in a dedicated notifier class, such as ConsoleStateNotifier, to separate concerns and improve maintainability."
                        },
                        {
                            "method_name": "fireConsoleInputCompleted",
                            "method_signature": "private void fireConsoleInputCompleted(String text)",
                            "target_class": "ConsoleStateNotifier",
                            "rationale": "Similar to fireConsoleInputStarted, the fireConsoleInputCompleted method is also related to notifying listeners about console input events. It should be moved to the ConsoleStateNotifier class for better separation of concerns."
                        },
                        {
                            "method_name": "insertConsoleText",
                            "method_signature": "public void insertConsoleText(String input)",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The insertConsoleText method is focused on handling text input into the console. It would be more appropriate to move this method to a dedicated class like ConsoleInputHandler that manages console input operations."
                        },
                        {
                            "method_name": "interruptConsoleInput",
                            "method_signature": "public void interruptConsoleInput()",
                            "target_class": "ConsoleInputHandler",
                            "rationale": "The interruptConsoleInput method is related to managing console input interruptions. It should be moved to a ConsoleInputHandler class to encapsulate all console input-related functionalities."
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "insertConsoleText",
                    "interruptConsoleInput",
                    "fireConsoleInputStarted",
                    "fireConsoleInputCompleted",
                    "addFocusListener",
                    "tempFile"
                ],
                "llm_response_time": 1089
            },
            "targetClassMap": {
                "insertConsoleText": {
                    "target_classes": [
                        {
                            "class_name": "InputListener",
                            "similarity_score": 0.23328473740792172
                        },
                        {
                            "class_name": "InteractionsListener",
                            "similarity_score": 0.5353381529297065
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "InteractionsListener",
                        "InputListener"
                    ],
                    "llm_response_time": 3327,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "interruptConsoleInput": {
                    "target_classes": [
                        {
                            "class_name": "InputListener",
                            "similarity_score": 0.22524579279982865
                        },
                        {
                            "class_name": "InteractionsListener",
                            "similarity_score": 0.48162033313943714
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "InputListener",
                        "InteractionsListener"
                    ],
                    "llm_response_time": 1103,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "fireConsoleInputStarted": {
                    "target_classes": [
                        {
                            "class_name": "InputBox",
                            "similarity_score": 0.5685440223686753
                        },
                        {
                            "class_name": "InputListener",
                            "similarity_score": 0.19245008972987526
                        },
                        {
                            "class_name": "InteractionsListener",
                            "similarity_score": 0.10910894511799618
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "InputListener",
                        "InputBox",
                        "InteractionsListener"
                    ],
                    "llm_response_time": 1374,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "fireConsoleInputCompleted": {
                    "target_classes": [
                        {
                            "class_name": "InputBox",
                            "similarity_score": 0.536028444826622
                        },
                        {
                            "class_name": "InputListener",
                            "similarity_score": 0.18144368465060579
                        },
                        {
                            "class_name": "InteractionsListener",
                            "similarity_score": 0.10286889997472792
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "InputListener",
                        "InputBox",
                        "InteractionsListener"
                    ],
                    "llm_response_time": 2232,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "addFocusListener": {
                    "target_classes": [
                        {
                            "class_name": "InputListener",
                            "similarity_score": 0.24077170617153842
                        },
                        {
                            "class_name": "InteractionsListener",
                            "similarity_score": 0.32826136624658786
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "InputListener",
                        "InteractionsListener"
                    ],
                    "llm_response_time": 1180,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "tempFile": {
                    "target_classes": [
                        {
                            "class_name": "GlobalModelTestCase",
                            "similarity_score": 0.31969122176016807
                        },
                        {
                            "class_name": "InteractionsModel",
                            "similarity_score": 0.4272816994281969
                        },
                        {
                            "class_name": "InteractionsDocument",
                            "similarity_score": 0.44907332482771983
                        },
                        {
                            "class_name": "InputListener",
                            "similarity_score": 0.18786728732554484
                        },
                        {
                            "class_name": "InteractionsListener",
                            "similarity_score": 0.3313667478318056
                        },
                        {
                            "class_name": "DelegatingAction",
                            "similarity_score": 0.25907595511236864
                        },
                        {
                            "class_name": "DelegatingAction",
                            "similarity_score": 0.25907595511236864
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "GlobalModelTestCase",
                        "InteractionsDocument",
                        "InteractionsModel",
                        "InteractionsListener",
                        "DelegatingAction",
                        "DelegatingAction",
                        "InputListener"
                    ],
                    "llm_response_time": 3283,
                    "similarity_computation_time": 4,
                    "similarity_metric": "cosine"
                }
            }
        }
    }
]