[
    {
        "repository": "https://github.com/dbeaver/dbeaver.git",
        "sha1": "8c8725f15d05ab6b90de7294ab4a114d8a36e5cb",
        "url": "https://github.com/dbeaver/dbeaver/commit/8c8725f15d05ab6b90de7294ab4a114d8a36e5cb",
        "move_method_refactoring": {
            "type": "Extract And Move Method",
            "description": "Extract And Move Method public createSchemaImpl(owner OracleDataSource, resultSet JDBCResultSet) : OracleSchema extracted from protected fetchObject(session JDBCSession, owner OracleDataSource, resultSet JDBCResultSet) : OracleSchema in class org.jkiss.dbeaver.ext.oracle.model.OracleDataSource.SchemaCache & moved to class org.jkiss.dbeaver.ext.oracle.model.OracleDataSource",
            "leftSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleDataSource.java",
                    "startLine": 967,
                    "endLine": 970,
                    "startColumn": 9,
                    "endColumn": 10,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration before extraction",
                    "codeElement": "protected fetchObject(session JDBCSession, owner OracleDataSource, resultSet JDBCResultSet) : OracleSchema"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleDataSource.java",
                    "startLine": 969,
                    "endLine": 969,
                    "startColumn": 13,
                    "endColumn": 55,
                    "codeElementType": "RETURN_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                }
            ],
            "rightSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleDataSource.java",
                    "startLine": 428,
                    "endLine": 433,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "extracted method declaration",
                    "codeElement": "public createSchemaImpl(owner OracleDataSource, resultSet JDBCResultSet) : OracleSchema"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleDataSource.java",
                    "startLine": 432,
                    "endLine": 432,
                    "startColumn": 9,
                    "endColumn": 51,
                    "codeElementType": "RETURN_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleDataSource.java",
                    "startLine": 981,
                    "endLine": 984,
                    "startColumn": 9,
                    "endColumn": 10,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration after extraction",
                    "codeElement": "protected fetchObject(session JDBCSession, owner OracleDataSource, resultSet JDBCResultSet) : OracleSchema"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleDataSource.java",
                    "startLine": 983,
                    "endLine": 983,
                    "startColumn": 20,
                    "endColumn": 60,
                    "codeElementType": "METHOD_INVOCATION",
                    "description": "extracted method invocation",
                    "codeElement": "owner.createSchemaImpl(owner,resultSet)"
                }
            ],
            "isStatic": false
        },
        "ref_id": 887,
        "extraction_results": {
            "success": true,
            "newCommitHash": "67832724ad63becc226a0d11fdb5286f036b7a03",
            "newBranchName": "extract-createSchemaImpl-fetchObject-509faa6"
        },
        "telemetry": {
            "id": "643ab6c7-a8fd-4396-a61b-85ba6772051c",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1022,
                "lineStart": 67,
                "lineEnd": 1088,
                "bodyLineStart": 67,
                "language": "java",
                "filePath": "/Users/abhiram/Documents/TBE/evaluation_projects/dbeaver/plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleDataSource.java",
                "sourceCode": "/**\n * GenericDataSource\n */\npublic class OracleDataSource extends JDBCDataSource implements DBPObjectStatisticsCollector, DBPAdaptable {\n    private static final Log log = Log.getLog(OracleDataSource.class);\n\n    final public SchemaCache schemaCache = new SchemaCache();\n    final DataTypeCache dataTypeCache = new DataTypeCache();\n    final TablespaceCache tablespaceCache = new TablespaceCache();\n    final UserCache userCache = new UserCache();\n    final ProfileCache profileCache = new ProfileCache();\n    final RoleCache roleCache = new RoleCache();\n\n    private OracleOutputReader outputReader;\n    private OracleSchema publicSchema;\n    private boolean isAdmin;\n    private boolean isAdminVisible;\n    private String planTableName;\n    private boolean useRuleHint;\n    private boolean resolveGeometryAsStruct = true;\n    private boolean hasStatistics;\n    private boolean isPasswordExpireWarningShown;\n\n    private final Map<String, Boolean> availableViews = new HashMap<>();\n\n    public OracleDataSource(DBRProgressMonitor monitor, DBPDataSourceContainer container)\n        throws DBException {\n        super(monitor, container, new OracleSQLDialect());\n        this.outputReader = new OracleOutputReader();\n\n        OracleConfigurator configurator = GeneralUtils.adapt(this, OracleConfigurator.class);\n        if (configurator != null) {\n            resolveGeometryAsStruct = configurator.resolveGeometryAsStruct();\n        }\n    }\n\n    // Constructor for tests\n    @ForTest\n    public OracleDataSource(DBPDataSourceContainer container) {\n        super(container, new OracleSQLDialect());\n        this.outputReader = new OracleOutputReader();\n\n        OracleConfigurator configurator = GeneralUtils.adapt(this, OracleConfigurator.class);\n        if (configurator != null) {\n            resolveGeometryAsStruct = configurator.resolveGeometryAsStruct();\n        }\n        this.hasStatistics = false;\n\n        OracleSchema defSchema = new OracleSchema(this, -1, \"TEST_SCHEMA\");\n        schemaCache.setCache(Collections.singletonList(defSchema));\n    }\n\n    @Override\n    public Object getDataSourceFeature(String featureId) {\n        switch (featureId) {\n            case DBPDataSource.FEATURE_MAX_STRING_LENGTH:\n                return 4000;\n        }\n\n        return super.getDataSourceFeature(featureId);\n    }\n\n    public boolean isViewAvailable(@NotNull DBRProgressMonitor monitor, @Nullable String schemaName, @NotNull String viewName) {\n        viewName = viewName.toUpperCase();\n        Boolean available;\n        synchronized (availableViews) {\n            available = availableViews.get(viewName);\n        }\n        if (available == null) {\n            try {\n                try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Check view existence\")) {\n                    String viewNameQuoted = DBUtils.getQuotedIdentifier(this, viewName);\n                    try (final JDBCPreparedStatement dbStat = session.prepareStatement(\n                        \"SELECT 1 FROM \" +\n                            (schemaName == null ? viewNameQuoted : DBUtils.getQuotedIdentifier(this, schemaName) + \".\" + viewNameQuoted) +\n                            \" WHERE 1<>1\"))\n                    {\n                        dbStat.setFetchSize(1);\n                        dbStat.execute();\n                        available = true;\n                    }\n                }\n            } catch (Exception e) {\n                available = false;\n            }\n            synchronized (availableViews) {\n                availableViews.put(viewName, available);\n            }\n        }\n        return available;\n    }\n\n    @Override\n    protected Connection openConnection(@NotNull DBRProgressMonitor monitor, @Nullable JDBCExecutionContext context, @NotNull String purpose) throws DBCException {\n/*\n        // Set tns admin directory\n        DBPConnectionConfiguration connectionInfo = getContainer().getActualConnectionConfiguration();\n        String tnsPathProp = CommonUtils.toString(connectionInfo.getProviderProperty(OracleConstants.PROP_TNS_PATH));\n        if (!CommonUtils.isEmpty(tnsPathProp)) {\n            System.setProperty(OracleConstants.VAR_ORACLE_NET_TNS_ADMIN, tnsPathProp);\n        } else {\n            DBPNativeClientLocation clientHome = getContainer().getNativeClientHome();\n            if (clientHome != null) {\n                System.setProperty(OracleConstants.VAR_ORACLE_NET_TNS_ADMIN, new File(clientHome.getPath(), OCIUtils.TNSNAMES_FILE_PATH).getAbsolutePath());\n            }\n        }\n*/\n\n        try {\n            Connection connection = super.openConnection(monitor, context, purpose);\n            try {\n                for (SQLWarning warninig = connection.getWarnings();\n                    warninig != null && !isPasswordExpireWarningShown;\n                    warninig = warninig.getNextWarning()\n                ) {\n                    if (checkForPasswordWillExpireWarning(warninig)) {\n                        isPasswordExpireWarningShown = true;\n                    }\n                }\n            } catch (SQLException e) {\n                log.debug(\"Can't get connection warnings\", e);\n            }\n            return connection;\n        } catch (DBCException e) {\n            if (e.getErrorCode() == OracleConstants.EC_PASSWORD_EXPIRED) {\n                // Here we could try to ask for expired password change\n                // This is supported  for thin driver since Oracle 12.2\n                if (changeExpiredPassword(monitor, context, purpose)) {\n                    // Retry\n                    return openConnection(monitor, context, purpose);\n                }\n            }\n            throw e;\n        }\n    }\n    \n    private boolean checkForPasswordWillExpireWarning(@NotNull SQLWarning warning) {\n        if (warning != null && warning.getErrorCode() == OracleConstants.EC_PASSWORD_WILL_EXPIRE) {\n            DBWorkbench.getPlatformUI().showWarningMessageBox(\n                OracleMessages.oracle_password_will_expire_warn_name,\n                NLS.bind(OracleMessages.oracle_password_will_expire_warn_description, warning.getMessage())\n            );\n            return true;\n        }\n        return false;\n    }\n\n    private boolean changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose) {\n        // Ref: https://stackoverflow.com/questions/21733300/oracle-password-expiry-and-grace-period-handling-using-java-oracle-jdbc\n\n        DBPConnectionConfiguration connectionInfo = getContainer().getActualConnectionConfiguration();\n        DBAPasswordChangeInfo passwordInfo = DBWorkbench.getPlatformUI().promptUserPasswordChange(\"Password has expired. Set new password.\", connectionInfo.getUserName(), connectionInfo.getUserPassword(), true, true);\n        if (passwordInfo == null) {\n            return false;\n        }\n\n        // Obtain connection\n        try {\n            if (passwordInfo.getNewPassword() == null) {\n                throw new DBException(\"You can't set empty password\");\n            }\n            Properties connectProps = getAllConnectionProperties(monitor, context, purpose, connectionInfo);\n            connectProps.setProperty(DBConstants.PROP_USER, passwordInfo.getUserName());\n            connectProps.setProperty(DBConstants.PROP_PASSWORD, passwordInfo.getOldPassword());\n            connectProps.setProperty(\"oracle.jdbc.newPassword\", passwordInfo.getNewPassword());\n\n            final String url = getConnectionURL(connectionInfo);\n            monitor.subTask(\"Connecting for expired password change\");\n            Driver driverInstance = getDriverInstance(monitor);\n            try (Connection connection = driverInstance.connect(url, connectProps)) {\n                if (connection == null) {\n                    throw new DBCException(\"Null connection returned\");\n                }\n            }\n\n            connectionInfo.setUserPassword(passwordInfo.getNewPassword());\n            getContainer().getConnectionConfiguration().setUserPassword(passwordInfo.getNewPassword());\n            getContainer().persistConfiguration();\n            return true;\n        }\n        catch (Exception e) {\n            DBWorkbench.getPlatformUI().showError(\"Error changing password\", \"Error changing expired password\", e);\n            return false;\n        }\n    }\n\n    @Override\n    protected JDBCExecutionContext createExecutionContext(JDBCRemoteInstance instance, String type) {\n        return new OracleExecutionContext(instance, type);\n    }\n\n    protected void initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom) throws DBException {\n        if (outputReader == null) {\n            outputReader = new OracleOutputReader();\n        }\n        // Enable DBMS output\n        outputReader.enableServerOutput(\n            monitor,\n            context,\n            outputReader.isServerOutputEnabled());\n        if (initFrom != null) {\n            ((OracleExecutionContext)context).setCurrentSchema(monitor, ((OracleExecutionContext)initFrom).getDefaultSchema());\n        } else {\n            ((OracleExecutionContext)context).refreshDefaults(monitor, true);\n        }\n\n        {\n            DBPConnectionConfiguration connectionInfo = getContainer().getConnectionConfiguration();\n\n            try (JDBCSession session = context.openSession(monitor, DBCExecutionPurpose.META, \"Set connection parameters\")) {\n                try {\n                    readDatabaseServerVersion(session.getMetaData());\n                } catch (SQLException e) {\n                    log.debug(\"Error reading metadata\", e);\n                }\n\n                // Set session settings\n                String sessionLanguage = connectionInfo.getProviderProperty(OracleConstants.PROP_SESSION_LANGUAGE);\n                if (sessionLanguage != null) {\n                    try {\n                        JDBCUtils.executeSQL(\n                            session,\n                            \"ALTER SESSION SET NLS_LANGUAGE='\" + sessionLanguage + \"'\");\n                    } catch (Throwable e) {\n                        log.warn(\"Can't set session language\", e);\n                    }\n                }\n                String sessionTerritory = connectionInfo.getProviderProperty(OracleConstants.PROP_SESSION_TERRITORY);\n                if (sessionTerritory != null) {\n                    try {\n                        JDBCUtils.executeSQL(\n                            session,\n                            \"ALTER SESSION SET NLS_TERRITORY='\" + sessionTerritory + \"'\");\n                    } catch (Throwable e) {\n                        log.warn(\"Can't set session territory\", e);\n                    }\n                }\n                setNLSParameter(session, connectionInfo, \"NLS_DATE_FORMAT\", OracleConstants.PROP_SESSION_NLS_DATE_FORMAT);\n                setNLSParameter(session, connectionInfo, \"NLS_TIMESTAMP_FORMAT\", OracleConstants.PROP_SESSION_NLS_TIMESTAMP_FORMAT);\n                setNLSParameter(session, connectionInfo, \"NLS_LENGTH_SEMANTICS\", OracleConstants.PROP_SESSION_NLS_LENGTH_FORMAT);\n                setNLSParameter(session, connectionInfo, \"NLS_CURRENCY\", OracleConstants.PROP_SESSION_NLS_CURRENCY_FORMAT);\n                \n                SeparateConnectionBehavior behavior = SeparateConnectionBehavior.parse(\n                    getContainer().getPreferenceStore().getString(ModelPreferences.META_SEPARATE_CONNECTION)\n                );\n                boolean isMetaConnectionSeparate;\n                switch (behavior) {\n                    case ALWAYS:\n                        isMetaConnectionSeparate = true;\n                        break;\n                    case NEVER:\n                        isMetaConnectionSeparate = false;\n                        break;\n                    case DEFAULT:\n                    default:\n                        isMetaConnectionSeparate = !container.isForceUseSingleConnection();\n                        break;\n                }\n\n                boolean isMetadataContext = isMetaConnectionSeparate\n                    ? JDBCExecutionContext.TYPE_METADATA.equals(context.getContextName())\n                    : JDBCExecutionContext.TYPE_MAIN.equals(context.getContextName());\n\n                if (isMetadataContext) {\n                    if (CommonUtils.getBoolean(\n                        connectionInfo.getProviderProperty(OracleConstants.PROP_USE_META_OPTIMIZER),\n                        getContainer().getPreferenceStore().getBoolean(OracleConstants.PROP_USE_META_OPTIMIZER))) {\n                        // See #5633\n                        try {\n                            JDBCUtils.executeSQL(session, \"ALTER SESSION SET \\\"_optimizer_push_pred_cost_based\\\" = FALSE\");\n                            JDBCUtils.executeSQL(session, \"ALTER SESSION SET \\\"_optimizer_squ_bottomup\\\" = FALSE\");\n                            JDBCUtils.executeSQL(session, \"ALTER SESSION SET \\\"_optimizer_cost_based_transformation\\\" = 'OFF'\");\n                            if (isServerVersionAtLeast(10, 2)) {\n                                JDBCUtils.executeSQL(session, \"ALTER SESSION SET OPTIMIZER_FEATURES_ENABLE='10.2.0.5'\");\n                            }\n                        } catch (Throwable e) {\n                            log.warn(\"Can't set session optimizer parameters\", e);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private void setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName) {\n        String paramValue = connectionInfo.getProviderProperty(paramName);\n        if (!CommonUtils.isEmpty(paramValue)) {\n            try {\n                JDBCUtils.executeSQL(\n                    session,\n                    \"ALTER SESSION SET \"+ oraNlsName + \"='\" + paramValue + \"'\");\n            } catch (Throwable e) {\n                log.warn(\"Can not set session NLS parameter \" + oraNlsName, e);\n            }\n        }\n    }\n\n    public OracleSchema getDefaultSchema() {\n        return (OracleSchema) DBUtils.getDefaultContext(this, true).getContextDefaults().getDefaultSchema();\n    }\n\n    @Override\n    protected DBPDataSourceInfo createDataSourceInfo(DBRProgressMonitor monitor, @NotNull JDBCDatabaseMetaData metaData) {\n        return new OracleDataSourceInfo(this, metaData);\n    }\n\n    @Override\n    public ErrorType discoverErrorType(@NotNull Throwable error) {\n        Throwable rootCause = GeneralUtils.getRootCause(error);\n        if (rootCause instanceof SQLException) {\n            switch (((SQLException) rootCause).getErrorCode()) {\n                case OracleConstants.EC_NO_RESULTSET_AVAILABLE:\n                    return ErrorType.RESULT_SET_MISSING;\n                case OracleConstants.EC_FEATURE_NOT_SUPPORTED:\n                    return ErrorType.FEATURE_UNSUPPORTED;\n            }\n        }\n        return super.discoverErrorType(error);\n    }\n\n    @Override\n    protected Map<String, String> getInternalConnectionProperties(DBRProgressMonitor monitor, DBPDriver driver, JDBCExecutionContext context, String purpose, DBPConnectionConfiguration connectionInfo) throws DBCException {\n        Map<String, String> connectionsProps = new HashMap<>();\n        if (!getContainer().getPreferenceStore().getBoolean(ModelPreferences.META_CLIENT_NAME_DISABLE)) {\n            // Program name\n            String appName = DBUtils.getClientApplicationName(getContainer(), context, purpose);\n            appName = appName.replaceAll(\"[^ a-zA-Z0-9]\", \"?\"); // Replace any special characters - Oracle don't like them\n            connectionsProps.put(\"v$session.program\", CommonUtils.truncateString(appName, 48));\n        }\n        // FIXME: left for backward compatibility. Replaced by auth model. Remove in future.\n        if (CommonUtils.toBoolean(connectionInfo.getProviderProperty(OracleConstants.OS_AUTH_PROP))) {\n            connectionsProps.put(\"v$session.osuser\", System.getProperty(StandardConstants.ENV_USER_NAME));\n        }\n        return connectionsProps;\n    }\n\n    public boolean isAdmin() {\n        return isAdmin;\n    }\n\n    public boolean isAdminVisible() {\n        return isAdmin || isAdminVisible;\n    }\n\n    public boolean isUseRuleHint() {\n        return useRuleHint;\n    }\n\n    @Association\n    public Collection<OracleSchema> getSchemas(DBRProgressMonitor monitor) throws DBException {\n        return schemaCache.getAllObjects(monitor, this);\n    }\n\n    public OracleSchema getSchema(DBRProgressMonitor monitor, String name) throws DBException {\n        if (publicSchema != null && publicSchema.getName().equals(name)) {\n            return publicSchema;\n        }\n        // Schema cache may be null during DataSource initialization\n        return schemaCache == null ? null : schemaCache.getObject(monitor, this, name);\n    }\n\n    @Association\n    public Collection<OracleTablespace> getTablespaces(DBRProgressMonitor monitor) throws DBException {\n        return tablespaceCache.getAllObjects(monitor, this);\n    }\n\n    public TablespaceCache getTablespaceCache() {\n        return tablespaceCache;\n    }\n\n    @Association\n    public Collection<OracleUser> getUsers(DBRProgressMonitor monitor) throws DBException {\n        return userCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public OracleUser getUser(DBRProgressMonitor monitor, String name) throws DBException {\n        return userCache.getObject(monitor, this, name);\n    }\n\n    @Association\n    public Collection<OracleUserProfile> getProfiles(DBRProgressMonitor monitor) throws DBException {\n        return profileCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleRole> getRoles(DBRProgressMonitor monitor) throws DBException {\n        return roleCache.getAllObjects(monitor, this);\n    }\n\n    public OracleGrantee getGrantee(DBRProgressMonitor monitor, String name) throws DBException {\n        OracleUser user = userCache.getObject(monitor, this, name);\n        if (user != null) {\n            return user;\n        }\n        return roleCache.getObject(monitor, this, name);\n    }\n\n    @Association\n    public Collection<OracleSynonym> getPublicSynonyms(DBRProgressMonitor monitor) throws DBException {\n        return publicSchema.getSynonyms(monitor);\n    }\n\n    @Association\n    public Collection<OracleDBLink> getPublicDatabaseLinks(DBRProgressMonitor monitor) throws DBException {\n        return publicSchema.getDatabaseLinks(monitor);\n    }\n\n    @Association\n    public Collection<OracleRecycledObject> getUserRecycledObjects(DBRProgressMonitor monitor) throws DBException {\n        return publicSchema.getRecycledObjects(monitor);\n    }\n\n    public boolean isAtLeastV9() {\n        return getInfo().getDatabaseVersion().getMajor() >= 9;\n    }\n\n    public boolean isAtLeastV10() {\n        return getInfo().getDatabaseVersion().getMajor() >= 10;\n    }\n\n    public boolean isAtLeastV11() {\n        return getInfo().getDatabaseVersion().getMajor() >= 11;\n    }\n\n    public boolean isAtLeastV12() {\n        return getInfo().getDatabaseVersion().getMajor() >= 12;\n    }\n\n    @Override\n    public void initialize(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.initialize(monitor);\n\n        DBPConnectionConfiguration connectionInfo = getContainer().getConnectionConfiguration();\n\n        {\n            String useRuleHintProp = connectionInfo.getProviderProperty(OracleConstants.PROP_USE_RULE_HINT);\n            if (useRuleHintProp != null) {\n                useRuleHint = CommonUtils.getBoolean(useRuleHintProp, false);\n            }\n        }\n\n        this.publicSchema = new OracleSchema(this, 1, OracleConstants.USER_PUBLIC);\n        {\n            try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load data source meta info\")) {\n                // Check DBA role\n                this.isAdmin = \"YES\".equals(\n                    JDBCUtils.queryString(\n                        session,\n                        \"SELECT 'YES' FROM USER_ROLE_PRIVS WHERE GRANTED_ROLE='DBA'\"));\n                this.isAdminVisible = isAdmin;\n                if (!isAdminVisible) {\n                    String showAdmin = connectionInfo.getProviderProperty(OracleConstants.PROP_ALWAYS_SHOW_DBA);\n                    if (showAdmin != null) {\n                        isAdminVisible = CommonUtils.getBoolean(showAdmin, false);\n                    }\n                }\n            } catch (SQLException e) {\n                //throw new DBException(e);\n                log.warn(e);\n            }\n        }\n        // Cache data types\n        dataTypeCache.setCaseSensitive(false);\n        {\n            List<OracleDataType> dtList = new ArrayList<>();\n            for (Map.Entry<String, OracleDataType.TypeDesc> predefinedType : OracleDataType.PREDEFINED_TYPES.entrySet()) {\n                OracleDataType dataType = new OracleDataType(this, predefinedType.getKey(), true);\n                dtList.add(dataType);\n            }\n            this.dataTypeCache.setCache(dtList);\n        }\n    }\n\n    @Override\n    public DBSObject refreshObject(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        super.refreshObject(monitor);\n\n        this.schemaCache.clearCache();\n        //this.dataTypeCache.clearCache();\n        this.tablespaceCache.clearCache();\n        this.userCache.clearCache();\n        this.profileCache.clearCache();\n        this.roleCache.clearCache();\n        hasStatistics = false;\n\n        this.initialize(monitor);\n\n        return this;\n    }\n\n    @Override\n    public Collection<OracleSchema> getChildren(@NotNull DBRProgressMonitor monitor)\n        throws DBException {\n        return getSchemas(monitor);\n    }\n\n    @Override\n    public OracleSchema getChild(@NotNull DBRProgressMonitor monitor, @NotNull String childName)\n        throws DBException {\n        return getSchema(monitor, childName);\n    }\n\n    @NotNull\n    @Override\n    public Class<? extends OracleSchema> getPrimaryChildType(@Nullable DBRProgressMonitor monitor)\n        throws DBException {\n        return OracleSchema.class;\n    }\n\n    @Override\n    public void cacheStructure(@NotNull DBRProgressMonitor monitor, int scope)\n        throws DBException {\n\n    }\n\n    @Nullable\n    @Override\n    public <T> T getAdapter(Class<T> adapter) {\n        if (adapter == DBSStructureAssistant.class) {\n            return adapter.cast(new OracleStructureAssistant(this));\n        } else if (adapter == DBCServerOutputReader.class) {\n            return adapter.cast(outputReader);\n        } else if (adapter == DBAServerSessionManager.class) {\n            return adapter.cast(new OracleServerSessionManager(this));\n        } else if (adapter == DBCQueryPlanner.class) {\n            return adapter.cast(new OracleQueryPlanner(this));\n        } else if(adapter == DBAUserPasswordManager.class) {\n            return adapter.cast(new OracleChangeUserPasswordManager(this));\n        } else if (adapter == DBDAttributeContentTypeProvider.class) {\n            return adapter.cast(OracleAttributeContentTypeProvider.INSTANCE);\n        }\n        return super.getAdapter(adapter);\n    }\n\n    @Override\n    public void cancelStatementExecute(DBRProgressMonitor monitor, JDBCStatement statement) throws DBException {\n        if (driverSupportsQueryCancel()) {\n            super.cancelStatementExecute(monitor, statement);\n        } else {\n            // Oracle server doesn't support single query cancel?\n            // But we could try to cancel all\n            try {\n                Connection connection = statement.getConnection().getOriginal();\n                BeanUtils.invokeObjectMethod(connection, \"cancel\");\n            } catch (Throwable e) {\n                throw new DBException(\"Can't cancel session queries\", e, this);\n            }\n        }\n    }\n\n    private boolean driverSupportsQueryCancel() {\n        return true;\n    }\n\n    @NotNull\n    @Override\n    public DBPDataKind resolveDataKind(@NotNull String typeName, int valueType) {\n        if ((typeName.equals(OracleConstants.TYPE_NAME_XML) || typeName.equals(OracleConstants.TYPE_FQ_XML))) {\n            return DBPDataKind.CONTENT;\n        }\n        if ((typeName.equals(OracleConstants.TYPE_NAME_GEOMETRY) || typeName.equals(OracleConstants.TYPE_FQ_GEOMETRY))) {\n            return resolveGeometryAsStruct ? DBPDataKind.STRUCT : DBPDataKind.OBJECT;\n        }\n        DBPDataKind dataKind = OracleDataType.getDataKind(typeName);\n        if (dataKind != null) {\n            return dataKind;\n        }\n        return super.resolveDataKind(typeName, valueType);\n    }\n\n    @Override\n    public Collection<? extends DBSDataType> getLocalDataTypes() {\n        return dataTypeCache.getCachedObjects();\n    }\n\n    @Override\n    public OracleDataType getLocalDataType(String typeName) {\n        return dataTypeCache.getCachedObject(typeName);\n    }\n\n    public DataTypeCache getDataTypeCache() {\n        return dataTypeCache;\n    }\n\n    @Nullable\n    @Override\n    public OracleDataType resolveDataType(@NotNull DBRProgressMonitor monitor, @NotNull String typeFullName) throws DBException {\n        int divPos = typeFullName.indexOf(SQLConstants.STRUCT_SEPARATOR);\n        if (divPos == -1) {\n            // Simple type name\n            return getLocalDataType(typeFullName);\n        } else {\n            String schemaName = typeFullName.substring(0, divPos);\n            String typeName = typeFullName.substring(divPos + 1);\n            OracleSchema schema = getSchema(monitor, schemaName);\n            if (schema == null) {\n                return null;\n            }\n            return schema.getDataType(monitor, typeName);\n        }\n    }\n\n    @Nullable\n    public String getPlanTableName(JDBCSession session)\n        throws DBException\n    {\n        if (planTableName == null) {\n            String[] candidateNames;\n            String tableName = getContainer().getPreferenceStore().getString(OracleConstants.PREF_EXPLAIN_TABLE_NAME);\n            if (!CommonUtils.isEmpty(tableName)) {\n                candidateNames = new String[]{tableName};\n            } else {\n                candidateNames = new String[]{\"PLAN_TABLE\", \"TOAD_PLAN_TABLE\"};\n            }\n            for (String candidate : candidateNames) {\n                try {\n                    JDBCUtils.executeSQL(session, \"SELECT 1 FROM \" + candidate);\n                } catch (SQLException e) {\n                    // No such table\n                    continue;\n                }\n                planTableName = candidate;\n                break;\n            }\n            if (planTableName == null) {\n                final String newPlanTableName = candidateNames[0];\n                // Plan table not found - try to create new one\n                if (!DBWorkbench.getPlatformUI().confirmAction(\n                    \"Oracle PLAN_TABLE missing\",\n                    \"PLAN_TABLE not found in current user's session. \" +\n                        \"Do you want DBeaver to create new PLAN_TABLE (\" + newPlanTableName + \")?\")) {\n                    return null;\n                }\n                planTableName = createPlanTable(session, newPlanTableName);\n            }\n        }\n        return planTableName;\n    }\n\n    private String createPlanTable(JDBCSession session, String tableName) throws DBException {\n        try {\n            JDBCUtils.executeSQL(session, OracleConstants.PLAN_TABLE_DEFINITION.replace(\"${TABLE_NAME}\", tableName));\n        } catch (SQLException e) {\n            throw new DBException(\"Error creating PLAN table\", e, this);\n        }\n        return tableName;\n    }\n\n    @Nullable\n    @Override\n    public DBCQueryTransformer createQueryTransformer(@NotNull DBCQueryTransformType type) {\n        if (type == DBCQueryTransformType.RESULT_SET_LIMIT) {\n            //return new QueryTransformerRowNum();\n        }\n        return super.createQueryTransformer(type);\n    }\n\n    private Pattern ERROR_POSITION_PATTERN = Pattern.compile(\".+\\\\s+line ([0-9]+), column ([0-9]+)\");\n    private Pattern ERROR_POSITION_PATTERN_2 = Pattern.compile(\".+\\\\s+at line ([0-9]+)\");\n    private Pattern ERROR_POSITION_PATTERN_3 = Pattern.compile(\".+\\\\s+at position\\\\: ([0-9]+)\");\n\n    @Nullable\n    @Override\n    public ErrorPosition[] getErrorPosition(@NotNull DBRProgressMonitor monitor, @NotNull DBCExecutionContext context, @NotNull String query, @NotNull Throwable error) {\n        while (error instanceof DBException) {\n            if (error.getCause() == null) {\n                break;\n            }\n            error = error.getCause();\n        }\n        String message = error.getMessage();\n        if (!CommonUtils.isEmpty(message)) {\n            List<ErrorPosition> positions = new ArrayList<>();\n            Matcher matcher = ERROR_POSITION_PATTERN.matcher(message);\n            while (matcher.find()) {\n                DBPErrorAssistant.ErrorPosition pos = new DBPErrorAssistant.ErrorPosition();\n                pos.info = matcher.group(1);\n                pos.line = Integer.parseInt(matcher.group(1)) - 1;\n                pos.position = Integer.parseInt(matcher.group(2)) - 1;\n                positions.add(pos);\n            }\n            if (positions.isEmpty()) {\n                matcher = ERROR_POSITION_PATTERN_2.matcher(message);\n                while (matcher.find()) {\n                    DBPErrorAssistant.ErrorPosition pos = new DBPErrorAssistant.ErrorPosition();\n                    pos.info = matcher.group(1);\n                    pos.line = Integer.parseInt(matcher.group(1)) - 1;\n                    positions.add(pos);\n                }\n            }\n            if (positions.isEmpty()) {\n                matcher = ERROR_POSITION_PATTERN_3.matcher(message);\n                while (matcher.find()) {\n                    DBPErrorAssistant.ErrorPosition pos = new DBPErrorAssistant.ErrorPosition();\n                    pos.info = matcher.group(1);\n                    pos.position = Integer.parseInt(matcher.group(1)) - 1;\n                    positions.add(pos);\n                }\n            }\n\n            if (!positions.isEmpty()) {\n                return positions.toArray(new ErrorPosition[positions.size()]);\n            }\n        }\n        if (error.getCause() != null) {\n            // Maybe OracleDatabaseException\n            try {\n                Object errorPosition = BeanUtils.readObjectProperty(error.getCause(), \"errorPosition\");\n                if (errorPosition instanceof Number) {\n                    DBPErrorAssistant.ErrorPosition pos = new DBPErrorAssistant.ErrorPosition();\n                    pos.position = ((Number) errorPosition).intValue();\n                    return new ErrorPosition[]{pos};\n                }\n            } catch (Exception e) {\n                // Nope, its not it\n            }\n\n        }\n        if (error instanceof SQLException && SQLState.SQL_42000.getCode().equals(((SQLException) error).getSQLState())) {\n            try (JDBCSession session = (JDBCSession) context.openSession(monitor, DBCExecutionPurpose.UTIL, \"Extract last error position\")) {\n                try (CallableStatement stat = session.prepareCall(\n                    \"declare\\n\" +\n                        \"  l_cursor integer default dbms_sql.open_cursor; \\n\" +\n                        \"begin \\n\" +\n                        \"  begin \\n\" +\n                        \"  dbms_sql.parse(  l_cursor, ?, dbms_sql.native ); \\n\" +\n                        \"    exception \\n\" +\n                        \"      when others then ? := dbms_sql.last_error_position; \\n\" +\n                        \"    end; \\n\" +\n                        \"    dbms_sql.close_cursor( l_cursor );\\n\" +\n                        \"end;\")) {\n                    stat.setString(1, query);\n                    stat.registerOutParameter(2, Types.INTEGER);\n                    stat.execute();\n                    int errorPos = stat.getInt(2);\n                    if (errorPos <= 0) {\n                        return null;\n                    }\n\n                    DBPErrorAssistant.ErrorPosition pos = new DBPErrorAssistant.ErrorPosition();\n                    pos.position = errorPos;\n                    return new ErrorPosition[]{pos};\n\n                } catch (SQLException e) {\n                    // Something went wrong\n                    log.debug(\"Can't extract parse error info: \" + e.getMessage());\n                }\n            }\n        }\n        return null;\n    }\n\n    ///////////////////////////////////////////////\n    // Statistics\n\n    @Override\n    public boolean isStatisticsCollected() {\n        return hasStatistics;\n    }\n\n    void resetStatistics() {\n        hasStatistics = false;\n    }\n\n    @Override\n    public void collectObjectStatistics(DBRProgressMonitor monitor, boolean totalSizeOnly, boolean forceRefresh) throws DBException {\n        if (hasStatistics && !forceRefresh) {\n            return;\n        }\n        try (final JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load tablespace '\" + getName() + \"' statistics\")) {\n            // Tablespace stats\n            try (JDBCStatement dbStat = session.createStatement()) {\n                try (JDBCResultSet dbResult = dbStat.executeQuery(\n                    \"SELECT\\n\" +\n                    \"\\tTS.TABLESPACE_NAME, F.AVAILABLE_SPACE, S.USED_SPACE\\n\" +\n                    \"FROM\\n\" +\n                    \"\\tSYS.DBA_TABLESPACES TS,\\n\" +\n                    \"\\t(SELECT TABLESPACE_NAME, SUM(BYTES) AVAILABLE_SPACE FROM DBA_DATA_FILES GROUP BY TABLESPACE_NAME) F,\\n\" +\n                    \"\\t(SELECT TABLESPACE_NAME, SUM(BYTES) USED_SPACE FROM DBA_SEGMENTS GROUP BY TABLESPACE_NAME) S\\n\" +\n                    \"WHERE\\n\" +\n                    \"\\tF.TABLESPACE_NAME(+) = TS.TABLESPACE_NAME AND S.TABLESPACE_NAME(+) = TS.TABLESPACE_NAME\")) {\n                    while (dbResult.next()) {\n                        String tsName = dbResult.getString(1);\n                        OracleTablespace tablespace = tablespaceCache.getObject(monitor, OracleDataSource.this, tsName);\n                        if (tablespace != null) {\n                            tablespace.fetchSizes(dbResult);\n                        }\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBException(\"Can't read tablespace statistics\", e, getDataSource());\n        } finally {\n            hasStatistics = true;\n        }\n    }\n\n    private class OracleOutputReader implements DBCServerOutputReader {\n        @Override\n        public boolean isServerOutputEnabled() {\n            return getContainer().getPreferenceStore().getBoolean(OracleConstants.PREF_DBMS_OUTPUT);\n        }\n\n        @Override\n        public boolean isAsyncOutputReadSupported() {\n            return false;\n        }\n\n        public void enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable) throws DBCException {\n            String sql = enable ?\n                \"BEGIN DBMS_OUTPUT.ENABLE(\" + OracleConstants.MAXIMUM_DBMS_OUTPUT_SIZE + \"); END;\" :\n                \"BEGIN DBMS_OUTPUT.DISABLE; END;\";\n            try (DBCSession session = context.openSession(monitor, DBCExecutionPurpose.UTIL, (enable ? \"Enable\" : \"Disable \") + \"DBMS output\")) {\n                JDBCUtils.executeSQL((JDBCSession) session, sql);\n            } catch (SQLException e) {\n                throw new DBCException(e, context);\n            }\n        }\n\n        @Override\n        public void readServerOutput(\n            @NotNull DBRProgressMonitor monitor,\n            @NotNull DBCExecutionContext context,\n            @Nullable DBCExecutionResult executionResult,\n            @Nullable DBCStatement statement,\n            @NotNull DBCOutputWriter output\n        ) throws DBCException {\n            try (JDBCSession session = (JDBCSession) context.openSession(monitor, DBCExecutionPurpose.UTIL, \"Read DBMS output\")) {\n                try (CallableStatement getLineProc = session.getOriginal().prepareCall(\"{CALL DBMS_OUTPUT.GET_LINE(?, ?)}\")) {\n                    getLineProc.registerOutParameter(1, java.sql.Types.VARCHAR);\n                    getLineProc.registerOutParameter(2, java.sql.Types.INTEGER);\n                    int status = 0;\n                    while (status == 0) {\n                        getLineProc.execute();\n                        status = getLineProc.getInt(2);\n                        if (status == 0) {\n                            output.println(null, getLineProc.getString(1));\n                        }\n                    }\n                } catch (SQLException e) {\n                    throw new DBCException(e, context);\n                }\n            }\n        }\n    }\n\n    static class SchemaCache extends JDBCObjectCache<OracleDataSource, OracleSchema> {\n        SchemaCache() {\n            setListOrderComparator(DBUtils.<OracleSchema>nameComparator());\n        }\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleDataSource owner) throws SQLException {\n            StringBuilder schemasQuery = new StringBuilder();\n            DBPConnectionConfiguration configuration = owner.getContainer().getConnectionConfiguration();\n            boolean showOnlyOneSchema = CommonUtils.toBoolean(configuration.getProviderProperty(OracleConstants.PROP_SHOW_ONLY_ONE_SCHEMA));\n            // PROP_CHECK_SCHEMA_CONTENT set to true when option \"Hide empty schemas\" is set\n            boolean showAllSchemas = !showOnlyOneSchema && !CommonUtils.toBoolean(configuration.getProviderProperty(OracleConstants.PROP_CHECK_SCHEMA_CONTENT));\n            schemasQuery.append(\"SELECT U.* FROM \").append(OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner, \"USERS\")).append(\" U\\n\");\n\n//                if (owner.isAdmin() && false) {\n//                    schemasQuery.append(\n//                        \"WHERE (U.USER_ID IN (SELECT DISTINCT OWNER# FROM SYS.OBJ$) \");\n//                } else {\n            \n            schemasQuery.append(\n                \"WHERE (\");\n            if (showOnlyOneSchema) {\n                schemasQuery.append(\"(U.USERNAME) = ?\");\n            } else if (showAllSchemas) {\n                schemasQuery.append(\"U.USERNAME IS NOT NULL\");\n            } else {\n                schemasQuery.append(\"U.USERNAME IN (SELECT DISTINCT OWNER FROM \").append(OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner, \"OBJECTS\")).append(\")\");\n            }\n//                }\n\n            DBSObjectFilter schemaFilters = owner.getContainer().getObjectFilter(OracleSchema.class, null, false);\n            if (!showOnlyOneSchema && schemaFilters != null) {\n                JDBCUtils.appendFilterClause(schemasQuery, schemaFilters, \"U.USERNAME\", false, owner);\n            }\n            schemasQuery.append(\")\");\n            //if (!CommonUtils.isEmpty(owner.activeSchemaName)) {\n            //schemasQuery.append(\"\\nUNION ALL SELECT '\").append(owner.activeSchemaName).append(\"' AS USERNAME FROM DUAL\");\n            //}\n            //schemasQuery.append(\"\\nORDER BY USERNAME\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(schemasQuery.toString());\n\n            if (showOnlyOneSchema) {\n                dbStat.setString(1, DBUtils.getUnQuotedIdentifier(owner, configuration.getUserName().toUpperCase(Locale.ENGLISH))); // Unquoted + upper = all this things only for lower-named users\n            } else if (schemaFilters != null) {\n                JDBCUtils.setFilterParameters(dbStat, 1, schemaFilters);\n            }\n            return dbStat;\n        }\n\n        @Override\n        protected OracleSchema fetchObject(@NotNull JDBCSession session, @NotNull OracleDataSource owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException {\n            return createSchemaImpl(owner, resultSet);\n        }\n\n        private OracleSchema createSchemaImpl(org.jkiss.dbeaver.ext.oracle.model.OracleDataSource owner, JDBCResultSet resultSet) {\n            return new OracleSchema(owner, resultSet);\n        }\n\n        @Override\n        protected void invalidateObjects(DBRProgressMonitor monitor, OracleDataSource owner, Iterator<OracleSchema> objectIter) {\n            setListOrderComparator(DBUtils.<OracleSchema>nameComparator());\n        }\n    }\n\n    static class DataTypeCache extends JDBCObjectCache<OracleDataSource, OracleDataType> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleDataSource owner) throws SQLException {\n            return session.prepareStatement(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner) + \" * FROM \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner, \"TYPES\") + \" WHERE OWNER IS NULL ORDER BY TYPE_NAME\");\n        }\n\n        @Override\n        protected OracleDataType fetchObject(@NotNull JDBCSession session, @NotNull OracleDataSource owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException {\n            return new OracleDataType(owner, resultSet);\n        }\n    }\n\n    static class TablespaceCache extends JDBCObjectCache<OracleDataSource, OracleTablespace> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleDataSource owner) throws SQLException {\n            return session.prepareStatement(\n                \"SELECT * FROM \" + OracleUtils.getSysUserViewName(session.getProgressMonitor(), owner, \"TABLESPACES\") + \" ORDER BY TABLESPACE_NAME\");\n        }\n\n        @Override\n        protected OracleTablespace fetchObject(@NotNull JDBCSession session, @NotNull OracleDataSource owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException {\n            return new OracleTablespace(owner, resultSet);\n        }\n    }\n\n    static class UserCache extends JDBCObjectCache<OracleDataSource, OracleUser> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleDataSource owner) throws SQLException {\n            return session.prepareStatement(\n                \"SELECT * FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner, \"USERS\") + \" ORDER BY USERNAME\");\n        }\n\n        @Override\n        protected OracleUser fetchObject(@NotNull JDBCSession session, @NotNull OracleDataSource owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException {\n            return new OracleUser(owner, resultSet);\n        }\n    }\n\n    static class RoleCache extends JDBCObjectCache<OracleDataSource, OracleRole> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleDataSource owner) throws SQLException {\n            return session.prepareStatement(\n                \"SELECT * FROM DBA_ROLES ORDER BY ROLE\");\n        }\n\n        @Override\n        protected OracleRole fetchObject(@NotNull JDBCSession session, @NotNull OracleDataSource owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException {\n            return new OracleRole(owner, resultSet);\n        }\n    }\n\n    static class ProfileCache extends JDBCStructCache<OracleDataSource, OracleUserProfile, OracleUserProfile.ProfileResource> {\n        protected ProfileCache() {\n            super(\"PROFILE\");\n        }\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleDataSource owner) throws SQLException {\n            return session.prepareStatement(\n                \"SELECT DISTINCT PROFILE FROM DBA_PROFILES ORDER BY PROFILE\");\n        }\n\n        @Override\n        protected OracleUserProfile fetchObject(@NotNull JDBCSession session, @NotNull OracleDataSource owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException {\n            return new OracleUserProfile(owner, resultSet);\n        }\n\n        @Override\n        protected JDBCStatement prepareChildrenStatement(@NotNull JDBCSession session, @NotNull OracleDataSource dataSource, @Nullable OracleUserProfile forObject) throws SQLException {\n            final JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT RESOURCE_NAME,RESOURCE_TYPE,LIMIT FROM DBA_PROFILES \" +\n                    (forObject == null ? \"\" : \"WHERE PROFILE=? \") +\n                    \"ORDER BY RESOURCE_NAME\");\n            if (forObject != null) {\n                dbStat.setString(1, forObject.getName());\n            }\n            return dbStat;\n        }\n\n        @Override\n        protected OracleUserProfile.ProfileResource fetchChild(@NotNull JDBCSession session, @NotNull OracleDataSource dataSource, @NotNull OracleUserProfile parent, @NotNull JDBCResultSet dbResult) throws SQLException, DBException {\n            return new OracleUserProfile.ProfileResource(parent, dbResult);\n        }\n    }\n\n    @NotNull\n    @Override\n    protected String getStandardSQLDataTypeName(@NotNull DBPDataKind dataKind) {\n        switch (dataKind) {\n            case BOOLEAN: return SQLConstants.DATA_TYPE_BOOLEAN;\n            case NUMERIC: return OracleConstants.TYPE_NAME_NUMERIC;\n            case DATETIME: return OracleConstants.TYPE_NAME_TIMESTAMP;\n            case BINARY:\n            case CONTENT:\n                return OracleConstants.TYPE_NAME_BLOB;\n            case ROWID: return OracleConstants.TYPE_NAME_ROWID;\n            default: return OracleConstants.TYPE_NAME_VARCHAR2;\n        }\n    }\n}",
                "methodCount": 77
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 14,
                "candidates": [
                    {
                        "lineStart": 441,
                        "lineEnd": 444,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getUser to class UserCache",
                        "description": "Move method getUser to org.jkiss.dbeaver.ext.oracle.model.OracleDataSource.UserCache\nRationale: The method getUser queries and returns an OracleUser object from the userCache. This functionally aligns with UserCache, which is responsible for managing user objects. Placing the method within UserCache provides a coherent encapsulation of user-related operations and improves maintainability by keeping relevant functionality together.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 419,
                        "lineEnd": 425,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getSchema to class OracleSchema",
                        "description": "Move method getSchema to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method getSchema(DBRProgressMonitor monitor, String name) is closely related to fetching schemas, and the OracleSchema class already contains several methods for obtaining database objects, making it the natural place for this method. Moving it to OracleSchema consolidates responsibilities around schema-related operations into a single class, promoting better encapsulation and easier maintainability.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 427,
                        "lineEnd": 430,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getTablespaces to class OracleSchema",
                        "description": "Move method getTablespaces to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method getTablespaces(DBRProgressMonitor) relies on fetching tablespaces, which are a part of the broader schema. OracleSchema manages collections of objects within a schema, and it already contains methods to fetch related objects such as tables, indexes, views, data types, sequences, and other schema-level objects. Therefore, moving this method to OracleSchema ensures coherence and improves the class's responsibility for schema-wide entities.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 436,
                        "lineEnd": 439,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getUsers to class OracleSchema",
                        "description": "Move method getUsers to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method getUsers primarily deals with retrieving a collection of OracleUser objects, which are logically linked to the concept of a schema in an Oracle database. OracleSchema class already has multiple association methods related to fetching various objects (like tables, sequences, procedures) within a schema, and adding this method here would maintain consistency and centralize schema-related operations, improving code organization.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 446,
                        "lineEnd": 449,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getProfiles to class ProfileCache",
                        "description": "Move method getProfiles to org.jkiss.dbeaver.ext.oracle.model.OracleDataSource.ProfileCache\nRationale: The method getProfiles(DBRProgressMonitor monitor) is retrieving all OracleUserProfile objects using the profileCache. Therefore, it is closely related to the ProfileCache class and should logically belong there to maintain proper cohesion and separation of concerns.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 451,
                        "lineEnd": 454,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getRoles to class OracleSchema",
                        "description": "Move method getRoles to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method getRoles() appears to retrieve role-related information from a cache associated with an Oracle schema. Since OracleSchema already manages various caches (such as for tables, views, sequences, etc.), placing the getRoles() method here is logical and ensures consistency. This also fits well with the other data retrieval methods in OracleSchema, which interact with the database to fetch various schema-level objects.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 414,
                        "lineEnd": 417,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getSchemas to class OracleSchema",
                        "description": "Move method getSchemas to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method `getSchemas(DBRProgressMonitor monitor)` is intrinsically related to the concept of schemas which OracleSchema represents. This method utilizes the schemaCache to retrieve all Oracle schemas and this cache is already a part of OracleSchema. Moving this method to OracleSchema ensures better cohesion and encapsulation related to schema operations in OracleSchema itself.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 464,
                        "lineEnd": 467,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getPublicSynonyms to class OracleOutputReader",
                        "description": "Move method getPublicSynonyms to org.jkiss.dbeaver.ext.oracle.model.OracleDataSource.OracleOutputReader\nRationale: The method getPublicSynonyms() retrieves public synonyms from the Oracle schema. Given that OracleOutputReader deals with interfacing with Oracle DBMS functionalities, particularly in reading outputs, it fits the responsibilities of this class to provide outputs from such retrievals. Moreover, the interface with DBMS Output aligns with managing and obtaining such system-level objects.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 469,
                        "lineEnd": 472,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getPublicDatabaseLinks to class OracleSchema",
                        "description": "Move method getPublicDatabaseLinks to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method `getPublicDatabaseLinks` retrieves database links from the public schema, which is a core function closely related to the schema context. The `OracleSchema` class already contains similar methods such as `getDatabaseLinks`, `getIndexes`, `getTables`, etc. By moving this method to the `OracleSchema` class, it maintains consistency and logical organization of schema-related operations in one place.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 474,
                        "lineEnd": 477,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getUserRecycledObjects to class OracleSchema",
                        "description": "Move method getUserRecycledObjects to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method getUserRecycledObjects() closely interacts with the recycleBin attribute of the OracleSchema class, which contains a cache of OracleRecycledObject instances. The OracleSchema class already contains a similar method getRecycledObjects() for fetching recycled objects, making it a logical and cohesive location for this method. Moving the method here enhances encapsulation and maintains the logical organization of methods related to schemas within the OracleSchema class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 877,
                        "lineEnd": 886,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method enableServerOutput to class DBCExecutionContext",
                        "description": "Move method enableServerOutput to org.jkiss.dbeaver.model.exec.DBCExecutionContext\nRationale: The enableServerOutput method primarily deals with executing SQL within a given execution context and managing sessions. DBCExecutionContext is responsible for providing access to execution sessions, managing connections, and executing tasks on the database, making it the most appropriate class to house this method. Additionally, the method already utilizes openSession from DBCExecutionContext, indicating a strong coupling between the method's functionality and the responsibilities of DBCExecutionContext. Moving this method there would enhance cohesion and maintain a clear separation of concerns.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 456,
                        "lineEnd": 462,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getGrantee to class OracleSchema",
                        "description": "Move method getGrantee to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The getGrantee(DBRProgressMonitor, String) method heavily interacts with OracleUser and roles which are closely associated with the schema in Oracle databases. The method logic relies on userCache and roleCache, which need to be part of the same class hierarchy for coherence. OracleSchema contains caches for various database objects and is a natural place to incorporate userCache and roleCache.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 350,
                        "lineEnd": 361,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method setNLSParameter to class OracleOutputReader",
                        "description": "Move method setNLSParameter to org.jkiss.dbeaver.ext.oracle.model.OracleDataSource.OracleOutputReader\nRationale: The setNLSParameter method deals directly with modifying the session settings for the NLS parameters using JDBC. Given that OracleOutputReader is already managing JDBC sessions for other Oracle-specific commands (e.g., enabling/disabling server output), it is logical and cohesive to move this method to OracleOutputReader. This method will be useful for performing session-specific configurations which are commonly needed for Oracle databases.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 213,
                        "lineEnd": 250,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method changeExpiredPassword to class JDBCExecutionContext",
                        "description": "Move method changeExpiredPassword to org.jkiss.dbeaver.model.impl.jdbc.JDBCExecutionContext\nRationale: The changeExpiredPassword() method involves initiating a connection, setting properties for the connection, and handling exceptions during the connection process. The existing JDBCExecutionContext class is designed for managing JDBC connections, transactions, and execution contexts. It already contains methods for establishing and handling database connections, making it the most appropriate target for handling password changes. This class encapsulates the logic related to interacting with the JDBC connection and aligns well with the responsibility of managing a connection life cycle which includes password change scenarios.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    }
                ]
            },
            "elapsedTime": [
                {
                    "candidateIndex": 0,
                    "elapsedTime": 164462
                },
                {
                    "candidateIndex": 1,
                    "elapsedTime": 1236
                },
                {
                    "candidateIndex": 2,
                    "elapsedTime": 954
                },
                {
                    "candidateIndex": 3,
                    "elapsedTime": 1569
                },
                {
                    "candidateIndex": 9,
                    "elapsedTime": 915
                },
                {
                    "candidateIndex": 11,
                    "elapsedTime": 597
                },
                {
                    "candidateIndex": 12,
                    "elapsedTime": 898
                }
            ],
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 152202
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "changeExpiredPassword",
                            "method_signature": "private boolean changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                            "target_class": "DBAPasswordManager",
                            "rationale": "The method `changeExpiredPassword` deals with changing expired passwords, which is closely tied to managing passwords. Moving this method to a class that specifically handles password management will make the code more modular and maintainable."
                        },
                        {
                            "method_name": "checkForPasswordWillExpireWarning",
                            "method_signature": "private boolean checkForPasswordWillExpireWarning(@NotNull SQLWarning warning)",
                            "target_class": "DBAWarningManager",
                            "rationale": "The method `checkForPasswordWillExpireWarning` checks for specific SQL warnings related to password expiration. Moving this method to a class responsible for handling database warnings is more appropriate, enhancing separation of concerns."
                        },
                        {
                            "method_name": "collectObjectStatistics",
                            "method_signature": "public void collectObjectStatistics(DBRProgressMonitor monitor, boolean totalSizeOnly, boolean forceRefresh) throws DBException",
                            "target_class": "DBStatisticsManager",
                            "rationale": "The `collectObjectStatistics` method handles the collection of database statistics, which is a responsibility suitable for a statistics manager class. Moving this method helps in better organizing code related to statistics collection."
                        },
                        {
                            "method_name": "isViewAvailable",
                            "method_signature": "public boolean isViewAvailable(@NotNull DBRProgressMonitor monitor, @Nullable String schemaName, @NotNull String viewName)",
                            "target_class": "DBSchemaManager",
                            "rationale": "The method `isViewAvailable` checks the availability of a specific view in a schema. Moving this method to a class dedicated to schema management makes the codebase more intuitive and easier to navigate."
                        },
                        {
                            "method_name": "initializeContextState",
                            "method_signature": "protected void initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom) throws DBException",
                            "target_class": "DBContextManager",
                            "rationale": "The method `initializeContextState` is responsible for initializing the context state for a database session. Since it focuses on session context management, moving it to a class specifically handling database context makes the application structure more coherent."
                        }
                    ],
                    "llm_response_time": 8774
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "enableServerOutput",
                            "method_signature": "public void enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable) throws DBCException",
                            "target_class": "OracleOutputReader",
                            "rationale": "The method manages server output preferences and is specific to the functionality provided by the OracleOutputReader."
                        },
                        {
                            "method_name": "readServerOutput",
                            "method_signature": "public void readServerOutput(@NotNull DBRProgressMonitor monitor, @NotNull DBCExecutionContext context, @Nullable DBCExecutionResult executionResult, @Nullable DBCStatement statement, @NotNull DBCOutputWriter output) throws DBCException",
                            "target_class": "OracleOutputReader",
                            "rationale": "The method deals with reading server output and is central to the functionality offered by the OracleOutputReader class."
                        }
                    ],
                    "llm_response_time": 4526
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "isViewAvailable",
                            "method_signature": "public boolean isViewAvailable(DBRProgressMonitor monitor, String schemaName, String viewName)",
                            "target_class": "DBUtils",
                            "rationale": "The isViewAvailable method interacts heavily with the database to check the existence of views, making it a better fit for a utility class like DBUtils that specializes in database related utility functions."
                        },
                        {
                            "method_name": "checkForPasswordWillExpireWarning",
                            "method_signature": "private boolean checkForPasswordWillExpireWarning(SQLWarning warning)",
                            "target_class": "OracleUtils",
                            "rationale": "This method deals with checking specific warning codes related to password expiry, making it more suitable for a specialized utility class like OracleUtils."
                        },
                        {
                            "method_name": "changeExpiredPassword",
                            "method_signature": "private boolean changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                            "target_class": "DBUtils",
                            "rationale": "The changeExpiredPassword method handles password management operations which can be better encapsulated within a utility class like DBUtils for better separation of concerns and reuse."
                        },
                        {
                            "method_name": "setNLSParameter",
                            "method_signature": "private void setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                            "target_class": "OracleUtils",
                            "rationale": "Since setNLSParameter handles specific Oracle NLS session parameter settings, it would be more appropriately located within the OracleUtils class."
                        },
                        {
                            "method_name": "createPlanTable",
                            "method_signature": "private String createPlanTable(JDBCSession session, String tableName)",
                            "target_class": "OracleUtils",
                            "rationale": "The createPlanTable method deals with creating specific Oracle database objects (i.e., PLAN_TABLE), making it more suitable for a class dedicated to Oracle operations like OracleUtils."
                        },
                        {
                            "method_name": "getPlanTableName",
                            "method_signature": "public String getPlanTableName(JDBCSession session) throws DBException",
                            "target_class": "OracleUtils",
                            "rationale": "The getPlanTableName method determines the name of the plan table, which is an Oracle database specific operation and would be more appropriate in the OracleUtils class."
                        }
                    ],
                    "llm_response_time": 7970
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "changeExpiredPassword",
                            "method_signature": "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "initializeContextState",
                            "method_signature": "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "setNLSParameter",
                            "method_signature": "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSchemas",
                            "method_signature": "@Association\n    public getSchemas(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSchema",
                            "method_signature": "public getSchema(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTablespaces",
                            "method_signature": "@Association\n    public getTablespaces(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getUsers",
                            "method_signature": "@Association\n    public getUsers(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getUser",
                            "method_signature": "@Association\n    public getUser(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getProfiles",
                            "method_signature": "@Association\n    public getProfiles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getRoles",
                            "method_signature": "@Association\n    public getRoles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getGrantee",
                            "method_signature": "public getGrantee(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getPublicSynonyms",
                            "method_signature": "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getPublicDatabaseLinks",
                            "method_signature": "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getUserRecycledObjects",
                            "method_signature": "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "enableServerOutput",
                            "method_signature": "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                },
                {
                    "iteration_num": -2,
                    "suggested_move_methods": [
                        {
                            "method_name": "getUser",
                            "method_signature": "@Association\n    public getUser(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSchema",
                            "method_signature": "public getSchema(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTablespaces",
                            "method_signature": "@Association\n    public getTablespaces(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getUsers",
                            "method_signature": "@Association\n    public getUsers(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getProfiles",
                            "method_signature": "@Association\n    public getProfiles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getRoles",
                            "method_signature": "@Association\n    public getRoles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSchemas",
                            "method_signature": "@Association\n    public getSchemas(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getPublicSynonyms",
                            "method_signature": "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getPublicDatabaseLinks",
                            "method_signature": "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getUserRecycledObjects",
                            "method_signature": "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "enableServerOutput",
                            "method_signature": "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getGrantee",
                            "method_signature": "public getGrantee(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "setNLSParameter",
                            "method_signature": "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "changeExpiredPassword",
                            "method_signature": "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "initializeContextState",
                            "method_signature": "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "methodCompatibilityScores": {
                "tf-idf": {
                    "@Association\n    public getUser(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getUser",
                            "method_signature": "@Association\n    public getUser(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4762601621509961
                    },
                    "public getSchema(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getSchema",
                            "method_signature": "public getSchema(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.48315591328852664
                    },
                    "@Association\n    public getTablespaces(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getTablespaces",
                            "method_signature": "@Association\n    public getTablespaces(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.494902085060196
                    },
                    "@Association\n    public getUsers(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getUsers",
                            "method_signature": "@Association\n    public getUsers(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.494902085060196
                    },
                    "@Association\n    public getProfiles(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getProfiles",
                            "method_signature": "@Association\n    public getProfiles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.494902085060196
                    },
                    "@Association\n    public getRoles(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getRoles",
                            "method_signature": "@Association\n    public getRoles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.494902085060196
                    },
                    "@Association\n    public getSchemas(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getSchemas",
                            "method_signature": "@Association\n    public getSchemas(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.49563847059967486
                    },
                    "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getPublicSynonyms",
                            "method_signature": "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5122921483110057
                    },
                    "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getPublicDatabaseLinks",
                            "method_signature": "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5122921483110057
                    },
                    "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getUserRecycledObjects",
                            "method_signature": "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5122921483110057
                    },
                    "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)": {
                        "first": {
                            "method_name": "enableServerOutput",
                            "method_signature": "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5921816307291264
                    },
                    "public getGrantee(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getGrantee",
                            "method_signature": "public getGrantee(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6130274016767332
                    },
                    "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)": {
                        "first": {
                            "method_name": "setNLSParameter",
                            "method_signature": "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6222627608340043
                    },
                    "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)": {
                        "first": {
                            "method_name": "changeExpiredPassword",
                            "method_signature": "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7452734663610742
                    },
                    "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)": {
                        "first": {
                            "method_name": "initializeContextState",
                            "method_signature": "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7734269180607269
                    }
                },
                "voyage": {
                    "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)": {
                        "first": {
                            "method_name": "setNLSParameter",
                            "method_signature": "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.3850455065816107
                    },
                    "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)": {
                        "first": {
                            "method_name": "changeExpiredPassword",
                            "method_signature": "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4637398734930881
                    },
                    "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getPublicSynonyms",
                            "method_signature": "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4942945489332014
                    },
                    "public getGrantee(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getGrantee",
                            "method_signature": "public getGrantee(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4998669446547422
                    },
                    "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)": {
                        "first": {
                            "method_name": "enableServerOutput",
                            "method_signature": "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5160229501594881
                    },
                    "@Association\n    public getUsers(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getUsers",
                            "method_signature": "@Association\n    public getUsers(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5166322199147728
                    },
                    "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getUserRecycledObjects",
                            "method_signature": "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5186258445812842
                    },
                    "@Association\n    public getProfiles(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getProfiles",
                            "method_signature": "@Association\n    public getProfiles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5255019157711954
                    },
                    "@Association\n    public getRoles(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getRoles",
                            "method_signature": "@Association\n    public getRoles(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5255258462303392
                    },
                    "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)": {
                        "first": {
                            "method_name": "initializeContextState",
                            "method_signature": "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5257467409503084
                    },
                    "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getPublicDatabaseLinks",
                            "method_signature": "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.530393179794666
                    },
                    "@Association\n    public getUser(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getUser",
                            "method_signature": "@Association\n    public getUser(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5349117183754132
                    },
                    "@Association\n    public getTablespaces(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getTablespaces",
                            "method_signature": "@Association\n    public getTablespaces(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5557831077514958
                    },
                    "@Association\n    public getSchemas(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getSchemas",
                            "method_signature": "@Association\n    public getSchemas(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5800359625296378
                    },
                    "public getSchema(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getSchema",
                            "method_signature": "public getSchema(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6668273784131153
                    }
                }
            },
            "llmMethodPriority": {
                "tf-idf": {
                    "priority_method_names": [
                        "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)",
                        "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                        "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                        "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)",
                        "@Association\n    public getRoles(DBRProgressMonitor monitor)",
                        "@Association\n    public getProfiles(DBRProgressMonitor monitor)",
                        "@Association\n    public getUsers(DBRProgressMonitor monitor)",
                        "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)",
                        "public getGrantee(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getSchemas(DBRProgressMonitor monitor)",
                        "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)",
                        "public getSchema(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)",
                        "@Association\n    public getTablespaces(DBRProgressMonitor monitor)",
                        "@Association\n    public getUser(DBRProgressMonitor monitor, String name)"
                    ],
                    "llm_response_time": 7057
                },
                "tf-idf-5": {
                    "priority_method_names": [
                        "@Association\n    public getUsers(DBRProgressMonitor monitor)",
                        "@Association\n    public getTablespaces(DBRProgressMonitor monitor)",
                        "@Association\n    public getUser(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getProfiles(DBRProgressMonitor monitor)"
                    ],
                    "llm_response_time": 5074
                },
                "tf-df-3": {
                    "priority_method_names": [
                        "public getSchema(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getUser(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getTablespaces(DBRProgressMonitor monitor)"
                    ],
                    "llm_response_time": 3883
                },
                "voyage": {
                    "priority_method_names": [
                        "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                        "protected initializeContextState(@NotNull DBRProgressMonitor monitor, @NotNull JDBCExecutionContext context, JDBCExecutionContext initFrom)",
                        "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                        "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)",
                        "public getGrantee(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getSchemas(DBRProgressMonitor monitor)",
                        "@Association\n    public getTablespaces(DBRProgressMonitor monitor)",
                        "@Association\n    public getUsers(DBRProgressMonitor monitor)",
                        "@Association\n    public getUser(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getProfiles(DBRProgressMonitor monitor)",
                        "@Association\n    public getRoles(DBRProgressMonitor monitor)",
                        "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)",
                        "@Association\n    public getUserRecycledObjects(DBRProgressMonitor monitor)",
                        "@Association\n    public getPublicDatabaseLinks(DBRProgressMonitor monitor)",
                        "public getSchema(DBRProgressMonitor monitor, String name)"
                    ],
                    "llm_response_time": 9404
                },
                "voyage-5": {
                    "priority_method_names": [
                        "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                        "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                        "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)",
                        "public getGrantee(DBRProgressMonitor monitor, String name)",
                        "public enableServerOutput(DBRProgressMonitor monitor, DBCExecutionContext context, boolean enable)"
                    ],
                    "llm_response_time": 8716
                },
                "voyage-3": {
                    "priority_method_names": [
                        "private changeExpiredPassword(DBRProgressMonitor monitor, JDBCExecutionContext context, String purpose)",
                        "private setNLSParameter(JDBCSession session, DBPConnectionConfiguration connectionInfo, String oraNlsName, String paramName)",
                        "@Association\n    public getPublicSynonyms(DBRProgressMonitor monitor)"
                    ],
                    "llm_response_time": 5407
                }
            },
            "targetClassMap": {
                "getUser": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.1168811455530461
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.2481483591372178
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.28122049591070253
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3067859955389482
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.31022669373179257
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.2993820796734995
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.41501480893622306
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "UserCache",
                        "OracleSchema",
                        "ProfileCache"
                    ],
                    "llm_response_time": 4928,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getSchema": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.09593402008347142
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.43309691911213927
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "DBRProgressMonitor"
                    ],
                    "llm_response_time": 5145,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getTablespaces": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.27743829976792506
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.34684398780964804
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3347193406976015
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.4342307082329136
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "ProfileCache",
                        "RoleCache"
                    ],
                    "llm_response_time": 5210,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getUsers": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.27743829976792506
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.34684398780964804
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3347193406976015
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.394610898933592
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.4342307082329136
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "ProfileCache",
                        "OracleOutputReader"
                    ],
                    "llm_response_time": 4582,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "getProfiles": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.27743829976792506
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.34684398780964804
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3347193406976015
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.394610898933592
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.4342307082329136
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ProfileCache",
                        "OracleSchema",
                        "OracleOutputReader"
                    ],
                    "llm_response_time": 6287,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "getRoles": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.27743829976792506
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.34684398780964804
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3347193406976015
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.394610898933592
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.4342307082329136
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "ProfileCache",
                        "OracleOutputReader"
                    ],
                    "llm_response_time": 5602,
                    "similarity_computation_time": 4,
                    "similarity_metric": "cosine"
                },
                "getSchemas": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.27743829976792506
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3144140727612662
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.34684398780964804
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3347193406976015
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.394610898933592
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.4342307082329136
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "ProfileCache",
                        "OracleOutputReader"
                    ],
                    "llm_response_time": 5119,
                    "similarity_computation_time": 6,
                    "similarity_metric": "cosine"
                },
                "getPublicSynonyms": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.08189266356489211
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.2897748533756077
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3283947887145927
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3283947887145927
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.36226673028138096
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3496029493900505
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.41215764180558295
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.44496160979808197
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleOutputReader",
                        "OracleSchema",
                        "ProfileCache"
                    ],
                    "llm_response_time": 7675,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "getPublicDatabaseLinks": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.08189266356489211
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.2897748533756077
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3283947887145927
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3283947887145927
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.36226673028138096
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3496029493900505
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.41215764180558295
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.44496160979808197
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "ProfileCache",
                        "OracleOutputReader"
                    ],
                    "llm_response_time": 6057,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "getUserRecycledObjects": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.08189266356489211
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.2897748533756077
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3283947887145927
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3283947887145927
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.36226673028138096
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.3496029493900505
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.41215764180558295
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.44496160979808197
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "ProfileCache",
                        "OracleOutputReader"
                    ],
                    "llm_response_time": 6001,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "enableServerOutput": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.14906383750457372
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.07142623918128728
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DBCExecutionContext",
                        "DBRProgressMonitor"
                    ],
                    "llm_response_time": 2221,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getGrantee": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.11749469908920933
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.26929367606660515
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.30518396894653693
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3212462831016178
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.37357653148716996
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.32489314482696546
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.5220685955418943
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "ProfileCache",
                        "RoleCache"
                    ],
                    "llm_response_time": 6428,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "setNLSParameter": {
                    "target_classes": [
                        {
                            "class_name": "JDBCSession",
                            "similarity_score": 0.04632037811293699
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.5338603038776822
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.4132253699899369
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.3707361182429949
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.3707361182429949
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.36996122023095773
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.29081591132988605
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.5640218214953688
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleOutputReader",
                        "Log",
                        "DataTypeCache"
                    ],
                    "llm_response_time": 4090,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "changeExpiredPassword": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.08961031377943497
                        },
                        {
                            "class_name": "JDBCExecutionContext",
                            "similarity_score": 0.7395831863656603
                        },
                        {
                            "class_name": "DataTypeCache",
                            "similarity_score": 0.2594319860058102
                        },
                        {
                            "class_name": "TablespaceCache",
                            "similarity_score": 0.2940079556170236
                        },
                        {
                            "class_name": "UserCache",
                            "similarity_score": 0.2940079556170236
                        },
                        {
                            "class_name": "ProfileCache",
                            "similarity_score": 0.38474809250452074
                        },
                        {
                            "class_name": "RoleCache",
                            "similarity_score": 0.31299537008543
                        },
                        {
                            "class_name": "OracleOutputReader",
                            "similarity_score": 0.6292442185092204
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "JDBCExecutionContext",
                        "OracleOutputReader",
                        "ProfileCache"
                    ],
                    "llm_response_time": 4028,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "initializeContextState": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 4847,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                }
            }
        }

    },
    {
        "repository": "https://github.com/dbeaver/dbeaver.git",
        "sha1": "8c8725f15d05ab6b90de7294ab4a114d8a36e5cb",
        "url": "https://github.com/dbeaver/dbeaver/commit/8c8725f15d05ab6b90de7294ab4a114d8a36e5cb",
        "move_method_refactoring": {
            "type": "Extract And Move Method",
            "description": "Extract And Move Method public createTableImpl(monitor DBRProgressMonitor, owner OracleSchema, dbResult JDBCResultSet) : OracleTable extracted from protected fetchObject(session JDBCSession, owner OracleSchema, dbResult JDBCResultSet) : OracleTableBase in class org.jkiss.dbeaver.ext.oracle.model.OracleSchema.TableCache & moved to class org.jkiss.dbeaver.ext.oracle.model.OracleSchema",
            "leftSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java",
                    "startLine": 658,
                    "endLine": 670,
                    "startColumn": 9,
                    "endColumn": 10,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration before extraction",
                    "codeElement": "protected fetchObject(session JDBCSession, owner OracleSchema, dbResult JDBCResultSet) : OracleTableBase"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java",
                    "startLine": 664,
                    "endLine": 664,
                    "startColumn": 17,
                    "endColumn": 87,
                    "codeElementType": "RETURN_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                }
            ],
            "rightSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java",
                    "startLine": 222,
                    "endLine": 227,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "extracted method declaration",
                    "codeElement": "public createTableImpl(monitor DBRProgressMonitor, owner OracleSchema, dbResult JDBCResultSet) : OracleTable"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java",
                    "startLine": 226,
                    "endLine": 226,
                    "startColumn": 9,
                    "endColumn": 58,
                    "codeElementType": "RETURN_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java",
                    "startLine": 665,
                    "endLine": 677,
                    "startColumn": 9,
                    "endColumn": 10,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration after extraction",
                    "codeElement": "protected fetchObject(session JDBCSession, owner OracleSchema, dbResult JDBCResultSet) : OracleTableBase"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java",
                    "startLine": 671,
                    "endLine": 671,
                    "startColumn": 24,
                    "endColumn": 92,
                    "codeElementType": "METHOD_INVOCATION",
                    "description": "extracted method invocation",
                    "codeElement": "owner.createTableImpl(session.getProgressMonitor(),owner,dbResult)"
                }
            ],
            "isStatic": false
        },
        "ref_id": 888,
        "extraction_results": {
            "success": true,
            "newCommitHash": "f7bc840044f5514ddd4f7424c4b49b66ee2ce2dd",
            "newBranchName": "extract-createTableImpl-fetchObject-509faa6"
        },
        "telemetry": {
            "id": "ed4b3a00-1981-44d1-ae1e-952870c16613",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1604,
                "lineStart": 51,
                "lineEnd": 1654,
                "bodyLineStart": 51,
                "language": "java",
                "filePath": "/Users/abhiram/Documents/TBE/evaluation_projects/dbeaver/plugins/org.jkiss.dbeaver.ext.oracle/src/org/jkiss/dbeaver/ext/oracle/model/OracleSchema.java",
                "sourceCode": "/**\n * OracleSchema\n */\npublic class OracleSchema extends OracleGlobalObject implements\n    DBSSchema,\n    DBPRefreshableObject,\n    DBPSystemObject,\n    DBSProcedureContainer,\n    DBPObjectStatisticsCollector,\n    DBPScriptObject\n{\n    private static final Log log = Log.getLog(OracleSchema.class);\n\n    // Synonyms read is very expensive. Exclude them from children by default\n    // Children are used in auto-completion which must be fast\n    private static boolean SYNONYMS_AS_CHILDREN = false;\n\n    final public TableCache tableCache = new TableCache();\n    final public ConstraintCache constraintCache = new ConstraintCache();\n    final public ForeignKeyCache foreignKeyCache = new ForeignKeyCache();\n    final public TriggerCache triggerCache = new TriggerCache();\n    final public TableTriggerCache tableTriggerCache = new TableTriggerCache();\n    final public IndexCache indexCache = new IndexCache();\n    final public DataTypeCache dataTypeCache = new DataTypeCache();\n    final public SequenceCache sequenceCache = new SequenceCache();\n    final public QueueCache queueCache = new QueueCache();\n    final public PackageCache packageCache = new PackageCache();\n    final public SynonymCache synonymCache = new SynonymCache();\n    final public DBLinkCache dbLinkCache = new DBLinkCache();\n    final public ProceduresCache proceduresCache = new ProceduresCache();\n    final public JavaCache javaCache = new JavaCache();\n    final public JobCache jobCache = new JobCache();\n    final public SchedulerJobCache schedulerJobCache = new SchedulerJobCache();\n    final public SchedulerProgramCache schedulerProgramCache = new SchedulerProgramCache();\n    final public RecycleBin recycleBin = new RecycleBin();\n    private volatile boolean hasStatistics;\n\n    private long id;\n    private String name;\n    private Date createTime;\n    private transient OracleUser user;\n\n    public OracleSchema(OracleDataSource dataSource, long id, String name)\n    {\n        super(dataSource, id > 0);\n        this.id = id;\n        this.name = name;\n    }\n\n    public OracleSchema(@NotNull OracleDataSource dataSource, @NotNull ResultSet dbResult)\n    {\n        super(dataSource, true);\n        this.id = JDBCUtils.safeGetLong(dbResult, \"USER_ID\");\n        this.name = JDBCUtils.safeGetString(dbResult, \"USERNAME\");\n        if (CommonUtils.isEmpty(this.name)) {\n            log.warn(\"Empty schema name fetched\");\n            this.name = \"? \" + super.hashCode();\n        }\n        this.createTime = JDBCUtils.safeGetTimestamp(dbResult, \"CREATED\");\n        SYNONYMS_AS_CHILDREN = CommonUtils.getBoolean(dataSource.getContainer().getConnectionConfiguration().getProviderProperty(OracleConstants.PROP_SEARCH_METADATA_IN_SYNONYMS));\n    }\n\n    public boolean isPublic()\n    {\n        return OracleConstants.USER_PUBLIC.equals(this.name);\n    }\n\n    @Property(order = 200)\n    public long getId()\n    {\n        return id;\n    }\n\n    @Property(order = 190)\n    public Date getCreateTime() {\n        return createTime;\n    }\n\n    @NotNull\n    @Override\n    @Property(viewable = true, editable = true, order = 1)\n    public String getName()\n    {\n        return name;\n    }\n\n    public void setName(String name)\n    {\n        this.name = name;\n    }\n\n    @Nullable\n    @Override\n    public String getDescription()\n    {\n        return null;\n    }\n\n    /**\n     * User reference never read directly from database.\n     * It is used by managers to create/delete/alter schemas\n     * @return user reference or null\n     */\n    public OracleUser getUser()\n    {\n        return user;\n    }\n\n    public void setUser(OracleUser user)\n    {\n        this.user = user;\n    }\n\n    @Association\n    public Collection<OracleTableIndex> getIndexes(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return indexCache.getObjects(monitor, this, null);\n    }\n\n    @Association\n    public Collection<OracleTable> getTables(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return tableCache.getTypedObjects(monitor, this, OracleTable.class);\n    }\n\n    public OracleTable getTable(DBRProgressMonitor monitor, String name)\n        throws DBException\n    {\n        return tableCache.getObject(monitor, this, name, OracleTable.class);\n    }\n\n    @Association\n    public Collection<OracleView> getViews(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return tableCache.getTypedObjects(monitor, this, OracleView.class);\n    }\n\n    public OracleView getView(DBRProgressMonitor monitor, String name)\n        throws DBException\n    {\n        return tableCache.getObject(monitor, this, name, OracleView.class);\n    }\n\n    @Association\n    public Collection<OracleMaterializedView> getMaterializedViews(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return tableCache.getTypedObjects(monitor, this, OracleMaterializedView.class);\n    }\n\n    @Association\n    public OracleMaterializedView getMaterializedView(DBRProgressMonitor monitor, String name)\n        throws DBException\n    {\n        return tableCache.getObject(monitor, this, name, OracleMaterializedView.class);\n    }\n\n    public TableCache getTableCache() {\n        return tableCache;\n    }\n\n    @Association\n    public Collection<OracleDataType> getDataTypes(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return dataTypeCache.getAllObjects(monitor, this);\n    }\n\n    public OracleDataType getDataType(DBRProgressMonitor monitor, String name)\n        throws DBException\n    {\n        OracleDataType type = isPublic() ? getTypeBySynonym(monitor, name) : dataTypeCache.getObject(monitor, this, name);\n        if (type == null) {\n            if (!isPublic()) {\n                return getTypeBySynonym(monitor, name);\n            }\n        }\n        return type;\n    }\n\n    @Nullable\n    private OracleDataType getTypeBySynonym(DBRProgressMonitor monitor, String name) throws DBException {\n        final OracleSynonym synonym = synonymCache.getObject(monitor, this, name);\n        if (synonym != null && (synonym.getObjectType() == OracleObjectType.TYPE || synonym.getObjectType() == OracleObjectType.TYPE_BODY)) {\n            Object object = synonym.getObject(monitor);\n            if (object instanceof OracleDataType) {\n                return (OracleDataType)object;\n            }\n        }\n        return null;\n    }\n\n    @Association\n    public Collection<OracleQueue> getQueues(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return queueCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleSequence> getSequences(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return sequenceCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OraclePackage> getPackages(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return packageCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleProcedureStandalone> getProceduresOnly(DBRProgressMonitor monitor) throws DBException {\n        return getProcedures(monitor)\n            .stream()\n            .filter(proc -> proc.getProcedureType() == DBSProcedureType.PROCEDURE)\n            .collect(Collectors.toList());\n    }\n\n    @Association\n    public Collection<OracleProcedureStandalone> getFunctionsOnly(DBRProgressMonitor monitor) throws DBException {\n        return getProcedures(monitor)\n            .stream()\n            .filter(proc -> proc.getProcedureType() == DBSProcedureType.FUNCTION)\n            .collect(Collectors.toList());\n    }\n\n    @Association\n    public Collection<OracleProcedureStandalone> getProcedures(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return proceduresCache.getAllObjects(monitor, this);\n    }\n\n    @Override\n    public OracleProcedureStandalone getProcedure(DBRProgressMonitor monitor, String uniqueName) throws DBException {\n        return proceduresCache.getObject(monitor, this, uniqueName);\n    }\n\n    @Association\n    public Collection<OracleSynonym> getSynonyms(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return synonymCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public OracleSynonym getSynonym(DBRProgressMonitor monitor, String name)\n        throws DBException\n    {\n        return synonymCache.getObject(monitor, this, name);\n    }\n\n    @Association\n    public Collection<OracleSchemaTrigger> getTriggers(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return triggerCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleTableTrigger> getTableTriggers(DBRProgressMonitor monitor)\n            throws DBException\n    {\n        return tableTriggerCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleDBLink> getDatabaseLinks(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return dbLinkCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleJavaClass> getJavaClasses(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return javaCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleJob> getJobs(@NotNull DBRProgressMonitor monitor) throws DBException {\n        return jobCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleSchedulerJob> getSchedulerJobs(DBRProgressMonitor monitor)\n            throws DBException\n    {\n        return schedulerJobCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleSchedulerProgram> getSchedulerPrograms(DBRProgressMonitor monitor)\n            throws DBException\n    {\n        return schedulerProgramCache.getAllObjects(monitor, this);\n    }\n\n    @Association\n    public Collection<OracleRecycledObject> getRecycledObjects(DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return recycleBin.getAllObjects(monitor, this);\n    }\n\n    @Property(order = 90)\n    public OracleUser getSchemaUser(DBRProgressMonitor monitor) throws DBException {\n        return getDataSource().getUser(monitor, name);\n    }\n\n    @Override\n    public Collection<DBSObject> getChildren(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        List<DBSObject> children = new ArrayList<>();\n        children.addAll(tableCache.getAllObjects(monitor, this));\n        if (SYNONYMS_AS_CHILDREN) {\n            children.addAll(synonymCache.getAllObjects(monitor, this));\n        }\n        children.addAll(packageCache.getAllObjects(monitor, this));\n        return children;\n    }\n\n    @Override\n    public DBSObject getChild(@NotNull DBRProgressMonitor monitor, @NotNull String childName)\n        throws DBException\n    {\n        final OracleTableBase table = tableCache.getObject(monitor, this, childName);\n        if (table != null) {\n            return table;\n        }\n        if (SYNONYMS_AS_CHILDREN) {\n            OracleSynonym synonym = synonymCache.getObject(monitor, this, childName);\n            if (synonym != null) {\n                return synonym;\n            }\n        }\n        return packageCache.getObject(monitor, this, childName);\n    }\n\n    @NotNull\n    @Override\n    public Class<? extends DBSEntity> getPrimaryChildType(@Nullable DBRProgressMonitor monitor)\n        throws DBException\n    {\n        return OracleTable.class;\n    }\n\n    @Override\n    public synchronized void cacheStructure(@NotNull DBRProgressMonitor monitor, int scope)\n        throws DBException\n    {\n        monitor.subTask(\"Cache tables\");\n        tableCache.getAllObjects(monitor, this);\n        if ((scope & STRUCT_ATTRIBUTES) != 0) {\n            monitor.subTask(\"Cache table columns\");\n            tableCache.loadChildren(monitor, this, null);\n        }\n        if ((scope & STRUCT_ASSOCIATIONS) != 0) {\n            monitor.subTask(\"Cache table indexes\");\n            indexCache.getObjects(monitor, this, null);\n            monitor.subTask(\"Cache table constraints\");\n            constraintCache.getObjects(monitor, this, null);\n            foreignKeyCache.getObjects(monitor, this, null);\n            tableTriggerCache.getAllObjects(monitor, this);\n        }\n    }\n\n    @Override\n    public synchronized DBSObject refreshObject(@NotNull DBRProgressMonitor monitor)\n        throws DBException\n    {\n        hasStatistics = false;\n        tableCache.clearCache();\n        foreignKeyCache.clearCache();\n        constraintCache.clearCache();\n        indexCache.clearCache();\n        packageCache.clearCache();\n        proceduresCache.clearCache();\n        triggerCache.clearCache();\n        tableTriggerCache.clearCache();\n        dataTypeCache.clearCache();\n        sequenceCache.clearCache();\n        synonymCache.clearCache();\n        schedulerJobCache.clearCache();\n        recycleBin.clearCache();\n        jobCache.clearCache();\n        return this;\n    }\n\n    @Override\n    public boolean isSystem()\n    {\n        return ArrayUtils.contains(OracleConstants.SYSTEM_SCHEMAS, getName());\n    }\n\n    @Override\n    public String toString()\n    {\n        return \"Schema \" + name;\n    }\n\n    void resetStatistics() {\n        this.hasStatistics = false;\n    }\n\n    private static OracleTableColumn getTableColumn(JDBCSession session, OracleTableBase parent, ResultSet dbResult,String columnName) throws DBException\n    {\n\n        OracleTableColumn tableColumn = columnName == null ? null : parent.getAttribute(session.getProgressMonitor(), columnName);\n        if (tableColumn == null) {\n            log.debug(\"Column '\" + columnName + \"' not found in table '\" + parent.getName() + \"'\");\n        }\n        return tableColumn;\n    }\n\n    ///////////////////////////////////\n    // Statistics\n\n    @Override\n    public boolean isStatisticsCollected() {\n        return hasStatistics;\n    }\n\n    @Override\n    public void collectObjectStatistics(DBRProgressMonitor monitor, boolean totalSizeOnly, boolean forceRefresh) throws DBException {\n        if (hasStatistics && !forceRefresh) {\n            return;\n        }\n        try (JDBCSession session = DBUtils.openMetaSession(monitor, this, \"Load table status\")) {\n            boolean hasDBA = getDataSource().isViewAvailable(monitor, OracleConstants.SCHEMA_SYS, \"DBA_SEGMENTS\");\n            try (JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT SEGMENT_NAME,SUM(bytes) TABLE_SIZE\\n\" +\n                    \"FROM \" + OracleUtils.getSysSchemaPrefix(getDataSource()) + (hasDBA ? \"DBA_SEGMENTS\" : \"USER_SEGMENTS\") + \" s\\n\" +\n                    \"WHERE S.SEGMENT_TYPE='TABLE'\"  + (hasDBA ? \" AND s.OWNER = ?\" : \"\") + \"\\n\" +\n                    \"GROUP BY SEGMENT_NAME\"))\n            {\n                if (hasDBA) {\n                    dbStat.setString(1, getName());\n                }\n                try (JDBCResultSet dbResult = dbStat.executeQuery()) {\n                    while (dbResult.next()) {\n                        String tableName = dbResult.getString(1);\n                        long bytes = dbResult.getLong(2);\n                        OracleTable table = getTable(monitor, tableName);\n                        if (table != null) {\n                            table.fetchTableSize(dbResult);\n                        }\n                    }\n                }\n            }\n        } catch (SQLException e) {\n            throw new DBCException(\"Error reading table statistics\", e);\n        } finally {\n            for (OracleTableBase table : tableCache.getCachedObjects()) {\n                if (table instanceof OracleTable && !((OracleTable) table).hasStatistics()) {\n                    ((OracleTable) table).setTableSize(0L);\n                }\n            }\n            hasStatistics = true;\n        }\n    }\n\n    @Override\n    public String getObjectDefinitionText(DBRProgressMonitor monitor, Map<String, Object> options) throws DBException {\n        StringBuilder sql = new StringBuilder();\n        sql.append(\"-- DROP USER \").append(DBUtils.getQuotedIdentifier(this)).append(\";\\n\\n\");\n        sql.append(\"CREATE USER \").append(DBUtils.getQuotedIdentifier(this)).append(\"\\n-- IDENTIFIED BY <password>\\n\").append(\";\\n\");\n\n        // Show DDL for all schema objects\n        monitor.beginTask(\"Cache schema\", 1);\n        cacheStructure(monitor, DBSObjectContainer.STRUCT_ALL);\n        monitor.done();\n\n        Collection<OracleDataType> dataTypes = getDataTypes(monitor);\n        if (!monitor.isCanceled()) {\n            monitor.beginTask(\"Load data types\", dataTypes.size());\n            for (OracleDataType dataType : dataTypes) {\n                addDDLLine(sql, dataType.getObjectDefinitionText(monitor, options));\n                monitor.worked(1);\n                if (monitor.isCanceled()) {\n                    break;\n                }\n            }\n            monitor.done();\n        }\n\n        if (!monitor.isCanceled()) {\n            List<OracleTableBase> tablesOrViews = getTableCache().getAllObjects(monitor, this);\n            monitor.beginTask(\"Read tables DDL\", tablesOrViews.size());\n            for (OracleTableBase tableBase : tablesOrViews) {\n                monitor.worked(1);\n                if (tableBase instanceof OracleTable && ((OracleTable) tableBase).isNested()) {\n                    // To avoid java.sql.SQLException: ORA-31603\n                    continue;\n                }\n                monitor.subTask(\"Load table '\" + tableBase.getName() + \"' DDL\");\n                addDDLLine(sql, tableBase.getDDL(monitor, OracleDDLFormat.getCurrentFormat(getDataSource()), options));\n                if (monitor.isCanceled()) {\n                    break;\n                }\n            }\n            monitor.done();\n        }\n\n        if (!monitor.isCanceled()) {\n            Collection<OracleProcedureStandalone> procedures = getProcedures(monitor);\n            monitor.beginTask(\"Load procedures\", procedures.size());\n            for (OracleProcedureStandalone procedure : procedures) {\n                monitor.subTask(procedure.getName());\n                addDDLLine(sql, procedure.getObjectDefinitionText(monitor, options));\n                monitor.worked(1);\n                if (monitor.isCanceled()) {\n                    break;\n                }\n            }\n            monitor.done();\n        }\n\n        if (!monitor.isCanceled()) {\n            Collection<OracleSchemaTrigger> triggers = getTriggers(monitor);\n            monitor.beginTask(\"Load triggers\", triggers.size());\n            for (OracleSchemaTrigger trigger : triggers) {\n                monitor.subTask(trigger.getName());\n                addDDLLine(sql, trigger.getObjectDefinitionText(monitor, options));\n                monitor.worked(1);\n                if (monitor.isCanceled()) {\n                    break;\n                }\n            }\n            monitor.done();\n        }\n\n        if (!monitor.isCanceled()) {\n            Collection<OracleSequence> sequences = getSequences(monitor);\n            monitor.beginTask(\"Load sequences\", sequences.size());\n            for (OracleSequence sequence : sequences) {\n                monitor.subTask(sequence.getName());\n                addDDLLine(sql, sequence.getObjectDefinitionText(monitor, options));\n                monitor.worked(1);\n                if (monitor.isCanceled()) {\n                    break;\n                }\n            }\n            monitor.done();\n        }\n\n        return sql.toString();\n    }\n\n    private void addDDLLine(StringBuilder sql, String ddl) {\n        if (!CommonUtils.isEmpty(ddl)) {\n            sql.append(\"\\n\").append(ddl);\n            if (!ddl.endsWith(\";\")) {\n                sql.append(\";\");\n            }\n            sql.append(\"\\n\");\n        }\n    }\n\n    public class TableCache extends JDBCStructLookupCache<OracleSchema, OracleTableBase, OracleTableColumn> {\n\n        TableCache()\n        {\n            super(OracleConstants.COLUMN_OBJECT_NAME);\n            setListOrderComparator(DBUtils.nameComparator());\n        }\n\n        @NotNull\n        @Override\n        public JDBCStatement prepareLookupStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner, @Nullable OracleTableBase object, @Nullable String objectName) throws SQLException {\n            String tableOper = \"=\";\n\n            boolean hasAllAllTables = owner.getDataSource().isViewAvailable(session.getProgressMonitor(), null, \"ALL_ALL_TABLES\");\n            boolean useAlternativeQuery = CommonUtils.toBoolean(getDataSource().getContainer().getConnectionConfiguration().getProviderProperty(OracleConstants.PROP_METADATA_USE_ALTERNATIVE_TABLE_QUERY));\n            String tablesSource = hasAllAllTables ? \"ALL_TABLES\" : \"TABLES\";\n            String tableTypeColumns = hasAllAllTables ? \"t.TABLE_TYPE_OWNER,t.TABLE_TYPE\" : \"NULL as TABLE_TYPE_OWNER, NULL as TABLE_TYPE\";\n\n            JDBCPreparedStatement dbStat;\n            if (!useAlternativeQuery) {\n                dbStat = session.prepareStatement(\"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) +\n                        \" O.*,\\n\" +\n                        tableTypeColumns + \",t.TABLESPACE_NAME,t.PARTITIONED,t.IOT_TYPE,t.IOT_NAME,t.TEMPORARY,t.SECONDARY,t.NESTED,t.NUM_ROWS\\n\" +\n                        \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"OBJECTS\") + \" O\\n\" +\n                        \", \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), tablesSource) +\n                        \" t WHERE t.OWNER(+) = O.OWNER AND t.TABLE_NAME(+) = o.OBJECT_NAME\\n\" +\n                        \"AND O.OWNER=? AND O.OBJECT_TYPE IN ('TABLE', 'VIEW', 'MATERIALIZED VIEW')\" +\n                        (object == null && objectName == null ? \"\" : \" AND O.OBJECT_NAME\" + tableOper + \"?\") +\n                        (object instanceof OracleTable ? \" AND O.OBJECT_TYPE='TABLE'\" : \"\") +\n                        (object instanceof OracleView ? \" AND O.OBJECT_TYPE='VIEW'\" : \"\") +\n                        (object instanceof OracleMaterializedView ? \" AND O.OBJECT_TYPE='MATERIALIZED VIEW'\" : \"\"));\n                dbStat.setString(1, owner.getName());\n                if (object != null || objectName != null)\n                    dbStat.setString(2, object != null ? object.getName() : objectName);\n                return dbStat;\n            } else {\n                return getAlternativeTableStatement(session, owner, object, objectName, tablesSource, tableTypeColumns);\n            }\n        }\n\n        @Override\n        protected OracleTableBase fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            final String tableType = JDBCUtils.safeGetString(dbResult, OracleConstants.COLUMN_OBJECT_TYPE);\n            if (\"TABLE\".equals(tableType)) {\n                return createTableImpl(session, owner, dbResult);\n            } else if (\"MATERIALIZED VIEW\".equals(tableType)) {\n                return new OracleMaterializedView(owner, dbResult);\n            } else {\n                return new OracleView(owner, dbResult);\n            }\n        }\n\n        private OracleTableBase createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult) {\n            return new OracleTable(session.getProgressMonitor(), owner, dbResult);\n        }\n\n        @Override\n        protected JDBCStatement prepareChildrenStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner, @Nullable OracleTableBase forTable)\n            throws SQLException\n        {\n            String colsView;\n            if (!owner.getDataSource().isViewAvailable(session.getProgressMonitor(), OracleConstants.SCHEMA_SYS, \"ALL_TAB_COLS\")) {\n                colsView = \"TAB_COLUMNS\";\n            } else {\n                colsView = \"TAB_COLS\";\n            }\n            StringBuilder sql = new StringBuilder(500);\n            sql\n                .append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\"\\nc.*,c.TABLE_NAME as OBJECT_NAME \" +\n                    \"FROM \").append(OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), colsView)).append(\" c\\n\" +\n//                    \"LEFT OUTER JOIN \" + OracleUtils.getSysSchemaPrefix(getDataSource()) + \"ALL_COL_COMMENTS cc ON CC.OWNER=c.OWNER AND cc.TABLE_NAME=c.TABLE_NAME AND cc.COLUMN_NAME=c.COLUMN_NAME\\n\" +\n                    \"WHERE c.OWNER=?\");\n            if (forTable != null) {\n                sql.append(\" AND c.TABLE_NAME=?\");\n            }\n/*\n            sql.append(\"\\nORDER BY \");\n            if (forTable != null) {\n                sql.append(\"c.TABLE_NAME,\");\n            }\n            sql.append(\"c.COLUMN_ID\");\n*/\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            dbStat.setString(1, owner.getName());\n            if (forTable != null) {\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n\n        @Override\n        protected OracleTableColumn fetchChild(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull OracleTableBase table, @NotNull JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OracleTableColumn(session.getProgressMonitor(), table, dbResult);\n        }\n\n        @Override\n        protected void cacheChildren(OracleTableBase parent, List<OracleTableColumn> oracleTableColumns) {\n            oracleTableColumns.sort(DBUtils.orderComparator());\n            super.cacheChildren(parent, oracleTableColumns);\n        }\n\n        @NotNull\n        private JDBCStatement getAlternativeTableStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner, @Nullable OracleTableBase object, @Nullable String objectName, String tablesSource, String tableTypeColumns) throws SQLException {\n            boolean hasName = object == null && objectName != null;\n            JDBCPreparedStatement dbStat;\n            StringBuilder sql = new StringBuilder();\n            String tableQuery = \"SELECT t.OWNER, t.TABLE_NAME AS OBJECT_NAME, 'TABLE' AS OBJECT_TYPE, 'VALID' AS STATUS,\" + tableTypeColumns + \", t.TABLESPACE_NAME,\\n\" +\n                    \"t.PARTITIONED, t.IOT_TYPE, t.IOT_NAME, t.TEMPORARY, t.SECONDARY, t.NESTED, t.NUM_ROWS\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), tablesSource) + \" t\\n\" +\n                    \"WHERE t.OWNER =?\\n\" +\n                    \"AND NESTED = 'NO'\\n\";\n            String viewQuery = \"SELECT o.OWNER, o.OBJECT_NAME, 'VIEW' AS OBJECT_TYPE, o.STATUS, NULL, NULL, NULL, 'NO', NULL, NULL, o.TEMPORARY, o.SECONDARY, 'NO', 0\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"OBJECTS\") + \" o\\n\" +\n                    \"WHERE o.OWNER =?\\n\" +\n                    \"AND o.OBJECT_TYPE = 'VIEW'\\n\";\n            String mviewQuery = \"SELECT o.OWNER, o.OBJECT_NAME, 'MATERIALIZED VIEW' AS OBJECT_TYPE, o.STATUS, NULL, NULL, NULL, 'NO', NULL, NULL, o.TEMPORARY, o.SECONDARY, 'NO', 0\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"OBJECTS\") + \" o\\n\" +\n                    \"WHERE o.OWNER =?\\n\" +\n                    \"AND o.OBJECT_TYPE = 'MATERIALIZED VIEW'\";\n            String unionAll = \"UNION ALL \";\n            if (hasName) {\n                sql.append(\"SELECT * FROM (\");\n            }\n            if (object == null) {\n                sql.append(tableQuery).append(unionAll).append(viewQuery).append(unionAll).append(mviewQuery);\n            } else if (object instanceof OracleMaterializedView) {\n                sql.append(mviewQuery);\n            } else if (object instanceof OracleView) {\n                sql.append(viewQuery);\n            } else {\n                sql.append(tableQuery);\n            }\n            if (hasName) {\n                sql.append(\") WHERE OBJECT_NAME\").append(\"=?\");\n            } else if (object != null) {\n                if (object instanceof OracleTable) {\n                    sql.append(\" AND t.TABLE_NAME=?\");\n                } else {\n                    sql.append(\" AND o.OBJECT_NAME=?\");\n                }\n            }\n            dbStat = session.prepareStatement(sql.toString());\n            String ownerName = owner.getName();\n            dbStat.setString(1, ownerName);\n            if (object == null) {\n                dbStat.setString(2, ownerName);\n                dbStat.setString(3, ownerName);\n                if (objectName != null) {\n                    dbStat.setString(4, objectName);\n                }\n            } else {\n                dbStat.setString(2, object.getName());\n            }\n            return dbStat;\n        }\n    }\n\n    /**\n     * Constraint cache implementation\n     */\n    class ConstraintCache extends JDBCCompositeCache<OracleSchema, OracleTableBase, OracleTableConstraint, OracleTableConstraintColumn> {\n        ConstraintCache()\n        {\n            super(tableCache, OracleTableBase.class, OracleConstants.COL_TABLE_NAME, OracleConstants.COL_CONSTRAINT_NAME);\n        }\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTableBase forTable)\n            throws SQLException\n        {\n            \n            boolean useSimpleConnection = CommonUtils.toBoolean(session.getDataSource().getContainer().getConnectionConfiguration().getProviderProperty(OracleConstants.PROP_METADATA_USE_SIMPLE_CONSTRAINTS));\n\n            StringBuilder sql = new StringBuilder(500);\n            JDBCPreparedStatement dbStat;\n            \n            if (owner.getDataSource().isAtLeastV11() && forTable != null && !useSimpleConnection) {\n                \n                sql.append(\"SELECT\\r\\n\" + \n                        \"    c.TABLE_NAME,\\r\\n\" + \n                        \"    c.CONSTRAINT_NAME,\\r\\n\" + \n                        \"    c.CONSTRAINT_TYPE,\\r\\n\" + \n                        \"    c.STATUS,\\r\\n\" + \n                        \"    c.SEARCH_CONDITION,\\r\\n\" + \n                        \"    (\\r\\n\" + \n                        \"      SELECT LISTAGG(COLUMN_NAME || ':' || POSITION,',') WITHIN GROUP (ORDER BY \\\"POSITION\\\") \\r\\n\" + \n                        \"      FROM ALL_CONS_COLUMNS col\\r\\n\" + \n                        \"      WHERE col.OWNER =? AND col.TABLE_NAME = ? AND col.CONSTRAINT_NAME = c.CONSTRAINT_NAME GROUP BY CONSTRAINT_NAME \\r\\n\"+\n                        \"    ) COLUMN_NAMES_NUMS\\r\\n\" + \n                        \"FROM\\r\\n\" + \n                        \"    \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"CONSTRAINTS\") + \" c\\r\\n\" + \n                        \"WHERE\\r\\n\" + \n                        \"    c.CONSTRAINT_TYPE <> 'R'\\r\\n\" + \n                        \"    AND c.OWNER = ?\\r\\n\" + \n                        \"    AND c.TABLE_NAME = ?\");   \n                // 1- owner\n                // 2-table name\n                // 3-owner\n                // 4-table name\n                \n                dbStat = session.prepareStatement(sql.toString());\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n                dbStat.setString(3, OracleSchema.this.getName());\n                dbStat.setString(4, forTable.getName());\n                \n            } else if (owner.getDataSource().isAtLeastV10() && forTable != null && !useSimpleConnection) {\n                \n                 sql.append(\"SELECT\\r\\n\" + \n                         \"    c.TABLE_NAME,\\r\\n\" + \n                         \"    c.CONSTRAINT_NAME,\\r\\n\" + \n                         \"    c.CONSTRAINT_TYPE,\\r\\n\" + \n                         \"    c.STATUS,\\r\\n\" + \n                         \"    c.SEARCH_CONDITION,\\r\\n\" + \n                         \"    (\\r\\n\" + \n                         \"        SELECT LTRIM(MAX(SYS_CONNECT_BY_PATH(cname || ':' || NVL(p,1),','))    KEEP (DENSE_RANK LAST ORDER BY curr),',') \\r\\n\" + \n                         \"        FROM   (SELECT \\r\\n\" + \n                         \"                       col.CONSTRAINT_NAME cn,col.POSITION p,col.COLUMN_NAME cname,\\r\\n\" + \n                         \"                       ROW_NUMBER() OVER (PARTITION BY col.CONSTRAINT_NAME ORDER BY col.POSITION) AS curr,\\r\\n\" + \n                         \"                       ROW_NUMBER() OVER (PARTITION BY col.CONSTRAINT_NAME ORDER BY col.POSITION) -1 AS prev\\r\\n\" + \n                         \"                FROM   \"+ OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"CONS_COLUMNS\") +\" col \\r\\n\" + \n                         \"                WHERE  col.OWNER =? AND col.TABLE_NAME = ? \\r\\n\" + \n                         \"                ) WHERE cn = c.CONSTRAINT_NAME  GROUP BY cn CONNECT BY prev = PRIOR curr AND cn = PRIOR cn START WITH curr = 1      \\r\\n\" + \n                         \"        ) COLUMN_NAMES_NUMS\\r\\n\" + \n                         \"FROM\\r\\n\" + \n                         \"    \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"CONSTRAINTS\") + \" c\\r\\n\" + \n                         \"WHERE\\r\\n\" + \n                         \"    c.CONSTRAINT_TYPE <> 'R'\\r\\n\" + \n                         \"    AND c.OWNER = ?\\r\\n\" + \n                         \"    AND c.TABLE_NAME = ?\");   \n                 // 1- owner\n                 // 2-table name\n                 // 3-owner\n                 // 4-table name\n                 \n                 dbStat = session.prepareStatement(sql.toString());\n                 dbStat.setString(1, OracleSchema.this.getName());\n                 dbStat.setString(2, forTable.getName());\n                 dbStat.setString(3, OracleSchema.this.getName());\n                 dbStat.setString(4, forTable.getName());\n                \n            } else {\n                sql\n                    .append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\"\\n\" +\n                        \"c.TABLE_NAME, c.CONSTRAINT_NAME,c.CONSTRAINT_TYPE,c.STATUS,c.SEARCH_CONDITION,\" +\n                        \"col.COLUMN_NAME,col.POSITION\\n\" +\n                        \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"CONSTRAINTS\") +\n                        \" c, \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"CONS_COLUMNS\") + \" col\\n\" +\n                        \"WHERE c.CONSTRAINT_TYPE<>'R' AND c.OWNER=? AND c.OWNER=col.OWNER AND c.CONSTRAINT_NAME=col.CONSTRAINT_NAME\");\n                if (forTable != null) {\n                    sql.append(\" AND c.TABLE_NAME=?\");\n                }\n                sql.append(\"\\nORDER BY c.CONSTRAINT_NAME,col.POSITION\");\n    \n                dbStat = session.prepareStatement(sql.toString());\n                dbStat.setString(1, OracleSchema.this.getName());\n                if (forTable != null) {\n                    dbStat.setString(2, forTable.getName());\n                }\n            }\n            return dbStat;\n        }\n\n        @Nullable\n        @Override\n        protected OracleTableConstraint fetchObject(JDBCSession session, OracleSchema owner, OracleTableBase parent, String indexName, JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OracleTableConstraint(parent, dbResult);\n        }\n\n        @Nullable\n        @Override\n        protected OracleTableConstraintColumn[] fetchObjectRow(\n            JDBCSession session,\n            OracleTableBase parent, OracleTableConstraint object, JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            //resultset has field COLUMN_NAMES_NUMS - special query was used\n            if (JDBCUtils.safeGetString(dbResult, \"COLUMN_NAMES_NUMS\") != null) {\n                \n                List<SpecialPosition>  positions = parsePositions(JDBCUtils.safeGetString(dbResult, \"COLUMN_NAMES_NUMS\"));\n                \n                OracleTableConstraintColumn[] result = new OracleTableConstraintColumn[positions.size()];\n                \n                for(int idx = 0;idx < positions.size();idx++) {\n                    \n                    final OracleTableColumn column = getTableColumn(session, parent, dbResult,positions.get(idx).getColumn());\n                    \n                    if (column == null) {\n                        continue;\n                    }\n                    \n                    result[idx] =  new OracleTableConstraintColumn(\n                            object,\n                            column,\n                            positions.get(idx).getPos());\n                }\n                \n                return result;\n                \n                \n            } else {\n                \n                final OracleTableColumn tableColumn = getTableColumn(session, parent, dbResult, JDBCUtils.safeGetStringTrimmed(dbResult, \"COLUMN_NAME\"));\n                return tableColumn == null ? null : new OracleTableConstraintColumn[] { new OracleTableConstraintColumn(\n                    object,\n                    tableColumn,\n                    JDBCUtils.safeGetInt(dbResult, \"POSITION\")) };\n            }\n        }\n\n        @Override\n        protected void cacheChildren(DBRProgressMonitor monitor, OracleTableConstraint constraint, List<OracleTableConstraintColumn> rows)\n        {\n            constraint.setAttributeReferences(rows);\n        }\n    }\n    \n    class SpecialPosition {\n        \n        private final String column;\n        private final int pos;\n        \n        public SpecialPosition(String value) {\n            \n            String data[] = value.split(\":\");\n            \n            this.column = data[0];\n            \n            this.pos = data.length == 1 ? 0 : Integer.valueOf(data[1]);\n            \n            \n        }\n        \n        public SpecialPosition(String column, int pos) {\n            this.column = column;\n            this.pos = pos;\n        }\n\n        public String getColumn() {\n            return column;\n        }\n\n        public int getPos() {\n            return pos;\n        }\n         \n    }\n    \n    private List<SpecialPosition> parsePositions(String value) {\n        \n        if (value == null) {\n            return Collections.emptyList();\n        }\n        \n        if (value.length()<3) {\n            return Collections.emptyList(); \n        }\n        \n        List<SpecialPosition> result = new ArrayList<>(1);\n        \n        String data[] = value.split(\",\");\n        \n        for(String s : data) {\n            \n            result.add(new SpecialPosition(s));\n            \n        }\n        \n        return result;\n        \n    }\n\n    class ForeignKeyCache extends JDBCCompositeCache<OracleSchema, OracleTable, OracleTableForeignKey, OracleTableForeignKeyColumn> {\n                \n        ForeignKeyCache()\n        {\n            super(tableCache, OracleTable.class, OracleConstants.COL_TABLE_NAME, OracleConstants.COL_CONSTRAINT_NAME);\n           \n        }\n\n        @Override\n        protected void loadObjects(DBRProgressMonitor monitor, OracleSchema schema, OracleTable forParent)\n            throws DBException\n        {\n                 \n            // Cache schema constraints if not table specified\n            if (forParent == null) {\n                constraintCache.getAllObjects(monitor, schema);\n            }\n            super.loadObjects(monitor, schema, forParent);\n        }\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTable forTable)\n            throws SQLException\n        {\n            boolean useSimpleConnection = CommonUtils.toBoolean(session.getDataSource().getContainer().getConnectionConfiguration().getProviderProperty(OracleConstants.PROP_METADATA_USE_SIMPLE_CONSTRAINTS));\n\n            StringBuilder sql = new StringBuilder(500);\n            JDBCPreparedStatement dbStat;\n            String constraintsView = OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"CONSTRAINTS\");\n            if (owner.getDataSource().isAtLeastV11() && forTable != null && !useSimpleConnection) {\n                 sql.append(\"SELECT \\r\\n\"\n                         + \"    c.TABLE_NAME,\\r\\n\"\n                         + \"    c.CONSTRAINT_NAME,\\r\\n\"\n                         + \"    c.CONSTRAINT_TYPE,\\r\\n\"\n                         + \"    c.STATUS,\\r\\n\"\n                         + \"    c.R_OWNER,\\r\\n\"\n                         + \"    c.R_CONSTRAINT_NAME,\\r\\n\"\n                         + \"    rc.TABLE_NAME AS R_TABLE_NAME,\\r\\n\"\n                         + \"    c.DELETE_RULE,\\r\\n\"\n                         + \"    (\\r\\n\"\n                         + \"      SELECT LISTAGG(COLUMN_NAME || ':' || POSITION,',') WITHIN GROUP (ORDER BY \\\"POSITION\\\") \\r\\n\"\n                         + \"      FROM ALL_CONS_COLUMNS col\\r\\n\"\n                         + \"      WHERE col.OWNER =? AND col.TABLE_NAME = ? AND col.CONSTRAINT_NAME = c.CONSTRAINT_NAME GROUP BY CONSTRAINT_NAME \\r\\n\"\n                         + \"    ) COLUMN_NAMES_NUMS\\r\\nFROM \" + constraintsView + \" c\\r\\n\"\n                         + \"LEFT JOIN \" + constraintsView + \" rc\\r\\n\"\n                         + \"ON rc.OWNER = c.r_OWNER AND rc.CONSTRAINT_NAME = c.R_CONSTRAINT_NAME AND rc.CONSTRAINT_TYPE='P'\\r\\n\"\n                         + \"WHERE c.OWNER = ? AND c.TABLE_NAME = ? AND c.CONSTRAINT_TYPE = 'R'\");\n                 // 1- owner\n                 // 2-table name\n                 // 3-owner\n                 // 4-table name\n\n                 dbStat = session.prepareStatement(sql.toString());\n                 dbStat.setString(1, OracleSchema.this.getName());\n                 dbStat.setString(2, forTable.getName());\n                 dbStat.setString(3, OracleSchema.this.getName());\n                 dbStat.setString(4, forTable.getName());\n\n\n            }else {\n                String consColumnsView = OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"CONS_COLUMNS\");\n\n                if (owner.getDataSource().isAtLeastV10() && forTable != null && !useSimpleConnection) {\n                    sql.append(\"SELECT c.TABLE_NAME,c.CONSTRAINT_NAME,c.CONSTRAINT_TYPE,\\r\\n\"\n                            + \"    c.STATUS,c.R_OWNER,c.R_CONSTRAINT_NAME,\\r\\n\"\n                            + \"    (SELECT rc.TABLE_NAME FROM \" + constraintsView\n                            + \" rc WHERE rc.OWNER = c.r_OWNER AND rc.CONSTRAINT_NAME = c.R_CONSTRAINT_NAME) AS R_TABLE_NAME,\\r\\n\"\n                            + \"    c.DELETE_RULE,\\r\\n\" + \"    (\\r\\n\"\n                            + \"        SELECT LTRIM(MAX(SYS_CONNECT_BY_PATH(cname || ':' || p,','))    KEEP (DENSE_RANK LAST ORDER BY curr),',') \\r\\n\"\n                            + \"        FROM   (SELECT \\r\\n\"\n                            + \"                       col.CONSTRAINT_NAME cn,col.POSITION p,col.COLUMN_NAME cname,\\r\\n\"\n                            + \"                       ROW_NUMBER() OVER (PARTITION BY col.CONSTRAINT_NAME ORDER BY col.POSITION) AS curr,\\r\\n\"\n                            + \"                       ROW_NUMBER() OVER (PARTITION BY col.CONSTRAINT_NAME ORDER BY col.POSITION) -1 AS prev\\r\\n\"\n                            + \"                FROM   \" + consColumnsView + \" col \\r\\n\"\n                            + \"                WHERE  col.OWNER =? AND col.TABLE_NAME = ? \\r\\n\"\n                            + \"                )  WHERE cn = c.CONSTRAINT_NAME GROUP BY cn CONNECT BY prev = PRIOR curr AND cn = PRIOR cn START WITH curr = 1      \\r\\n\"\n                            + \"        ) COLUMN_NAMES_NUMS\\r\\n\" + \"FROM \" + constraintsView + \" c\\r\\n\"\n                            + \"WHERE c.OWNER = ? AND c.TABLE_NAME = ? AND c.CONSTRAINT_TYPE = 'R'\");\n                    // 1- owner\n                    // 2-table name\n                    // 3-owner\n                    // 4-table name\n\n                    dbStat = session.prepareStatement(sql.toString());\n                    dbStat.setString(1, OracleSchema.this.getName());\n                    dbStat.setString(2, forTable.getName());\n                    dbStat.setString(3, OracleSchema.this.getName());\n                    dbStat.setString(4, forTable.getName());\n\n                } else {\n\n                    sql.append(\"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" \\r\\n\" +\n                        \"c.TABLE_NAME, c.CONSTRAINT_NAME,c.CONSTRAINT_TYPE,c.STATUS,c.R_OWNER,c.R_CONSTRAINT_NAME,rc.TABLE_NAME as R_TABLE_NAME,c.DELETE_RULE, \\n\" +\n                        \"col.COLUMN_NAME,col.POSITION\\r\\n\" +\n                        \"FROM \" + constraintsView + \" c, \" + consColumnsView + \" col, \" + constraintsView + \" rc\\n\" +\n                        \"WHERE c.CONSTRAINT_TYPE='R' AND c.OWNER=?\\n\" +\n                        \"AND c.OWNER=col.OWNER AND c.CONSTRAINT_NAME=col.CONSTRAINT_NAME\\n\" +\n                        \"AND rc.OWNER=c.r_OWNER AND rc.CONSTRAINT_NAME=c.R_CONSTRAINT_NAME\");\n                    if (forTable != null) {\n                        sql.append(\" AND c.TABLE_NAME=?\");\n                    }\n                    sql.append(\"\\r\\nORDER BY c.CONSTRAINT_NAME,col.POSITION\");\n\n                    dbStat = session.prepareStatement(sql.toString());\n                    dbStat.setString(1, OracleSchema.this.getName());\n                    if (forTable != null) {\n                        dbStat.setString(2, forTable.getName());\n                    }\n                }\n            }\n            return dbStat;\n        }\n\n        @Nullable\n        @Override\n        protected OracleTableForeignKey fetchObject(JDBCSession session, OracleSchema owner, OracleTable parent, String indexName, JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OracleTableForeignKey(session.getProgressMonitor(), parent, dbResult);\n        }\n\n        @Nullable\n        @Override\n        protected OracleTableForeignKeyColumn[] fetchObjectRow(\n            JDBCSession session,\n            OracleTable parent, OracleTableForeignKey object, JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n           \n            //resultset has field COLUMN_NAMES_NUMS - special query was used\n            if (JDBCUtils.safeGetString(dbResult, \"COLUMN_NAMES_NUMS\") != null) {\n                \n                List<SpecialPosition>  positions = parsePositions(JDBCUtils.safeGetString(dbResult, \"COLUMN_NAMES_NUMS\"));\n                \n                OracleTableForeignKeyColumn[] result = new OracleTableForeignKeyColumn[positions.size()];\n                \n                for(int idx = 0;idx < positions.size();idx++) {\n                    \n                    OracleTableColumn column = getTableColumn(session, parent, dbResult,positions.get(idx).getColumn());\n                    \n                    if (column == null) {\n                        continue;\n                    }\n                    \n                    result[idx] =  new OracleTableForeignKeyColumn(\n                            object,\n                            column,\n                            positions.get(idx).getPos());\n                }\n                \n                return result;\n                \n                \n            } else {\n                \n                OracleTableColumn column = getTableColumn(session, parent, dbResult, JDBCUtils.safeGetStringTrimmed(dbResult, \"COLUMN_NAME\"));\n                \n                if (column == null) {\n                    return null;\n                }\n                \n                return  new OracleTableForeignKeyColumn[] { new OracleTableForeignKeyColumn(\n                            object,\n                            column,\n                            JDBCUtils.safeGetInt(dbResult, \"POSITION\")) };\n            }\n        }\n\n        @Override\n        @SuppressWarnings(\"unchecked\")\n        protected void cacheChildren(DBRProgressMonitor monitor, OracleTableForeignKey foreignKey, List<OracleTableForeignKeyColumn> rows)\n        {\n            foreignKey.setAttributeReferences((List)rows);\n        }\n    }\n\n\n    /**\n     * Index cache implementation\n     */\n    class IndexCache extends JDBCCompositeCache<OracleSchema, OracleTableBase, OracleTableIndex, OracleTableIndexColumn> {\n        IndexCache()\n        {\n            super(tableCache, OracleTableBase.class, \"TABLE_NAME\", \"INDEX_NAME\");\n        }\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema owner, OracleTableBase forTable)\n            throws SQLException\n        {\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT \").append(OracleUtils.getSysCatalogHint(owner.getDataSource())).append(\" \" +\n                    \"i.OWNER,i.INDEX_NAME,i.INDEX_TYPE,i.TABLE_OWNER,i.TABLE_NAME,i.UNIQUENESS,i.TABLESPACE_NAME,i.STATUS,i.NUM_ROWS,i.SAMPLE_SIZE,\\n\" +\n                    \"ic.COLUMN_NAME,ic.COLUMN_POSITION,ic.COLUMN_LENGTH,ic.DESCEND,iex.COLUMN_EXPRESSION\\n\" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"INDEXES\") + \" i\\n\" +\n                    \"JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_COLUMNS\") + \" ic \" +\n                    \"ON i.owner = ic.index_owner AND i.index_name = ic.index_name\\n\" +\n                    \"LEFT JOIN \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), getDataSource(), \"IND_EXPRESSIONS\") + \" iex \" +\n                    \"ON iex.index_owner = i.owner AND iex.INDEX_NAME = i.INDEX_NAME AND iex.COLUMN_POSITION = ic.COLUMN_POSITION\\n\" +\n                    \"WHERE \");\n            if (forTable == null) {\n                sql.append(\"i.OWNER=?\");\n            } else {\n                sql.append(\"i.TABLE_OWNER=? AND i.TABLE_NAME=?\");\n            }\n            sql.append(\"\\nORDER BY i.INDEX_NAME,ic.COLUMN_POSITION\");\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            if (forTable == null) {\n                dbStat.setString(1, OracleSchema.this.getName());\n            } else {\n                dbStat.setString(1, OracleSchema.this.getName());\n                dbStat.setString(2, forTable.getName());\n            }\n            return dbStat;\n        }\n\n        @Nullable\n        @Override\n        protected OracleTableIndex fetchObject(\n            JDBCSession session,\n            OracleSchema owner,\n            OracleTableBase parent,\n            String indexName,\n            JDBCResultSet dbResult\n        ) throws SQLException, DBException {\n            return new OracleTableIndex(owner, parent, indexName, dbResult);\n        }\n\n        @Nullable\n        @Override\n        protected OracleTableIndexColumn[] fetchObjectRow(\n            JDBCSession session,\n            OracleTableBase parent,\n            OracleTableIndex object,\n            JDBCResultSet dbResult\n        ) throws DBException {\n            String columnName = JDBCUtils.safeGetStringTrimmed(dbResult, \"COLUMN_NAME\");\n            int ordinalPosition = JDBCUtils.safeGetInt(dbResult, \"COLUMN_POSITION\");\n            boolean isAscending = \"ASC\".equals(JDBCUtils.safeGetStringTrimmed(dbResult, \"DESCEND\"));\n            String columnExpression = JDBCUtils.safeGetStringTrimmed(dbResult, \"COLUMN_EXPRESSION\");\n\n            OracleTableColumn tableColumn = columnName == null ? null : parent.getAttribute(session.getProgressMonitor(), columnName);\n            if (tableColumn == null) {\n                log.debug(\"Column '\" + columnName + \"' not found in table '\" + parent.getName() + \"' for index '\" + object.getName() + \"'\");\n                return null;\n            }\n\n            return new OracleTableIndexColumn[] { new OracleTableIndexColumn(\n                object,\n                tableColumn,\n                ordinalPosition,\n                isAscending,\n                columnExpression) };\n        }\n\n        @Override\n        protected void cacheChildren(DBRProgressMonitor monitor, OracleTableIndex index, List<OracleTableIndexColumn> rows)\n        {\n            index.setColumns(rows);\n        }\n    }\n\n    /**\n     * DataType cache implementation\n     */\n    static class DataTypeCache extends JDBCObjectCache<OracleSchema, OracleDataType> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner) throws SQLException\n        {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" * \" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"TYPES\") + \" \" +\n                    \"WHERE OWNER=? ORDER BY TYPE_NAME\");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleDataType fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet resultSet) throws SQLException\n        {\n            return new OracleDataType(owner, resultSet);\n        }\n    }\n\n    /**\n     * Sequence cache implementation\n     */\n    static class SequenceCache extends JDBCObjectCache<OracleSchema, OracleSequence> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner) throws SQLException\n        {\n            final JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" * FROM \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"SEQUENCES\") +\n                    \" WHERE SEQUENCE_OWNER=? ORDER BY SEQUENCE_NAME\");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleSequence fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException\n        {\n            return new OracleSequence(owner, resultSet);\n        }\n    }\n\n    /**\n     * Queue cache implementation\n     */\n    static class QueueCache extends JDBCObjectCache<OracleSchema, OracleQueue> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner) throws SQLException\n        {\n            final JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" * \" +\n                    \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"QUEUES\") + \" WHERE OWNER=? ORDER BY NAME\");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleQueue fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException\n        {\n            return new OracleQueue(owner, resultSet);\n        }\n    }\n\n    /**\n     * Procedures cache implementation\n     */\n    static class ProceduresCache extends JDBCObjectLookupCache<OracleSchema, OracleProcedureStandalone> {\n\n        @NotNull\n        @Override\n        public JDBCStatement prepareLookupStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner, @Nullable OracleProcedureStandalone object, @Nullable String objectName) throws SQLException {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) + \" * FROM \" +\n                    OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"OBJECTS\") + \" \" +\n                    \"WHERE OBJECT_TYPE IN ('PROCEDURE','FUNCTION') \" +\n                    \"AND OWNER=? \" +\n                    (object == null && objectName == null ? \"\" : \"AND OBJECT_NAME=? \") +\n                    \"ORDER BY OBJECT_NAME\");\n            dbStat.setString(1, owner.getName());\n            if (object != null || objectName != null) dbStat.setString(2, object != null ? object.getName() : objectName);\n            return dbStat;\n        }\n\n        @Override\n        protected OracleProcedureStandalone fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OracleProcedureStandalone(owner, dbResult);\n        }\n\n    }\n\n    static class PackageCache extends JDBCObjectCache<OracleSchema, OraclePackage> {\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner)\n            throws SQLException\n        {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT \" + OracleUtils.getSysCatalogHint(owner.getDataSource()) +\n                    \" OBJECT_NAME, STATUS, CREATED, LAST_DDL_TIME, TEMPORARY FROM \" +\n                OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"OBJECTS\") +\n                \" WHERE OBJECT_TYPE='PACKAGE' AND OWNER=? \" +\n                \" ORDER BY OBJECT_NAME\");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OraclePackage fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OraclePackage(owner, dbResult);\n        }\n\n    }\n\n    /**\n     * Sequence cache implementation\n     */\n    static class SynonymCache extends JDBCObjectLookupCache<OracleSchema, OracleSynonym> {\n        @NotNull\n        @Override\n        public JDBCStatement prepareLookupStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner, OracleSynonym object, String objectName) throws SQLException\n        {\n            String synonymTypeFilter = (session.getDataSource().getContainer().getPreferenceStore().getBoolean(OracleConstants.PREF_DBMS_READ_ALL_SYNONYMS) ?\n                \"\" :\n                \"AND O.OBJECT_TYPE NOT IN ('JAVA CLASS','PACKAGE BODY')\\n\");\n\n            String synonymName = object != null ? object.getName() : objectName;\n\n            StringBuilder sql = new StringBuilder();\n            sql.append(\"SELECT OWNER, SYNONYM_NAME, MAX(TABLE_OWNER) as TABLE_OWNER, MAX(TABLE_NAME) as TABLE_NAME, MAX(DB_LINK) as DB_LINK, MAX(OBJECT_TYPE) as OBJECT_TYPE FROM (\\n\")\n                .append(\"SELECT S.*, NULL OBJECT_TYPE FROM \")\n                .append(OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"SYNONYMS\"))\n                .append(\" S WHERE S.OWNER = ?\");\n            if (synonymName != null) sql.append(\" AND S.SYNONYM_NAME = ?\");\n            sql\n                .append(\"\\nUNION ALL\\n\")\n                .append(\"SELECT S.*,O.OBJECT_TYPE FROM \").append(OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"SYNONYMS\")).append(\" S, \")\n                .append(OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"OBJECTS\")).append(\" O\\n\")\n                .append(\"WHERE S.OWNER = ?\\n\");\n            if (synonymName != null) sql.append(\" AND S.SYNONYM_NAME = ? \");\n            sql.append(synonymTypeFilter)\n                .append(\"AND O.OWNER=S.TABLE_OWNER AND O.OBJECT_NAME=S.TABLE_NAME AND O.SUBOBJECT_NAME IS NULL\\n)\\n\");\n            sql.append(\"GROUP BY OWNER, SYNONYM_NAME\");\n            if (synonymName == null) {\n                sql.append(\"\\nORDER BY SYNONYM_NAME\");\n            }\n\n            JDBCPreparedStatement dbStat = session.prepareStatement(sql.toString());\n            int paramNum = 1;\n            dbStat.setString(paramNum++, owner.getName());\n            if (synonymName != null) dbStat.setString(paramNum++, synonymName);\n            dbStat.setString(paramNum++, owner.getName());\n            if (synonymName != null) dbStat.setString(paramNum++, synonymName);\n            return dbStat;\n        }\n\n        @Override\n        protected OracleSynonym fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet resultSet) throws SQLException, DBException\n        {\n            return new OracleSynonym(owner, resultSet);\n        }\n\n    }\n\n    static class DBLinkCache extends JDBCObjectCache<OracleSchema, OracleDBLink> {\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner)\n            throws SQLException\n        {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT * FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"DB_LINKS\") + \" WHERE OWNER=? \" +\n                \" ORDER BY DB_LINK\");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleDBLink fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OracleDBLink(session.getProgressMonitor(), owner, dbResult);\n        }\n\n    }\n\n    static class TriggerCache extends JDBCObjectCache<OracleSchema, OracleSchemaTrigger> {\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema schema) throws SQLException\n        {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT *\\n\" +\n                \"FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), schema.getDataSource(), \"TRIGGERS\") + \" WHERE OWNER=? AND TRIM(BASE_OBJECT_TYPE) IN ('DATABASE','SCHEMA')\\n\" +\n                \"ORDER BY TRIGGER_NAME\");\n            dbStat.setString(1, schema.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleSchemaTrigger fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema oracleSchema, @NotNull JDBCResultSet resultSet) throws SQLException, DBException\n        {\n            return new OracleSchemaTrigger(oracleSchema, resultSet);\n        }\n    }\n\n    class TableTriggerCache extends JDBCCompositeCache<OracleSchema, OracleTableBase, OracleTableTrigger, OracleTriggerColumn> {\n        protected TableTriggerCache() {\n            super(tableCache, OracleTableBase.class, \"TABLE_NAME\", \"TRIGGER_NAME\");\n        }\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(JDBCSession session, OracleSchema schema, OracleTableBase table) throws SQLException {\n            final JDBCPreparedStatement dbStmt = session.prepareStatement(\n                \"SELECT\" + OracleUtils.getSysCatalogHint(schema.getDataSource()) + \" t.*, c.*, c.COLUMN_NAME AS TRIGGER_COLUMN_NAME\" +\n                \"\\nFROM \" +\n                OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), schema.getDataSource(), \"TRIGGERS\") + \" t, \" +\n                OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), schema.getDataSource(), \"TRIGGER_COLS\") + \" c\" +\n                \"\\nWHERE t.TABLE_OWNER=?\" + (table == null ? \"\" : \" AND t.TABLE_NAME=?\") +\n                \" AND t.BASE_OBJECT_TYPE=\" + (table instanceof OracleView ? \"'VIEW'\" : \"'TABLE'\") + \" AND t.TABLE_OWNER=c.TABLE_OWNER(+) AND t.TABLE_NAME=c.TABLE_NAME(+)\" +\n                \" AND t.OWNER=c.TRIGGER_OWNER(+) AND t.TRIGGER_NAME=c.TRIGGER_NAME(+)\" +\n                \"\\nORDER BY t.TRIGGER_NAME\"\n            );\n            dbStmt.setString(1, schema.getName());\n            if (table != null) {\n                dbStmt.setString(2, table.getName());\n            }\n            return dbStmt;\n        }\n\n        @Nullable\n        @Override\n        protected OracleTableTrigger fetchObject(JDBCSession session, OracleSchema schema, OracleTableBase table, String childName, JDBCResultSet resultSet) throws SQLException, DBException {\n            return new OracleTableTrigger(table, resultSet);\n        }\n\n        @Nullable\n        @Override\n        protected OracleTriggerColumn[] fetchObjectRow(JDBCSession session, OracleTableBase table, OracleTableTrigger trigger, JDBCResultSet resultSet) throws DBException {\n            final OracleTableBase refTable = OracleTableBase.findTable(\n                session.getProgressMonitor(),\n                table.getDataSource(),\n                JDBCUtils.safeGetString(resultSet, \"TABLE_OWNER\"),\n                JDBCUtils.safeGetString(resultSet, \"TABLE_NAME\")\n            );\n            if (refTable != null) {\n                final String columnName = JDBCUtils.safeGetString(resultSet, \"TRIGGER_COLUMN_NAME\");\n                if (columnName == null) {\n                    return null;\n                }\n                final OracleTableColumn tableColumn = refTable.getAttribute(session.getProgressMonitor(), columnName);\n                if (tableColumn == null) {\n                    log.debug(\"Column '\" + columnName + \"' not found in table '\" + refTable.getFullyQualifiedName(DBPEvaluationContext.DDL) + \"' for trigger '\" + trigger.getName() + \"'\");\n                    return null;\n                }\n                return new OracleTriggerColumn[]{\n                    new OracleTriggerColumn(session.getProgressMonitor(), trigger, tableColumn, resultSet)\n                };\n            }\n            return null;\n        }\n\n        @Override\n        protected void cacheChildren(DBRProgressMonitor monitor, OracleTableTrigger trigger, List<OracleTriggerColumn> columns) {\n            trigger.setColumns(columns);\n        }\n\n        @Override\n        protected boolean isEmptyObjectRowsAllowed() {\n            return true;\n        }\n    }\n\n    static class JavaCache extends JDBCObjectCache<OracleSchema, OracleJavaClass> {\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner)\n            throws SQLException\n        {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                \"SELECT * FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"JAVA_CLASSES\") + \" WHERE OWNER=? \");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleJavaClass fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OracleJavaClass(owner, dbResult);\n        }\n\n    }\n\n    static class SchedulerJobCache extends JDBCObjectCache<OracleSchema, OracleSchedulerJob> {\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner)\n                throws SQLException\n        {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                    \"SELECT * FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"SCHEDULER_JOBS\") + \" WHERE OWNER=? ORDER BY JOB_NAME\");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleSchedulerJob fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n                throws SQLException, DBException\n        {\n            return new OracleSchedulerJob(owner, dbResult);\n        }\n\n    }\n\n    static class SchedulerProgramCache extends JDBCObjectCache<OracleSchema, OracleSchedulerProgram> {\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner)\n                throws SQLException\n        {\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                    \"SELECT * FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"SCHEDULER_PROGRAMS\") + \" WHERE OWNER=? ORDER BY PROGRAM_NAME\");\n            dbStat.setString(1, owner.getName());\n            return dbStat;\n        }\n\n        @Override\n        protected OracleSchedulerProgram fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n                throws SQLException, DBException\n        {\n            return new OracleSchedulerProgram(owner, dbResult);\n        }\n\n    }\n\n    static class RecycleBin extends JDBCObjectCache<OracleSchema, OracleRecycledObject> {\n\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner)\n            throws SQLException\n        {\n            final boolean isPublic = owner.isPublic();\n            JDBCPreparedStatement dbStat = session.prepareStatement(\n                isPublic ?\n                    \"SELECT * FROM \" + OracleUtils.getSysSchemaPrefix(owner.getDataSource()) + \"USER_RECYCLEBIN\" :\n                    \"SELECT * FROM \" + OracleUtils.getSysSchemaPrefix(owner.getDataSource())+ \"DBA_RECYCLEBIN WHERE OWNER=?\");\n            if (!isPublic) {\n                dbStat.setString(1, owner.getName());\n            }\n            return dbStat;\n        }\n\n        @Override\n        protected OracleRecycledObject fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult)\n            throws SQLException, DBException\n        {\n            return new OracleRecycledObject(owner, dbResult);\n        }\n\n    }\n\n    static class JobCache extends JDBCObjectCache<OracleSchema, OracleJob> {\n        @NotNull\n        @Override\n        protected JDBCStatement prepareObjectsStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner) throws SQLException {\n            return session.prepareStatement(\n                \"SELECT * FROM \" + OracleUtils.getAdminAllViewPrefix(session.getProgressMonitor(), owner.getDataSource(), \"JOBS\") + \" ORDER BY JOB\"\n            );\n        }\n\n        @Override\n        protected OracleJob fetchObject(@NotNull JDBCSession session, @NotNull OracleSchema owner, @NotNull JDBCResultSet dbResult) throws SQLException, DBException {\n            return new OracleJob(owner, dbResult);\n        }\n    }\n}",
                "methodCount": 113
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 15,
                "candidates": [
                    {
                        "lineStart": 671,
                        "lineEnd": 673,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method createTableImpl to class OracleSchema",
                        "description": "Move method createTableImpl to org.jkiss.dbeaver.ext.oracle.model.OracleSchema\nRationale: The method `createTableImpl` creates an instance of `OracleTable`, which is directly related to the schema. Since it operates on an `OracleSchema` object and involves creating tables within the schema, it would be more appropriate for the method to reside in the `OracleSchema` class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 266,
                        "lineEnd": 272,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getProceduresOnly to class OracleUser",
                        "description": "Move method getProceduresOnly to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The getProceduresOnly() method focuses on Oracle database procedures, which are typically associated with users in a database context. The OracleUser class already manages various properties and operations related to Oracle users, including roles and spaces. Placing the getProceduresOnly() method here aligns it with related functionalities that involve user-specific data and operations. This provides better cohesion, as OracleUser can encapsulate both user attributes and associated stored procedures.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 274,
                        "lineEnd": 280,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getFunctionsOnly to class OracleUser",
                        "description": "Move method getFunctionsOnly to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The getFunctionsOnly() method filters Oracle procedures by function type, which is closely related to the user's functionalities and procedures in an Oracle database. The OracleUser class already handles various attributes and behaviors related to Oracle users, including managing specific roles and privileges. Moving the method here aligns with managing user-related database objects and enhances the coherence of the class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 203,
                        "lineEnd": 208,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getMaterializedView to class TableCache",
                        "description": "Move method getMaterializedView to org.jkiss.dbeaver.ext.oracle.model.OracleSchema.TableCache\nRationale: The method `getMaterializedView` is closely associated with the `TableCache` class, which is responsible for managing and caching table-related data, including materialized views. This method aligns well with the existing functionalities provided by `TableCache`, which already supports fetching objects like tables, views, and materialized views. Therefore, moving this method to `TableCache` enhances cohesion and makes the architecture cleaner.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 190,
                        "lineEnd": 194,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getView to class TableCache",
                        "description": "Move method getView to org.jkiss.dbeaver.ext.oracle.model.OracleSchema.TableCache\nRationale: The method getView() uses the tableCache object directly to retrieve an OracleView by its name and DBRProgressMonitor. This strongly suggests that the operation of fetching a view is within the responsibilities of the TableCache class, which is already handling cache and retrieval operations of related database objects. Moving the method to TableCache will improve cohesion by placing similar functionalities together and further encapsulate the logic of object retrieval within TableCache.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 177,
                        "lineEnd": 181,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getTable to class TableCache",
                        "description": "Move method getTable to org.jkiss.dbeaver.ext.oracle.model.OracleSchema.TableCache\nRationale: The getTable method directly interacts with the tableCache object to fetch OracleTable instances. This strongly indicates that the method's primary responsibility lies in the caching mechanism and operations managed by the TableCache class. Moving it to TableCache will improve cohesion by centralizing all cache-related logic in one class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 301,
                        "lineEnd": 306,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getSynonym to class OracleUser",
                        "description": "Move method getSynonym to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method getSynonym() is fetching an OracleSynonym associated with a specific user. Since OracleUser represents the user-centric context within which this synonym exists, it makes logical sense to move this method to the OracleUser class. Additionally, OracleUser already has methods querying related information like roles and tablespaces, indicating that it is designed to hold user-specific references and related caches.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 170,
                        "lineEnd": 175,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getTables to class OracleUser",
                        "description": "Move method getTables to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method getTables(DBRProgressMonitor monitor) is used to retrieve tables associated with an Oracle user. Since OracleUser already has methods for fetching related objects (e.g., roles and tablespaces), it makes logical sense to include getTables here. This improves encapsulation and ensures that all user-related data retrieval methods are in a single class. In contrast, the Log class is related to logging activities, and the JobCache class deals with job caching, making them less suitable targets.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 183,
                        "lineEnd": 188,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getViews to class OracleUser",
                        "description": "Move method getViews to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method getViews() interacts with the tableCache and retrieves OracleView objects. The OracleUser class appears to manage user-related data and also has similar methods such as getRolePrivs() which fetches user-related objects from caches. This makes OracleUser a more appropriate target class for managing views associated with a user. Moving the method to OracleUser consolidates functionality related to user views and aligns with the responsibility of handling database objects associated with an Oracle user.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 196,
                        "lineEnd": 201,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getMaterializedViews to class OracleUser",
                        "description": "Move method getMaterializedViews to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method `getMaterializedViews` is focused on fetching materialized views, which are typically associated with database schemas and objects. The `OracleUser` class already contains methods for fetching various database-related properties and objects associated with the user, such as roles and tablespaces. Moving `getMaterializedViews` to `OracleUser` would keep related data-fetching methods centralized, making the class a more comprehensive repository for user-related database operations.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 336,
                        "lineEnd": 339,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getJobs to class JobCache",
                        "description": "Move method getJobs to org.jkiss.dbeaver.ext.oracle.model.OracleSchema.JobCache\nRationale: The method getJobs() directly interacts with jobCache to retrieve OracleJob objects. Since JobCache is specifically responsible for handling the retrieval and caching of OracleJob instances, it is logical to move this method to JobCache for encapsulation and single responsibility principle adherence. Keeping it in JobCache centralizes the job-related operations and maintains a cleaner and more maintainable codebase.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 163,
                        "lineEnd": 168,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getIndexes to class OracleUser",
                        "description": "Move method getIndexes to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method getIndexes(DBRProgressMonitor) fits well within the OracleUser class because it appears that OracleUser is a part of a user space in Oracle Database where indexes would naturally reside. Additionally, OracleUser already contains similar methods for retrieving related database objects such as roles and profiles, making it a logical and cohesive class for database-related retrievals. This will make it consistent with existing architectural patterns found in OracleUser, enhancing maintainability and readability.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 245,
                        "lineEnd": 250,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getQueues to class OracleUser",
                        "description": "Move method getQueues to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method getQueues(DBRProgressMonitor monitor) is annotated with @Association, indicating it is likely managing a collection of associated objects, which fits the pattern of methods already present in OracleUser, such as getRolePrivs(). Additionally, OracleUser is responsible for user-specific details, which makes it a natural candidate to include methods related to user-specific objects like queues.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 259,
                        "lineEnd": 264,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getPackages to class OracleUser",
                        "description": "Move method getPackages to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method getPackages() appears to retrieve OraclePackage instances, which are likely related to user-specific operations in Oracle databases. It makes sense to move this method into the OracleUser class, as this class seems to encapsulate various operations and data related to an Oracle user, including fetching roles and lazy references to user-specific objects. The method's responsibility aligns with the OracleUser class's purpose of managing user-related data, such as roles, profiles, and tablespaces.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 294,
                        "lineEnd": 299,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getSynonyms to class OracleUser",
                        "description": "Move method getSynonyms to org.jkiss.dbeaver.ext.oracle.model.OracleUser\nRationale: The method getSynonyms() is likely fetching synonyms associated with a specific user, and the OracleUser class represents a user in an Oracle Database. Since OracleUser already contains relevant user information and other related methods such as getRolePrivs(), it makes sense to place getSynonyms() in OracleUser to maintain cohesion and encapsulate user-specific functionality together.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    }
                ]
            },
            "elapsedTime": [
                {
                    "candidateIndex": 0,
                    "elapsedTime": 11619
                }
            ],
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 159511
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "addDDLLine",
                            "method_signature": "private void addDDLLine(StringBuilder sql, String ddl)",
                            "target_class": "OracleUtils",
                            "rationale": "The method addDDLLine is a utility method that could be used in various places that involve creating DDL statements. Moving it to OracleUtils would centralize such utility methods, improving code reuse and maintainability."
                        },
                        {
                            "method_name": "getTableColumn",
                            "method_signature": "private static OracleTableColumn getTableColumn(JDBCSession session, OracleTableBase parent, ResultSet dbResult,String columnName)",
                            "target_class": "OracleTable",
                            "rationale": "The method getTableColumn deals specifically with retrieving a column of OracleTable. It fits better in OracleTable class where column-related functionalities are encapsulated."
                        },
                        {
                            "method_name": "parsePositions",
                            "method_signature": "private List<SpecialPosition> parsePositions(String value)",
                            "target_class": "SpecialPosition",
                            "rationale": "The method parsePositions is tightly coupled with the SpecialPosition class, manipulating its internal state. It is more appropriate for this method to reside within the SpecialPosition class."
                        }
                    ],
                    "llm_response_time": 6383
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "getTableColumn",
                            "method_signature": "private static OracleTableColumn getTableColumn(JDBCSession session, OracleTableBase parent, ResultSet dbResult, String columnName) throws DBException",
                            "target_class": "OracleTableBase",
                            "rationale": "The method `getTableColumn` directly interacts with the parameters relating to a table's properties, so moving it to the `OracleTableBase` class would better encapsulate this functionality, removing it from `OracleSchema`."
                        }
                    ],
                    "llm_response_time": 3632
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "calculateDiscount",
                            "method_signature": "public double calculateDiscount(double amount)",
                            "target_class": "Customer",
                            "rationale": "The method calculateDiscount() relies heavily on the customer's loyalty points and membership level, which are properties of the Customer class. Moving it to Customer will encapsulate the discount logic within the related class and ensure better cohesion."
                        }
                    ],
                    "llm_response_time": 3469
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "getIndexes",
                            "method_signature": "@Association\n    public getIndexes(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTables",
                            "method_signature": "@Association\n    public getTables(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTable",
                            "method_signature": "public getTable(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getViews",
                            "method_signature": "@Association\n    public getViews(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getView",
                            "method_signature": "public getView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getMaterializedViews",
                            "method_signature": "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getMaterializedView",
                            "method_signature": "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getDataTypes",
                            "method_signature": "@Association\n    public getDataTypes(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getDataType",
                            "method_signature": "public getDataType(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTypeBySynonym",
                            "method_signature": "@Nullable\n    private getTypeBySynonym(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getQueues",
                            "method_signature": "@Association\n    public getQueues(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSequences",
                            "method_signature": "@Association\n    public getSequences(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getPackages",
                            "method_signature": "@Association\n    public getPackages(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getProceduresOnly",
                            "method_signature": "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getFunctionsOnly",
                            "method_signature": "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getProcedures",
                            "method_signature": "@Association\n    public getProcedures(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSynonyms",
                            "method_signature": "@Association\n    public getSynonyms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSynonym",
                            "method_signature": "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTriggers",
                            "method_signature": "@Association\n    public getTriggers(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTableTriggers",
                            "method_signature": "@Association\n    public getTableTriggers(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getDatabaseLinks",
                            "method_signature": "@Association\n    public getDatabaseLinks(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getJavaClasses",
                            "method_signature": "@Association\n    public getJavaClasses(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getJobs",
                            "method_signature": "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSchedulerJobs",
                            "method_signature": "@Association\n    public getSchedulerJobs(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSchedulerPrograms",
                            "method_signature": "@Association\n    public getSchedulerPrograms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getRecycledObjects",
                            "method_signature": "@Association\n    public getRecycledObjects(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTableColumn",
                            "method_signature": "private static getTableColumn(JDBCSession session, OracleTableBase parent, ResultSet dbResult,String columnName)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "createTableImpl",
                            "method_signature": "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getAlternativeTableStatement",
                            "method_signature": "@NotNull\n        private getAlternativeTableStatement(@NotNull JDBCSession session, @NotNull OracleSchema owner, @Nullable OracleTableBase object, @Nullable String objectName, String tablesSource, String tableTypeColumns)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                },
                {
                    "iteration_num": -2,
                    "suggested_move_methods": [
                        {
                            "method_name": "createTableImpl",
                            "method_signature": "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getProceduresOnly",
                            "method_signature": "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getFunctionsOnly",
                            "method_signature": "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getMaterializedView",
                            "method_signature": "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getView",
                            "method_signature": "public getView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTable",
                            "method_signature": "public getTable(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSynonym",
                            "method_signature": "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getTables",
                            "method_signature": "@Association\n    public getTables(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getViews",
                            "method_signature": "@Association\n    public getViews(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getMaterializedViews",
                            "method_signature": "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getJobs",
                            "method_signature": "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getIndexes",
                            "method_signature": "@Association\n    public getIndexes(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getQueues",
                            "method_signature": "@Association\n    public getQueues(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getPackages",
                            "method_signature": "@Association\n    public getPackages(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getSynonyms",
                            "method_signature": "@Association\n    public getSynonyms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "methodCompatibilityScores": {
                "tf-idf": {
                    "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)": {
                        "first": {
                            "method_name": "createTableImpl",
                            "method_signature": "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.35238829168317964
                    },
                    "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getProceduresOnly",
                            "method_signature": "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.360954036780214
                    },
                    "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getFunctionsOnly",
                            "method_signature": "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.360954036780214
                    },
                    "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getMaterializedView",
                            "method_signature": "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.3980094572294683
                    },
                    "public getView(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getView",
                            "method_signature": "public getView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.40185058246905386
                    },
                    "public getTable(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getTable",
                            "method_signature": "public getTable(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.40461381001371205
                    },
                    "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getSynonym",
                            "method_signature": "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4124435252780481
                    },
                    "@Association\n    public getTables(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getTables",
                            "method_signature": "@Association\n    public getTables(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4168162302489178
                    },
                    "@Association\n    public getViews(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getViews",
                            "method_signature": "@Association\n    public getViews(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4168162302489178
                    },
                    "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getMaterializedViews",
                            "method_signature": "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4168162302489178
                    },
                    "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getJobs",
                            "method_signature": "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4168162302489178
                    },
                    "@Association\n    public getIndexes(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getIndexes",
                            "method_signature": "@Association\n    public getIndexes(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.41780542070653015
                    },
                    "@Association\n    public getQueues(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getQueues",
                            "method_signature": "@Association\n    public getQueues(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4312615071071564
                    },
                    "@Association\n    public getPackages(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getPackages",
                            "method_signature": "@Association\n    public getPackages(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4312615071071564
                    },
                    "@Association\n    public getSynonyms(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getSynonyms",
                            "method_signature": "@Association\n    public getSynonyms(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4312615071071564
                    }
                },
                "voyage": {
                    "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)": {
                        "first": {
                            "method_name": "createTableImpl",
                            "method_signature": "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.44327611693302965
                    },
                    "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getFunctionsOnly",
                            "method_signature": "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4456408125082246
                    },
                    "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getProceduresOnly",
                            "method_signature": "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.47535642344965556
                    },
                    "@Association\n    public getRecycledObjects(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getRecycledObjects",
                            "method_signature": "@Association\n    public getRecycledObjects(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4848149895004362
                    },
                    "@Association\n    public getQueues(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getQueues",
                            "method_signature": "@Association\n    public getQueues(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5058394179593183
                    },
                    "public getDataType(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getDataType",
                            "method_signature": "public getDataType(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5274888412870583
                    },
                    "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getMaterializedView",
                            "method_signature": "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5346711778501043
                    },
                    "private static getTableColumn(JDBCSession session, OracleTableBase parent, ResultSet dbResult,String columnName)": {
                        "first": {
                            "method_name": "getTableColumn",
                            "method_signature": "private static getTableColumn(JDBCSession session, OracleTableBase parent, ResultSet dbResult,String columnName)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.535860542824142
                    },
                    "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getJobs",
                            "method_signature": "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5382532505312232
                    },
                    "@Association\n    public getDatabaseLinks(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getDatabaseLinks",
                            "method_signature": "@Association\n    public getDatabaseLinks(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5493539769443113
                    },
                    "public getView(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getView",
                            "method_signature": "public getView(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5520525197647053
                    },
                    "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)": {
                        "first": {
                            "method_name": "getSynonym",
                            "method_signature": "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5538568409772014
                    },
                    "@Association\n    public getPackages(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getPackages",
                            "method_signature": "@Association\n    public getPackages(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5550662777354002
                    },
                    "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getMaterializedViews",
                            "method_signature": "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5566329625662753
                    },
                    "@Association\n    public getIndexes(DBRProgressMonitor monitor)": {
                        "first": {
                            "method_name": "getIndexes",
                            "method_signature": "@Association\n    public getIndexes(DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5658497027047156
                    }
                }
            },
            "llmMethodPriority": {
                "tf-idf": {
                    "priority_method_names": [
                        "@Association\n    public getIndexes(DBRProgressMonitor monitor)",
                        "@Association\n    public getTables(DBRProgressMonitor monitor)",
                        "@Association\n    public getViews(DBRProgressMonitor monitor)",
                        "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)",
                        "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)",
                        "@Association\n    public getQueues(DBRProgressMonitor monitor)",
                        "@Association\n    public getPackages(DBRProgressMonitor monitor)",
                        "@Association\n    public getSynonyms(DBRProgressMonitor monitor)",
                        "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                        "public getTable(DBRProgressMonitor monitor, String name)",
                        "public getView(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)",
                        "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)"
                    ],
                    "llm_response_time": 8193
                },
                "tf-idf-5": {
                    "priority_method_names": [
                        "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                        "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)",
                        "public getView(DBRProgressMonitor monitor, String name)"
                    ],
                    "llm_response_time": 12334
                },
                "tf-df-3": {
                    "priority_method_names": [
                        "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                        "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)"
                    ],
                    "llm_response_time": 5419
                },
                "voyage": {
                    "priority_method_names": [
                        "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                        "private static getTableColumn(JDBCSession session, OracleTableBase parent, ResultSet dbResult,String columnName)",
                        "public getDataType(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getMaterializedView(DBRProgressMonitor monitor, String name)",
                        "public getView(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getJobs(@NotNull DBRProgressMonitor monitor)",
                        "@Association\n    public getDatabaseLinks(DBRProgressMonitor monitor)",
                        "@Association\n    public getSynonym(DBRProgressMonitor monitor, String name)",
                        "@Association\n    public getRecycledObjects(DBRProgressMonitor monitor)",
                        "@Association\n    public getQueues(DBRProgressMonitor monitor)",
                        "@Association\n    public getPackages(DBRProgressMonitor monitor)",
                        "@Association\n    public getMaterializedViews(DBRProgressMonitor monitor)",
                        "@Association\n    public getIndexes(DBRProgressMonitor monitor)"
                    ],
                    "llm_response_time": 11640
                },
                "voyage-5": {
                    "priority_method_names": [
                        "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                        "@Association\n    public getQueues(DBRProgressMonitor monitor)",
                        "@Association\n    public getRecycledObjects(DBRProgressMonitor monitor)",
                        "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)"
                    ],
                    "llm_response_time": 7283
                },
                "voyage-3": {
                    "priority_method_names": [
                        "private createTableImpl(JDBCSession session, org.jkiss.dbeaver.ext.oracle.model.OracleSchema owner, JDBCResultSet dbResult)",
                        "@Association\n    public getFunctionsOnly(DBRProgressMonitor monitor)",
                        "@Association\n    public getProceduresOnly(DBRProgressMonitor monitor)"
                    ],
                    "llm_response_time": 6273
                }
            },
            "targetClassMap": {
                "createTableImpl": {
                    "target_classes": [
                        {
                            "class_name": "JDBCSession",
                            "similarity_score": 0.011401611731735472
                        },
                        {
                            "class_name": "OracleSchema",
                            "similarity_score": 0.35878525055517096
                        },
                        {
                            "class_name": "JDBCResultSet",
                            "similarity_score": 0.1328422328310143
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleSchema",
                        "JDBCSession",
                        "JDBCResultSet"
                    ],
                    "llm_response_time": 5251,
                    "similarity_computation_time": 4,
                    "similarity_metric": "cosine"
                },
                "getProceduresOnly": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.06401843996644799
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.3778119479042107
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.24019926352791257
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.23283356616701598
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.1571736533654829
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.22916666666666666
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.25182770057259657
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.25798576640110704
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.24948506639458295
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.24948506639458295
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2518698839449418
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.40685526257395604
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "JobCache",
                        "Log"
                    ],
                    "llm_response_time": 4174,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "getFunctionsOnly": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.06401843996644799
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.3778119479042107
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.24019926352791257
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.23283356616701598
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.1571736533654829
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.22916666666666666
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.25182770057259657
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.25798576640110704
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.24948506639458295
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.24948506639458295
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2518698839449418
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.40685526257395604
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "Log",
                        "JobCache"
                    ],
                    "llm_response_time": 3514,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getMaterializedView": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.11316968255314816
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.37739990935017453
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.2847427088343025
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.2469572902868155
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.1889355454016145
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.2430679560328757
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.2671036121482476
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.27363522730774703
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.2646188733785785
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.2646188733785785
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2671483543712056
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.4629195488869413
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "TableCache",
                        "OracleUser",
                        "Log"
                    ],
                    "llm_response_time": 3529,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getView": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.1168811455530461
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.38977695033957727
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.29408100513846436
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.474049548714888
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "TableCache",
                        "OracleUser",
                        "Log"
                    ],
                    "llm_response_time": 5500,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getTable": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.1168811455530461
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.38977695033957727
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.29408100513846436
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.25505639266809255
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.19513179222588486
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.2510395055232011
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.2758634244165355
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.2826092475462894
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.27329719724997426
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.27329719724997426
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2759096339857058
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.474049548714888
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "TableCache",
                        "OracleUser",
                        "Log"
                    ],
                    "llm_response_time": 3369,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getSynonym": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.1168811455530461
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.290985415610691
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.25505639266809255
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.21808847366422426
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.2510395055232011
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.2758634244165355
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.2826092475462894
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.27329719724997426
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.27329719724997426
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2759096339857058
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.4781012542594597
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "TableCache",
                        "JobCache"
                    ],
                    "llm_response_time": 4943,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getTables": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.07533029414277381
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.401940103242097
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.26601572457110045
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.27397451476269485
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17261602088408795
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.269659685815003
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.29632485214220095
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3035710285634849
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2963744891819096
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.48744974975689936
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "Log",
                        "JobCache"
                    ],
                    "llm_response_time": 2909,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "getViews": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.07533029414277381
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.401940103242097
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.26601572457110045
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.27397451476269485
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17261602088408795
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.269659685815003
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.29632485214220095
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3035710285634849
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2963744891819096
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.48744974975689936
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "JobCache",
                        "Log"
                    ],
                    "llm_response_time": 4402,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getMaterializedViews": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.07533029414277381
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.401940103242097
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.26601572457110045
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.27397451476269485
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17261602088408795
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.269659685815003
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.29632485214220095
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3035710285634849
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2963744891819096
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.48744974975689936
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "JobCache",
                        "Log"
                    ],
                    "llm_response_time": 3837,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getJobs": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.10044039219036507
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.26601572457110045
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.27397451476269485
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17261602088408795
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.269659685815003
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.29632485214220095
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3035710285634849
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2963744891819096
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.48309751984835564
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "JobCache",
                        "OracleUser",
                        "RecycleBin"
                    ],
                    "llm_response_time": 3458,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getIndexes": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.07533029414277381
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.26601572457110045
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.27397451476269485
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17261602088408795
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.269659685815003
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.29632485214220095
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3035710285634849
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.2935682819759931
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.2963744891819096
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.48744974975689936
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "JobCache",
                        "RecycleBin"
                    ],
                    "llm_response_time": 3503,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getQueues": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.27687794458150367
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.285161716050867
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17966445081877086
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.2806706996939058
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.3084246847506244
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3159667442917844
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.3055555555555556
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.3055555555555556
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.3084763486195622
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.49829389623613096
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "JobCache",
                        "RecycleBin"
                    ],
                    "llm_response_time": 3635,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getPackages": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.27687794458150367
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.285161716050867
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17966445081877086
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.2806706996939058
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.3084246847506244
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3159667442917844
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.3055555555555556
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.3055555555555556
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.3084763486195622
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.49829389623613096
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "JobCache",
                        "RecycleBin"
                    ],
                    "llm_response_time": 3655,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getSynonyms": {
                    "target_classes": [
                        {
                            "class_name": "DBRProgressMonitor",
                            "similarity_score": 0.0784062560233975
                        },
                        {
                            "class_name": "TableCache",
                            "similarity_score": 0.27687794458150367
                        },
                        {
                            "class_name": "TriggerCache",
                            "similarity_score": 0.285161716050867
                        },
                        {
                            "class_name": "SynonymCache",
                            "similarity_score": 0.17966445081877086
                        },
                        {
                            "class_name": "DBLinkCache",
                            "similarity_score": 0.2806706996939058
                        },
                        {
                            "class_name": "JavaCache",
                            "similarity_score": 0.3084246847506244
                        },
                        {
                            "class_name": "JobCache",
                            "similarity_score": 0.3159667442917844
                        },
                        {
                            "class_name": "SchedulerJobCache",
                            "similarity_score": 0.3055555555555556
                        },
                        {
                            "class_name": "SchedulerProgramCache",
                            "similarity_score": 0.3055555555555556
                        },
                        {
                            "class_name": "RecycleBin",
                            "similarity_score": 0.3084763486195622
                        },
                        {
                            "class_name": "OracleUser",
                            "similarity_score": 0.49829389623613096
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OracleUser",
                        "RecycleBin",
                        "JobCache"
                    ],
                    "llm_response_time": 3906,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "repository": "https://github.com/dbeaver/dbeaver.git",
        "sha1": "1b9e9b6055181df4e19c4daf4bf898b3b746dddd",
        "url": "https://github.com/dbeaver/dbeaver/commit/1b9e9b6055181df4e19c4daf4bf898b3b746dddd",
        "move_method_refactoring": {
            "type": "Extract And Move Method",
            "description": "Extract And Move Method public getFirstStmChild() : STMTreeNode extracted from private collectValueExpression(node STMTreeNode) : SQLQueryValueExpression in class org.jkiss.dbeaver.model.sql.semantics.SQLQueryModelRecognizer & moved to class org.jkiss.dbeaver.model.stm.STMTreeNode",
            "leftSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelRecognizer.java",
                    "startLine": 567,
                    "endLine": 626,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration before extraction",
                    "codeElement": "private collectValueExpression(node STMTreeNode) : SQLQueryValueExpression"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelRecognizer.java",
                    "startLine": 590,
                    "endLine": 590,
                    "startColumn": 29,
                    "endColumn": 52,
                    "codeElementType": "EXPRESSION_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                }
            ],
            "rightSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.lsm/src/org/jkiss/dbeaver/model/stm/STMTreeNode.java",
                    "startLine": 96,
                    "endLine": 98,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "extracted method declaration",
                    "codeElement": "public getFirstStmChild() : STMTreeNode"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.lsm/src/org/jkiss/dbeaver/model/stm/STMTreeNode.java",
                    "startLine": 97,
                    "endLine": 97,
                    "startColumn": 9,
                    "endColumn": 31,
                    "codeElementType": "RETURN_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelContext.java",
                    "startLine": 517,
                    "endLine": 576,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration after extraction",
                    "codeElement": "public collectValueExpression(node STMTreeNode) : SQLQueryValueExpression"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelContext.java",
                    "startLine": 540,
                    "endLine": 540,
                    "startColumn": 34,
                    "endColumn": 55,
                    "codeElementType": "METHOD_INVOCATION",
                    "description": "extracted method invocation",
                    "codeElement": "rn.getFirstStmChild()"
                }
            ],
            "isStatic": false
        },
        "ref_id": 903,
        "extraction_results": {
            "success": true,
            "newCommitHash": "f9e594b45b1aa649493e8f167addbf0d08e5d60f",
            "newBranchName": "extract-getFirstStmChild-collectValueExpression-7cd8380"
        },
        "telemetry": {
            "id": "74e86237-a75a-4b3c-a2ba-83dc68957755",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1244,
                "lineStart": 53,
                "lineEnd": 1296,
                "bodyLineStart": 53,
                "language": "java",
                "filePath": "/Users/abhiram/Documents/TBE/evaluation_projects/dbeaver/plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelRecognizer.java",
                "sourceCode": "/**\n * Responsible for semantics model preparation based on the parsing result\n */\npublic class SQLQueryModelRecognizer {\n\n    private final HashSet<SQLQuerySymbolEntry> symbolEntries = new HashSet<>();\n    \n    private final boolean isReadMetadataForSemanticAnalysis;\n\n    private final DBCExecutionContext executionContext;\n    \n    private final Set<String> reservedWords;\n\n    private final SQLSyntaxManager syntaxManager;\n    private final SQLDialect dialect;\n    \n    private final LinkedList<SQLQueryLexicalScope> currentLexicalScopes = new LinkedList<>();\n\n    private SQLQueryDataContext queryDataContext;\n\n    public SQLQueryModelRecognizer(@Nullable DBCExecutionContext executionContext, boolean isReadMetadataForSemanticAnalysis, @NotNull SQLSyntaxManager syntaxManager) {\n        this.isReadMetadataForSemanticAnalysis = isReadMetadataForSemanticAnalysis;\n        this.executionContext = executionContext;\n        this.syntaxManager = syntaxManager;\n\n        if (executionContext != null && executionContext.getDataSource() != null) {\n            this.dialect = this.executionContext.getDataSource().getSQLDialect();\n        } else {\n            this.dialect = BasicSQLDialect.INSTANCE;\n        }\n        this.reservedWords = new HashSet<>(this.dialect.getReservedWords());\n    }\n\n    /**\n     * Provides the semantic model for the provided text\n     */\n    @Nullable\n    public SQLQueryModel recognizeQuery(@NotNull String text, @NotNull DBRProgressMonitor monitor) {\n        STMSource querySource = STMSource.fromString(text);\n        LSMAnalyzer analyzer = LSMDialectRegistry.getInstance().getAnalyzerFactoryForDialect(this.dialect)\n            .createAnalyzer(LSMAnalyzerParameters.forDialect(this.dialect, this.syntaxManager));\n        STMTreeRuleNode tree = analyzer.parseSqlQueryTree(querySource, new STMSkippingErrorListener());\n\n        if (tree != null) {\n            this.queryDataContext = this.prepareDataContext(tree);\n\n            STMTreeNode dataStmt = tree.findChildOfName(STMKnownRuleNames.directSqlDataStatement);\n            if (dataStmt != null) { // TODO collect CTE for insert-update-delete as well as recursive CTE\n                STMTreeNode stmtBodyNode = dataStmt.getStmChild(dataStmt.getChildCount() - 1);\n                SQLQueryModelContent contents = switch (stmtBodyNode.getNodeKindId()) {\n                    case SQLStandardParser.RULE_deleteStatement -> this.collectDeleteStatement(stmtBodyNode);\n                    case SQLStandardParser.RULE_insertStatement -> this.collectInsertStatement(stmtBodyNode);\n                    case SQLStandardParser.RULE_updateStatement -> this.collectUpdateStatement(stmtBodyNode);\n                    case SQLStandardParser.RULE_selectStatement -> this.collectQueryExpression(tree);\n                    default -> this.collectQueryExpression(tree);\n                };\n\n                if (contents != null) {\n                    SQLQueryModel model = new SQLQueryModel(tree, contents, symbolEntries);\n\n                    model.propagateContext(this.queryDataContext, new RecognitionContext(monitor));\n\n                    // var tt = new DebugGraphBuilder();\n                    // tt.traverseObjs(model);\n                    // tt.graph.saveToFile(\"c:/temp/outx.dgml\");\n\n                    return model;\n                }\n            }\n\n            // TODO log query model collection error\n            Predicate<SQLQuerySymbolEntry> tryFallbackForStringLiteral = s -> {\n                String rawString = s.getRawName();\n                SQLQuerySymbolClass forcedClass;\n                if (this.dialect.isQuotedString(rawString)) {\n                    forcedClass = SQLQuerySymbolClass.STRING;\n                } else {\n                    forcedClass = tryFallbackSymbolForStringLiteral(this.dialect, s, false);\n                }\n                boolean forced = forcedClass != null;\n                if (forced) {\n                    s.getSymbol().setSymbolClass(forcedClass);\n                }\n                return forced;\n            };\n\n            this.traverseForIdentifiers(tree,\n                (e, c) -> {\n                    if (c.isNotClassified() && (e != null || !tryFallbackForStringLiteral.test(c))) {\n                        c.getSymbol().setSymbolClass(SQLQuerySymbolClass.COLUMN);\n                    }\n                },\n                e -> {\n                    if (e.isNotClassified() && (e.catalogName != null || e.schemaName != null ||\n                        !tryFallbackForStringLiteral.test(e.entityName))\n                    ) {\n                        e.entityName.getSymbol().setSymbolClass(SQLQuerySymbolClass.TABLE);\n                        if (e.schemaName != null) {\n                            e.schemaName.getSymbol().setSymbolClass(SQLQuerySymbolClass.SCHEMA);\n                            if (e.catalogName != null) {\n                                e.catalogName.getSymbol().setSymbolClass(SQLQuerySymbolClass.CATALOG);\n                            }\n                        }\n                    }\n                },\n                false\n            );\n            return new SQLQueryModel(tree, null, symbolEntries);\n        } else {\n            return null;\n        }\n    }\n\n    private void traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    ) {\n        List<STMTreeNode> refs = STMUtils.expandSubtree(\n            root,\n            null,\n            Set.of(STMKnownRuleNames.columnReference, STMKnownRuleNames.columnName, STMKnownRuleNames.tableName)\n        );\n        for (STMTreeNode ref : refs) {\n            switch (ref.getNodeKindId()) {\n                case SQLStandardParser.RULE_columnReference, SQLStandardParser.RULE_columnName -> {\n                    SQLQueryQualifiedName tableName;\n                    if (ref.getChildCount() > 1) {\n                        tableName = this.collectTableName(ref.getStmChild(0), forceUnquotted);\n                        if (tableName != null) {\n                            entityAction.accept(tableName);\n                        }\n                    } else {\n                        tableName = null;\n                    }\n                    STMTreeNode columnName = ref.getNodeKindId() == SQLStandardParser.RULE_columnName\n                        ? ref \n                        : ref.findChildOfName(STMKnownRuleNames.columnName);\n                    if (columnName != null) {\n                        columnAction.accept(tableName, this.collectIdentifier(columnName, forceUnquotted));\n                    }\n                }\n                case SQLStandardParser.RULE_tableName -> {\n                    SQLQueryQualifiedName tableName = this.collectTableName(ref, forceUnquotted);\n                    if (tableName != null) {\n                        entityAction.accept(tableName);\n                    }\n                }\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + ref.getNodeName());\n            }\n        }\n    }\n\n    @NotNull\n    private SQLQueryDataContext prepareDataContext(@NotNull STMTreeNode root) {\n        if (this.isReadMetadataForSemanticAnalysis\n            && this.executionContext != null\n            && this.executionContext.getDataSource() instanceof DBSObjectContainer\n            && this.executionContext.getDataSource().getSQLDialect() instanceof BasicSQLDialect\n        ) {\n            return new SQLQueryDataSourceContext(this.executionContext, this.executionContext.getDataSource().getSQLDialect());\n        } else {\n            Set<String> allColumnNames = new HashSet<>();\n            Set<List<String>> allTableNames = new HashSet<>();\n            this.traverseForIdentifiers(root, (e, c) -> allColumnNames.add(c.getName()), e -> allTableNames.add(e.toListOfStrings()), true);\n            symbolEntries.clear();\n            return new SQLQueryDummyDataSourceContext(this.dialect, allColumnNames, allTableNames);\n        }\n    }\n\n    private static class RecognitionContext implements SQLQueryRecognitionContext {\n        private final DBRProgressMonitor monitor;\n\n        public RecognitionContext(@NotNull DBRProgressMonitor monitor) {\n            this.monitor = monitor;\n        }\n\n        @NotNull\n        @Override\n        public DBRProgressMonitor getMonitor() {\n            return this.monitor;\n        }\n\n        @Override\n        public void appendError(@NotNull SQLQuerySymbolEntry symbol, @NotNull String error, @NotNull DBException ex) {\n            // System.out.println(symbol.getName() + \": \" + error + \": \" + ex.toString());\n        }\n\n        @Override\n        public void appendError(@NotNull SQLQuerySymbolEntry symbol, @NotNull String error) {\n            // System.out.println(symbol.getName() + \": \" + error);\n        }\n\n        @Override\n        public void appendError(@NotNull STMTreeNode treeNode, @NotNull String error) {\n            // TODO generate problem markers\n        }\n    }\n\n    @NotNull\n    private SQLQueryModelContent collectUpdateStatement(@NotNull STMTreeNode node) {\n        STMTreeNode targetTableNode = node.findChildOfName(STMKnownRuleNames.tableReference);\n        SQLQueryRowsSourceModel targetSet = targetTableNode == null ? null : this.collectQueryExpression(targetTableNode);\n        \n        List<SQLQueryTableUpdateSetClauseModel> setClauseList = new ArrayList<>();\n        STMTreeNode setClauseListNode = node.findChildOfName(STMKnownRuleNames.setClauseList);\n        if (setClauseListNode != null) {\n            for (int i = 0; i < setClauseListNode.getChildCount(); i += 2) {\n                STMTreeNode setClauseNode = setClauseListNode.getStmChild(i);\n                if (setClauseNode.getChildCount() > 0) {\n                    STMTreeNode setTargetNode = setClauseNode.getStmChild(0);\n                    List<SQLQueryValueExpression> targets = switch (setTargetNode.getNodeKindId()) {\n                        case SQLStandardParser.RULE_setTarget -> List.of(this.collectKnownValueExpression(setTargetNode.getStmChild(0)));\n                        case SQLStandardParser.RULE_setTargetList -> \n                            STMUtils.expandSubtree(\n                                setTargetNode,\n                                Set.of(STMKnownRuleNames.setTargetList),\n                                Set.of(STMKnownRuleNames.valueReference)\n                            ).stream().map(this::collectValueExpression).collect(Collectors.toList());\n                        case SQLStandardParser.RULE_anyUnexpected -> \n                            // error in query text, ignoring it\n                            Collections.emptyList();\n                        default -> throw new UnsupportedOperationException(\n                            \"Set target list expected while facing with \" + setTargetNode.getNodeName()\n                        );\n                    };\n                    List<SQLQueryValueExpression> sources = setClauseNode.getChildCount() < 3\n                        ? Collections.emptyList()\n                        : STMUtils.expandSubtree(\n                            setClauseNode.getStmChild(2),\n                            Set.of(STMKnownRuleNames.updateSource),\n                            Set.of(STMKnownRuleNames.updateValue)\n                        ).stream().map(v -> this.collectValueExpression(v.getStmChild(0))).collect(Collectors.toList());\n                    setClauseList.add(\n                        new SQLQueryTableUpdateSetClauseModel(\n                            setClauseNode,\n                            targets,\n                            sources,\n                            setClauseNode.getTextContent()\n                        )\n                    );\n                }\n            }\n        }\n        \n        STMTreeNode fromClauseNode = node.findChildOfName(STMKnownRuleNames.fromClause);\n        SQLQueryRowsSourceModel sourceSet = fromClauseNode == null ? null : this.collectQueryExpression(fromClauseNode);\n        \n        STMTreeNode whereClauseNode = node.findChildOfName(STMKnownRuleNames.whereClause);\n        SQLQueryValueExpression whereClauseExpr = whereClauseNode == null ? null : this.collectValueExpression(whereClauseNode);\n        \n        STMTreeNode orderByClauseNode = node.findChildOfName(STMKnownRuleNames.orderByClause);\n        SQLQueryValueExpression orderByExpr = orderByClauseNode == null ? null : this.collectValueExpression(orderByClauseNode);\n        \n        return new SQLQueryTableUpdateModel(node, targetSet, setClauseList, sourceSet, whereClauseExpr, orderByExpr);\n    }\n\n    @NotNull\n    private SQLQueryModelContent collectInsertStatement(@NotNull STMTreeNode node) {\n        STMTreeNode tableNameNode = node.findChildOfName(STMKnownRuleNames.tableName);\n        SQLQueryRowsTableDataModel tableModel = tableNameNode == null ? null : this.collectTableReference(tableNameNode);\n\n        List<SQLQuerySymbolEntry> columnNames;\n        SQLQueryRowsSourceModel valuesRows;\n        \n        STMTreeNode insertColumnsAndSource = node.findChildOfName(STMKnownRuleNames.insertColumnsAndSource);\n        if (insertColumnsAndSource != null) {\n            STMTreeNode insertColumnList = insertColumnsAndSource.findChildOfName(STMKnownRuleNames.insertColumnList);\n            columnNames = insertColumnList == null ? null : this.collectColumnNameList(insertColumnList);\n            \n            STMTreeNode valuesNode = insertColumnsAndSource.findChildOfName(STMKnownRuleNames.queryExpression);\n            valuesRows = valuesNode == null ? null : this.collectQueryExpression(valuesNode);\n        } else {\n            columnNames = Collections.emptyList();\n            valuesRows = null; // use default table? \n        }\n        \n        return new SQLQueryTableInsertModel(node, tableModel, columnNames, valuesRows);        \n    }\n\n    @NotNull\n    private SQLQueryModelContent collectDeleteStatement(@NotNull STMTreeNode node) {\n        STMTreeNode tableNameNode = node.findChildOfName(STMKnownRuleNames.tableName);\n        SQLQueryRowsTableDataModel tableModel = tableNameNode == null ? null : this.collectTableReference(tableNameNode);\n        \n        STMTreeNode aliasNode = node.findChildOfName(STMKnownRuleNames.correlationName);\n        SQLQuerySymbolEntry alias = aliasNode == null ? null : this.collectIdentifier(aliasNode);\n        \n        STMTreeNode whereClauseNode = node.findChildOfName(STMKnownRuleNames.whereClause);\n        SQLQueryValueExpression whereClauseExpr = whereClauseNode == null ? null : this.collectValueExpression(whereClauseNode);\n        \n        return new SQLQueryTableDeleteModel(node, tableModel, alias, whereClauseExpr);\n    }\n\n    @NotNull\n    private SQLQueryRowsSourceModel collectQueryExpression(@NotNull STMTreeNode tree) {\n        QueryExpressionMapper queryMapper = new QueryExpressionMapper(this);\n        return queryMapper.translate(tree);\n    }\n\n    @NotNull\n    private static final Set<String> columnNameListWrapperNames = Set.of(\n        STMKnownRuleNames.correspondingSpec,\n        STMKnownRuleNames.referencedTableAndColumns,\n        STMKnownRuleNames.correlationSpecification,\n        STMKnownRuleNames.nonjoinedTableReference,\n        STMKnownRuleNames.namedColumnsJoin,\n        STMKnownRuleNames.joinSpecification,\n        STMKnownRuleNames.naturalJoinTerm,\n        STMKnownRuleNames.unionTerm,\n        STMKnownRuleNames.exceptTerm,\n        STMKnownRuleNames.intersectTerm,\n        STMKnownRuleNames.uniqueConstraintDefinition,\n        STMKnownRuleNames.viewDefinition,\n        STMKnownRuleNames.insertColumnsAndSource,\n\n        STMKnownRuleNames.referenceColumnList,\n        STMKnownRuleNames.referencingColumns,\n        STMKnownRuleNames.derivedColumnList,\n        STMKnownRuleNames.joinColumnList,\n        STMKnownRuleNames.correspondingColumnList,\n        STMKnownRuleNames.uniqueColumnList,\n        STMKnownRuleNames.viewColumnList,\n        STMKnownRuleNames.insertColumnList\n    );\n\n    @NotNull\n    private List<SQLQuerySymbolEntry> collectColumnNameList(@NotNull STMTreeNode node) {\n        if (!node.getNodeName().equals(STMKnownRuleNames.columnNameList)) {\n            if (!columnNameListWrapperNames.contains(node.getNodeName())) {\n                throw new UnsupportedOperationException(\"columnNameList (or its wrapper) expected while facing with \" + node.getNodeName());\n            }\n            \n            List<STMTreeNode> actual = STMUtils.expandSubtree(node, columnNameListWrapperNames, Set.of(STMKnownRuleNames.columnNameList));\n            switch (actual.size()) {\n                case 0 -> {\n                    return Collections.emptyList();\n                }\n                case 1 -> {\n                    node = actual.get(0);\n                }\n                default -> throw new UnsupportedOperationException(\"Ambiguous columnNameList collection at \" + node.getNodeName());\n            }\n        }\n        \n        List<SQLQuerySymbolEntry> result = new ArrayList<>(node.getChildCount());\n        for (int i = 0; i < node.getChildCount(); i += 2) {\n            result.add(collectIdentifier(node.getStmChild(i)));\n        }\n        return result;\n    }\n\n    private static final Set<String> identifierDirectWrapperNames = Set.of(\n        STMKnownRuleNames.unqualifiedSchemaName,\n        STMKnownRuleNames.catalogName,\n        STMKnownRuleNames.correlationName,\n        STMKnownRuleNames.authorizationIdentifier,\n        STMKnownRuleNames.columnName,\n        STMKnownRuleNames.queryName\n    );\n    \n    @NotNull\n    private SQLQuerySymbolEntry collectIdentifier(@NotNull STMTreeNode node) {\n        return collectIdentifier(node, false);\n    }\n    \n    @NotNull\n    private SQLQuerySymbolEntry collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted) {\n        // TODO refactor out all recognition-related exceptions, consider error node everywhere in parse tree and don't introduce unnecessary model nodes\n        STMTreeNode actual = identifierDirectWrapperNames.contains(node.getNodeName()) ? node.getStmChild(0) : node;\n        if (!actual.getNodeName().equals(STMKnownRuleNames.identifier)) {\n            throw new UnsupportedOperationException(\"identifier expected while facing with \" + node.getNodeName());\n        }\n        STMTreeNode actualIdentifier = actual.findChildOfName(STMKnownRuleNames.actualIdentifier);\n        if (actualIdentifier == null) {\n            SQLQuerySymbolEntry entry = this.registerSymbolEntry(actual, actual.getTextContent(), actual.getTextContent());\n            entry.getSymbol().setSymbolClass(SQLQuerySymbolClass.ERROR);\n            return entry;\n        } else {\n            STMTreeNode actualBody = actualIdentifier.getStmChild(0);\n            String rawIdentifierString = actualBody.getTextContent();\n            if (actualBody.getPayload() instanceof Token t && t.getType() == SQLStandardLexer.Quotted) {\n                SQLQuerySymbolEntry entry = this.registerSymbolEntry(actualBody, rawIdentifierString, rawIdentifierString);\n                // not canonicalizing the identifier because it is quoted,\n                // but the QUOTED class will be assigned later after db entity resolution fail\n                // entry.getSymbol().setSymbolClass(SQLQuerySymbolClass.QUOTED);\n                return entry;\n            } else if (this.reservedWords.contains(rawIdentifierString.toUpperCase())) { // keywords are uppercased in dialect\n                SQLQuerySymbolEntry entry = this.registerSymbolEntry(actualBody, rawIdentifierString, rawIdentifierString);\n                entry.getSymbol().setSymbolClass(SQLQuerySymbolClass.RESERVED);\n                return entry;\n            } else {\n                String actualIdentifierString = SQLUtils.identifierToCanonicalForm(dialect, rawIdentifierString, forceUnquotted, false);\n                return this.registerSymbolEntry(actualBody, actualIdentifierString, rawIdentifierString);\n            }\n        }\n    }\n\n    @NotNull\n    private SQLQuerySymbolEntry registerSymbolEntry(\n        @NotNull STMTreeNode syntaxNode,\n        @NotNull String name,\n        @NotNull String rawName\n    ) {\n        SQLQuerySymbolEntry entry = new SQLQuerySymbolEntry(syntaxNode, name, rawName);\n        this.symbolEntries.add(entry);\n        this.registerScopeItem(entry);\n        return entry;\n    }\n\n    private static final Set<String> tableNameContainers = Set.of(\n        STMKnownRuleNames.referencedTableAndColumns,\n        STMKnownRuleNames.qualifier,\n        STMKnownRuleNames.nonjoinedTableReference,\n        STMKnownRuleNames.explicitTable,\n        STMKnownRuleNames.tableDefinition,\n        STMKnownRuleNames.viewDefinition,\n        STMKnownRuleNames.alterTableStatement,\n        STMKnownRuleNames.dropTableStatement,\n        STMKnownRuleNames.dropViewStatement,\n        STMKnownRuleNames.deleteStatement,\n        STMKnownRuleNames.insertStatement,\n        STMKnownRuleNames.updateStatement,\n        STMKnownRuleNames.correlationSpecification\n    ); \n    \n    private static final Set<String> actualTableNameContainers = Set.of(\n        STMKnownRuleNames.tableName, \n        STMKnownRuleNames.correlationName\n    );\n\n    @NotNull\n    private SQLQueryRowsTableDataModel collectTableReference(@NotNull STMTreeNode node) {\n        return new SQLQueryRowsTableDataModel(node, collectTableName(node));\n    }\n\n    @Nullable\n    private SQLQueryQualifiedName collectTableName(@NotNull STMTreeNode node) {\n        return this.collectTableName(node, false);\n    }\n\n    @Nullable\n    private SQLQueryQualifiedName collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted) {\n        List<STMTreeNode> actual = STMUtils.expandSubtree(node, tableNameContainers, actualTableNameContainers);\n        return switch (actual.size()) {\n            case 0 -> null;\n            case 1 -> {\n                node = actual.get(0);\n                yield node.getNodeName().equals(STMKnownRuleNames.tableName) ? collectQualifiedName(node, forceUnquotted)\n                        : this.registerScopeItem(new SQLQueryQualifiedName(node, collectIdentifier(node, forceUnquotted)));\n            }\n            default -> throw new UnsupportedOperationException(\"Ambiguous tableName collection at \" + node.getNodeName());\n        };\n    }\n    \n    private static final Set<String> qualifiedNameDirectWrapperNames = Set.of(\n        STMKnownRuleNames.tableName,\n        STMKnownRuleNames.constraintName\n    );\n    \n    @NotNull\n    private SQLQueryQualifiedName collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted) { // qualifiedName\n        STMTreeNode entityNameNode = qualifiedNameDirectWrapperNames.contains(node.getNodeName()) ? node.getStmChild(0) : node;\n        if (!entityNameNode.getNodeName().equals(STMKnownRuleNames.qualifiedName)) {\n            throw new UnsupportedOperationException(\"identifier expected while facing with \" + node.getNodeName());\n        }\n        \n        SQLQuerySymbolEntry entityName = collectIdentifier(entityNameNode.getStmChild(entityNameNode.getChildCount() - 1), forceUnquotted);\n        if (entityNameNode.getChildCount() == 1) {\n            return this.registerScopeItem(new SQLQueryQualifiedName(entityNameNode, entityName));\n        } else {\n            STMTreeNode schemaNameNode = entityNameNode.getStmChild(0);\n            SQLQuerySymbolEntry schemaName = collectIdentifier(\n                schemaNameNode.getStmChild(schemaNameNode.getChildCount() - 1),\n                forceUnquotted\n            );\n            if (schemaNameNode.getChildCount() == 1) {\n                return this.registerScopeItem(new SQLQueryQualifiedName(entityNameNode, schemaName, entityName));\n            } else {\n                STMTreeNode catalogNameNode = schemaNameNode.getStmChild(0);\n                SQLQuerySymbolEntry catalogName = collectIdentifier(\n                    catalogNameNode.getStmChild(catalogNameNode.getChildCount() - 1),\n                    forceUnquotted\n                );\n                return this.registerScopeItem(new SQLQueryQualifiedName(entityNameNode, catalogName, schemaName, entityName));\n            }    \n        }\n    }\n    \n    private static final Set<String> knownValueExpressionRootNames = Set.of(\n        STMKnownRuleNames.valueExpression,\n        STMKnownRuleNames.valueExpressionAtom,\n        STMKnownRuleNames.searchCondition,\n        STMKnownRuleNames.havingClause,\n        STMKnownRuleNames.whereClause,\n        STMKnownRuleNames.groupByClause,\n        STMKnownRuleNames.orderByClause,\n        STMKnownRuleNames.rowValueConstructor\n    );\n        \n    private static final Set<String> knownRecognizableValueExpressionNames = Set.of(\n        STMKnownRuleNames.subquery,\n        STMKnownRuleNames.columnReference,\n        STMKnownRuleNames.valueReference,\n        STMKnownRuleNames.variableExpression,\n        STMKnownRuleNames.truthValue,\n        STMKnownRuleNames.unsignedNumericLiteral,\n        STMKnownRuleNames.signedNumericLiteral,\n        STMKnownRuleNames.characterStringLiteral,\n        STMKnownRuleNames.datetimeLiteral,\n        STMKnownRuleNames.columnIndex\n    );\n\n    @NotNull\n    private SQLQueryValueExpression collectValueExpression(@NotNull STMTreeNode node) {\n        if (!knownValueExpressionRootNames.contains(node.getNodeName())) {\n            throw new UnsupportedOperationException(\n                \"Search condition or value expression expected while facing with \" + node.getNodeName()\n            );\n        }\n        \n        if (knownRecognizableValueExpressionNames.contains(node.getNodeName())) {\n            return collectKnownValueExpression(node);\n        } else {\n            try (LexicalScopeHolder sh = this.openScope()) {\n                Stack<STMTreeNode> stack = new Stack<>();\n                Stack<List<SQLQueryValueExpression>> childLists = new Stack<>();\n                stack.add(node);\n                childLists.push(new ArrayList<>(1));\n    \n                while (stack.size() > 0) {\n                    STMTreeNode n = stack.pop();\n                    \n                    if (n != null) {\n                        STMTreeNode rn = n;\n                        while (rn.getChildCount() == 1 && !knownRecognizableValueExpressionNames.contains(rn.getNodeName())) {\n                            rn = getFirstStmChild(rn);\n                        }\n                        if (knownRecognizableValueExpressionNames.contains(rn.getNodeName())\n                            || rn.getNodeName().equals(STMKnownRuleNames.valueExpressionPrimary)\n                        ) {\n                            childLists.peek().add(collectKnownValueExpression(rn));\n                        } else {\n                            stack.push(n);\n                            stack.push(null);\n                            childLists.push(new ArrayList<>(rn.getChildCount()));\n                            for (int i = rn.getChildCount() - 1; i >= 0; i--) {\n                                stack.push(rn.getStmChild(i));\n                            }\n                        }\n                    } else {\n                        // TODO register unexpected pieces in the lexical scope\n                        STMTreeNode content = stack.pop();\n                        List<SQLQueryValueExpression> children = childLists.pop();\n                        if (children.size() > 0) {\n                            SQLQueryValueExpression e = children.size() == 1 && children.get(0) instanceof SQLQueryValueFlattenedExpression c \n                                ? c \n                                : new SQLQueryValueFlattenedExpression(content, children);\n                            childLists.peek().add(e);\n                        }\n                    }\n                }\n                \n                List<SQLQueryValueExpression> roots = childLists.pop();\n                SQLQueryValueExpression result = roots.isEmpty() ?\n                    new SQLQueryValueFlattenedExpression(node, Collections.emptyList()) :\n                    roots.get(0);\n                \n                result.registerLexicalScope(sh.lexicalScope);\n                return result;\n            }\n        }\n    }\n\n    private STMTreeNode getFirstStmChild(STMTreeNode rn) {\n        rn = rn.getStmChild(0);\n        return rn;\n    }\n\n    @NotNull\n    private SQLQueryValueExpression collectKnownValueExpression(@NotNull STMTreeNode node) {\n        return switch (node.getNodeKindId()) {\n            case SQLStandardParser.RULE_subquery -> new SQLQueryValueSubqueryExpression(node, this.collectQueryExpression(node));\n            case SQLStandardParser.RULE_valueReference -> this.collectValueReferenceExpression(node);\n            case SQLStandardParser.RULE_valueExpressionPrimary -> {\n                SQLQueryValueExpression subexpr = this.collectValueExpression(node.getStmChild(0));\n                STMTreeNode castSpecNode = node.findChildOfName(STMKnownRuleNames.valueExpressionCastSpec);\n                if (castSpecNode != null) {\n                    String typeName = castSpecNode.getStmChild(1).getTextContent();\n                    yield new SQLQueryValueTypeCastExpression(node, subexpr, typeName);\n                } else {\n                    yield subexpr;\n                }\n            }\n            case SQLStandardParser.RULE_variableExpression -> {\n                STMTreeNode varExprNode = node.getStmChild(0);\n                if (varExprNode instanceof STMTreeTermNode varExprTermNode) {\n                    String rawName = varExprTermNode.getTextContent();\n                    yield switch (rawName.charAt(0)) {\n                        case '@' -> new SQLQueryValueVariableExpression(\n                            node,\n                            this.registerSymbolEntry(node, rawName.substring(1), rawName),\n                            SQLQueryValueVariableExpression.VariableExpressionKind.BATCH_VARIABLE,\n                            rawName\n                        );\n                        case '$' -> new SQLQueryValueVariableExpression(\n                            node,\n                            this.registerSymbolEntry(node, rawName.substring(2, rawName.length() - 1), rawName),\n                            SQLQueryValueVariableExpression.VariableExpressionKind.CLIENT_VARIABLE,\n                            rawName\n                        );\n                        default -> throw new UnsupportedOperationException(\"Unsupported term variable expression: \" + node.getTextContent());\n                    };\n                } else {\n                    yield switch (varExprNode.getNodeKindId()) {\n                        case SQLStandardParser.RULE_namedParameter ->  {\n                            yield new SQLQueryValueVariableExpression(\n                                node,\n                                this.registerSymbolEntry(node, varExprNode.getStmChild(1).getTextContent(), varExprNode.getTextContent()),\n                                SQLQueryValueVariableExpression.VariableExpressionKind.CLIENT_PARAMETER,\n                                varExprNode.getTextContent()\n                            );\n                        }\n                        case SQLStandardParser.RULE_anonymouseParameter -> {\n                            String mark = varExprNode.getStmChild(0).getTextContent();\n                            this.registerSymbolEntry(node, mark, mark);\n                            yield new SQLQueryValueVariableExpression(\n                                node,\n                                null,\n                                SQLQueryValueVariableExpression.VariableExpressionKind.CLIENT_PARAMETER,\n                                varExprNode.getTextContent()\n                            );\n                        }\n                        default -> throw new UnsupportedOperationException(\"Unsupported variable expression: \" + node.getTextContent());\n                    };\n                }\n            }\n            case SQLStandardParser.RULE_columnIndex -> this.makeValueConstantExpression(node, SQLQueryExprType.NUMERIC);\n            case SQLStandardParser.RULE_truthValue -> this.makeValueConstantExpression(node, SQLQueryExprType.BOOLEAN);\n            case SQLStandardParser.RULE_unsignedNumericLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.NUMERIC);\n            case SQLStandardParser.RULE_signedNumericLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.NUMERIC);\n            case SQLStandardParser.RULE_characterStringLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.STRING);\n            case SQLStandardParser.RULE_datetimeLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.DATETIME);\n            default -> throw new UnsupportedOperationException(\"Unknown expression kind \" + node.getNodeName());\n        };\n    }\n\n    @NotNull\n    private SQLQueryValueExpression makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type) {\n        return new SQLQueryValueConstantExpression(node, node.getTextContent(), type);\n    }\n\n    @NotNull\n    private SQLQueryValueExpression collectValueReferenceExpression(@NotNull STMTreeNode node) {\n        STMTreeNode head = node.getStmChild(0);\n        SQLQueryValueExpression expr = switch (head.getNodeKindId()) {\n            case SQLStandardParser.RULE_columnReference -> {\n                SQLQueryQualifiedName tableName = collectTableName(head.getStmChild(0));\n                STMTreeNode nameNode = head.findChildOfName(STMKnownRuleNames.columnName);\n                if (nameNode != null) {\n                    SQLQuerySymbolEntry columnName = collectIdentifier(nameNode);\n                    yield head.getChildCount() == 1 ? new SQLQueryValueColumnReferenceExpression(head, columnName)\n                      : new SQLQueryValueColumnReferenceExpression(head, tableName, columnName);\n                } else {\n                    yield new SQLQueryValueTupleReferenceExpression(head, tableName);\n                }\n            }\n            case SQLStandardParser.RULE_valueRefNestedExpr -> this.collectValueReferenceExpression(head.getStmChild(1));\n            default -> throw new UnsupportedOperationException(\n                \"Value reference expression expected while facing with \" + head.getNodeName()\n            );\n        };\n        \n        int rangeStart = node.getRealInterval().a;\n        boolean[] slicingFlags = new boolean[node.getChildCount()];\n        for (int i = 1; i < node.getChildCount();) {\n            STMTreeNode step = node.getStmChild(i);\n            Interval range = new Interval(rangeStart, step.getRealInterval().b);\n            expr = switch (step.getNodeKindId()) {\n                case SQLStandardParser.RULE_valueRefIndexingStep -> {\n                    int s = i;\n                    for (; i < node.getChildCount() && step.getNodeKindId() == SQLStandardParser.RULE_valueRefIndexingStep; i++) {\n                        step = node.getStmChild(i);\n                        slicingFlags[i] = step.getStmChild(1).getNodeKindId() == SQLStandardParser.RULE_valueRefIndexingStepSlice;\n                    }\n                    boolean[] slicingSpec = Arrays.copyOfRange(slicingFlags, s, i);\n                    yield new SQLQueryValueIndexingExpression(range, node, expr, slicingSpec);\n                }\n                case SQLStandardParser.RULE_valueRefMemberStep -> {\n                    i++;\n                    yield new SQLQueryValueMemberExpression(range, node, expr, this.collectIdentifier(step.getStmChild(1)));\n                }\n                default -> throw new UnsupportedOperationException(\n                    \"Value member expression expected while facing with \" + node.getNodeName()\n                );\n            };\n        }\n        \n        return expr;\n    }\n\n    /**\n     * Set the query symbol class to the quoted identifier, depends on the quote type\n     */\n    @Nullable\n    public static SQLQuerySymbolClass tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    ) {\n        SQLQuerySymbolClass forcedClass = null;\n        boolean isQuotedIdentifier = dialect.isQuotedIdentifier(symbolEntry.getRawName());\n        char quoteChar = symbolEntry.getRawName().charAt(0);\n        if ((!isQuotedIdentifier && (quoteChar == '\"' || quoteChar == '`' || quoteChar == '\\''))\n            || (isQuotedIdentifier && !isColumnResolved)) {\n            forcedClass = switch (quoteChar) {\n                case '\\'' -> SQLQuerySymbolClass.STRING;\n                case '\"', '`' -> SQLQuerySymbolClass.QUOTED;\n                default -> null;\n            };\n        }\n        return forcedClass;\n    }\n\n    private SQLQueryLexicalScope beginScope() {\n        SQLQueryLexicalScope scope = new SQLQueryLexicalScope();\n        this.currentLexicalScopes.addLast(scope);\n        return scope;\n    }\n\n    private void endScope(SQLQueryLexicalScope scope) {\n        if (this.currentLexicalScopes.peekLast() != scope) {\n            throw new IllegalStateException();\n        }\n        this.currentLexicalScopes.removeLast();\n    }\n    \n    private <T extends SQLQueryLexicalScopeItem> T registerScopeItem(T item) {\n        SQLQueryLexicalScope scope = this.currentLexicalScopes.peekLast();\n        if (scope != null) {\n            scope.registerItem(item);\n        }\n        return item;\n    }\n    \n    private class LexicalScopeHolder implements AutoCloseable {\n\n        public final SQLQueryLexicalScope lexicalScope;\n        \n        public LexicalScopeHolder(SQLQueryLexicalScope scope) {\n            this.lexicalScope = scope;\n        }\n\n        @Override\n        public void close() {\n            SQLQueryModelRecognizer.this.endScope(this.lexicalScope);   \n        }\n    }\n    \n    private LexicalScopeHolder openScope() {\n        return new LexicalScopeHolder(this.beginScope());\n    }\n\n    @FunctionalInterface\n    private interface TreeMapperCallback<T, C> {\n        T apply(STMTreeNode node, List<T> children, C context);\n    }\n\n    private static class TreeMapper<T, C> {\n        private interface MapperFrame {\n            void doWork();\n        }\n\n        private interface MapperResultFrame<T> extends MapperFrame {\n            void aggregate(@NotNull T result);\n        }\n\n        private abstract class MapperNodeFrame implements MapperFrame {\n            @NotNull\n            public final STMTreeNode node;\n            @NotNull\n            public final MapperResultFrame<T> parent;\n\n            public MapperNodeFrame(@NotNull STMTreeNode node, @NotNull MapperResultFrame<T> parent) {\n                this.node = node;\n                this.parent = parent;\n            }\n        }\n\n        private class MapperQueuedNodeFrame extends MapperNodeFrame {\n\n            public MapperQueuedNodeFrame(@NotNull STMTreeNode node, @NotNull MapperResultFrame<T> parent) {\n                super(node, parent);\n            }\n\n            @Override\n            public void doWork() {\n                TreeMapperCallback<T, C> translation = translations.get(node.getNodeName());\n                MapperResultFrame<T> aggregator = translation == null ? parent : new MapperDataPendingNodeFrame(node, parent, translation);\n\n                if (translation != null) {\n                    stack.push(aggregator);\n                }\n                for (int i = node.getChildCount() - 1; i >= 0; i--) {\n                    if (transparentNodeNames.contains(node.getNodeName())) {\n                        stack.push(new MapperQueuedNodeFrame((STMTreeNode) node.getChild(i), aggregator));\n                    }\n                }\n            }\n        }\n\n        private class MapperDataPendingNodeFrame extends MapperNodeFrame implements MapperResultFrame<T> {\n            @NotNull\n            public final List<T> childrenData = new LinkedList<>();\n            @NotNull\n            public final TreeMapperCallback<T, C> translation;\n\n            public MapperDataPendingNodeFrame(\n                @NotNull STMTreeNode node,\n                @NotNull MapperResultFrame<T> parent,\n                @NotNull TreeMapperCallback<T, C> translation\n            ) {\n                super(node, parent);\n                this.translation = translation;\n            }\n\n            @Override\n            public void aggregate(@NotNull T result) {\n                this.childrenData.add(result);\n            }\n\n            @Override\n            public void doWork() {\n                this.parent.aggregate(this.translation.apply(this.node, this.childrenData, TreeMapper.this.context));\n            }\n        }\n\n        private class MapperRootFrame implements MapperResultFrame<T> {\n            @NotNull\n            public final STMTreeNode node;\n            @Nullable\n            public T result = null;\n\n            public MapperRootFrame(@NotNull STMTreeNode node) {\n                this.node = node;\n            }\n\n            @Override\n            public void aggregate(@NotNull T result) {\n                this.result = result;\n            }\n\n            @Override\n            public void doWork() {\n                stack.push(new MapperQueuedNodeFrame(node, this));\n            }\n        }\n\n        @NotNull\n        private final Class<T> mappingResultType;\n        @NotNull\n        private final Set<String> transparentNodeNames;\n        @NotNull\n        private final Map<String, TreeMapperCallback<T, C>> translations;\n        @NotNull\n        private final Stack<MapperFrame> stack = new Stack<>();\n        @NotNull\n        private final C context;\n\n        public TreeMapper(\n            @NotNull Class<T> mappingResultType,\n            @NotNull Set<String> transparentNodeNames,\n            @NotNull Map<String, TreeMapperCallback<T, C>> translations,\n            @NotNull C context\n        ) {\n            this.mappingResultType = mappingResultType;\n            this.transparentNodeNames = transparentNodeNames;\n            this.translations = translations;\n            this.context = context;\n        }\n\n        @NotNull\n        public T translate(@NotNull STMTreeNode root) {\n            MapperRootFrame rootFrame = new MapperRootFrame(root);\n            stack.push(rootFrame);\n            while (stack.size() > 0) {\n                stack.pop().doWork();\n            }\n            return rootFrame.result;\n        }\n    }\n\n    private static class QueryExpressionMapper extends TreeMapper<SQLQueryRowsSourceModel, SQLQueryModelRecognizer> {\n        @NotNull\n        private static final Set<String> queryExpressionSubtreeNodeNames = Set.of(\n            STMKnownRuleNames.sqlQuery,\n            STMKnownRuleNames.directSqlDataStatement,\n            STMKnownRuleNames.selectStatement,\n            STMKnownRuleNames.withClause,\n            STMKnownRuleNames.cteList,\n            STMKnownRuleNames.with_list_element,\n            STMKnownRuleNames.subquery,\n            STMKnownRuleNames.unionTerm,\n            STMKnownRuleNames.exceptTerm,\n            STMKnownRuleNames.nonJoinQueryExpression,\n            STMKnownRuleNames.nonJoinQueryTerm,\n            STMKnownRuleNames.intersectTerm,\n            STMKnownRuleNames.nonJoinQueryPrimary,\n            STMKnownRuleNames.simpleTable,\n            STMKnownRuleNames.querySpecification,\n            STMKnownRuleNames.tableExpression,\n            STMKnownRuleNames.queryPrimary,\n            STMKnownRuleNames.queryTerm,\n            STMKnownRuleNames.queryExpression,\n            STMKnownRuleNames.selectStatementSingleRow,\n            STMKnownRuleNames.fromClause,\n            STMKnownRuleNames.nonjoinedTableReference,\n            STMKnownRuleNames.tableReference,\n            STMKnownRuleNames.joinedTable,\n            STMKnownRuleNames.derivedTable,\n            STMKnownRuleNames.tableSubquery,\n            STMKnownRuleNames.crossJoinTerm,\n            STMKnownRuleNames.naturalJoinTerm,\n            STMKnownRuleNames.explicitTable\n        );\n\n        @NotNull\n        private static final Map<String, TreeMapperCallback<SQLQueryRowsSourceModel, SQLQueryModelRecognizer>> translations = Map.ofEntries(\n            Map.entry(STMKnownRuleNames.directSqlDataStatement, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return null;\n                } else if (cc.size() == 1) {\n                    return cc.get(0);\n                } else {\n                    List<SQLQueryRowsSourceModel> subqueries = cc.subList(0, cc.size() - 1);\n                    SQLQueryRowsSourceModel resultQuery = cc.get(cc.size() - 1);\n\n                    STMTreeNode withNode = n.findChildOfName(STMKnownRuleNames.withClause);\n                    boolean isRecursive = withNode.getChildCount() > 2; // is RECURSIVE keyword presented\n\n                    SQLQueryRowsCteModel cte = new SQLQueryRowsCteModel(n, isRecursive, resultQuery);\n\n                    STMTreeNode cteListNode = withNode.getStmChild(withNode.getChildCount() - 1);\n                    for (int i = 0, j = 0; i < cteListNode.getChildCount() && j < subqueries.size(); i += 2, j++) {\n                        STMTreeNode cteSubqueryNode = cteListNode.getStmChild(i);\n\n                        SQLQuerySymbolEntry subqueryName = r.collectIdentifier(cteSubqueryNode.getStmChild(0));\n\n                        STMTreeNode columnListNode = cteSubqueryNode.findChildOfName(STMKnownRuleNames.columnNameList);\n                        List<SQLQuerySymbolEntry> columnList = columnListNode != null ? r.collectColumnNameList(columnListNode) : List.of();\n\n                        SQLQueryRowsSourceModel subquerySource = subqueries.get(j);\n                        cte.addSubquery(cteSubqueryNode, subqueryName, columnList, subquerySource);\n                    }\n\n                    return cte;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.queryExpression, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        STMTreeNode childNode = n.getStmChild(i);\n                        List<SQLQuerySymbolEntry> corresponding = r.collectColumnNameList(childNode);\n                        SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        SQLQueryRowsSetCorrespondingOperationKind opKind = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_exceptTerm -> SQLQueryRowsSetCorrespondingOperationKind.EXCEPT;\n                            case SQLStandardParser.RULE_unionTerm -> SQLQueryRowsSetCorrespondingOperationKind.UNION;\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at queryExpression\");\n                        };\n                        source = new SQLQueryRowsSetCorrespondingOperationModel(range, childNode, source, nextSource, corresponding, opKind);\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.nonJoinQueryTerm, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        STMTreeNode childNode = n.getStmChild(i);\n                        List<SQLQuerySymbolEntry> corresponding = r.collectColumnNameList(childNode);\n                        SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        SQLQueryRowsSetCorrespondingOperationKind opKind = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_intersectTerm -> SQLQueryRowsSetCorrespondingOperationKind.INTERSECT;\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at nonJoinQueryTerm\");\n                        };\n                        source = new SQLQueryRowsSetCorrespondingOperationModel(range, childNode, source, nextSource, corresponding, opKind);\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.joinedTable, (n, cc, r) -> {\n                // joinedTable: (nonjoinedTableReference|(LeftParen joinedTable RightParen)) (naturalJoinTerm|crossJoinTerm)+;\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        final SQLQueryRowsSourceModel currSource = source;\n                        final SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        // TODO see second case of the first source if parens are correctly ignored here\n                        STMTreeNode childNode = n.getStmChild(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        source = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_naturalJoinTerm ->\n                                Optional.ofNullable(childNode.findChildOfName(STMKnownRuleNames.joinSpecification))\n                                    .map(cn -> cn.findChildOfName(STMKnownRuleNames.joinCondition))\n                                    .map(cn -> cn.findChildOfName(STMKnownRuleNames.searchCondition))\n                                    .map(r::collectValueExpression)\n                                    .map(e -> new SQLQueryRowsNaturalJoinModel(range, childNode, currSource, nextSource, e))\n                                    .orElseGet(() -> new SQLQueryRowsNaturalJoinModel(range, childNode, currSource, nextSource, r.collectColumnNameList(childNode)));\n                            case SQLStandardParser.RULE_crossJoinTerm -> new SQLQueryRowsCrossJoinModel(range, childNode, currSource, nextSource);\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at queryExpression\");\n                        };\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.fromClause, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        STMTreeNode childNode = n.getStmChild(1 + i * 2);\n                        SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        source = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_tableReference -> new SQLQueryRowsCrossJoinModel(range, childNode, source, nextSource);\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at fromClause\");\n                        };\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.querySpecification, (n, cc, r) -> {\n                STMTreeNode selectListNode = n.findChildOfName(STMKnownRuleNames.selectList);\n                SQLQuerySelectionResultModel resultModel = new SQLQuerySelectionResultModel(\n                    selectListNode, (selectListNode.getChildCount() + 1) / 2\n                );\n\n                SQLQueryLexicalScope selectListScope;\n                try (LexicalScopeHolder selectListScopeHolder = r.openScope()) {\n                    selectListScope = selectListScopeHolder.lexicalScope;\n                    selectListScope.registerSyntaxNode(n.getStmChild(0)); // SELECT keyword\n\n                    for (int i = 0; i < selectListNode.getChildCount(); i += 2) {\n                        STMTreeNode selectSublist = selectListNode.getStmChild(i);\n                        if (selectSublist.getChildCount() > 0) {\n                            STMTreeNode sublistNode = selectSublist.getStmChild(0);\n                            if (sublistNode != null) {\n                                switch (sublistNode.getNodeKindId()) { // selectSublist: (Asterisk|derivedColumn|qualifier Period Asterisk\n                                    case SQLStandardParser.RULE_derivedColumn -> {\n                                        // derivedColumn: valueExpression (asClause)?; asClause: (AS)? columnName;\n                                        SQLQueryValueExpression expr = r.collectValueExpression(sublistNode.getStmChild(0));\n                                        if (expr instanceof SQLQueryValueTupleReferenceExpression tupleRef) {\n                                            resultModel.addTupleSpec(sublistNode, tupleRef);\n                                        } else {\n                                            if (sublistNode.getChildCount() > 1) {\n                                                STMTreeNode asClause = sublistNode.getStmChild(1);\n                                                SQLQuerySymbolEntry asColumnName = r.collectIdentifier(\n                                                    asClause.getStmChild(asClause.getChildCount() - 1)\n                                                );\n                                                resultModel.addColumnSpec(sublistNode, expr, asColumnName);\n                                            } else {\n                                                resultModel.addColumnSpec(sublistNode, expr);\n                                            }\n                                        }\n                                    }\n                                    case SQLStandardParser.RULE_anyUnexpected -> {\n                                        // TODO register these pieces in the lexical scope\n                                        // error in query text, ignoring it\n                                    }\n                                    default -> {\n                                        resultModel.addCompleteTupleSpec(sublistNode);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                SQLQueryRowsSourceModel source = cc.isEmpty() ? r.queryDataContext.getDefaultTable(n) : cc.get(0);\n                STMTreeNode tableExpr = n.findChildOfName(STMKnownRuleNames.tableExpression);\n                SQLQueryRowsProjectionModel projectionModel;\n                if (tableExpr != null) {\n                    selectListScope.registerSyntaxNode(tableExpr.getStmChild(0)); // FROM keyword\n                    SQLQueryValueExpression whereExpr = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.whereClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    SQLQueryValueExpression havingClause = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.havingClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    SQLQueryValueExpression groupByClause = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.groupByClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    SQLQueryValueExpression orderByClause = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.orderByClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    projectionModel = new SQLQueryRowsProjectionModel(n, selectListScope, source, resultModel, whereExpr, havingClause, groupByClause, orderByClause);\n                } else {\n                    projectionModel = new SQLQueryRowsProjectionModel(n, selectListScope, source, resultModel);\n                }\n                return projectionModel;\n            }),\n            Map.entry(STMKnownRuleNames.nonjoinedTableReference, (n, cc, r) -> {\n                // can they both be missing?\n                SQLQueryRowsSourceModel source;\n                if (cc.isEmpty()) {\n                    STMTreeNode tableNameNode = n.findChildOfName(STMKnownRuleNames.tableName);\n                    if (tableNameNode != null) {\n                        source = r.collectTableReference(tableNameNode);\n                    } else {\n                        source = r.queryDataContext.getDefaultTable(n);\n                    }\n                } else {\n                    source = cc.get(0);\n                }\n                // TODO column reference at PARTITION clause\n                if (n.getChildCount() > 1) {\n                    STMTreeNode lastSubnode = n.getStmChild(n.getChildCount() - 1);\n                    if (lastSubnode.getNodeName().equals(STMKnownRuleNames.correlationSpecification)) {\n                        SQLQuerySymbolEntry correlationName = r.collectIdentifier(\n                            lastSubnode.getStmChild(lastSubnode.getChildCount() == 1 || lastSubnode.getChildCount() == 4 ? 0 : 1)\n                        );\n                        source = new SQLQueryRowsCorrelatedSourceModel(n, source, correlationName, r.collectColumnNameList(lastSubnode));\n                    }\n                }\n                return source;\n            }),\n            Map.entry(STMKnownRuleNames.explicitTable, (n, cc, r) -> r.collectTableReference(n)),\n            Map.entry(STMKnownRuleNames.tableValueConstructor, (n, cc, r) -> {\n                List<SQLQueryValueExpression> values = new ArrayList<>(n.getChildCount() / 2 + 1); // values separated by comma\n                for (int i = 1; i < n.getChildCount(); i += 2) {\n                    values.add(r.collectValueExpression(n.getStmChild(i)));\n                }\n                return new SQLQueryRowsTableValueModel(n, values);\n            })\n        );\n\n        public QueryExpressionMapper(@Nullable SQLQueryModelRecognizer recognizer) {\n            super(SQLQueryRowsSourceModel.class, queryExpressionSubtreeNodeNames, translations, recognizer);\n        }\n    }\n\n\n    /**\n     * A debugging facility\n     */\n    private static class DebugGraphBuilder {\n        private final DirectedGraph graph = new DirectedGraph();\n        private final LinkedList<Pair<Object, Object>> stack = new LinkedList<>();\n        private final Set<Object> done = new HashSet<>();\n        private final Map<Object, DirectedGraph.Node> objs = new HashMap<>();\n\n        private void expandObject(Object prev, Object o) {\n            String propName = prev == null ? null : (String) ((Pair) prev).getFirst();\n            Object src = prev == null ? null : ((Pair) prev).getSecond();\n            if (o instanceof SQLQueryDataContext || o instanceof SQLQueryRowsSourceModel || o instanceof SQLQueryValueExpression) {\n                DirectedGraph.Node node = objs.get(o);\n                DirectedGraph.Node prevNode = objs.get(src);\n                if (node == null) {\n                    var color = o instanceof SQLQueryDataContext ? \"#bbbbff\"\n                        : (o instanceof SQLQueryRowsSourceModel ? \"#bbffbb\"\n                        : (o instanceof SQLQueryValueExpression ? \"#ffbbbb\"\n                        : \"#bbbbbb\"));\n                    node = graph.createNode(o.toString().substring(o.getClass().getPackageName().length()), color);\n                    objs.put(o, node);\n                }\n                if (prevNode != null) {\n                    graph.createEdge(prevNode, node, propName, null);\n                }\n                src = o;\n                propName = \"\";\n            }\n            if (done.contains(o)) {\n                return;\n            }\n            done.add(o);\n            // System.out.println((prev == null ? \"<NULL>\" : prev.toString()) + \" --> \" + o.toString());\n\n            if (o instanceof String || o.getClass().isPrimitive() || o.getClass().isEnum()) {\n                return;\n            } else if (o instanceof SQLQuerySymbol || o instanceof DBSObject || o instanceof DBCExecutionContext) {\n                // || o instanceof SQLQueryColumnReferenceExpression) {\n                return;\n            } else if (o instanceof Iterable it) {\n//                int index = 0;\n//                for (Object y: it) {\n//                    if (y != null && !done.contains(y)) {\n//                        stack.addLast(new Pair<Object, Object>(new Pair(propName + \"[\" + (index++) + \"]\", src), y));\n//                    }\n//                }\n                return;\n            }\n\n            Class t = o.getClass();\n            while (t != Object.class) {\n                for (Field f : t.getDeclaredFields()) {\n                    try {\n                        if (f.canAccess(o) || f.trySetAccessible()) {\n                            Object x = f.get(o);\n                            if (x != null) {\n                                if (x instanceof String || x.getClass().isEnum()) {\n                                    DirectedGraph.Node prevNode = objs.get(src);\n                                    if (prevNode != null) {\n                                        String text = x.toString().replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\").replace(\"\\\"\", \"&quot;\").replace(\"'\", \"&apos;\").replace(\"\\n\", \"&#10;\");\n//                                            DirectedGraphNode newNode = graph.createNode(text, null);\n//                                            graph.createEdge(prevNode, newNode, propName, null);\n                                        prevNode.label += \"&#10;\" + propName + \".\" + f.getName() + \" = \" + text;\n                                    }\n                                } else if (x instanceof Iterable it) {\n                                    int index = 0;\n                                    for (Object y : it) {\n                                        if (y != null && !done.contains(y)) {\n                                            stack.addLast(new Pair<Object, Object>(new Pair(propName + \"[\" + (index++) + \"]\", src), y));\n                                        }\n                                    }\n                                } else {\n                                    stack.addLast(new Pair(new Pair(propName + \".\" + f.getName(), src), x));\n                                }\n                            }\n                        }\n                    } catch (Throwable e) {\n                    }\n                }\n                t = t.getSuperclass();\n            }\n        }\n\n        public void traverseObjs(Object obj) {\n            stack.addLast(new Pair(null, obj));\n            while (stack.size() > 0) {\n                Pair p = stack.removeLast();\n                this.expandObject(p.getFirst(), p.getSecond());\n            }\n        }\n    }\n\n\n}",
                "methodCount": 50
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 14,
                "candidates": [
                    {
                        "lineStart": 700,
                        "lineEnd": 703,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method makeValueConstantExpression to class SQLQueryDataContext",
                        "description": "Move method makeValueConstantExpression to org.jkiss.dbeaver.model.sql.semantics.context.SQLQueryDataContext\nRationale: The method makeValueConstantExpression() appears to be primarily concerned with constructing a value constant expression from the given STMTreeNode and SQLQueryExprType. SQLQueryDataContext is focused on semantic context query information about entities involved in the semantics model, and it includes methods related to queries and their results. Since SQLQueryDataContext is responsible for handling SQL query details and context, it makes the most sense to move the method there. This method seems to fit naturally within the responsibilities of SQLQueryDataContext, as it deals with SQL query expressions and values, which are part of the overall query context.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 333,
                        "lineEnd": 345,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectDeleteStatement to class STMTreeNode",
                        "description": "Move method collectDeleteStatement to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The collectDeleteStatement method heavily interacts with an instance of STMTreeNode, using it to locate several key components (tableName, alias, whereClause) required for forming an SQL delete statement. This strong dependency suggests that STMTreeNode is a suitable target class since the method is fundamentally about traversal and understanding of a syntax tree node structure, which aligns with the responsibilities of STMTreeNode.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 754,
                        "lineEnd": 775,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "refactoringInfo": "Move Static method tryFallbackSymbolForStringLiteral to class SQLDocumentSyntaxContext",
                        "description": "move method tryFallbackSymbolForStringLiteral to PsiClass:SQLDocumentSyntaxContext\nRationale: The method `tryFallbackSymbolForStringLiteral` involves determining the class of a symbol in the context of a SQL dialect and statement. The SQLDocumentSyntaxContext class is designed to manage the syntax and symbols of SQL documents. Placing this method in SQLDocumentSyntaxContext ensures it is located with other symbol-related functionality and supports the handling of symbol contexts directly.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 627,
                        "lineEnd": 630,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getFirstStmChild to class STMTreeNode",
                        "description": "Move method getFirstStmChild to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method 'getFirstStmChild' works directly with STMTreeNode objects, manipulating and returning them. The logic of retrieving the first child node from an STMTreeNode fits with the functionality typically expected in a node manipulation or tree structure class. Placing it in STMTreeNode ensures that the method is located where the data it operates on resides and is semantically consistent with the operations that STMTreeNode should provide.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 632,
                        "lineEnd": 698,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectKnownValueExpression to class STMTreeNode",
                        "description": "Move method collectKnownValueExpression to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method `collectKnownValueExpression` heavily interacts with the `STMTreeNode` class by accessing its methods and using the information it provides. This suggests that the logic implemented in `collectKnownValueExpression` is closely tied with the structure and data held by `STMTreeNode`. Moving this method to the `STMTreeNode` class will encapsulate the logic that interprets these nodes within the class that defines them, following the principle of cohesion and improving the maintainability of the code.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 494,
                        "lineEnd": 506,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectTableName to class STMTreeNode",
                        "description": "Move method collectTableName to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method `collectTableName` operates directly on `STMTreeNode` instances, utilizing their properties and behavior for the primary functionality. This suggests that the method has high cohesion with `STMTreeNode`, making it an ideal target as it directly manipulates and computes values from instances of this class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 206,
                        "lineEnd": 221,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method prepareDataContext to class DBCExecutionContext",
                        "description": "Move method prepareDataContext to org.jkiss.dbeaver.model.exec.DBCExecutionContext\nRationale: The method prepareDataContext primarily deals with the execution context and the associated data source properties. The logic to determine the type of SQLQueryDataContext is tightly coupled with the execution context attributes, such as the data source and SQL dialect. Thus, moving this method to DBCExecutionContext ensures it is placed within a context that has all the necessary information and fits its purpose.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 310,
                        "lineEnd": 331,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectInsertStatement to class STMTreeNode",
                        "description": "Move method collectInsertStatement to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method collectInsertStatement relies heavily on the structure and content of STMTreeNode to gather relevant pieces of the INSERT statement such as the table name, columns, and values. Since it needs to query different child nodes, it fits neatly within STMTreeNode, making use of its methods for navigating tree nodes and collecting relevant data.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 252,
                        "lineEnd": 308,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectUpdateStatement to class STMTreeNode",
                        "description": "Move method collectUpdateStatement to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The 'collectUpdateStatement' method extensively interacts with the STMTreeNode class by calling various methods like 'findChildOfName', 'getChildCount', 'getStmChild', and 'getTextContent', and traversal operations on the syntax tree. It appears to be gathering SQL-related data from an STMTreeNode which makes it more related to the operations provided by STMTreeNode. Moving it to the STMTreeNode class would consolidate the tree manipulation and data collection logic in a relevant class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 419,
                        "lineEnd": 449,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectIdentifier to class SQLDialect",
                        "description": "Move method collectIdentifier to org.jkiss.dbeaver.model.sql.SQLDialect\nRationale: The method 'collectIdentifier' primarily deals with dialect-specific behaviors such as handling quoted identifiers, reserved words, and canonicalizing identifiers based on SQL standards. It is more closely related to the functionality offered by the SQLDialect class, which is already responsible for various identifier quoting, unquoting, validation methods and keyword handling. Therefore, moving the method to SQLDialect would make it more coherent and centralized with related operations.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 513,
                        "lineEnd": 540,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectQualifiedName to class SQLDialect",
                        "description": "Move method collectQualifiedName to org.jkiss.dbeaver.model.sql.SQLDialect\nRationale: The method `collectQualifiedName` is heavily concerned with constructing SQL qualified names from syntax tree nodes, which involves domain-specific logic related to SQL dialects and the handling of identifiers such as catalogs, schemas, and entities. This function seems to fit well within the responsibilities of the SQLDialect class, which deals with the nuances of SQL syntax and identifiers. Moving this method to SQLDialect ensures that SQL identifier handling and dialect-specific rules are centralized within a class that is designed to manage such concerns.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 165,
                        "lineEnd": 204,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method traverseForIdentifiers to class STMTreeNode",
                        "description": "Move method traverseForIdentifiers to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The traverseForIdentifiers method interacts heavily with the STMTreeNode class. It uses STMTreeNode objects to traverse the syntax tree, collects table names and identifier nodes, and performs actions based on the node kind ID. Since the method is closely tied to the structure and behavior of STMTreeNode, it logically belongs within this class to maintain cohesion and encapsulation.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 379,
                        "lineEnd": 403,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectColumnNameList to class STMTreeNode",
                        "description": "Move method collectColumnNameList to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method `collectColumnNameList` heavily utilizes the properties and functions of the `STMTreeNode` class. It processes STM nodes, checks node names, and traverses child nodes, indicating a strong coupling with the tree node structure. Therefore, it is more logical and cohesive to move this method into the `STMTreeNode` class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 705,
                        "lineEnd": 752,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectValueReferenceExpression to class STMTreeNode",
                        "description": "Move method collectValueReferenceExpression to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method 'collectValueReferenceExpression' relies heavily on methods and interactions with STMTreeNode instances, such as 'getStmChild', 'getNodeKindId', and 'findChildOfName'. This strong coupling suggests that STMTreeNode is a more appropriate home for the method, as moving it there would keep related logic encapsulated within the class that directly deals with the syntax tree nodes.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    }
                ]
            },
            "elapsedTime": [
                {
                    "candidateIndex": 0,
                    "elapsedTime": 35712
                },
                {
                    "candidateIndex": 3,
                    "elapsedTime": 9058
                }
            ],
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 148335
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "prepareDataContext",
                            "method_signature": "private SQLQueryDataContext prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "SQLQueryDataContext",
                            "rationale": "The prepareDataContext method initializes an instance of SQLQueryDataContext. It involves processing metadata and symbol entries, which are more related to data context management rather than the core functionality of SQLQueryModelRecognizer."
                        },
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "public static SQLQuerySymbolClass tryFallbackSymbolForStringLiteral(@NotNull SQLDialect dialect, @NotNull SQLQuerySymbolEntry symbolEntry, boolean isColumnResolved)",
                            "target_class": "SQLQuerySymbolEntry",
                            "rationale": "The tryFallbackSymbolForStringLiteral method determines a fallback symbol class for a string literal, which seems more related to the properties of the SQLQuerySymbolEntry class."
                        },
                        {
                            "method_name": "calculateDiscount",
                            "method_signature": "public double calculateDiscount(double amount)",
                            "target_class": "Customer",
                            "rationale": "This method should be moved to the Customer class because it depends on the Customer's properties like loyalty points and membership level to calculate the discount."
                        }
                    ],
                    "llm_response_time": 6442
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "public static SQLQuerySymbolClass tryFallbackSymbolForStringLiteral(SQLDialect dialect, SQLQuerySymbolEntry symbolEntry, boolean isColumnResolved)",
                            "target_class": "SQLDialect",
                            "rationale": "This method primarily deals with distinguishing quoted string literals and it relies on the functionality provided by the SQLDialect class. It would be more appropriate for SQLDialect to directly handle this logic."
                        },
                        {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "private SQLQueryModelContent collectDeleteStatement(STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "The logic for collecting and processing SQL delete statements is self-contained and focused on transforming data from the STMTreeNode object. Moving this to SQLQueryStatementCollector would encapsulate the statement parsing logic within a specific handler."
                        },
                        {
                            "method_name": "collectInsertStatement",
                            "method_signature": "private SQLQueryModelContent collectInsertStatement(STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "This method is responsible for collecting and processing SQL insert statements. Grouping such logic within a specific class like SQLQueryStatementCollector will improve separation of concerns."
                        },
                        {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "private SQLQueryModelContent collectUpdateStatement(STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "Similar to the other collect methods, this method is focused on update statements and should be moved to a dedicated SQLQueryStatementCollector class to maintain and encapsulate the statement-specific parsing logic."
                        }
                    ],
                    "llm_response_time": 6362
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull private SQLQueryModelContent collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "This method deals specifically with collecting and organizing insert statement data, which is a specialized function and can be encapsulated in a dedicated class."
                        },
                        {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull private SQLQueryModelContent collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "This method focuses on updating statement collection, making it better suited for a specialized class that handles various SQL statement collections."
                        },
                        {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull private SQLQueryModelContent collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "This method is specifically related to delete statement operations and would fit into a class designed for collecting SQL statements."
                        },
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable public static SQLQuerySymbolClass tryFallbackSymbolForStringLiteral(@NotNull SQLDialect dialect, @NotNull SQLQuerySymbolEntry symbolEntry, boolean isColumnResolved)",
                            "target_class": "SQLQuerySymbolUtils",
                            "rationale": "This method provides utility functionality for symbols and should be placed in a dedicated utility class for symbol processing."
                        }
                    ],
                    "llm_response_time": 9310
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "recognizeQuery",
                            "method_signature": "@Nullable\n    public recognizeQuery(@NotNull String text, @NotNull DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectIdentifier",
                            "method_signature": "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectValueExpression",
                            "method_signature": "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode rn)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                },
                {
                    "iteration_num": -2,
                    "suggested_move_methods": [
                        {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode rn)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectIdentifier",
                            "method_signature": "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "methodCompatibilityScores": {
                "tf-idf": {
                    "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)": {
                        "first": {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4271155221497714
                    },
                    "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5105540655440525
                    },
                    "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )": {
                        "first": {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5246037606198325
                    },
                    "private getFirstStmChild(STMTreeNode rn)": {
                        "first": {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode rn)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5644450836397432
                    },
                    "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6066144417950481
                    },
                    "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6131368156444623
                    },
                    "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)": {
                        "first": {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6203932097980459
                    },
                    "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6639437081683724
                    },
                    "private expandObject(Object prev, Object o)": {
                        "first": {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7029336756798968
                    },
                    "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7148869849557857
                    },
                    "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectIdentifier",
                            "method_signature": "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7153890089155553
                    },
                    "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.722397951374247
                    },
                    "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )": {
                        "first": {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7927944320966132
                    },
                    "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7956984194969683
                    },
                    "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.8199562423193436
                    }
                },
                "voyage": {
                    "private getFirstStmChild(STMTreeNode rn)": {
                        "first": {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode rn)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.2849201522209874
                    },
                    "private expandObject(Object prev, Object o)": {
                        "first": {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4250265854484595
                    },
                    "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )": {
                        "first": {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4756460191236282
                    },
                    "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)": {
                        "first": {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5240819728859807
                    },
                    "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5498822522175598
                    },
                    "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.565664673032858
                    },
                    "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5787131027175457
                    },
                    "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.585677611561284
                    },
                    "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5935087095053951
                    },
                    "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5997704331691001
                    },
                    "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )": {
                        "first": {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6017473591484823
                    },
                    "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6033492969346638
                    },
                    "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)": {
                        "first": {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6112756726043628
                    },
                    "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6122818006250085
                    },
                    "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectValueExpression",
                            "method_signature": "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6135132819447038
                    }
                }
            },
            "llmMethodPriority": {
                "tf-idf": {
                    "priority_method_names": [
                        "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                        "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                        "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "private expandObject(Object prev, Object o)",
                        "private getFirstStmChild(STMTreeNode rn)",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)"
                    ],
                    "llm_response_time": 5650
                },
                "tf-idf-5": {
                    "priority_method_names": [
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )"
                    ],
                    "llm_response_time": 4544
                },
                "tf-df-3": {
                    "priority_method_names": [
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)"
                    ],
                    "llm_response_time": 5851
                },
                "voyage": {
                    "priority_method_names": [
                        "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                        "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                        "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                        "private expandObject(Object prev, Object o)",
                        "private getFirstStmChild(STMTreeNode rn)"
                    ],
                    "llm_response_time": 5343
                },
                "voyage-5": {
                    "priority_method_names": [
                        "private expandObject(Object prev, Object o)",
                        "private getFirstStmChild(STMTreeNode rn)"
                    ],
                    "llm_response_time": 6712
                },
                "voyage-3": {
                    "priority_method_names": [
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "private expandObject(Object prev, Object o)",
                        "private getFirstStmChild(STMTreeNode rn)"
                    ],
                    "llm_response_time": 3982
                }
            },
            "targetClassMap": {
                "makeValueConstantExpression": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.2631806779839076
                        },
                        {
                            "class_name": "SQLQueryExprType",
                            "similarity_score": 0.5118367373585836
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.0743941531479294
                        },
                        {
                            "class_name": "SQLSyntaxManager",
                            "similarity_score": 0.4109591322679224
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.10286772265499898
                        },
                        {
                            "class_name": "SQLQueryDataContext",
                            "similarity_score": 0.3281650616569468
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLQueryDataContext",
                        "SQLQueryExprType",
                        "SQLSyntaxManager"
                    ],
                    "llm_response_time": 4444,
                    "similarity_computation_time": 6,
                    "similarity_metric": "cosine"
                },
                "collectDeleteStatement": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.3000021360142686
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.025600783860166777
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.05914804897125342
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 4463,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "tryFallbackSymbolForStringLiteral": {
                    "target_classes": [
                        {
                            "class_name": "SQLFormatUtils",
                            "similarity_score": 0.31468759898332493
                        },
                        {
                            "class_name": "SQLSearchUtils",
                            "similarity_score": 0.4779532841476181
                        },
                        {
                            "class_name": "TextUtils",
                            "similarity_score": 0.48357351377949526
                        },
                        {
                            "class_name": "SQLScriptParser",
                            "similarity_score": 0.5176336253457875
                        },
                        {
                            "class_name": "SQLCompletionHelper",
                            "similarity_score": 0.43347432552700027
                        },
                        {
                            "class_name": "SourceResolutionResult",
                            "similarity_score": 0.31302588469611553
                        },
                        {
                            "class_name": "ScriptParameterRule",
                            "similarity_score": 0.4832822131578749
                        },
                        {
                            "class_name": "SQLCommandSet",
                            "similarity_score": 0.4226342171417697
                        },
                        {
                            "class_name": "ScriptEvaluateEngine",
                            "similarity_score": 0.3628833059855099
                        },
                        {
                            "class_name": "SQLQueryCombinedContext",
                            "similarity_score": 0.2799970469217185
                        },
                        {
                            "class_name": "OffsetKeyedTreeMap",
                            "similarity_score": 0.481000293642848
                        },
                        {
                            "class_name": "SQLQueryRowsCorrelatedSourceModel",
                            "similarity_score": 0.4313462351333261
                        },
                        {
                            "class_name": "SQLQueryValueColumnReferenceExpression",
                            "similarity_score": 0.5009860005315055
                        },
                        {
                            "class_name": "TableReferencesAnalyzerOld",
                            "similarity_score": 0.556382610059841
                        },
                        {
                            "class_name": "SQLModelActivator",
                            "similarity_score": 0.3924710927686601
                        },
                        {
                            "class_name": "SQLQueryDummyDataSourceContext",
                            "similarity_score": 0.3792703875698156
                        },
                        {
                            "class_name": "SQLQuerySymbolEntry",
                            "similarity_score": 0.4808878324641286
                        },
                        {
                            "class_name": "SQLFormatterTokenized",
                            "similarity_score": 0.47459087494230745
                        },
                        {
                            "class_name": "SQLQueryTranslator",
                            "similarity_score": 0.5078752033275429
                        },
                        {
                            "class_name": "SQLDollarQuoteRule",
                            "similarity_score": 0.45196187556917716
                        },
                        {
                            "class_name": "DirectedGraph",
                            "similarity_score": 0.2823476602108527
                        },
                        {
                            "class_name": "DummyTableRowsSource",
                            "similarity_score": 0.3597162208406933
                        },
                        {
                            "class_name": "NumberRule",
                            "similarity_score": 0.4945160895623067
                        },
                        {
                            "class_name": "KnownSourcesInfo",
                            "similarity_score": 0.428270851011971
                        },
                        {
                            "class_name": "ValueAndOffset",
                            "similarity_score": 0.2682778599161782
                        },
                        {
                            "class_name": "SQLDocumentScriptItemSyntaxContext",
                            "similarity_score": 0.4433086464942055
                        },
                        {
                            "class_name": "SQLDocumentSyntaxContext",
                            "similarity_score": 0.5103779493807781
                        },
                        {
                            "class_name": "SQLQueryAliasedRowsContext",
                            "similarity_score": 0.3458600949777427
                        },
                        {
                            "class_name": "SQLQueryCompletionSet",
                            "similarity_score": 0.2854336259862839
                        },
                        {
                            "class_name": "SQLQueryDataSourceContext",
                            "similarity_score": 0.36380502889467065
                        },
                        {
                            "class_name": "SQLQueryLexicalScope",
                            "similarity_score": 0.4842387555249834
                        },
                        {
                            "class_name": "SQLQueryModel",
                            "similarity_score": 0.4389043663020869
                        },
                        {
                            "class_name": "SQLQueryPureResultTupleContext",
                            "similarity_score": 0.33325659302446964
                        },
                        {
                            "class_name": "SQLQueryQualifiedName",
                            "similarity_score": 0.4318855212315904
                        },
                        {
                            "class_name": "SQLQueryResultColumn",
                            "similarity_score": 0.31225525191724984
                        },
                        {
                            "class_name": "SQLQueryResultTupleContext",
                            "similarity_score": 0.4724329565216401
                        },
                        {
                            "class_name": "SQLQueryRowsCrossJoinModel",
                            "similarity_score": 0.2888116563024185
                        },
                        {
                            "class_name": "SQLQueryRowsCteModel",
                            "similarity_score": 0.43354966271815376
                        },
                        {
                            "class_name": "SQLQueryRowsCteSubqueryModel",
                            "similarity_score": 0.3658216758178395
                        },
                        {
                            "class_name": "SQLQueryRowsNaturalJoinModel",
                            "similarity_score": 0.438086428281499
                        },
                        {
                            "class_name": "SQLQueryRowsProjectionModel",
                            "similarity_score": 0.37043231337142063
                        },
                        {
                            "class_name": "SQLQueryRowsSetCorrespondingOperationModel",
                            "similarity_score": 0.49924045711559933
                        },
                        {
                            "class_name": "SQLQueryRowsTableDataModel",
                            "similarity_score": 0.4744694444798072
                        },
                        {
                            "class_name": "SQLQueryRowsTableValueModel",
                            "similarity_score": 0.34019597152521586
                        },
                        {
                            "class_name": "SQLQuerySelectionResultColumnSpec",
                            "similarity_score": 0.43911162304738066
                        },
                        {
                            "class_name": "SQLQuerySelectionResultCompleteTupleSpec",
                            "similarity_score": 0.3128445221846102
                        },
                        {
                            "class_name": "SQLQuerySelectionResultModel",
                            "similarity_score": 0.3970699612255022
                        },
                        {
                            "class_name": "SQLQuerySelectionResultTupleSpec",
                            "similarity_score": 0.37535612471680685
                        },
                        {
                            "class_name": "SQLQuerySymbol",
                            "similarity_score": 0.3977639090810407
                        },
                        {
                            "class_name": "SQLQuerySymbolByDbObjectDefinition",
                            "similarity_score": 0.4099976780745106
                        },
                        {
                            "class_name": "SQLQueryTableDeleteModel",
                            "similarity_score": 0.3933053247287459
                        },
                        {
                            "class_name": "SQLQueryTableInsertModel",
                            "similarity_score": 0.3670571247828084
                        },
                        {
                            "class_name": "SQLQueryTableRowsContext",
                            "similarity_score": 0.30154674611419313
                        },
                        {
                            "class_name": "SQLQueryTableUpdateModel",
                            "similarity_score": 0.3815327059731514
                        },
                        {
                            "class_name": "SQLQueryTableUpdateSetClauseModel",
                            "similarity_score": 0.35472216532031997
                        },
                        {
                            "class_name": "SQLQueryValueConstantExpression",
                            "similarity_score": 0.33931229116482886
                        },
                        {
                            "class_name": "SQLQueryValueFlattenedExpression",
                            "similarity_score": 0.3370395183509921
                        },
                        {
                            "class_name": "SQLQueryValueIndexingExpression",
                            "similarity_score": 0.4025687312766512
                        },
                        {
                            "class_name": "SQLQueryValueMemberExpression",
                            "similarity_score": 0.4252908681185099
                        },
                        {
                            "class_name": "SQLQueryValueSubqueryExpression",
                            "similarity_score": 0.34100010252704327
                        },
                        {
                            "class_name": "SQLQueryValueTupleReferenceExpression",
                            "similarity_score": 0.43114750991231715
                        },
                        {
                            "class_name": "SQLQueryValueTypeCastExpression",
                            "similarity_score": 0.3436008971044584
                        },
                        {
                            "class_name": "SQLQueryValueVariableExpression",
                            "similarity_score": 0.4357337655005131
                        },
                        {
                            "class_name": "SQLScriptItemAtOffset",
                            "similarity_score": 0.27945610407935234
                        },
                        {
                            "class_name": "SQLTokenEntryAtOffset",
                            "similarity_score": 0.3018125924057005
                        },
                        {
                            "class_name": "JDBCDatabaseBackupRegistry",
                            "similarity_score": 0.3891797132949743
                        },
                        {
                            "class_name": "TokenPredicateSet",
                            "similarity_score": 0.42352015997678133
                        },
                        {
                            "class_name": "SQLFormatterConfigurationRegistry",
                            "similarity_score": 0.40418160118967583
                        },
                        {
                            "class_name": "SQLCommandsRegistry",
                            "similarity_score": 0.3878360218280898
                        },
                        {
                            "class_name": "SQLCompletionAnalyzer",
                            "similarity_score": 0.49787227084310887
                        },
                        {
                            "class_name": "SQLQueryParameterRegistry",
                            "similarity_score": 0.3924167906816972
                        },
                        {
                            "class_name": "SQLGeneratorConfigurationRegistry",
                            "similarity_score": 0.4015795566598727
                        },
                        {
                            "class_name": "SQLVariablesRegistry",
                            "similarity_score": 0.42915263082026517
                        },
                        {
                            "class_name": "SQLCompletionProposalBase",
                            "similarity_score": 0.48522434105578494
                        },
                        {
                            "class_name": "ClassLoaderScriptSource",
                            "similarity_score": 0.3311638732600879
                        },
                        {
                            "class_name": "NestedMultiLineRule",
                            "similarity_score": 0.4286282103670292
                        },
                        {
                            "class_name": "HippieCompletionEngine",
                            "similarity_score": 0.4415332774328123
                        },
                        {
                            "class_name": "HippieProposalProcessor",
                            "similarity_score": 0.4270531752283567
                        },
                        {
                            "class_name": "WordRegion",
                            "similarity_score": 0.3638044145581707
                        },
                        {
                            "class_name": "TokenPredicatesCondition",
                            "similarity_score": 0.32984615547544277
                        },
                        {
                            "class_name": "Trie",
                            "similarity_score": 0.49792080586236165
                        },
                        {
                            "class_name": "LineCommentRule",
                            "similarity_score": 0.38224208347974464
                        },
                        {
                            "class_name": "ScriptVariableRule",
                            "similarity_score": 0.43896839555473843
                        },
                        {
                            "class_name": "ScriptVariablesContext",
                            "similarity_score": 0.30210355226542884
                        },
                        {
                            "class_name": "ScriptVariablesResolver",
                            "similarity_score": 0.3129079100358695
                        },
                        {
                            "class_name": "TableReferencesAnalyzerImpl",
                            "similarity_score": 0.47258936423987913
                        },
                        {
                            "class_name": "TableReferencesRules",
                            "similarity_score": 0.2524919810998793
                        },
                        {
                            "class_name": "ParameterInfo",
                            "similarity_score": 0.2682778599161782
                        },
                        {
                            "class_name": "SQLFormatterCompact",
                            "similarity_score": 0.2714985978353252
                        },
                        {
                            "class_name": "SQLFormatterConfiguration",
                            "similarity_score": 0.3727923923575398
                        },
                        {
                            "class_name": "SQLFormatterDescriptor",
                            "similarity_score": 0.31896071137831605
                        },
                        {
                            "class_name": "SQLFormatterExternal",
                            "similarity_score": 0.43495864539562523
                        },
                        {
                            "class_name": "SQLFullLineRule",
                            "similarity_score": 0.32329643887371384
                        },
                        {
                            "class_name": "SQLGeneratorDDL",
                            "similarity_score": 0.3905883539473202
                        },
                        {
                            "class_name": "SQLGeneratorDelete",
                            "similarity_score": 0.35477490034853376
                        },
                        {
                            "class_name": "SQLGeneratorDescriptor",
                            "similarity_score": 0.34923796284721326
                        },
                        {
                            "class_name": "SQLGeneratorInsert",
                            "similarity_score": 0.36885759240273475
                        },
                        {
                            "class_name": "SQLGeneratorJoin",
                            "similarity_score": 0.3588484366437139
                        },
                        {
                            "class_name": "SQLGeneratorMerge",
                            "similarity_score": 0.36856287850303376
                        },
                        {
                            "class_name": "SQLGeneratorProcedureCall",
                            "similarity_score": 0.37814322188325794
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLDocumentSyntaxContext",
                        "SQLScriptParser",
                        "TableReferencesAnalyzerOld"
                    ],
                    "llm_response_time": 5219,
                    "similarity_computation_time": 20,
                    "similarity_metric": "cosine"
                },
                "getFirstStmChild": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.38575837490522974
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.02239184010890476
                        },
                        {
                            "class_name": "SQLSyntaxManager",
                            "similarity_score": 0.5661392028432072
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.0366449914570749
                        },
                        {
                            "class_name": "SQLQueryDataContext",
                            "similarity_score": 0.22988508617818784
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLQueryDataContext",
                        "SQLSyntaxManager"
                    ],
                    "llm_response_time": 5041,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "collectKnownValueExpression": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.3367184714332271
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.03979422041410732
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07412684090375399
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 4482,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectTableName": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.36506224917189917
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.030216093202134617
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07642217401047846
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 4208,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "prepareDataContext": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.42278169969859825
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.049013263036106404
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.06282325612193411
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DBCExecutionContext",
                        "SQLDialect",
                        "STMTreeNode"
                    ],
                    "llm_response_time": 4093,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "collectInsertStatement": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.42529545323561735
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.034539893703973354
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07194178142882926
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 3750,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "expandObject": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 3324,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "collectUpdateStatement": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.4174689344928706
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.03911444844743398
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07414195685478221
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 5011,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "collectIdentifier": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.5558302095712135
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.1015314307958052
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.15459235540222604
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLDialect",
                        "STMTreeNode",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 5189,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "collectQualifiedName": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.48390906014060153
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.0468498310296027
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.09112155389088339
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLDialect",
                        "STMTreeNode",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 5194,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "traverseForIdentifiers": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.5211558275635
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.07554096906205153
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.11011045987232629
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "DBCExecutionContext",
                        "SQLDialect"
                    ],
                    "llm_response_time": 5285,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "collectColumnNameList": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.5239020945575023
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.059374110713714415
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.08044057833087663
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 3337,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectValueReferenceExpression": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.49293583041313577
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.042201837154026804
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07027992567918173
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 4501,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "repository": "https://github.com/dbeaver/dbeaver.git",
        "sha1": "1b9e9b6055181df4e19c4daf4bf898b3b746dddd",
        "url": "https://github.com/dbeaver/dbeaver/commit/1b9e9b6055181df4e19c4daf4bf898b3b746dddd",
        "move_method_refactoring": {
            "type": "Extract And Move Method",
            "description": "Extract And Move Method public getFirstStmChild() : STMTreeNode extracted from private collectValueReferenceExpression(node STMTreeNode) : SQLQueryValueExpression in class org.jkiss.dbeaver.model.sql.semantics.SQLQueryModelRecognizer & moved to class org.jkiss.dbeaver.model.stm.STMTreeNode",
            "leftSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelRecognizer.java",
                    "startLine": 701,
                    "endLine": 748,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration before extraction",
                    "codeElement": "private collectValueReferenceExpression(node STMTreeNode) : SQLQueryValueExpression"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelRecognizer.java",
                    "startLine": 703,
                    "endLine": 703,
                    "startColumn": 9,
                    "endColumn": 48,
                    "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                }
            ],
            "rightSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.lsm/src/org/jkiss/dbeaver/model/stm/STMTreeNode.java",
                    "startLine": 96,
                    "endLine": 98,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "extracted method declaration",
                    "codeElement": "public getFirstStmChild() : STMTreeNode"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.lsm/src/org/jkiss/dbeaver/model/stm/STMTreeNode.java",
                    "startLine": 97,
                    "endLine": 97,
                    "startColumn": 9,
                    "endColumn": 31,
                    "codeElementType": "RETURN_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelContext.java",
                    "startLine": 651,
                    "endLine": 698,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration after extraction",
                    "codeElement": "private collectValueReferenceExpression(node STMTreeNode) : SQLQueryValueExpression"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelContext.java",
                    "startLine": 653,
                    "endLine": 653,
                    "startColumn": 28,
                    "endColumn": 51,
                    "codeElementType": "METHOD_INVOCATION",
                    "description": "extracted method invocation",
                    "codeElement": "node.getFirstStmChild()"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelContext.java",
                    "startLine": 656,
                    "endLine": 656,
                    "startColumn": 68,
                    "endColumn": 91,
                    "codeElementType": "METHOD_INVOCATION",
                    "description": "extracted method invocation",
                    "codeElement": "head.getFirstStmChild()"
                }
            ],
            "isStatic": false
        },
        "ref_id": 904,
        "extraction_results": {
            "success": true,
            "newCommitHash": "18759a0b0ff2efc6d490ee3bd0f71d7990416a6f",
            "newBranchName": "extract-getFirstStmChild-collectValueReferenceExpression-7cd8380"
        },
        "telemetry": {
            "id": "a4b5827e-a12d-4999-a895-cf3830e1e64c",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1244,
                "lineStart": 53,
                "lineEnd": 1296,
                "bodyLineStart": 53,
                "language": "java",
                "filePath": "/Users/abhiram/Documents/TBE/evaluation_projects/dbeaver/plugins/org.jkiss.dbeaver.model.sql/src/org/jkiss/dbeaver/model/sql/semantics/SQLQueryModelRecognizer.java",
                "sourceCode": "/**\n * Responsible for semantics model preparation based on the parsing result\n */\npublic class SQLQueryModelRecognizer {\n\n    private final HashSet<SQLQuerySymbolEntry> symbolEntries = new HashSet<>();\n    \n    private final boolean isReadMetadataForSemanticAnalysis;\n\n    private final DBCExecutionContext executionContext;\n    \n    private final Set<String> reservedWords;\n\n    private final SQLSyntaxManager syntaxManager;\n    private final SQLDialect dialect;\n    \n    private final LinkedList<SQLQueryLexicalScope> currentLexicalScopes = new LinkedList<>();\n\n    private SQLQueryDataContext queryDataContext;\n\n    public SQLQueryModelRecognizer(@Nullable DBCExecutionContext executionContext, boolean isReadMetadataForSemanticAnalysis, @NotNull SQLSyntaxManager syntaxManager) {\n        this.isReadMetadataForSemanticAnalysis = isReadMetadataForSemanticAnalysis;\n        this.executionContext = executionContext;\n        this.syntaxManager = syntaxManager;\n\n        if (executionContext != null && executionContext.getDataSource() != null) {\n            this.dialect = this.executionContext.getDataSource().getSQLDialect();\n        } else {\n            this.dialect = BasicSQLDialect.INSTANCE;\n        }\n        this.reservedWords = new HashSet<>(this.dialect.getReservedWords());\n    }\n\n    /**\n     * Provides the semantic model for the provided text\n     */\n    @Nullable\n    public SQLQueryModel recognizeQuery(@NotNull String text, @NotNull DBRProgressMonitor monitor) {\n        STMSource querySource = STMSource.fromString(text);\n        LSMAnalyzer analyzer = LSMDialectRegistry.getInstance().getAnalyzerFactoryForDialect(this.dialect)\n            .createAnalyzer(LSMAnalyzerParameters.forDialect(this.dialect, this.syntaxManager));\n        STMTreeRuleNode tree = analyzer.parseSqlQueryTree(querySource, new STMSkippingErrorListener());\n\n        if (tree != null) {\n            this.queryDataContext = this.prepareDataContext(tree);\n\n            STMTreeNode dataStmt = tree.findChildOfName(STMKnownRuleNames.directSqlDataStatement);\n            if (dataStmt != null) { // TODO collect CTE for insert-update-delete as well as recursive CTE\n                STMTreeNode stmtBodyNode = dataStmt.getStmChild(dataStmt.getChildCount() - 1);\n                SQLQueryModelContent contents = switch (stmtBodyNode.getNodeKindId()) {\n                    case SQLStandardParser.RULE_deleteStatement -> this.collectDeleteStatement(stmtBodyNode);\n                    case SQLStandardParser.RULE_insertStatement -> this.collectInsertStatement(stmtBodyNode);\n                    case SQLStandardParser.RULE_updateStatement -> this.collectUpdateStatement(stmtBodyNode);\n                    case SQLStandardParser.RULE_selectStatement -> this.collectQueryExpression(tree);\n                    default -> this.collectQueryExpression(tree);\n                };\n\n                if (contents != null) {\n                    SQLQueryModel model = new SQLQueryModel(tree, contents, symbolEntries);\n\n                    model.propagateContext(this.queryDataContext, new RecognitionContext(monitor));\n\n                    // var tt = new DebugGraphBuilder();\n                    // tt.traverseObjs(model);\n                    // tt.graph.saveToFile(\"c:/temp/outx.dgml\");\n\n                    return model;\n                }\n            }\n\n            // TODO log query model collection error\n            Predicate<SQLQuerySymbolEntry> tryFallbackForStringLiteral = s -> {\n                String rawString = s.getRawName();\n                SQLQuerySymbolClass forcedClass;\n                if (this.dialect.isQuotedString(rawString)) {\n                    forcedClass = SQLQuerySymbolClass.STRING;\n                } else {\n                    forcedClass = tryFallbackSymbolForStringLiteral(this.dialect, s, false);\n                }\n                boolean forced = forcedClass != null;\n                if (forced) {\n                    s.getSymbol().setSymbolClass(forcedClass);\n                }\n                return forced;\n            };\n\n            this.traverseForIdentifiers(tree,\n                (e, c) -> {\n                    if (c.isNotClassified() && (e != null || !tryFallbackForStringLiteral.test(c))) {\n                        c.getSymbol().setSymbolClass(SQLQuerySymbolClass.COLUMN);\n                    }\n                },\n                e -> {\n                    if (e.isNotClassified() && (e.catalogName != null || e.schemaName != null ||\n                        !tryFallbackForStringLiteral.test(e.entityName))\n                    ) {\n                        e.entityName.getSymbol().setSymbolClass(SQLQuerySymbolClass.TABLE);\n                        if (e.schemaName != null) {\n                            e.schemaName.getSymbol().setSymbolClass(SQLQuerySymbolClass.SCHEMA);\n                            if (e.catalogName != null) {\n                                e.catalogName.getSymbol().setSymbolClass(SQLQuerySymbolClass.CATALOG);\n                            }\n                        }\n                    }\n                },\n                false\n            );\n            return new SQLQueryModel(tree, null, symbolEntries);\n        } else {\n            return null;\n        }\n    }\n\n    private void traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    ) {\n        List<STMTreeNode> refs = STMUtils.expandSubtree(\n            root,\n            null,\n            Set.of(STMKnownRuleNames.columnReference, STMKnownRuleNames.columnName, STMKnownRuleNames.tableName)\n        );\n        for (STMTreeNode ref : refs) {\n            switch (ref.getNodeKindId()) {\n                case SQLStandardParser.RULE_columnReference, SQLStandardParser.RULE_columnName -> {\n                    SQLQueryQualifiedName tableName;\n                    if (ref.getChildCount() > 1) {\n                        tableName = this.collectTableName(ref.getStmChild(0), forceUnquotted);\n                        if (tableName != null) {\n                            entityAction.accept(tableName);\n                        }\n                    } else {\n                        tableName = null;\n                    }\n                    STMTreeNode columnName = ref.getNodeKindId() == SQLStandardParser.RULE_columnName\n                        ? ref \n                        : ref.findChildOfName(STMKnownRuleNames.columnName);\n                    if (columnName != null) {\n                        columnAction.accept(tableName, this.collectIdentifier(columnName, forceUnquotted));\n                    }\n                }\n                case SQLStandardParser.RULE_tableName -> {\n                    SQLQueryQualifiedName tableName = this.collectTableName(ref, forceUnquotted);\n                    if (tableName != null) {\n                        entityAction.accept(tableName);\n                    }\n                }\n                default -> throw new IllegalArgumentException(\"Unexpected value: \" + ref.getNodeName());\n            }\n        }\n    }\n\n    @NotNull\n    private SQLQueryDataContext prepareDataContext(@NotNull STMTreeNode root) {\n        if (this.isReadMetadataForSemanticAnalysis\n            && this.executionContext != null\n            && this.executionContext.getDataSource() instanceof DBSObjectContainer\n            && this.executionContext.getDataSource().getSQLDialect() instanceof BasicSQLDialect\n        ) {\n            return new SQLQueryDataSourceContext(this.executionContext, this.executionContext.getDataSource().getSQLDialect());\n        } else {\n            Set<String> allColumnNames = new HashSet<>();\n            Set<List<String>> allTableNames = new HashSet<>();\n            this.traverseForIdentifiers(root, (e, c) -> allColumnNames.add(c.getName()), e -> allTableNames.add(e.toListOfStrings()), true);\n            symbolEntries.clear();\n            return new SQLQueryDummyDataSourceContext(this.dialect, allColumnNames, allTableNames);\n        }\n    }\n\n    private static class RecognitionContext implements SQLQueryRecognitionContext {\n        private final DBRProgressMonitor monitor;\n\n        public RecognitionContext(@NotNull DBRProgressMonitor monitor) {\n            this.monitor = monitor;\n        }\n\n        @NotNull\n        @Override\n        public DBRProgressMonitor getMonitor() {\n            return this.monitor;\n        }\n\n        @Override\n        public void appendError(@NotNull SQLQuerySymbolEntry symbol, @NotNull String error, @NotNull DBException ex) {\n            // System.out.println(symbol.getName() + \": \" + error + \": \" + ex.toString());\n        }\n\n        @Override\n        public void appendError(@NotNull SQLQuerySymbolEntry symbol, @NotNull String error) {\n            // System.out.println(symbol.getName() + \": \" + error);\n        }\n\n        @Override\n        public void appendError(@NotNull STMTreeNode treeNode, @NotNull String error) {\n            // TODO generate problem markers\n        }\n    }\n\n    @NotNull\n    private SQLQueryModelContent collectUpdateStatement(@NotNull STMTreeNode node) {\n        STMTreeNode targetTableNode = node.findChildOfName(STMKnownRuleNames.tableReference);\n        SQLQueryRowsSourceModel targetSet = targetTableNode == null ? null : this.collectQueryExpression(targetTableNode);\n        \n        List<SQLQueryTableUpdateSetClauseModel> setClauseList = new ArrayList<>();\n        STMTreeNode setClauseListNode = node.findChildOfName(STMKnownRuleNames.setClauseList);\n        if (setClauseListNode != null) {\n            for (int i = 0; i < setClauseListNode.getChildCount(); i += 2) {\n                STMTreeNode setClauseNode = setClauseListNode.getStmChild(i);\n                if (setClauseNode.getChildCount() > 0) {\n                    STMTreeNode setTargetNode = setClauseNode.getStmChild(0);\n                    List<SQLQueryValueExpression> targets = switch (setTargetNode.getNodeKindId()) {\n                        case SQLStandardParser.RULE_setTarget -> List.of(this.collectKnownValueExpression(setTargetNode.getStmChild(0)));\n                        case SQLStandardParser.RULE_setTargetList -> \n                            STMUtils.expandSubtree(\n                                setTargetNode,\n                                Set.of(STMKnownRuleNames.setTargetList),\n                                Set.of(STMKnownRuleNames.valueReference)\n                            ).stream().map(this::collectValueExpression).collect(Collectors.toList());\n                        case SQLStandardParser.RULE_anyUnexpected -> \n                            // error in query text, ignoring it\n                            Collections.emptyList();\n                        default -> throw new UnsupportedOperationException(\n                            \"Set target list expected while facing with \" + setTargetNode.getNodeName()\n                        );\n                    };\n                    List<SQLQueryValueExpression> sources = setClauseNode.getChildCount() < 3\n                        ? Collections.emptyList()\n                        : STMUtils.expandSubtree(\n                            setClauseNode.getStmChild(2),\n                            Set.of(STMKnownRuleNames.updateSource),\n                            Set.of(STMKnownRuleNames.updateValue)\n                        ).stream().map(v -> this.collectValueExpression(v.getStmChild(0))).collect(Collectors.toList());\n                    setClauseList.add(\n                        new SQLQueryTableUpdateSetClauseModel(\n                            setClauseNode,\n                            targets,\n                            sources,\n                            setClauseNode.getTextContent()\n                        )\n                    );\n                }\n            }\n        }\n        \n        STMTreeNode fromClauseNode = node.findChildOfName(STMKnownRuleNames.fromClause);\n        SQLQueryRowsSourceModel sourceSet = fromClauseNode == null ? null : this.collectQueryExpression(fromClauseNode);\n        \n        STMTreeNode whereClauseNode = node.findChildOfName(STMKnownRuleNames.whereClause);\n        SQLQueryValueExpression whereClauseExpr = whereClauseNode == null ? null : this.collectValueExpression(whereClauseNode);\n        \n        STMTreeNode orderByClauseNode = node.findChildOfName(STMKnownRuleNames.orderByClause);\n        SQLQueryValueExpression orderByExpr = orderByClauseNode == null ? null : this.collectValueExpression(orderByClauseNode);\n        \n        return new SQLQueryTableUpdateModel(node, targetSet, setClauseList, sourceSet, whereClauseExpr, orderByExpr);\n    }\n\n    @NotNull\n    private SQLQueryModelContent collectInsertStatement(@NotNull STMTreeNode node) {\n        STMTreeNode tableNameNode = node.findChildOfName(STMKnownRuleNames.tableName);\n        SQLQueryRowsTableDataModel tableModel = tableNameNode == null ? null : this.collectTableReference(tableNameNode);\n\n        List<SQLQuerySymbolEntry> columnNames;\n        SQLQueryRowsSourceModel valuesRows;\n        \n        STMTreeNode insertColumnsAndSource = node.findChildOfName(STMKnownRuleNames.insertColumnsAndSource);\n        if (insertColumnsAndSource != null) {\n            STMTreeNode insertColumnList = insertColumnsAndSource.findChildOfName(STMKnownRuleNames.insertColumnList);\n            columnNames = insertColumnList == null ? null : this.collectColumnNameList(insertColumnList);\n            \n            STMTreeNode valuesNode = insertColumnsAndSource.findChildOfName(STMKnownRuleNames.queryExpression);\n            valuesRows = valuesNode == null ? null : this.collectQueryExpression(valuesNode);\n        } else {\n            columnNames = Collections.emptyList();\n            valuesRows = null; // use default table? \n        }\n        \n        return new SQLQueryTableInsertModel(node, tableModel, columnNames, valuesRows);        \n    }\n\n    @NotNull\n    private SQLQueryModelContent collectDeleteStatement(@NotNull STMTreeNode node) {\n        STMTreeNode tableNameNode = node.findChildOfName(STMKnownRuleNames.tableName);\n        SQLQueryRowsTableDataModel tableModel = tableNameNode == null ? null : this.collectTableReference(tableNameNode);\n        \n        STMTreeNode aliasNode = node.findChildOfName(STMKnownRuleNames.correlationName);\n        SQLQuerySymbolEntry alias = aliasNode == null ? null : this.collectIdentifier(aliasNode);\n        \n        STMTreeNode whereClauseNode = node.findChildOfName(STMKnownRuleNames.whereClause);\n        SQLQueryValueExpression whereClauseExpr = whereClauseNode == null ? null : this.collectValueExpression(whereClauseNode);\n        \n        return new SQLQueryTableDeleteModel(node, tableModel, alias, whereClauseExpr);\n    }\n\n    @NotNull\n    private SQLQueryRowsSourceModel collectQueryExpression(@NotNull STMTreeNode tree) {\n        QueryExpressionMapper queryMapper = new QueryExpressionMapper(this);\n        return queryMapper.translate(tree);\n    }\n\n    @NotNull\n    private static final Set<String> columnNameListWrapperNames = Set.of(\n        STMKnownRuleNames.correspondingSpec,\n        STMKnownRuleNames.referencedTableAndColumns,\n        STMKnownRuleNames.correlationSpecification,\n        STMKnownRuleNames.nonjoinedTableReference,\n        STMKnownRuleNames.namedColumnsJoin,\n        STMKnownRuleNames.joinSpecification,\n        STMKnownRuleNames.naturalJoinTerm,\n        STMKnownRuleNames.unionTerm,\n        STMKnownRuleNames.exceptTerm,\n        STMKnownRuleNames.intersectTerm,\n        STMKnownRuleNames.uniqueConstraintDefinition,\n        STMKnownRuleNames.viewDefinition,\n        STMKnownRuleNames.insertColumnsAndSource,\n\n        STMKnownRuleNames.referenceColumnList,\n        STMKnownRuleNames.referencingColumns,\n        STMKnownRuleNames.derivedColumnList,\n        STMKnownRuleNames.joinColumnList,\n        STMKnownRuleNames.correspondingColumnList,\n        STMKnownRuleNames.uniqueColumnList,\n        STMKnownRuleNames.viewColumnList,\n        STMKnownRuleNames.insertColumnList\n    );\n\n    @NotNull\n    private List<SQLQuerySymbolEntry> collectColumnNameList(@NotNull STMTreeNode node) {\n        if (!node.getNodeName().equals(STMKnownRuleNames.columnNameList)) {\n            if (!columnNameListWrapperNames.contains(node.getNodeName())) {\n                throw new UnsupportedOperationException(\"columnNameList (or its wrapper) expected while facing with \" + node.getNodeName());\n            }\n            \n            List<STMTreeNode> actual = STMUtils.expandSubtree(node, columnNameListWrapperNames, Set.of(STMKnownRuleNames.columnNameList));\n            switch (actual.size()) {\n                case 0 -> {\n                    return Collections.emptyList();\n                }\n                case 1 -> {\n                    node = actual.get(0);\n                }\n                default -> throw new UnsupportedOperationException(\"Ambiguous columnNameList collection at \" + node.getNodeName());\n            }\n        }\n        \n        List<SQLQuerySymbolEntry> result = new ArrayList<>(node.getChildCount());\n        for (int i = 0; i < node.getChildCount(); i += 2) {\n            result.add(collectIdentifier(node.getStmChild(i)));\n        }\n        return result;\n    }\n\n    private static final Set<String> identifierDirectWrapperNames = Set.of(\n        STMKnownRuleNames.unqualifiedSchemaName,\n        STMKnownRuleNames.catalogName,\n        STMKnownRuleNames.correlationName,\n        STMKnownRuleNames.authorizationIdentifier,\n        STMKnownRuleNames.columnName,\n        STMKnownRuleNames.queryName\n    );\n    \n    @NotNull\n    private SQLQuerySymbolEntry collectIdentifier(@NotNull STMTreeNode node) {\n        return collectIdentifier(node, false);\n    }\n    \n    @NotNull\n    private SQLQuerySymbolEntry collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted) {\n        // TODO refactor out all recognition-related exceptions, consider error node everywhere in parse tree and don't introduce unnecessary model nodes\n        STMTreeNode actual = identifierDirectWrapperNames.contains(node.getNodeName()) ? node.getStmChild(0) : node;\n        if (!actual.getNodeName().equals(STMKnownRuleNames.identifier)) {\n            throw new UnsupportedOperationException(\"identifier expected while facing with \" + node.getNodeName());\n        }\n        STMTreeNode actualIdentifier = actual.findChildOfName(STMKnownRuleNames.actualIdentifier);\n        if (actualIdentifier == null) {\n            SQLQuerySymbolEntry entry = this.registerSymbolEntry(actual, actual.getTextContent(), actual.getTextContent());\n            entry.getSymbol().setSymbolClass(SQLQuerySymbolClass.ERROR);\n            return entry;\n        } else {\n            STMTreeNode actualBody = actualIdentifier.getStmChild(0);\n            String rawIdentifierString = actualBody.getTextContent();\n            if (actualBody.getPayload() instanceof Token t && t.getType() == SQLStandardLexer.Quotted) {\n                SQLQuerySymbolEntry entry = this.registerSymbolEntry(actualBody, rawIdentifierString, rawIdentifierString);\n                // not canonicalizing the identifier because it is quoted,\n                // but the QUOTED class will be assigned later after db entity resolution fail\n                // entry.getSymbol().setSymbolClass(SQLQuerySymbolClass.QUOTED);\n                return entry;\n            } else if (this.reservedWords.contains(rawIdentifierString.toUpperCase())) { // keywords are uppercased in dialect\n                SQLQuerySymbolEntry entry = this.registerSymbolEntry(actualBody, rawIdentifierString, rawIdentifierString);\n                entry.getSymbol().setSymbolClass(SQLQuerySymbolClass.RESERVED);\n                return entry;\n            } else {\n                String actualIdentifierString = SQLUtils.identifierToCanonicalForm(dialect, rawIdentifierString, forceUnquotted, false);\n                return this.registerSymbolEntry(actualBody, actualIdentifierString, rawIdentifierString);\n            }\n        }\n    }\n\n    @NotNull\n    private SQLQuerySymbolEntry registerSymbolEntry(\n        @NotNull STMTreeNode syntaxNode,\n        @NotNull String name,\n        @NotNull String rawName\n    ) {\n        SQLQuerySymbolEntry entry = new SQLQuerySymbolEntry(syntaxNode, name, rawName);\n        this.symbolEntries.add(entry);\n        this.registerScopeItem(entry);\n        return entry;\n    }\n\n    private static final Set<String> tableNameContainers = Set.of(\n        STMKnownRuleNames.referencedTableAndColumns,\n        STMKnownRuleNames.qualifier,\n        STMKnownRuleNames.nonjoinedTableReference,\n        STMKnownRuleNames.explicitTable,\n        STMKnownRuleNames.tableDefinition,\n        STMKnownRuleNames.viewDefinition,\n        STMKnownRuleNames.alterTableStatement,\n        STMKnownRuleNames.dropTableStatement,\n        STMKnownRuleNames.dropViewStatement,\n        STMKnownRuleNames.deleteStatement,\n        STMKnownRuleNames.insertStatement,\n        STMKnownRuleNames.updateStatement,\n        STMKnownRuleNames.correlationSpecification\n    ); \n    \n    private static final Set<String> actualTableNameContainers = Set.of(\n        STMKnownRuleNames.tableName, \n        STMKnownRuleNames.correlationName\n    );\n\n    @NotNull\n    private SQLQueryRowsTableDataModel collectTableReference(@NotNull STMTreeNode node) {\n        return new SQLQueryRowsTableDataModel(node, collectTableName(node));\n    }\n\n    @Nullable\n    private SQLQueryQualifiedName collectTableName(@NotNull STMTreeNode node) {\n        return this.collectTableName(node, false);\n    }\n\n    @Nullable\n    private SQLQueryQualifiedName collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted) {\n        List<STMTreeNode> actual = STMUtils.expandSubtree(node, tableNameContainers, actualTableNameContainers);\n        return switch (actual.size()) {\n            case 0 -> null;\n            case 1 -> {\n                node = actual.get(0);\n                yield node.getNodeName().equals(STMKnownRuleNames.tableName) ? collectQualifiedName(node, forceUnquotted)\n                        : this.registerScopeItem(new SQLQueryQualifiedName(node, collectIdentifier(node, forceUnquotted)));\n            }\n            default -> throw new UnsupportedOperationException(\"Ambiguous tableName collection at \" + node.getNodeName());\n        };\n    }\n    \n    private static final Set<String> qualifiedNameDirectWrapperNames = Set.of(\n        STMKnownRuleNames.tableName,\n        STMKnownRuleNames.constraintName\n    );\n    \n    @NotNull\n    private SQLQueryQualifiedName collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted) { // qualifiedName\n        STMTreeNode entityNameNode = qualifiedNameDirectWrapperNames.contains(node.getNodeName()) ? node.getStmChild(0) : node;\n        if (!entityNameNode.getNodeName().equals(STMKnownRuleNames.qualifiedName)) {\n            throw new UnsupportedOperationException(\"identifier expected while facing with \" + node.getNodeName());\n        }\n        \n        SQLQuerySymbolEntry entityName = collectIdentifier(entityNameNode.getStmChild(entityNameNode.getChildCount() - 1), forceUnquotted);\n        if (entityNameNode.getChildCount() == 1) {\n            return this.registerScopeItem(new SQLQueryQualifiedName(entityNameNode, entityName));\n        } else {\n            STMTreeNode schemaNameNode = entityNameNode.getStmChild(0);\n            SQLQuerySymbolEntry schemaName = collectIdentifier(\n                schemaNameNode.getStmChild(schemaNameNode.getChildCount() - 1),\n                forceUnquotted\n            );\n            if (schemaNameNode.getChildCount() == 1) {\n                return this.registerScopeItem(new SQLQueryQualifiedName(entityNameNode, schemaName, entityName));\n            } else {\n                STMTreeNode catalogNameNode = schemaNameNode.getStmChild(0);\n                SQLQuerySymbolEntry catalogName = collectIdentifier(\n                    catalogNameNode.getStmChild(catalogNameNode.getChildCount() - 1),\n                    forceUnquotted\n                );\n                return this.registerScopeItem(new SQLQueryQualifiedName(entityNameNode, catalogName, schemaName, entityName));\n            }    \n        }\n    }\n    \n    private static final Set<String> knownValueExpressionRootNames = Set.of(\n        STMKnownRuleNames.valueExpression,\n        STMKnownRuleNames.valueExpressionAtom,\n        STMKnownRuleNames.searchCondition,\n        STMKnownRuleNames.havingClause,\n        STMKnownRuleNames.whereClause,\n        STMKnownRuleNames.groupByClause,\n        STMKnownRuleNames.orderByClause,\n        STMKnownRuleNames.rowValueConstructor\n    );\n        \n    private static final Set<String> knownRecognizableValueExpressionNames = Set.of(\n        STMKnownRuleNames.subquery,\n        STMKnownRuleNames.columnReference,\n        STMKnownRuleNames.valueReference,\n        STMKnownRuleNames.variableExpression,\n        STMKnownRuleNames.truthValue,\n        STMKnownRuleNames.unsignedNumericLiteral,\n        STMKnownRuleNames.signedNumericLiteral,\n        STMKnownRuleNames.characterStringLiteral,\n        STMKnownRuleNames.datetimeLiteral,\n        STMKnownRuleNames.columnIndex\n    );\n\n    @NotNull\n    private SQLQueryValueExpression collectValueExpression(@NotNull STMTreeNode node) {\n        if (!knownValueExpressionRootNames.contains(node.getNodeName())) {\n            throw new UnsupportedOperationException(\n                \"Search condition or value expression expected while facing with \" + node.getNodeName()\n            );\n        }\n        \n        if (knownRecognizableValueExpressionNames.contains(node.getNodeName())) {\n            return collectKnownValueExpression(node);\n        } else {\n            try (LexicalScopeHolder sh = this.openScope()) {\n                Stack<STMTreeNode> stack = new Stack<>();\n                Stack<List<SQLQueryValueExpression>> childLists = new Stack<>();\n                stack.add(node);\n                childLists.push(new ArrayList<>(1));\n    \n                while (stack.size() > 0) {\n                    STMTreeNode n = stack.pop();\n                    \n                    if (n != null) {\n                        STMTreeNode rn = n;\n                        while (rn.getChildCount() == 1 && !knownRecognizableValueExpressionNames.contains(rn.getNodeName())) {\n                            rn = rn.getStmChild(0);\n                        }\n                        if (knownRecognizableValueExpressionNames.contains(rn.getNodeName())\n                            || rn.getNodeName().equals(STMKnownRuleNames.valueExpressionPrimary)\n                        ) {\n                            childLists.peek().add(collectKnownValueExpression(rn));\n                        } else {\n                            stack.push(n);\n                            stack.push(null);\n                            childLists.push(new ArrayList<>(rn.getChildCount()));\n                            for (int i = rn.getChildCount() - 1; i >= 0; i--) {\n                                stack.push(rn.getStmChild(i));\n                            }\n                        }\n                    } else {\n                        // TODO register unexpected pieces in the lexical scope\n                        STMTreeNode content = stack.pop();\n                        List<SQLQueryValueExpression> children = childLists.pop();\n                        if (children.size() > 0) {\n                            SQLQueryValueExpression e = children.size() == 1 && children.get(0) instanceof SQLQueryValueFlattenedExpression c \n                                ? c \n                                : new SQLQueryValueFlattenedExpression(content, children);\n                            childLists.peek().add(e);\n                        }\n                    }\n                }\n                \n                List<SQLQueryValueExpression> roots = childLists.pop();\n                SQLQueryValueExpression result = roots.isEmpty() ?\n                    new SQLQueryValueFlattenedExpression(node, Collections.emptyList()) :\n                    roots.get(0);\n                \n                result.registerLexicalScope(sh.lexicalScope);\n                return result;\n            }\n        }\n    }\n\n    @NotNull\n    private SQLQueryValueExpression collectKnownValueExpression(@NotNull STMTreeNode node) {\n        return switch (node.getNodeKindId()) {\n            case SQLStandardParser.RULE_subquery -> new SQLQueryValueSubqueryExpression(node, this.collectQueryExpression(node));\n            case SQLStandardParser.RULE_valueReference -> this.collectValueReferenceExpression(node);\n            case SQLStandardParser.RULE_valueExpressionPrimary -> {\n                SQLQueryValueExpression subexpr = this.collectValueExpression(node.getStmChild(0));\n                STMTreeNode castSpecNode = node.findChildOfName(STMKnownRuleNames.valueExpressionCastSpec);\n                if (castSpecNode != null) {\n                    String typeName = castSpecNode.getStmChild(1).getTextContent();\n                    yield new SQLQueryValueTypeCastExpression(node, subexpr, typeName);\n                } else {\n                    yield subexpr;\n                }\n            }\n            case SQLStandardParser.RULE_variableExpression -> {\n                STMTreeNode varExprNode = node.getStmChild(0);\n                if (varExprNode instanceof STMTreeTermNode varExprTermNode) {\n                    String rawName = varExprTermNode.getTextContent();\n                    yield switch (rawName.charAt(0)) {\n                        case '@' -> new SQLQueryValueVariableExpression(\n                            node,\n                            this.registerSymbolEntry(node, rawName.substring(1), rawName),\n                            SQLQueryValueVariableExpression.VariableExpressionKind.BATCH_VARIABLE,\n                            rawName\n                        );\n                        case '$' -> new SQLQueryValueVariableExpression(\n                            node,\n                            this.registerSymbolEntry(node, rawName.substring(2, rawName.length() - 1), rawName),\n                            SQLQueryValueVariableExpression.VariableExpressionKind.CLIENT_VARIABLE,\n                            rawName\n                        );\n                        default -> throw new UnsupportedOperationException(\"Unsupported term variable expression: \" + node.getTextContent());\n                    };\n                } else {\n                    yield switch (varExprNode.getNodeKindId()) {\n                        case SQLStandardParser.RULE_namedParameter ->  {\n                            yield new SQLQueryValueVariableExpression(\n                                node,\n                                this.registerSymbolEntry(node, varExprNode.getStmChild(1).getTextContent(), varExprNode.getTextContent()),\n                                SQLQueryValueVariableExpression.VariableExpressionKind.CLIENT_PARAMETER,\n                                varExprNode.getTextContent()\n                            );\n                        }\n                        case SQLStandardParser.RULE_anonymouseParameter -> {\n                            String mark = varExprNode.getStmChild(0).getTextContent();\n                            this.registerSymbolEntry(node, mark, mark);\n                            yield new SQLQueryValueVariableExpression(\n                                node,\n                                null,\n                                SQLQueryValueVariableExpression.VariableExpressionKind.CLIENT_PARAMETER,\n                                varExprNode.getTextContent()\n                            );\n                        }\n                        default -> throw new UnsupportedOperationException(\"Unsupported variable expression: \" + node.getTextContent());\n                    };\n                }\n            }\n            case SQLStandardParser.RULE_columnIndex -> this.makeValueConstantExpression(node, SQLQueryExprType.NUMERIC);\n            case SQLStandardParser.RULE_truthValue -> this.makeValueConstantExpression(node, SQLQueryExprType.BOOLEAN);\n            case SQLStandardParser.RULE_unsignedNumericLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.NUMERIC);\n            case SQLStandardParser.RULE_signedNumericLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.NUMERIC);\n            case SQLStandardParser.RULE_characterStringLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.STRING);\n            case SQLStandardParser.RULE_datetimeLiteral -> this.makeValueConstantExpression(node, SQLQueryExprType.DATETIME);\n            default -> throw new UnsupportedOperationException(\"Unknown expression kind \" + node.getNodeName());\n        };\n    }\n\n    @NotNull\n    private SQLQueryValueExpression makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type) {\n        return new SQLQueryValueConstantExpression(node, node.getTextContent(), type);\n    }\n\n    @NotNull\n    private SQLQueryValueExpression collectValueReferenceExpression(@NotNull STMTreeNode node) {\n        STMTreeNode head = getFirstStmChild(node);\n        SQLQueryValueExpression expr = switch (head.getNodeKindId()) {\n            case SQLStandardParser.RULE_columnReference -> {\n                SQLQueryQualifiedName tableName = collectTableName(head.getStmChild(0));\n                STMTreeNode nameNode = head.findChildOfName(STMKnownRuleNames.columnName);\n                if (nameNode != null) {\n                    SQLQuerySymbolEntry columnName = collectIdentifier(nameNode);\n                    yield head.getChildCount() == 1 ? new SQLQueryValueColumnReferenceExpression(head, columnName)\n                      : new SQLQueryValueColumnReferenceExpression(head, tableName, columnName);\n                } else {\n                    yield new SQLQueryValueTupleReferenceExpression(head, tableName);\n                }\n            }\n            case SQLStandardParser.RULE_valueRefNestedExpr -> this.collectValueReferenceExpression(head.getStmChild(1));\n            default -> throw new UnsupportedOperationException(\n                \"Value reference expression expected while facing with \" + head.getNodeName()\n            );\n        };\n        \n        int rangeStart = node.getRealInterval().a;\n        boolean[] slicingFlags = new boolean[node.getChildCount()];\n        for (int i = 1; i < node.getChildCount();) {\n            STMTreeNode step = node.getStmChild(i);\n            Interval range = new Interval(rangeStart, step.getRealInterval().b);\n            expr = switch (step.getNodeKindId()) {\n                case SQLStandardParser.RULE_valueRefIndexingStep -> {\n                    int s = i;\n                    for (; i < node.getChildCount() && step.getNodeKindId() == SQLStandardParser.RULE_valueRefIndexingStep; i++) {\n                        step = node.getStmChild(i);\n                        slicingFlags[i] = step.getStmChild(1).getNodeKindId() == SQLStandardParser.RULE_valueRefIndexingStepSlice;\n                    }\n                    boolean[] slicingSpec = Arrays.copyOfRange(slicingFlags, s, i);\n                    yield new SQLQueryValueIndexingExpression(range, node, expr, slicingSpec);\n                }\n                case SQLStandardParser.RULE_valueRefMemberStep -> {\n                    i++;\n                    yield new SQLQueryValueMemberExpression(range, node, expr, this.collectIdentifier(step.getStmChild(1)));\n                }\n                default -> throw new UnsupportedOperationException(\n                    \"Value member expression expected while facing with \" + node.getNodeName()\n                );\n            };\n        }\n        \n        return expr;\n    }\n\n    private STMTreeNode getFirstStmChild(STMTreeNode node) {\n        STMTreeNode head = node.getStmChild(0);\n        return head;\n    }\n\n    /**\n     * Set the query symbol class to the quoted identifier, depends on the quote type\n     */\n    @Nullable\n    public static SQLQuerySymbolClass tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    ) {\n        SQLQuerySymbolClass forcedClass = null;\n        boolean isQuotedIdentifier = dialect.isQuotedIdentifier(symbolEntry.getRawName());\n        char quoteChar = symbolEntry.getRawName().charAt(0);\n        if ((!isQuotedIdentifier && (quoteChar == '\"' || quoteChar == '`' || quoteChar == '\\''))\n            || (isQuotedIdentifier && !isColumnResolved)) {\n            forcedClass = switch (quoteChar) {\n                case '\\'' -> SQLQuerySymbolClass.STRING;\n                case '\"', '`' -> SQLQuerySymbolClass.QUOTED;\n                default -> null;\n            };\n        }\n        return forcedClass;\n    }\n\n    private SQLQueryLexicalScope beginScope() {\n        SQLQueryLexicalScope scope = new SQLQueryLexicalScope();\n        this.currentLexicalScopes.addLast(scope);\n        return scope;\n    }\n\n    private void endScope(SQLQueryLexicalScope scope) {\n        if (this.currentLexicalScopes.peekLast() != scope) {\n            throw new IllegalStateException();\n        }\n        this.currentLexicalScopes.removeLast();\n    }\n    \n    private <T extends SQLQueryLexicalScopeItem> T registerScopeItem(T item) {\n        SQLQueryLexicalScope scope = this.currentLexicalScopes.peekLast();\n        if (scope != null) {\n            scope.registerItem(item);\n        }\n        return item;\n    }\n    \n    private class LexicalScopeHolder implements AutoCloseable {\n\n        public final SQLQueryLexicalScope lexicalScope;\n        \n        public LexicalScopeHolder(SQLQueryLexicalScope scope) {\n            this.lexicalScope = scope;\n        }\n\n        @Override\n        public void close() {\n            SQLQueryModelRecognizer.this.endScope(this.lexicalScope);   \n        }\n    }\n    \n    private LexicalScopeHolder openScope() {\n        return new LexicalScopeHolder(this.beginScope());\n    }\n\n    @FunctionalInterface\n    private interface TreeMapperCallback<T, C> {\n        T apply(STMTreeNode node, List<T> children, C context);\n    }\n\n    private static class TreeMapper<T, C> {\n        private interface MapperFrame {\n            void doWork();\n        }\n\n        private interface MapperResultFrame<T> extends MapperFrame {\n            void aggregate(@NotNull T result);\n        }\n\n        private abstract class MapperNodeFrame implements MapperFrame {\n            @NotNull\n            public final STMTreeNode node;\n            @NotNull\n            public final MapperResultFrame<T> parent;\n\n            public MapperNodeFrame(@NotNull STMTreeNode node, @NotNull MapperResultFrame<T> parent) {\n                this.node = node;\n                this.parent = parent;\n            }\n        }\n\n        private class MapperQueuedNodeFrame extends MapperNodeFrame {\n\n            public MapperQueuedNodeFrame(@NotNull STMTreeNode node, @NotNull MapperResultFrame<T> parent) {\n                super(node, parent);\n            }\n\n            @Override\n            public void doWork() {\n                TreeMapperCallback<T, C> translation = translations.get(node.getNodeName());\n                MapperResultFrame<T> aggregator = translation == null ? parent : new MapperDataPendingNodeFrame(node, parent, translation);\n\n                if (translation != null) {\n                    stack.push(aggregator);\n                }\n                for (int i = node.getChildCount() - 1; i >= 0; i--) {\n                    if (transparentNodeNames.contains(node.getNodeName())) {\n                        stack.push(new MapperQueuedNodeFrame((STMTreeNode) node.getChild(i), aggregator));\n                    }\n                }\n            }\n        }\n\n        private class MapperDataPendingNodeFrame extends MapperNodeFrame implements MapperResultFrame<T> {\n            @NotNull\n            public final List<T> childrenData = new LinkedList<>();\n            @NotNull\n            public final TreeMapperCallback<T, C> translation;\n\n            public MapperDataPendingNodeFrame(\n                @NotNull STMTreeNode node,\n                @NotNull MapperResultFrame<T> parent,\n                @NotNull TreeMapperCallback<T, C> translation\n            ) {\n                super(node, parent);\n                this.translation = translation;\n            }\n\n            @Override\n            public void aggregate(@NotNull T result) {\n                this.childrenData.add(result);\n            }\n\n            @Override\n            public void doWork() {\n                this.parent.aggregate(this.translation.apply(this.node, this.childrenData, TreeMapper.this.context));\n            }\n        }\n\n        private class MapperRootFrame implements MapperResultFrame<T> {\n            @NotNull\n            public final STMTreeNode node;\n            @Nullable\n            public T result = null;\n\n            public MapperRootFrame(@NotNull STMTreeNode node) {\n                this.node = node;\n            }\n\n            @Override\n            public void aggregate(@NotNull T result) {\n                this.result = result;\n            }\n\n            @Override\n            public void doWork() {\n                stack.push(new MapperQueuedNodeFrame(node, this));\n            }\n        }\n\n        @NotNull\n        private final Class<T> mappingResultType;\n        @NotNull\n        private final Set<String> transparentNodeNames;\n        @NotNull\n        private final Map<String, TreeMapperCallback<T, C>> translations;\n        @NotNull\n        private final Stack<MapperFrame> stack = new Stack<>();\n        @NotNull\n        private final C context;\n\n        public TreeMapper(\n            @NotNull Class<T> mappingResultType,\n            @NotNull Set<String> transparentNodeNames,\n            @NotNull Map<String, TreeMapperCallback<T, C>> translations,\n            @NotNull C context\n        ) {\n            this.mappingResultType = mappingResultType;\n            this.transparentNodeNames = transparentNodeNames;\n            this.translations = translations;\n            this.context = context;\n        }\n\n        @NotNull\n        public T translate(@NotNull STMTreeNode root) {\n            MapperRootFrame rootFrame = new MapperRootFrame(root);\n            stack.push(rootFrame);\n            while (stack.size() > 0) {\n                stack.pop().doWork();\n            }\n            return rootFrame.result;\n        }\n    }\n\n    private static class QueryExpressionMapper extends TreeMapper<SQLQueryRowsSourceModel, SQLQueryModelRecognizer> {\n        @NotNull\n        private static final Set<String> queryExpressionSubtreeNodeNames = Set.of(\n            STMKnownRuleNames.sqlQuery,\n            STMKnownRuleNames.directSqlDataStatement,\n            STMKnownRuleNames.selectStatement,\n            STMKnownRuleNames.withClause,\n            STMKnownRuleNames.cteList,\n            STMKnownRuleNames.with_list_element,\n            STMKnownRuleNames.subquery,\n            STMKnownRuleNames.unionTerm,\n            STMKnownRuleNames.exceptTerm,\n            STMKnownRuleNames.nonJoinQueryExpression,\n            STMKnownRuleNames.nonJoinQueryTerm,\n            STMKnownRuleNames.intersectTerm,\n            STMKnownRuleNames.nonJoinQueryPrimary,\n            STMKnownRuleNames.simpleTable,\n            STMKnownRuleNames.querySpecification,\n            STMKnownRuleNames.tableExpression,\n            STMKnownRuleNames.queryPrimary,\n            STMKnownRuleNames.queryTerm,\n            STMKnownRuleNames.queryExpression,\n            STMKnownRuleNames.selectStatementSingleRow,\n            STMKnownRuleNames.fromClause,\n            STMKnownRuleNames.nonjoinedTableReference,\n            STMKnownRuleNames.tableReference,\n            STMKnownRuleNames.joinedTable,\n            STMKnownRuleNames.derivedTable,\n            STMKnownRuleNames.tableSubquery,\n            STMKnownRuleNames.crossJoinTerm,\n            STMKnownRuleNames.naturalJoinTerm,\n            STMKnownRuleNames.explicitTable\n        );\n\n        @NotNull\n        private static final Map<String, TreeMapperCallback<SQLQueryRowsSourceModel, SQLQueryModelRecognizer>> translations = Map.ofEntries(\n            Map.entry(STMKnownRuleNames.directSqlDataStatement, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return null;\n                } else if (cc.size() == 1) {\n                    return cc.get(0);\n                } else {\n                    List<SQLQueryRowsSourceModel> subqueries = cc.subList(0, cc.size() - 1);\n                    SQLQueryRowsSourceModel resultQuery = cc.get(cc.size() - 1);\n\n                    STMTreeNode withNode = n.findChildOfName(STMKnownRuleNames.withClause);\n                    boolean isRecursive = withNode.getChildCount() > 2; // is RECURSIVE keyword presented\n\n                    SQLQueryRowsCteModel cte = new SQLQueryRowsCteModel(n, isRecursive, resultQuery);\n\n                    STMTreeNode cteListNode = withNode.getStmChild(withNode.getChildCount() - 1);\n                    for (int i = 0, j = 0; i < cteListNode.getChildCount() && j < subqueries.size(); i += 2, j++) {\n                        STMTreeNode cteSubqueryNode = cteListNode.getStmChild(i);\n\n                        SQLQuerySymbolEntry subqueryName = r.collectIdentifier(cteSubqueryNode.getStmChild(0));\n\n                        STMTreeNode columnListNode = cteSubqueryNode.findChildOfName(STMKnownRuleNames.columnNameList);\n                        List<SQLQuerySymbolEntry> columnList = columnListNode != null ? r.collectColumnNameList(columnListNode) : List.of();\n\n                        SQLQueryRowsSourceModel subquerySource = subqueries.get(j);\n                        cte.addSubquery(cteSubqueryNode, subqueryName, columnList, subquerySource);\n                    }\n\n                    return cte;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.queryExpression, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        STMTreeNode childNode = n.getStmChild(i);\n                        List<SQLQuerySymbolEntry> corresponding = r.collectColumnNameList(childNode);\n                        SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        SQLQueryRowsSetCorrespondingOperationKind opKind = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_exceptTerm -> SQLQueryRowsSetCorrespondingOperationKind.EXCEPT;\n                            case SQLStandardParser.RULE_unionTerm -> SQLQueryRowsSetCorrespondingOperationKind.UNION;\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at queryExpression\");\n                        };\n                        source = new SQLQueryRowsSetCorrespondingOperationModel(range, childNode, source, nextSource, corresponding, opKind);\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.nonJoinQueryTerm, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        STMTreeNode childNode = n.getStmChild(i);\n                        List<SQLQuerySymbolEntry> corresponding = r.collectColumnNameList(childNode);\n                        SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        SQLQueryRowsSetCorrespondingOperationKind opKind = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_intersectTerm -> SQLQueryRowsSetCorrespondingOperationKind.INTERSECT;\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at nonJoinQueryTerm\");\n                        };\n                        source = new SQLQueryRowsSetCorrespondingOperationModel(range, childNode, source, nextSource, corresponding, opKind);\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.joinedTable, (n, cc, r) -> {\n                // joinedTable: (nonjoinedTableReference|(LeftParen joinedTable RightParen)) (naturalJoinTerm|crossJoinTerm)+;\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        final SQLQueryRowsSourceModel currSource = source;\n                        final SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        // TODO see second case of the first source if parens are correctly ignored here\n                        STMTreeNode childNode = n.getStmChild(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        source = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_naturalJoinTerm ->\n                                Optional.ofNullable(childNode.findChildOfName(STMKnownRuleNames.joinSpecification))\n                                    .map(cn -> cn.findChildOfName(STMKnownRuleNames.joinCondition))\n                                    .map(cn -> cn.findChildOfName(STMKnownRuleNames.searchCondition))\n                                    .map(r::collectValueExpression)\n                                    .map(e -> new SQLQueryRowsNaturalJoinModel(range, childNode, currSource, nextSource, e))\n                                    .orElseGet(() -> new SQLQueryRowsNaturalJoinModel(range, childNode, currSource, nextSource, r.collectColumnNameList(childNode)));\n                            case SQLStandardParser.RULE_crossJoinTerm -> new SQLQueryRowsCrossJoinModel(range, childNode, currSource, nextSource);\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at queryExpression\");\n                        };\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.fromClause, (n, cc, r) -> {\n                if (cc.isEmpty()) {\n                    return r.queryDataContext.getDefaultTable(n);\n                } else {\n                    SQLQueryRowsSourceModel source = cc.get(0);\n                    for (int i = 1; i < cc.size(); i++) {\n                        STMTreeNode childNode = n.getStmChild(1 + i * 2);\n                        SQLQueryRowsSourceModel nextSource = cc.get(i);\n                        Interval range = Interval.of(n.getRealInterval().a, childNode.getRealInterval().b);\n                        source = switch (childNode.getNodeKindId()) {\n                            case SQLStandardParser.RULE_tableReference -> new SQLQueryRowsCrossJoinModel(range, childNode, source, nextSource);\n                            default -> throw new UnsupportedOperationException(\"Unexpected child node kind at fromClause\");\n                        };\n                    }\n                    return source;\n                }\n            }),\n            Map.entry(STMKnownRuleNames.querySpecification, (n, cc, r) -> {\n                STMTreeNode selectListNode = n.findChildOfName(STMKnownRuleNames.selectList);\n                SQLQuerySelectionResultModel resultModel = new SQLQuerySelectionResultModel(\n                    selectListNode, (selectListNode.getChildCount() + 1) / 2\n                );\n\n                SQLQueryLexicalScope selectListScope;\n                try (LexicalScopeHolder selectListScopeHolder = r.openScope()) {\n                    selectListScope = selectListScopeHolder.lexicalScope;\n                    selectListScope.registerSyntaxNode(n.getStmChild(0)); // SELECT keyword\n\n                    for (int i = 0; i < selectListNode.getChildCount(); i += 2) {\n                        STMTreeNode selectSublist = selectListNode.getStmChild(i);\n                        if (selectSublist.getChildCount() > 0) {\n                            STMTreeNode sublistNode = selectSublist.getStmChild(0);\n                            if (sublistNode != null) {\n                                switch (sublistNode.getNodeKindId()) { // selectSublist: (Asterisk|derivedColumn|qualifier Period Asterisk\n                                    case SQLStandardParser.RULE_derivedColumn -> {\n                                        // derivedColumn: valueExpression (asClause)?; asClause: (AS)? columnName;\n                                        SQLQueryValueExpression expr = r.collectValueExpression(sublistNode.getStmChild(0));\n                                        if (expr instanceof SQLQueryValueTupleReferenceExpression tupleRef) {\n                                            resultModel.addTupleSpec(sublistNode, tupleRef);\n                                        } else {\n                                            if (sublistNode.getChildCount() > 1) {\n                                                STMTreeNode asClause = sublistNode.getStmChild(1);\n                                                SQLQuerySymbolEntry asColumnName = r.collectIdentifier(\n                                                    asClause.getStmChild(asClause.getChildCount() - 1)\n                                                );\n                                                resultModel.addColumnSpec(sublistNode, expr, asColumnName);\n                                            } else {\n                                                resultModel.addColumnSpec(sublistNode, expr);\n                                            }\n                                        }\n                                    }\n                                    case SQLStandardParser.RULE_anyUnexpected -> {\n                                        // TODO register these pieces in the lexical scope\n                                        // error in query text, ignoring it\n                                    }\n                                    default -> {\n                                        resultModel.addCompleteTupleSpec(sublistNode);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                SQLQueryRowsSourceModel source = cc.isEmpty() ? r.queryDataContext.getDefaultTable(n) : cc.get(0);\n                STMTreeNode tableExpr = n.findChildOfName(STMKnownRuleNames.tableExpression);\n                SQLQueryRowsProjectionModel projectionModel;\n                if (tableExpr != null) {\n                    selectListScope.registerSyntaxNode(tableExpr.getStmChild(0)); // FROM keyword\n                    SQLQueryValueExpression whereExpr = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.whereClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    SQLQueryValueExpression havingClause = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.havingClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    SQLQueryValueExpression groupByClause = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.groupByClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    SQLQueryValueExpression orderByClause = Optional.ofNullable(tableExpr.findChildOfName(STMKnownRuleNames.orderByClause))\n                        .map(r::collectValueExpression).orElse(null);\n                    projectionModel = new SQLQueryRowsProjectionModel(n, selectListScope, source, resultModel, whereExpr, havingClause, groupByClause, orderByClause);\n                } else {\n                    projectionModel = new SQLQueryRowsProjectionModel(n, selectListScope, source, resultModel);\n                }\n                return projectionModel;\n            }),\n            Map.entry(STMKnownRuleNames.nonjoinedTableReference, (n, cc, r) -> {\n                // can they both be missing?\n                SQLQueryRowsSourceModel source;\n                if (cc.isEmpty()) {\n                    STMTreeNode tableNameNode = n.findChildOfName(STMKnownRuleNames.tableName);\n                    if (tableNameNode != null) {\n                        source = r.collectTableReference(tableNameNode);\n                    } else {\n                        source = r.queryDataContext.getDefaultTable(n);\n                    }\n                } else {\n                    source = cc.get(0);\n                }\n                // TODO column reference at PARTITION clause\n                if (n.getChildCount() > 1) {\n                    STMTreeNode lastSubnode = n.getStmChild(n.getChildCount() - 1);\n                    if (lastSubnode.getNodeName().equals(STMKnownRuleNames.correlationSpecification)) {\n                        SQLQuerySymbolEntry correlationName = r.collectIdentifier(\n                            lastSubnode.getStmChild(lastSubnode.getChildCount() == 1 || lastSubnode.getChildCount() == 4 ? 0 : 1)\n                        );\n                        source = new SQLQueryRowsCorrelatedSourceModel(n, source, correlationName, r.collectColumnNameList(lastSubnode));\n                    }\n                }\n                return source;\n            }),\n            Map.entry(STMKnownRuleNames.explicitTable, (n, cc, r) -> r.collectTableReference(n)),\n            Map.entry(STMKnownRuleNames.tableValueConstructor, (n, cc, r) -> {\n                List<SQLQueryValueExpression> values = new ArrayList<>(n.getChildCount() / 2 + 1); // values separated by comma\n                for (int i = 1; i < n.getChildCount(); i += 2) {\n                    values.add(r.collectValueExpression(n.getStmChild(i)));\n                }\n                return new SQLQueryRowsTableValueModel(n, values);\n            })\n        );\n\n        public QueryExpressionMapper(@Nullable SQLQueryModelRecognizer recognizer) {\n            super(SQLQueryRowsSourceModel.class, queryExpressionSubtreeNodeNames, translations, recognizer);\n        }\n    }\n\n\n    /**\n     * A debugging facility\n     */\n    private static class DebugGraphBuilder {\n        private final DirectedGraph graph = new DirectedGraph();\n        private final LinkedList<Pair<Object, Object>> stack = new LinkedList<>();\n        private final Set<Object> done = new HashSet<>();\n        private final Map<Object, DirectedGraph.Node> objs = new HashMap<>();\n\n        private void expandObject(Object prev, Object o) {\n            String propName = prev == null ? null : (String) ((Pair) prev).getFirst();\n            Object src = prev == null ? null : ((Pair) prev).getSecond();\n            if (o instanceof SQLQueryDataContext || o instanceof SQLQueryRowsSourceModel || o instanceof SQLQueryValueExpression) {\n                DirectedGraph.Node node = objs.get(o);\n                DirectedGraph.Node prevNode = objs.get(src);\n                if (node == null) {\n                    var color = o instanceof SQLQueryDataContext ? \"#bbbbff\"\n                        : (o instanceof SQLQueryRowsSourceModel ? \"#bbffbb\"\n                        : (o instanceof SQLQueryValueExpression ? \"#ffbbbb\"\n                        : \"#bbbbbb\"));\n                    node = graph.createNode(o.toString().substring(o.getClass().getPackageName().length()), color);\n                    objs.put(o, node);\n                }\n                if (prevNode != null) {\n                    graph.createEdge(prevNode, node, propName, null);\n                }\n                src = o;\n                propName = \"\";\n            }\n            if (done.contains(o)) {\n                return;\n            }\n            done.add(o);\n            // System.out.println((prev == null ? \"<NULL>\" : prev.toString()) + \" --> \" + o.toString());\n\n            if (o instanceof String || o.getClass().isPrimitive() || o.getClass().isEnum()) {\n                return;\n            } else if (o instanceof SQLQuerySymbol || o instanceof DBSObject || o instanceof DBCExecutionContext) {\n                // || o instanceof SQLQueryColumnReferenceExpression) {\n                return;\n            } else if (o instanceof Iterable it) {\n//                int index = 0;\n//                for (Object y: it) {\n//                    if (y != null && !done.contains(y)) {\n//                        stack.addLast(new Pair<Object, Object>(new Pair(propName + \"[\" + (index++) + \"]\", src), y));\n//                    }\n//                }\n                return;\n            }\n\n            Class t = o.getClass();\n            while (t != Object.class) {\n                for (Field f : t.getDeclaredFields()) {\n                    try {\n                        if (f.canAccess(o) || f.trySetAccessible()) {\n                            Object x = f.get(o);\n                            if (x != null) {\n                                if (x instanceof String || x.getClass().isEnum()) {\n                                    DirectedGraph.Node prevNode = objs.get(src);\n                                    if (prevNode != null) {\n                                        String text = x.toString().replace(\"&\", \"&amp;\").replace(\"<\", \"&lt;\").replace(\">\", \"&gt;\").replace(\"\\\"\", \"&quot;\").replace(\"'\", \"&apos;\").replace(\"\\n\", \"&#10;\");\n//                                            DirectedGraphNode newNode = graph.createNode(text, null);\n//                                            graph.createEdge(prevNode, newNode, propName, null);\n                                        prevNode.label += \"&#10;\" + propName + \".\" + f.getName() + \" = \" + text;\n                                    }\n                                } else if (x instanceof Iterable it) {\n                                    int index = 0;\n                                    for (Object y : it) {\n                                        if (y != null && !done.contains(y)) {\n                                            stack.addLast(new Pair<Object, Object>(new Pair(propName + \"[\" + (index++) + \"]\", src), y));\n                                        }\n                                    }\n                                } else {\n                                    stack.addLast(new Pair(new Pair(propName + \".\" + f.getName(), src), x));\n                                }\n                            }\n                        }\n                    } catch (Throwable e) {\n                    }\n                }\n                t = t.getSuperclass();\n            }\n        }\n\n        public void traverseObjs(Object obj) {\n            stack.addLast(new Pair(null, obj));\n            while (stack.size() > 0) {\n                Pair p = stack.removeLast();\n                this.expandObject(p.getFirst(), p.getSecond());\n            }\n        }\n    }\n\n\n}",
                "methodCount": 50
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 14,
                "candidates": [
                    {
                        "lineStart": 695,
                        "lineEnd": 698,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method makeValueConstantExpression to class SQLQueryDataContext",
                        "description": "Move method makeValueConstantExpression to org.jkiss.dbeaver.model.sql.semantics.context.SQLQueryDataContext\nRationale: The method makeValueConstantExpression() appears to be primarily concerned with constructing a value constant expression from the given STMTreeNode and SQLQueryExprType. SQLQueryDataContext is focused on semantic context query information about entities involved in the semantics model, and it includes methods related to queries and their results. Since SQLQueryDataContext is responsible for handling SQL query details and context, it makes the most sense to move the method there. This method seems to fit naturally within the responsibilities of SQLQueryDataContext, as it deals with SQL query expressions and values, which are part of the overall query context.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 333,
                        "lineEnd": 345,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectDeleteStatement to class STMTreeNode",
                        "description": "Move method collectDeleteStatement to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The collectDeleteStatement method heavily interacts with an instance of STMTreeNode, using it to locate several key components (tableName, alias, whereClause) required for forming an SQL delete statement. This strong dependency suggests that STMTreeNode is a suitable target class since the method is fundamentally about traversal and understanding of a syntax tree node structure, which aligns with the responsibilities of STMTreeNode.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 754,
                        "lineEnd": 775,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "refactoringInfo": "Move Static method tryFallbackSymbolForStringLiteral to class SQLDocumentSyntaxContext",
                        "description": "move method tryFallbackSymbolForStringLiteral to PsiClass:SQLDocumentSyntaxContext\nRationale: The method `tryFallbackSymbolForStringLiteral` involves determining the class of a symbol in the context of a SQL dialect and statement. The SQLDocumentSyntaxContext class is designed to manage the syntax and symbols of SQL documents. Placing this method in SQLDocumentSyntaxContext ensures it is located with other symbol-related functionality and supports the handling of symbol contexts directly.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 749,
                        "lineEnd": 752,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getFirstStmChild to class STMTreeNode",
                        "description": "Move method getFirstStmChild to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The `getFirstStmChild` method directly interacts with `STMTreeNode` instances and leverages the `getStmChild` method. Since the functionality of retrieving the first child of a `STMTreeNode` is inherently related to `STMTreeNode`, it makes most sense for this method to reside within that class. This improves encapsulation and cohesion by keeping logically related methods within a single class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 627,
                        "lineEnd": 693,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectKnownValueExpression to class STMTreeNode",
                        "description": "Move method collectKnownValueExpression to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method `collectKnownValueExpression` heavily interacts with the `STMTreeNode` class by accessing its methods and using the information it provides. This suggests that the logic implemented in `collectKnownValueExpression` is closely tied with the structure and data held by `STMTreeNode`. Moving this method to the `STMTreeNode` class will encapsulate the logic that interprets these nodes within the class that defines them, following the principle of cohesion and improving the maintainability of the code.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 494,
                        "lineEnd": 506,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectTableName to class STMTreeNode",
                        "description": "Move method collectTableName to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method `collectTableName` operates directly on `STMTreeNode` instances, utilizing their properties and behavior for the primary functionality. This suggests that the method has high cohesion with `STMTreeNode`, making it an ideal target as it directly manipulates and computes values from instances of this class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 206,
                        "lineEnd": 221,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method prepareDataContext to class DBCExecutionContext",
                        "description": "Move method prepareDataContext to org.jkiss.dbeaver.model.exec.DBCExecutionContext\nRationale: The method prepareDataContext primarily deals with the execution context and the associated data source properties. The logic to determine the type of SQLQueryDataContext is tightly coupled with the execution context attributes, such as the data source and SQL dialect. Thus, moving this method to DBCExecutionContext ensures it is placed within a context that has all the necessary information and fits its purpose.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 310,
                        "lineEnd": 331,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectInsertStatement to class STMTreeNode",
                        "description": "Move method collectInsertStatement to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method collectInsertStatement relies heavily on the structure and content of STMTreeNode to gather relevant pieces of the INSERT statement such as the table name, columns, and values. Since it needs to query different child nodes, it fits neatly within STMTreeNode, making use of its methods for navigating tree nodes and collecting relevant data.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 252,
                        "lineEnd": 308,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectUpdateStatement to class STMTreeNode",
                        "description": "Move method collectUpdateStatement to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The 'collectUpdateStatement' method extensively interacts with the STMTreeNode class by calling various methods like 'findChildOfName', 'getChildCount', 'getStmChild', and 'getTextContent', and traversal operations on the syntax tree. It appears to be gathering SQL-related data from an STMTreeNode which makes it more related to the operations provided by STMTreeNode. Moving it to the STMTreeNode class would consolidate the tree manipulation and data collection logic in a relevant class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 419,
                        "lineEnd": 449,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectIdentifier to class SQLDialect",
                        "description": "Move method collectIdentifier to org.jkiss.dbeaver.model.sql.SQLDialect\nRationale: The method 'collectIdentifier' primarily deals with dialect-specific behaviors such as handling quoted identifiers, reserved words, and canonicalizing identifiers based on SQL standards. It is more closely related to the functionality offered by the SQLDialect class, which is already responsible for various identifier quoting, unquoting, validation methods and keyword handling. Therefore, moving the method to SQLDialect would make it more coherent and centralized with related operations.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 513,
                        "lineEnd": 540,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectQualifiedName to class SQLDialect",
                        "description": "Move method collectQualifiedName to org.jkiss.dbeaver.model.sql.SQLDialect\nRationale: The method `collectQualifiedName` is heavily concerned with constructing SQL qualified names from syntax tree nodes, which involves domain-specific logic related to SQL dialects and the handling of identifiers such as catalogs, schemas, and entities. This function seems to fit well within the responsibilities of the SQLDialect class, which deals with the nuances of SQL syntax and identifiers. Moving this method to SQLDialect ensures that SQL identifier handling and dialect-specific rules are centralized within a class that is designed to manage such concerns.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 165,
                        "lineEnd": 204,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method traverseForIdentifiers to class STMTreeNode",
                        "description": "Move method traverseForIdentifiers to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The traverseForIdentifiers method interacts heavily with the STMTreeNode class. It uses STMTreeNode objects to traverse the syntax tree, collects table names and identifier nodes, and performs actions based on the node kind ID. Since the method is closely tied to the structure and behavior of STMTreeNode, it logically belongs within this class to maintain cohesion and encapsulation.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 379,
                        "lineEnd": 403,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectColumnNameList to class STMTreeNode",
                        "description": "Move method collectColumnNameList to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: The method `collectColumnNameList` heavily utilizes the properties and functions of the `STMTreeNode` class. It processes STM nodes, checks node names, and traverses child nodes, indicating a strong coupling with the tree node structure. Therefore, it is more logical and cohesive to move this method into the `STMTreeNode` class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 700,
                        "lineEnd": 747,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method collectValueReferenceExpression to class STMTreeNode",
                        "description": "Move method collectValueReferenceExpression to org.jkiss.dbeaver.model.stm.STMTreeNode\nRationale: null",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    }
                ]
            },
            "elapsedTime": [
                {
                    "candidateIndex": 0,
                    "elapsedTime": 35317
                },
                {
                    "candidateIndex": 3,
                    "elapsedTime": 1765
                }
            ],
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 97337
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "private SQLQueryModelContent collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "This method is specifically focused on collecting the details of a DELETE SQL statement. It should be moved to a class dedicated to parsing and collecting details of SQL statements."
                        },
                        {
                            "method_name": "collectInsertStatement",
                            "method_signature": "private SQLQueryModelContent collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "This method deals with collecting details of an INSERT SQL statement. It logically belongs to a class that handles SQL statement collection."
                        },
                        {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "private SQLQueryModelContent collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "SQLQueryStatementCollector",
                            "rationale": "This method is focused on collecting details of an UPDATE SQL statement. It should be moved to a more appropriate class that deals with collecting SQL statements."
                        },
                        {
                            "method_name": "collectQueryExpression",
                            "method_signature": "private SQLQueryRowsSourceModel collectQueryExpression(@NotNull STMTreeNode tree)",
                            "target_class": "SQLQueryExpressionCollector",
                            "rationale": "This method collects a query expression, which makes it more suitable for a class dedicated to handling SQL query expressions."
                        },
                        {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private void traverseForIdentifiers(@NotNull STMTreeNode root, @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction, @NotNull Consumer<SQLQueryQualifiedName> entityAction, boolean forceUnquotted)",
                            "target_class": "SQLQueryIdentifierTraverser",
                            "rationale": "This method traverses the SQL parse tree for identifiers, making it more appropriate for a class dedicated to such traversals."
                        },
                        {
                            "method_name": "collectTableReference",
                            "method_signature": "private SQLQueryRowsTableDataModel collectTableReference(@NotNull STMTreeNode node)",
                            "target_class": "SQLTableReferenceCollector",
                            "rationale": "This method collects table references, which suggests that it should be in a class specializing in table reference collection."
                        },
                        {
                            "method_name": "collectColumnNameList",
                            "method_signature": "private List<SQLQuerySymbolEntry> collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "SQLColumnNameCollector",
                            "rationale": "This method is responsible for collecting column names from the parse tree, indicating that it belongs in a class focused on column name collection."
                        },
                        {
                            "method_name": "registerSymbolEntry",
                            "method_signature": "private SQLQuerySymbolEntry registerSymbolEntry(@NotNull STMTreeNode syntaxNode, @NotNull String name, @NotNull String rawName)",
                            "target_class": "SQLSymbolRegistry",
                            "rationale": "This method registers symbol entries, so it should be part of a class dedicated to symbol registration and management."
                        },
                        {
                            "method_name": "collectQualifiedName",
                            "method_signature": "private SQLQueryQualifiedName collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "SQLQualifiedNameCollector",
                            "rationale": "This method collects qualified names from the parse tree. It is more appropriate for a dedicated class on collecting qualified names."
                        },
                        {
                            "method_name": "collectIdentifier",
                            "method_signature": "private SQLQuerySymbolEntry collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "SQLIdentifierCollector",
                            "rationale": "This method collects identifiers from the parse tree. It should be moved to a class specialized in collecting identifiers."
                        }
                    ],
                    "llm_response_time": 13327
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private void traverseForIdentifiers(@NotNull STMTreeNode root, @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction, @NotNull Consumer<SQLQueryQualifiedName> entityAction, boolean forceUnquotted)",
                            "target_class": "STMUtils",
                            "rationale": "The traverseForIdentifiers method deals primarily with traversing nodes of an STMTree and performing actions based on the traversal. Such functionality seems more appropriate in a utility class like STMUtils rather than the SQLQueryModelRecognizer class."
                        },
                        {
                            "method_name": "collectTableName",
                            "method_signature": "private SQLQueryQualifiedName collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "STMUtils",
                            "rationale": "The collectTableName method is responsible for collecting and returning table names from a given node. This is a utility operation that pertains to tree manipulation and should be present in a utility class like STMUtils."
                        },
                        {
                            "method_name": "collectIdentifier",
                            "method_signature": "private SQLQuerySymbolEntry collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "STMUtils",
                            "rationale": "The collectIdentifier method is responsible for collecting identifier information from a parse tree node. This method is more suitable for a utility class like STMUtils that deals with parsing and identifying elements from the tree."
                        },
                        {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "private SQLQueryValueExpression makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "SQLQueryUtils",
                            "rationale": "The makeValueConstantExpression method is used to create constant expressions from a node. This is a utility operation specific to SQLQuery manipulation and should be moved to a utility class like SQLQueryUtils."
                        },
                        {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "private SQLQueryValueExpression collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "SQLQueryUtils",
                            "rationale": "The collectKnownValueExpression method is responsible for collecting known value expressions from the parse tree. This method is a utility operation and fits better in a utility class like SQLQueryUtils."
                        }
                    ],
                    "llm_response_time": 8522
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "calculateDiscount",
                            "method_signature": "public double calculateDiscount()",
                            "target_class": "Customer",
                            "rationale": "The method calculateDiscount relies on the Customer class's loyalty points and membership level to calculate the discount. Hence, it is more cohesive to Customer to keep related behavior together."
                        },
                        {
                            "method_name": "prepareDataContext",
                            "method_signature": "private SQLQueryDataContext prepareDataContext(STMTreeNode root)",
                            "target_class": "SQLQueryDataContext",
                            "rationale": "The method prepareDataContext is responsible for setting up a data context, which is better suited to the SQLQueryDataContext class as it deals with data context initialization and management."
                        },
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "public static SQLQuerySymbolClass tryFallbackSymbolForStringLiteral(SQLDialect dialect, SQLQuerySymbolEntry symbolEntry, boolean isColumnResolved)",
                            "target_class": "SQLDialect",
                            "rationale": "The method tryFallbackSymbolForStringLiteral deals with the interpretation of string literals specific to SQL dialects, making it more appropriate for the SQLDialect class where dialect-specific logic is handled."
                        }
                    ],
                    "llm_response_time": 5326
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "recognizeQuery",
                            "method_signature": "@Nullable\n    public recognizeQuery(@NotNull String text, @NotNull DBRProgressMonitor monitor)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectIdentifier",
                            "method_signature": "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectValueExpression",
                            "method_signature": "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                },
                {
                    "iteration_num": -2,
                    "suggested_move_methods": [
                        {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectIdentifier",
                            "method_signature": "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "methodCompatibilityScores": {
                "tf-idf": {
                    "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)": {
                        "first": {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4274644224299218
                    },
                    "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5112601011926633
                    },
                    "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )": {
                        "first": {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5243848854601914
                    },
                    "private getFirstStmChild(STMTreeNode node)": {
                        "first": {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5494162456896312
                    },
                    "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6066281223246832
                    },
                    "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6131499323782337
                    },
                    "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)": {
                        "first": {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6203646552764338
                    },
                    "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6645499479220192
                    },
                    "private expandObject(Object prev, Object o)": {
                        "first": {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7025939295542585
                    },
                    "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7154124916067571
                    },
                    "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectIdentifier",
                            "method_signature": "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7155497820845217
                    },
                    "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7226609058729562
                    },
                    "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )": {
                        "first": {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7926931629065661
                    },
                    "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7956744440337203
                    },
                    "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.820035187859466
                    }
                },
                "voyage": {
                    "private getFirstStmChild(STMTreeNode node)": {
                        "first": {
                            "method_name": "getFirstStmChild",
                            "method_signature": "private getFirstStmChild(STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.26632777378004757
                    },
                    "private expandObject(Object prev, Object o)": {
                        "first": {
                            "method_name": "expandObject",
                            "method_signature": "private expandObject(Object prev, Object o)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4253534481337723
                    },
                    "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )": {
                        "first": {
                            "method_name": "tryFallbackSymbolForStringLiteral",
                            "method_signature": "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4779042833688692
                    },
                    "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)": {
                        "first": {
                            "method_name": "makeValueConstantExpression",
                            "method_signature": "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5270355539212429
                    },
                    "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectTableName",
                            "method_signature": "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.548306002741378
                    },
                    "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectDeleteStatement",
                            "method_signature": "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5632719147360418
                    },
                    "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectValueReferenceExpression",
                            "method_signature": "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5769768622369327
                    },
                    "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectKnownValueExpression",
                            "method_signature": "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5867256753750258
                    },
                    "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)": {
                        "first": {
                            "method_name": "collectQualifiedName",
                            "method_signature": "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5926417299349546
                    },
                    "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectUpdateStatement",
                            "method_signature": "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6016637426269535
                    },
                    "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )": {
                        "first": {
                            "method_name": "traverseForIdentifiers",
                            "method_signature": "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.602330773419663
                    },
                    "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectColumnNameList",
                            "method_signature": "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6050839159727246
                    },
                    "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)": {
                        "first": {
                            "method_name": "prepareDataContext",
                            "method_signature": "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6096450162364362
                    },
                    "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectInsertStatement",
                            "method_signature": "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6153824111789653
                    },
                    "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)": {
                        "first": {
                            "method_name": "collectValueExpression",
                            "method_signature": "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6213772241249851
                    }
                }
            },
            "llmMethodPriority": {
                "tf-idf": {
                    "priority_method_names": [
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "private expandObject(Object prev, Object o)",
                        "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                        "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                        "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                        "@NotNull\n    private collectIdentifier(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                        "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                        "private getFirstStmChild(STMTreeNode node)"
                    ],
                    "llm_response_time": 5555
                },
                "tf-idf-5": {
                    "priority_method_names": [
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                        "private getFirstStmChild(STMTreeNode node)"
                    ],
                    "llm_response_time": 5488
                },
                "tf-df-3": {
                    "priority_method_names": [
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)"
                    ],
                    "llm_response_time": 4868
                },
                "voyage": {
                    "priority_method_names": [
                        "private traverseForIdentifiers(\n        @NotNull STMTreeNode root,\n        @NotNull BiConsumer<SQLQueryQualifiedName, SQLQuerySymbolEntry> columnAction,\n        @NotNull Consumer<SQLQueryQualifiedName> entityAction,\n        boolean forceUnquotted\n    )",
                        "@NotNull\n    private prepareDataContext(@NotNull STMTreeNode root)",
                        "@NotNull\n    private collectValueExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectUpdateStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectKnownValueExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectInsertStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectDeleteStatement(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectValueReferenceExpression(@NotNull STMTreeNode node)",
                        "@NotNull\n    private collectQualifiedName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private collectColumnNameList(@NotNull STMTreeNode node)",
                        "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "private expandObject(Object prev, Object o)",
                        "private getFirstStmChild(STMTreeNode node)"
                    ],
                    "llm_response_time": 6551
                },
                "voyage-5": {
                    "priority_method_names": [
                        "@Nullable\n    private collectTableName(@NotNull STMTreeNode node, boolean forceUnquotted)",
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "@NotNull\n    private makeValueConstantExpression(@NotNull STMTreeNode node, @NotNull SQLQueryExprType type)",
                        "private getFirstStmChild(STMTreeNode node)",
                        "private expandObject(Object prev, Object o)"
                    ],
                    "llm_response_time": 6719
                },
                "voyage-3": {
                    "priority_method_names": [
                        "private expandObject(Object prev, Object o)",
                        "@Nullable\n    public static tryFallbackSymbolForStringLiteral(\n        @NotNull SQLDialect dialect,\n        @NotNull SQLQuerySymbolEntry symbolEntry,\n        boolean isColumnResolved\n    )",
                        "private getFirstStmChild(STMTreeNode node)"
                    ],
                    "llm_response_time": 6382
                }
            },
            "targetClassMap": {
                "makeValueConstantExpression": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.2631806779839076
                        },
                        {
                            "class_name": "SQLQueryExprType",
                            "similarity_score": 0.5118367373585836
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.0743941531479294
                        },
                        {
                            "class_name": "SQLSyntaxManager",
                            "similarity_score": 0.4109591322679224
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.10286772265499898
                        },
                        {
                            "class_name": "SQLQueryDataContext",
                            "similarity_score": 0.3281650616569468
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLQueryDataContext",
                        "SQLQueryExprType",
                        "SQLSyntaxManager"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 5,
                    "similarity_metric": "cosine"
                },
                "collectDeleteStatement": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.3000021360142686
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.025600783860166777
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.05914804897125342
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "tryFallbackSymbolForStringLiteral": {
                    "target_classes": [
                        {
                            "class_name": "SQLFormatUtils",
                            "similarity_score": 0.31468759898332493
                        },
                        {
                            "class_name": "SQLSearchUtils",
                            "similarity_score": 0.4779532841476181
                        },
                        {
                            "class_name": "TextUtils",
                            "similarity_score": 0.48357351377949526
                        },
                        {
                            "class_name": "SQLCompletionHelper",
                            "similarity_score": 0.43347432552700027
                        },
                        {
                            "class_name": "SQLScriptParser",
                            "similarity_score": 0.5176336253457875
                        },
                        {
                            "class_name": "SourceResolutionResult",
                            "similarity_score": 0.31302588469611553
                        },
                        {
                            "class_name": "ScriptParameterRule",
                            "similarity_score": 0.4832822131578749
                        },
                        {
                            "class_name": "SQLCommandSet",
                            "similarity_score": 0.4226342171417697
                        },
                        {
                            "class_name": "SQLQueryCombinedContext",
                            "similarity_score": 0.2799970469217185
                        },
                        {
                            "class_name": "ScriptEvaluateEngine",
                            "similarity_score": 0.3628833059855099
                        },
                        {
                            "class_name": "OffsetKeyedTreeMap",
                            "similarity_score": 0.481000293642848
                        },
                        {
                            "class_name": "SQLQueryRowsCorrelatedSourceModel",
                            "similarity_score": 0.4313462351333261
                        },
                        {
                            "class_name": "SQLQueryValueColumnReferenceExpression",
                            "similarity_score": 0.5009860005315055
                        },
                        {
                            "class_name": "TableReferencesAnalyzerOld",
                            "similarity_score": 0.556382610059841
                        },
                        {
                            "class_name": "SQLModelActivator",
                            "similarity_score": 0.3924710927686601
                        },
                        {
                            "class_name": "SQLQueryDummyDataSourceContext",
                            "similarity_score": 0.3792703875698156
                        },
                        {
                            "class_name": "SQLQuerySymbolEntry",
                            "similarity_score": 0.4808878324641286
                        },
                        {
                            "class_name": "SQLFormatterTokenized",
                            "similarity_score": 0.47459087494230745
                        },
                        {
                            "class_name": "SQLQueryTranslator",
                            "similarity_score": 0.5078752033275429
                        },
                        {
                            "class_name": "SQLDollarQuoteRule",
                            "similarity_score": 0.45196187556917716
                        },
                        {
                            "class_name": "DirectedGraph",
                            "similarity_score": 0.2823476602108527
                        },
                        {
                            "class_name": "NumberRule",
                            "similarity_score": 0.4945160895623067
                        },
                        {
                            "class_name": "KnownSourcesInfo",
                            "similarity_score": 0.428270851011971
                        },
                        {
                            "class_name": "DummyTableRowsSource",
                            "similarity_score": 0.3597162208406933
                        },
                        {
                            "class_name": "ValueAndOffset",
                            "similarity_score": 0.2682778599161782
                        },
                        {
                            "class_name": "SQLDocumentScriptItemSyntaxContext",
                            "similarity_score": 0.4433086464942055
                        },
                        {
                            "class_name": "SQLDocumentSyntaxContext",
                            "similarity_score": 0.5103779493807781
                        },
                        {
                            "class_name": "SQLQueryAliasedRowsContext",
                            "similarity_score": 0.3458600949777427
                        },
                        {
                            "class_name": "SQLQueryCompletionSet",
                            "similarity_score": 0.2854336259862839
                        },
                        {
                            "class_name": "SQLQueryDataSourceContext",
                            "similarity_score": 0.36380502889467065
                        },
                        {
                            "class_name": "SQLQueryLexicalScope",
                            "similarity_score": 0.4842387555249834
                        },
                        {
                            "class_name": "SQLQueryModel",
                            "similarity_score": 0.4389043663020869
                        },
                        {
                            "class_name": "SQLQueryPureResultTupleContext",
                            "similarity_score": 0.33325659302446964
                        },
                        {
                            "class_name": "SQLQueryQualifiedName",
                            "similarity_score": 0.4318855212315904
                        },
                        {
                            "class_name": "SQLQueryResultColumn",
                            "similarity_score": 0.31225525191724984
                        },
                        {
                            "class_name": "SQLQueryResultTupleContext",
                            "similarity_score": 0.4724329565216401
                        },
                        {
                            "class_name": "SQLQueryRowsCrossJoinModel",
                            "similarity_score": 0.2888116563024185
                        },
                        {
                            "class_name": "SQLQueryRowsCteModel",
                            "similarity_score": 0.43354966271815376
                        },
                        {
                            "class_name": "SQLQueryRowsCteSubqueryModel",
                            "similarity_score": 0.3658216758178395
                        },
                        {
                            "class_name": "SQLQueryRowsNaturalJoinModel",
                            "similarity_score": 0.438086428281499
                        },
                        {
                            "class_name": "SQLQueryRowsProjectionModel",
                            "similarity_score": 0.37043231337142063
                        },
                        {
                            "class_name": "SQLQueryRowsSetCorrespondingOperationModel",
                            "similarity_score": 0.49924045711559933
                        },
                        {
                            "class_name": "SQLQueryRowsTableDataModel",
                            "similarity_score": 0.4744694444798072
                        },
                        {
                            "class_name": "SQLQueryRowsTableValueModel",
                            "similarity_score": 0.34019597152521586
                        },
                        {
                            "class_name": "SQLQuerySelectionResultColumnSpec",
                            "similarity_score": 0.43911162304738066
                        },
                        {
                            "class_name": "SQLQuerySelectionResultCompleteTupleSpec",
                            "similarity_score": 0.3128445221846102
                        },
                        {
                            "class_name": "SQLQuerySelectionResultModel",
                            "similarity_score": 0.3970699612255022
                        },
                        {
                            "class_name": "SQLQuerySelectionResultTupleSpec",
                            "similarity_score": 0.37535612471680685
                        },
                        {
                            "class_name": "SQLQuerySymbol",
                            "similarity_score": 0.3977639090810407
                        },
                        {
                            "class_name": "SQLQuerySymbolByDbObjectDefinition",
                            "similarity_score": 0.4099976780745106
                        },
                        {
                            "class_name": "SQLQueryTableDeleteModel",
                            "similarity_score": 0.3933053247287459
                        },
                        {
                            "class_name": "SQLQueryTableInsertModel",
                            "similarity_score": 0.3670571247828084
                        },
                        {
                            "class_name": "SQLQueryTableRowsContext",
                            "similarity_score": 0.30154674611419313
                        },
                        {
                            "class_name": "SQLQueryTableUpdateModel",
                            "similarity_score": 0.3815327059731514
                        },
                        {
                            "class_name": "SQLQueryTableUpdateSetClauseModel",
                            "similarity_score": 0.35472216532031997
                        },
                        {
                            "class_name": "SQLQueryValueConstantExpression",
                            "similarity_score": 0.33931229116482886
                        },
                        {
                            "class_name": "SQLQueryValueFlattenedExpression",
                            "similarity_score": 0.3370395183509921
                        },
                        {
                            "class_name": "SQLQueryValueIndexingExpression",
                            "similarity_score": 0.4025687312766512
                        },
                        {
                            "class_name": "SQLQueryValueMemberExpression",
                            "similarity_score": 0.4252908681185099
                        },
                        {
                            "class_name": "SQLQueryValueSubqueryExpression",
                            "similarity_score": 0.34100010252704327
                        },
                        {
                            "class_name": "SQLQueryValueTupleReferenceExpression",
                            "similarity_score": 0.43114750991231715
                        },
                        {
                            "class_name": "SQLQueryValueTypeCastExpression",
                            "similarity_score": 0.3436008971044584
                        },
                        {
                            "class_name": "SQLQueryValueVariableExpression",
                            "similarity_score": 0.4357337655005131
                        },
                        {
                            "class_name": "SQLScriptItemAtOffset",
                            "similarity_score": 0.27945610407935234
                        },
                        {
                            "class_name": "SQLTokenEntryAtOffset",
                            "similarity_score": 0.3018125924057005
                        },
                        {
                            "class_name": "JDBCDatabaseBackupRegistry",
                            "similarity_score": 0.3891797132949743
                        },
                        {
                            "class_name": "TokenPredicateSet",
                            "similarity_score": 0.42352015997678133
                        },
                        {
                            "class_name": "SQLFormatterConfigurationRegistry",
                            "similarity_score": 0.40418160118967583
                        },
                        {
                            "class_name": "SQLCommandsRegistry",
                            "similarity_score": 0.3878360218280898
                        },
                        {
                            "class_name": "SQLCompletionAnalyzer",
                            "similarity_score": 0.49787227084310887
                        },
                        {
                            "class_name": "SQLQueryParameterRegistry",
                            "similarity_score": 0.3924167906816972
                        },
                        {
                            "class_name": "SQLGeneratorConfigurationRegistry",
                            "similarity_score": 0.4015795566598727
                        },
                        {
                            "class_name": "SQLVariablesRegistry",
                            "similarity_score": 0.42915263082026517
                        },
                        {
                            "class_name": "SQLCompletionProposalBase",
                            "similarity_score": 0.48522434105578494
                        },
                        {
                            "class_name": "WordRegion",
                            "similarity_score": 0.3638044145581707
                        },
                        {
                            "class_name": "TableReferencesAnalyzerImpl",
                            "similarity_score": 0.47258936423987913
                        },
                        {
                            "class_name": "TableReferencesRules",
                            "similarity_score": 0.2524919810998793
                        },
                        {
                            "class_name": "ClassLoaderScriptSource",
                            "similarity_score": 0.3311638732600879
                        },
                        {
                            "class_name": "TokenPredicatesCondition",
                            "similarity_score": 0.32984615547544277
                        },
                        {
                            "class_name": "SQLFormatterCompact",
                            "similarity_score": 0.2714985978353252
                        },
                        {
                            "class_name": "SQLFormatterConfiguration",
                            "similarity_score": 0.3727923923575398
                        },
                        {
                            "class_name": "SQLFormatterDescriptor",
                            "similarity_score": 0.31896071137831605
                        },
                        {
                            "class_name": "SQLFormatterExternal",
                            "similarity_score": 0.43495864539562523
                        },
                        {
                            "class_name": "SQLFullLineRule",
                            "similarity_score": 0.32329643887371384
                        },
                        {
                            "class_name": "SQLGeneratorDDL",
                            "similarity_score": 0.3905883539473202
                        },
                        {
                            "class_name": "SQLGeneratorDelete",
                            "similarity_score": 0.35477490034853376
                        },
                        {
                            "class_name": "SQLGeneratorDescriptor",
                            "similarity_score": 0.34923796284721326
                        },
                        {
                            "class_name": "SQLGeneratorInsert",
                            "similarity_score": 0.36885759240273475
                        },
                        {
                            "class_name": "SQLGeneratorJoin",
                            "similarity_score": 0.3588484366437139
                        },
                        {
                            "class_name": "SQLGeneratorMerge",
                            "similarity_score": 0.36856287850303376
                        },
                        {
                            "class_name": "SQLGeneratorProcedureCall",
                            "similarity_score": 0.37814322188325794
                        },
                        {
                            "class_name": "SQLGeneratorSelect",
                            "similarity_score": 0.3466505892995697
                        },
                        {
                            "class_name": "SQLGeneratorUpdate",
                            "similarity_score": 0.37589361429584295
                        },
                        {
                            "class_name": "SQLGroupingQueryGenerator",
                            "similarity_score": 0.4555916698007795
                        },
                        {
                            "class_name": "SQLIdentifierDetector",
                            "similarity_score": 0.48763320582306025
                        },
                        {
                            "class_name": "SQLInsertReplaceMethodDescriptor",
                            "similarity_score": 0.2979931083227255
                        },
                        {
                            "class_name": "SQLModelPreferencesInitializer",
                            "similarity_score": 0.22552367315277097
                        },
                        {
                            "class_name": "SQLMultiWordRule",
                            "similarity_score": 0.4173768113829802
                        },
                        {
                            "class_name": "SQLParameterToken",
                            "similarity_score": 0.24759964021658665
                        },
                        {
                            "class_name": "SQLParserContext",
                            "similarity_score": 0.40201043375339196
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLDocumentSyntaxContext",
                        "SQLScriptParser",
                        "TableReferencesAnalyzerOld"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 19,
                    "similarity_metric": "cosine"
                },
                "getFirstStmChild": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.3792406076177703
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.019848244863194028
                        },
                        {
                            "class_name": "SQLSyntaxManager",
                            "similarity_score": 0.5018287675346872
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.03248231319588732
                        },
                        {
                            "class_name": "SQLQueryDataContext",
                            "similarity_score": 0.20820116163188562
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLQueryDataContext",
                        "SQLSyntaxManager"
                    ],
                    "llm_response_time": 3535,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "collectKnownValueExpression": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.3367184714332271
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.03979422041410732
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07412684090375399
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectTableName": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.36506224917189917
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.030216093202134617
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07642217401047846
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "prepareDataContext": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.42278169969859825
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.049013263036106404
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.06282325612193411
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DBCExecutionContext",
                        "SQLDialect",
                        "STMTreeNode"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectInsertStatement": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.42529545323561735
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.034539893703973354
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07194178142882926
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "expandObject": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 0,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "collectUpdateStatement": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.4174689344928706
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.03911444844743398
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07414195685478221
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectIdentifier": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.5558302095712135
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.1015314307958052
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.15459235540222604
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLDialect",
                        "STMTreeNode",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectQualifiedName": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.48390906014060153
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.0468498310296027
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.09112155389088339
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SQLDialect",
                        "STMTreeNode",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "traverseForIdentifiers": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.5211558275635
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.07554096906205153
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.11011045987232629
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "DBCExecutionContext",
                        "SQLDialect"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectColumnNameList": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.5239020945575023
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.059374110713714415
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.08044057833087663
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "STMTreeNode",
                        "SQLDialect",
                        "DBCExecutionContext"
                    ],
                    "llm_response_time": 0,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "collectValueReferenceExpression": {
                    "target_classes": [
                        {
                            "class_name": "STMTreeNode",
                            "similarity_score": 0.49293583041313577
                        },
                        {
                            "class_name": "DBCExecutionContext",
                            "similarity_score": 0.042201837154026804
                        },
                        {
                            "class_name": "SQLDialect",
                            "similarity_score": 0.07027992567918173
                        }
                    ],
                    "llm_response_time": 5051,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine",
                    "target_class_priority_explanation": "[\n    {\n        \"target_class\": \"STMTreeNode\",\n        \"rationale\": \"The method `collectValueReferenceExpression` heavily relies on the `STMTreeNode` class, as it uses multiple methods from `STMTreeNode` such as `getFirstStmChild`, `getRealInterval`, `getChildCount`, `getStmChild`, and `findChildOfName`. Moving this method to the `STMTreeNode` class will make the code more cohesive by keeping related functionality together.\",\n    },\n    {\n        \"target_class\": \"DBCExecutionContext\",\n        \"rationale\": \"The method interacts with SQL expressions and potentially with database execution. Hence, placing the method in `DBCExecutionContext` might make sense if the method's functionality is more aligned with the tasks related to execution contexts. However, this is less cohesive than placing it in `STMTreeNode`.\"\n    },\n    {\n        \"target_class\": \"SQLDialect\",\n        \"rationale\": \"The method does parse SQL expressions and values, which might logically fit within `SQLDialect`. Yet, the method does not directly interact with dialect-specific features, making this a less appropriate fit compared to `STMTreeNode`.\"\n    }\n]"
                }
            }
        }
    },
    {
        "repository": "https://github.com/dbeaver/dbeaver.git",
        "sha1": "281f79dea1fcffcfaef3caa53d787ae7a3d9b34b",
        "url": "https://github.com/dbeaver/dbeaver/commit/281f79dea1fcffcfaef3caa53d787ae7a3d9b34b",
        "move_method_refactoring": {
            "type": "Extract And Move Method",
            "description": "Extract And Move Method public getValueEncryptor() : DBSValueEncryptor extracted from private loadConfigFile(stream InputStream, decrypt boolean) : String in class org.jkiss.dbeaver.registry.DataSourceSerializerModern & moved to class org.jkiss.dbeaver.registry.DBPProject",
            "leftSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 322,
                    "endLine": 343,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration before extraction",
                    "codeElement": "private loadConfigFile(stream InputStream, decrypt boolean) : String"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 332,
                    "endLine": 332,
                    "startColumn": 13,
                    "endColumn": 82,
                    "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 334,
                    "endLine": 334,
                    "startColumn": 17,
                    "endColumn": 112,
                    "codeElementType": "THROW_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 336,
                    "endLine": 336,
                    "startColumn": 13,
                    "endColumn": 85,
                    "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 333,
                    "endLine": 335,
                    "startColumn": 13,
                    "endColumn": 14,
                    "codeElementType": "IF_STATEMENT",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 333,
                    "endLine": 335,
                    "startColumn": 41,
                    "endColumn": 14,
                    "codeElementType": "BLOCK",
                    "description": "extracted code from source method declaration",
                    "codeElement": null
                }
            ],
            "rightSideLocations": [
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/BaseProjectImpl.java",
                    "startLine": 240,
                    "endLine": 248,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "extracted method declaration",
                    "codeElement": "public getValueEncryptor() : DBSValueEncryptor"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/BaseProjectImpl.java",
                    "startLine": 243,
                    "endLine": 243,
                    "startColumn": 9,
                    "endColumn": 45,
                    "codeElementType": "VARIABLE_DECLARATION_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/BaseProjectImpl.java",
                    "startLine": 245,
                    "endLine": 245,
                    "startColumn": 13,
                    "endColumn": 72,
                    "codeElementType": "THROW_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/BaseProjectImpl.java",
                    "startLine": 247,
                    "endLine": 247,
                    "startColumn": 9,
                    "endColumn": 47,
                    "codeElementType": "RETURN_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/BaseProjectImpl.java",
                    "startLine": 244,
                    "endLine": 246,
                    "startColumn": 9,
                    "endColumn": 10,
                    "codeElementType": "IF_STATEMENT",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/BaseProjectImpl.java",
                    "startLine": 244,
                    "endLine": 246,
                    "startColumn": 26,
                    "endColumn": 10,
                    "codeElementType": "BLOCK",
                    "description": "extracted code to extracted method declaration",
                    "codeElement": null
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 320,
                    "endLine": 337,
                    "startColumn": 5,
                    "endColumn": 6,
                    "codeElementType": "METHOD_DECLARATION",
                    "description": "source method declaration after extraction",
                    "codeElement": "private loadConfigFile(stream InputStream, decrypt boolean) : String"
                },
                {
                    "filePath": "plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                    "startLine": 330,
                    "endLine": 330,
                    "startColumn": 43,
                    "endColumn": 84,
                    "codeElementType": "METHOD_INVOCATION",
                    "description": "extracted method invocation",
                    "codeElement": "registry.getProject().getValueEncryptor()"
                }
            ],
            "isStatic": false
        },
        "ref_id": 905,
        "extraction_results": {
            "success": true,
            "newCommitHash": "4215ffdc5b72fd7400fc9819b1fbec374ba258dd",
            "newBranchName": "extract-getValueEncryptor-loadConfigFile-bbf6c8c"
        },
        "telemetry": {
            "id": "372914eb-4c81-43fc-a933-022f5701e445",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 1387,
                "lineStart": 59,
                "lineEnd": 1445,
                "bodyLineStart": 59,
                "language": "java",
                "filePath": "/Users/abhiram/Documents/TBE/evaluation_projects/dbeaver/plugins/org.jkiss.dbeaver.registry/src/org/jkiss/dbeaver/registry/DataSourceSerializerModern.java",
                "sourceCode": "class DataSourceSerializerModern implements DataSourceSerializer\n{\n    // Navigator settings\n    static final String ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS = \"show-system-objects\"; //$NON-NLS-1$\n    static final String ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS = \"show-util-objects\"; //$NON-NLS-1$\n    static final String ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES = \"navigator-show-only-entities\"; //$NON-NLS-1$\n    static final String ATTR_NAVIGATOR_HIDE_FOLDERS = \"navigator-hide-folders\"; //$NON-NLS-1$\n    static final String ATTR_NAVIGATOR_HIDE_SCHEMAS = \"navigator-hide-schemas\"; //$NON-NLS-1$\n    static final String ATTR_NAVIGATOR_HIDE_VIRTUAL = \"navigator-hide-virtual\"; //$NON-NLS-1$\n    static final String ATTR_NAVIGATOR_MERGE_ENTITIES = \"navigator-merge-entities\"; //$NON-NLS-1$\n\n    private static final String ATTR_ORIGINAL_PROVIDER = \"original-provider\"; //$NON-NLS-1$\n    private static final String ATTR_ORIGINAL_DRIVER = \"original-driver\"; //$NON-NLS-1$\n    private static final String ATTR_DRIVER_SUBSTITUTION = \"driver-substitution\"; //$NON-NLS-1$\n\n    public static final String TAG_ORIGIN = \"origin\"; //$NON-NLS-1$\n    private static final String ATTR_ORIGIN_TYPE = \"$type\"; //$NON-NLS-1$\n    private static final String ATTR_ORIGIN_CONFIGURATION = \"$configuration\";\n    public static final String ATTR_DPI_ENABLED = \"dpi-enabled\";\n\n    private static final Log log = Log.getLog(DataSourceSerializerModern.class);\n    private static final String NODE_CONNECTION = \"#connection\"; //$NON-NLS-1$\n    private static final String USE_PROJECT_PASSWORD = \"useProjectPassword\"; //$NON-NLS-1$\n    private static final String CONFIGURATION_FOLDERS = \"folders\"; //$NON-NLS-1$\n    private static final String ENCRYPTED_CONFIGURATION = \"secureProject\"; //$NON-NLS-1$\n\n    private static final Gson CONFIG_GSON = new GsonBuilder()\n        .setLenient()\n        .serializeNulls()\n        .create();\n    private static final Gson SECURE_GSON = new GsonBuilder()\n        .setLenient()\n        .serializeNulls()\n        .create();\n\n    private boolean passwordReadCanceled = false;\n    private boolean passwordWriteCanceled = false;\n\n    @NotNull\n    private final DataSourceRegistry registry;\n    // Secure props.\n    //  0 level: datasource ID\n    //  1 level: object type (connection or handler id)\n    //  2 level: map of secured properties\n    private final Map<String, Map<String, Map<String, String>>> secureProperties = new LinkedHashMap<>();\n    private final boolean isDetachedProcess = DBWorkbench.getPlatform().getApplication().isDetachedProcess();\n\n    DataSourceSerializerModern(@NotNull DataSourceRegistry registry) {\n        this.registry = registry;\n    }\n\n    @Override\n    public void saveDataSources(\n        DBRProgressMonitor monitor,\n        DataSourceConfigurationManager configurationManager,\n        DBPDataSourceConfigurationStorage configurationStorage,\n        List<DataSourceDescriptor> localDataSources\n    ) throws DBException, IOException {\n        ByteArrayOutputStream dsConfigBuffer = new ByteArrayOutputStream(10000);\n        try (OutputStreamWriter osw = new OutputStreamWriter(dsConfigBuffer, StandardCharsets.UTF_8)) {\n            try (JsonWriter jsonWriter = CONFIG_GSON.newJsonWriter(osw)) {\n                jsonWriter.setIndent(JSONUtils.DEFAULT_INDENT);\n                jsonWriter.beginObject();\n\n                // Save folders\n                if (configurationStorage.isDefault()) {\n                    jsonWriter.name(CONFIGURATION_FOLDERS);\n                    jsonWriter.beginObject();\n                    // Folders (only for default storage)\n                    Set<DBPDataSourceFolder> globalFolders = registry.getTemporaryFolders();\n                    for (DataSourceFolder folder : registry.getAllFolders()) {\n                        if (!globalFolders.contains(folder)) {\n                            saveFolder(jsonWriter, folder);\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                Map<String, DBVModel> virtualModels = new LinkedHashMap<>();\n                Map<String, DBPConnectionType> connectionTypes = new LinkedHashMap<>();\n                Map<String, Map<String, DBPDriver>> drivers = new LinkedHashMap<>();\n                Map<String, DBPExternalConfiguration> externalConfigurations = new LinkedHashMap<>();\n                {\n                    // Save connections\n                    jsonWriter.name(\"connections\");\n                    jsonWriter.beginObject();\n                    for (DataSourceDescriptor dataSource : localDataSources) {\n                        // Skip temporary\n                        if (!dataSource.isDetached()) {\n                            saveDataSource(configurationManager, jsonWriter, dataSource, externalConfigurations);\n                            if (dataSource.getVirtualModel().hasValuableData()) {\n                                virtualModels.put(dataSource.getVirtualModel().getId(), dataSource.getVirtualModel());\n                            }\n                            DBPConnectionType connectionType = dataSource.getConnectionConfiguration().getConnectionType();\n                            /*if (!connectionType.isPredefined()) */{\n                                connectionTypes.put(connectionType.getId(), connectionType);\n                            }\n                            DBPDriver driver = dataSource.getDriver();\n                            if (driver.isCustom() && !driver.getProviderDescriptor().isTemporary()) {\n                                Map<String, DBPDriver> driverMap = drivers.computeIfAbsent(driver.getProviderId(), s -> new LinkedHashMap<>());\n                                driverMap.put(driver.getId(), driver);\n                            }\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n\n                if (configurationStorage.isDefault()) {\n                    if (!virtualModels.isEmpty()) {\n                        // Save virtual models\n                        jsonWriter.name(\"virtual-models\");\n                        jsonWriter.beginObject();\n                        jsonWriter.setIndent(JSONUtils.EMPTY_INDENT);\n                        for (DBVModel model : virtualModels.values()) {\n                            model.serialize(monitor, jsonWriter);\n                        }\n                        jsonWriter.endObject();\n                        jsonWriter.setIndent(JSONUtils.DEFAULT_INDENT);\n                    }\n                    // Network profiles\n                    List<DBWNetworkProfile> profiles = registry.getNetworkProfiles();\n                    if (!CommonUtils.isEmpty(profiles)) {\n                        saveNetworkProfiles(configurationManager, jsonWriter, profiles);\n                    }\n                    // Auth profiles\n                    List<DBAAuthProfile> authProfiles = registry.getAllAuthProfiles();\n                    if (!CommonUtils.isEmpty(authProfiles)) {\n                        saveAuthProfiles(configurationManager, jsonWriter, authProfiles);\n                    }\n                    // Filters\n                    List<DBSObjectFilter> savedFilters = registry.getSavedFilters();\n                    if (!CommonUtils.isEmpty(savedFilters)) {\n                        jsonWriter.name(\"saved-filters\");\n                        jsonWriter.beginArray();\n                        for (DBSObjectFilter cf : savedFilters) {\n                            if (!cf.isEmpty()) {\n                                saveObjectFiler(jsonWriter, null, null, cf);\n                            }\n                        }\n                        jsonWriter.endArray();\n                    }\n                    // Connection types\n                    if (!CommonUtils.isEmpty(connectionTypes)) {\n                        jsonWriter.name(\"connection-types\");\n                        jsonWriter.beginObject();\n                        for (DBPConnectionType ct : connectionTypes.values()) {\n                            jsonWriter.name(ct.getId());\n                            jsonWriter.beginObject();\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, ct.getName());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_COLOR, ct.getColor());\n                            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, ct.getDescription());\n                            JSONUtils.field(jsonWriter, \"auto-commit\", ct.isAutocommit());\n                            JSONUtils.field(jsonWriter, \"confirm-execute\", ct.isConfirmExecute());\n                            JSONUtils.field(jsonWriter, \"confirm-data-change\", ct.isConfirmDataChange());\n                            JSONUtils.field(jsonWriter, \"smart-commit\", ct.isSmartCommit());\n                            JSONUtils.field(jsonWriter, \"smart-commit-recover\", ct.isSmartCommitRecover());\n                            JSONUtils.field(jsonWriter, \"auto-close-transactions\", ct.isAutoCloseTransactions());\n                            JSONUtils.field(jsonWriter, \"close-transactions-period\", ct.getCloseIdleTransactionPeriod());\n                            JSONUtils.field(jsonWriter, \"auto-close-connections\", ct.isAutoCloseConnections());\n                            JSONUtils.field(jsonWriter, \"close-connections-period\", ct.getCloseIdleConnectionPeriod());\n                            serializeModifyPermissions(jsonWriter, ct);\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    // Drivers\n                    if (!CommonUtils.isEmpty(drivers)) {\n                        jsonWriter.name(\"drivers\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, Map<String, DBPDriver>> dmap : drivers.entrySet()) {\n                            jsonWriter.name(dmap.getKey());\n                            jsonWriter.beginObject();\n                            for (DBPDriver driver : dmap.getValue().values()) {\n                                new DriverDescriptorSerializerModern().serializeDriver(\n                                    jsonWriter, (DriverDescriptor) driver, true);\n                            }\n                            jsonWriter.endObject();\n                        }\n                        jsonWriter.endObject();\n                    }\n\n                    // External configurations\n                    if (!DBWorkbench.isDistributed() && !DBWorkbench.getPlatform().getApplication().isMultiuser() && !CommonUtils.isEmpty(externalConfigurations)) {\n                        jsonWriter.name(\"external-configurations\");\n                        jsonWriter.beginObject();\n                        for (Map.Entry<String, DBPExternalConfiguration> ecfg : externalConfigurations.entrySet()) {\n                            jsonWriter.name(ecfg.getKey());\n                            JSONUtils.serializeMap(jsonWriter, ecfg.getValue().getProperties());\n                        }\n                        jsonWriter.endObject();\n                    }\n                }\n\n                jsonWriter.endObject();\n                jsonWriter.flush();\n            }\n        } catch (IOException e) {\n            log.error(\"IO error while saving datasources configuration\", e);\n        }\n\n        String jsonString = dsConfigBuffer.toString(StandardCharsets.UTF_8);\n        saveConfigFile(\n            configurationManager,\n            configurationStorage.getStorageName(),\n            jsonString,\n            false,\n            registry.getProject().isEncryptedProject());\n\n        if (!configurationManager.isSecure()) {\n            saveSecureCredentialsFile(configurationManager, configurationStorage);\n        }\n    }\n\n    private void saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles) throws IOException {\n        jsonWriter.name(\"network-profiles\");\n        jsonWriter.beginObject();\n        for (DBWNetworkProfile np : profiles) {\n            jsonWriter.name(np.getProfileId());\n            jsonWriter.beginObject();\n            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, np.getProfileName());\n            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, np.getProfileDescription());\n            jsonWriter.name(\"handlers\");\n            jsonWriter.beginObject();\n            for (DBWHandlerConfiguration configuration : np.getConfigurations()) {\n                if (configuration.hasValuableInfo()) {\n                    saveNetworkHandlerConfiguration(\n                        configurationManager, jsonWriter,\n                        null,\n                        np,\n                        configuration);\n                }\n            }\n            jsonWriter.endObject();\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n\n    private void saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles) throws IOException {\n        jsonWriter.name(\"auth-profiles\");\n        jsonWriter.beginObject();\n        for (DBAAuthProfile authProfile : authProfiles) {\n            jsonWriter.name(authProfile.getProfileId());\n            jsonWriter.beginObject();\n            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_NAME, authProfile.getProfileName());\n            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_DESCRIPTION, authProfile.getProfileDescription());\n            JSONUtils.fieldNE(jsonWriter, RegistryConstants.ATTR_AUTH_MODEL, authProfile.getAuthModelId());\n            if (authProfile.isSavePassword()) {\n                JSONUtils.field(jsonWriter, RegistryConstants.ATTR_SAVE_PASSWORD, authProfile.isSavePassword());\n            }\n            SecureCredentials credentials = new SecureCredentials(authProfile);\n            if (configurationManager.isSecure()) {\n                savePlainCredentials(jsonWriter, credentials);\n            } else {\n                // Save all auth properties in secure storage\n                saveSecuredCredentials(null, authProfile, null, credentials);\n            }\n            jsonWriter.endObject();\n        }\n        jsonWriter.endObject();\n    }\n\n    private String loadConfigFile(InputStream stream, boolean decrypt) throws DBException, IOException {\n        ByteArrayOutputStream credBuffer = new ByteArrayOutputStream();\n        try {\n            IOUtils.copyStream(stream, credBuffer);\n        } catch (Exception e) {\n            log.error(\"Error reading secure credentials file\", e);\n        }\n        if (!decrypt) {\n            return credBuffer.toString(StandardCharsets.UTF_8);\n        } else {\n            DBPProject project = registry.getProject();\n            DBSValueEncryptor encryptor = getValueEncryptor(project);\n            try {\n                return new String(encryptor.decryptValue(credBuffer.toByteArray()), StandardCharsets.UTF_8);\n            } catch (Exception e) {\n                throw new IOException(\"Error decrypting encrypted file\", e);\n            }\n        }\n    }\n\n    private DefaultValueEncryptor getValueEncryptor(DBPProject project) throws DBInterruptedException {\n        SecretKey localSecretKey = project.getLocalSecretKey();\n        if (localSecretKey == null) {\n            throw new DBInterruptedException(\"Error of getting user credentials (operation was canceled)\");\n        }\n        return new DefaultValueEncryptor(localSecretKey);\n    }\n\n    private void saveConfigFile(DataSourceConfigurationManager configurationManager, String name, String contents, boolean teamPrivate, boolean encrypt) throws DBException, IOException {\n        byte[] binaryContents = null;\n        if (contents != null) {\n            if (encrypt) {\n                // Serialize and encrypt\n                DBSValueEncryptor valueEncryptor = new DefaultValueEncryptor(registry.getProject().getLocalSecretKey());\n                binaryContents = valueEncryptor.encryptValue(contents.getBytes(StandardCharsets.UTF_8));\n            } else {\n                binaryContents = contents.getBytes(StandardCharsets.UTF_8);\n            }\n        }\n\n        // Save result to file\n        configurationManager.writeConfiguration(name, binaryContents);\n    }\n\n    private void saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage) {\n        String credFile = DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX + storage.getStorageSubId() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT;\n        try {\n            if (secureProperties.isEmpty()) {\n                saveConfigFile(configurationManager, credFile, null, true, true);\n            } else {\n                // Serialize and encrypt\n                String jsonString = SECURE_GSON.toJson(secureProperties, Map.class);\n                saveConfigFile(configurationManager, credFile, jsonString, true, true);\n            }\n        } catch (Exception e) {\n            log.error(\"Error saving secure credentials\", e);\n        }\n    }\n\n    @Override\n    public boolean parseDataSources(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @NotNull DataSourceRegistry.ParseResults parseResults,\n        @Nullable Collection<String> dataSourceIds,\n        boolean refresh\n    ) throws DBException, IOException {\n        var connectionConfigurationChanged = false;\n\n        // Read in this particular order to handle configuration reading errors first, but process in reverse order later\n        Map<String, Map<String, Map<String, String>>> secureCredentialsMap = null;\n        Map<String, Object> configurationMap = null;\n\n        // process projectConfiguration\n        if (CommonUtils.toBoolean(registry.getProject().getProjectProperty(ENCRYPTED_CONFIGURATION))\n            && (!DBWorkbench.getPlatform().getApplication().isHeadlessMode())\n            && DBWorkbench.getPlatform().getApplication().isCommunity()) {\n            DBWorkbench.getPlatformUI().showWarningMessageBox(\n                RegistryMessages.project_open_cannot_read_configuration_title,\n                NLS.bind(RegistryMessages.project_open_cannot_read_configuration_message,\n                    registry.getProject().getName()));\n            throw new DBInterruptedException(\"Project secure credentials read canceled by user.\");\n        }\n        try {\n            configurationMap = readConfiguration(configurationStorage, configurationManager, dataSourceIds);\n        } catch (DBInterruptedException e) {\n            throw e;\n        } catch (DBException e) {\n            log.error(e);\n        }\n        // process project credential\n        if (CommonUtils.toBoolean(registry.getProject().getProjectProperty(USE_PROJECT_PASSWORD))\n            && (!DBWorkbench.getPlatform().getApplication().isHeadlessMode())\n            && (DBWorkbench.getPlatform().getApplication().isCommunity())) {\n            if (DBWorkbench.getPlatformUI().confirmAction(\n                RegistryMessages.project_open_cannot_read_credentials_title,\n                NLS.bind(RegistryMessages.project_open_cannot_read_credentials_message,\n                    registry.getProject().getName()),\n                RegistryMessages.project_open_cannot_read_credentials_button_text, true)) {\n                // in case of user agreed lost project credentials - proceed opening\n                log.info(\"The user agreed lost project credentials.\");\n            } else {\n                // in case of canceling erase credentials intercept original exception\n                throw new DBInterruptedException(\"Project secure credentials read canceled by user.\");\n            }\n        }\n        try {\n            secureCredentialsMap = readSecureCredentials(configurationStorage, configurationManager, dataSourceIds);\n        } catch (DBInterruptedException e) {\n            throw e;\n        } catch (DBException e) {\n            log.error(e);\n        }\n        if (secureCredentialsMap != null) {\n            secureProperties.putAll(secureCredentialsMap);\n        }\n\n        if (configurationMap != null) {\n            // Folders\n            for (Map.Entry<String, Map<String, Object>> folderMap : JSONUtils.getNestedObjects(configurationMap, CONFIGURATION_FOLDERS)) {\n                String name = folderMap.getKey();\n                String description = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_DESCRIPTION);\n                String parentFolder = JSONUtils.getObjectProperty(folderMap.getValue(), RegistryConstants.ATTR_PARENT);\n                DataSourceFolder parent = parentFolder == null ? null : registry.findFolderByPath(parentFolder, true, parseResults);\n                DataSourceFolder folder = parent == null ? registry.findFolderByPath(name, true, parseResults) : parent.getChild(name);\n                if (folder == null) {\n                    folder = new DataSourceFolder(registry, parent, name, description);\n                    parseResults.addedFolders.add(folder);\n                } else {\n                    folder.setDescription(description);\n                    parseResults.updatedFolders.add(folder);\n                }\n            }\n\n            // Connection types\n            for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(configurationMap, \"connection-types\")) {\n                String id = ctMap.getKey();\n                Map<String, Object> ctConfig = ctMap.getValue();\n                String name = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_NAME);\n                String description = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_DESCRIPTION);\n                String color = JSONUtils.getObjectProperty(ctConfig, RegistryConstants.ATTR_COLOR);\n                Boolean autoCommit = JSONUtils.getObjectProperty(ctConfig, \"auto-commit\");\n                Boolean confirmExecute = JSONUtils.getObjectProperty(ctConfig, \"confirm-execute\");\n                Boolean confirmDataChange = JSONUtils.getObjectProperty(ctConfig, \"confirm-data-change\");\n                Boolean smartCommit = JSONUtils.getObjectProperty(ctConfig, \"smart-commit\");\n                Boolean smartCommitRecover = JSONUtils.getObjectProperty(ctConfig, \"smart-commit-recover\");\n                Boolean autoCloseTransactions = JSONUtils.getObjectProperty(ctConfig, \"auto-close-transactions\");\n                Object closeTransactionsPeriod = JSONUtils.getObjectProperty(ctConfig, \"close-transactions-period\");\n                Boolean autoCloseConnections = JSONUtils.getObjectProperty(ctConfig, \"auto-close-connections\");\n                Object closeConnectionsPeriod = JSONUtils.getObjectProperty(ctConfig, \"close-connections-period\");\n                DBPConnectionType ct = DBWorkbench.getPlatform().getDataSourceProviderRegistry().getConnectionType(id, null);\n                if (ct == null) {\n                    ct = new DBPConnectionType(\n                        id,\n                        name,\n                        color,\n                        description,\n                        CommonUtils.toBoolean(autoCommit),\n                        CommonUtils.toBoolean(confirmExecute),\n                        CommonUtils.toBoolean(confirmDataChange),\n                        CommonUtils.toBoolean(smartCommit),\n                        CommonUtils.toBoolean(smartCommitRecover),\n                        CommonUtils.toBoolean(autoCloseTransactions),\n                        CommonUtils.toLong(closeTransactionsPeriod),\n                        CommonUtils.toBoolean(autoCloseConnections),\n                        CommonUtils.toLong(closeConnectionsPeriod));\n                    DBWorkbench.getPlatform().getDataSourceProviderRegistry().addConnectionType(ct);\n                }\n                deserializeModifyPermissions(ctConfig, ct);\n            }\n\n            // Drivers\n            // TODO: load drivers config\n\n            // External configurations\n            Map<String, DBPExternalConfiguration> externalConfigurations = new LinkedHashMap<>();\n            if (!DBWorkbench.isDistributed()) {\n                // External configurations not used in distributed mode\n                for (Map.Entry<String, Map<String, Object>> ctMap : JSONUtils.getNestedObjects(configurationMap, \"external-configurations\")) {\n                    String id = ctMap.getKey();\n                    Map<String, Object> configMap = ctMap.getValue();\n                    externalConfigurations.put(id, new DBPExternalConfiguration(id, () -> configMap));\n                }\n            }\n\n            // Virtual models\n            Map<String, DBVModel> modelMap = new LinkedHashMap<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(configurationMap, \"virtual-models\")) {\n                String id = vmMap.getKey();\n                DBVModel model = new DBVModel(id, vmMap.getValue());\n                modelMap.put(id, model);\n            }\n\n            // Network profiles\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(configurationMap, \"network-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBWNetworkProfile profile = new DBWNetworkProfile(registry.getProject());\n                profile.setProfileName(profileId);\n                profile.setProfileName(profileId);\n                profile.setProperties(JSONUtils.deserializeStringMap(profileMap, \"properties\"));\n\n                for (Map.Entry<String, Map<String, Object>> handlerMap : JSONUtils.getNestedObjects(profileMap, \"handlers\")) {\n                    DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(configurationManager, null, profile, handlerMap);\n                    if (configuration != null) {\n                        profile.updateConfiguration(configuration);\n                    }\n                }\n\n                registry.updateNetworkProfile(profile);\n            }\n\n            // Auth profiles\n            List<DBAAuthProfile> profiles = new ArrayList<>();\n            for (Map.Entry<String, Map<String, Object>> vmMap : JSONUtils.getNestedObjects(configurationMap, \"auth-profiles\")) {\n                String profileId = vmMap.getKey();\n                Map<String, Object> profileMap = vmMap.getValue();\n                DBAAuthProfile profile = new DBAAuthProfile(registry.getProject());\n                profile.setProfileId(profileId);\n                profile.setProfileName(JSONUtils.getString(profileMap, RegistryConstants.ATTR_NAME));\n                profile.setAuthModelId(JSONUtils.getString(profileMap, RegistryConstants.ATTR_AUTH_MODEL));\n                profile.setSavePassword(JSONUtils.getBoolean(profileMap, RegistryConstants.ATTR_SAVE_PASSWORD));\n\n                SecureCredentials authCreds = configurationManager.isSecure() ?\n                    readPlainCredentials(profileMap) :\n                    readSecuredCredentials(null, profile, null);\n                profile.setUserName(authCreds.getUserName());\n                profile.setUserPassword(authCreds.getUserPassword());\n                profile.setProperties(authCreds.getProperties());\n                profiles.add(profile);\n            }\n            registry.setAuthProfiles(profiles);\n\n            // Connections\n            for (Map.Entry<String, Map<String, Object>> conMap : JSONUtils.getNestedObjects(configurationMap, \"connections\")) {\n                String id = conMap.getKey();\n                Map<String, Object> conObject = conMap.getValue();\n\n                final String originalProviderId = CommonUtils.toString(conObject.get(ATTR_ORIGINAL_PROVIDER));\n                final String originalDriverId = CommonUtils.toString(conObject.get(ATTR_ORIGINAL_DRIVER));\n                final String substitutedProviderId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_PROVIDER));\n                final String substitutedDriverId = CommonUtils.toString(conObject.get(RegistryConstants.ATTR_DRIVER));\n\n                DriverDescriptor originalDriver;\n                DriverDescriptor substitutedDriver;\n\n                if (CommonUtils.isEmpty(originalProviderId) || CommonUtils.isEmpty(originalDriverId)) {\n                    originalDriver = parseDriver(id, substitutedProviderId, substitutedDriverId, !isDetachedProcess);\n                    substitutedDriver = originalDriver;\n                } else {\n                    originalDriver = parseDriver(id, originalProviderId, originalDriverId, !isDetachedProcess);\n                    substitutedDriver = parseDriver(id, substitutedProviderId, substitutedDriverId, false);\n                }\n                if (originalDriver == null) {\n                    continue;\n                }\n                if (substitutedDriver == null || substitutedDriver.isTemporary()) {\n                    substitutedDriver = originalDriver;\n                }\n\n                if (getReplacementDriver(substitutedDriver) == originalDriver) {\n                    final DriverDescriptor original = originalDriver;\n                    originalDriver = substitutedDriver;\n                    substitutedDriver = original;\n                }\n\n                substitutedDriver = getReplacementDriver(substitutedDriver);\n\n                DataSourceDescriptor dataSource = registry.getDataSource(id);\n                boolean newDataSource = (dataSource == null);\n                DataSourceDescriptor oldDataSource = null;\n                if (newDataSource) {\n                    DBPDataSourceOrigin origin;\n                    Map<String, Object> originProperties = JSONUtils.deserializeProperties(conObject, TAG_ORIGIN);\n                    if (CommonUtils.isEmpty(originProperties) || !originProperties.containsKey(ATTR_ORIGIN_TYPE)) {\n                        origin = DataSourceOriginLocal.INSTANCE;\n                    } else {\n                        String originID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_TYPE));\n                        String extConfigID = CommonUtils.toString(originProperties.remove(ATTR_ORIGIN_CONFIGURATION));\n                        DBPExternalConfiguration extConfig = null;\n                        if (!CommonUtils.isEmpty(extConfigID)) {\n                            extConfig = externalConfigurations.get(extConfigID);\n                        }\n                        origin = new DataSourceOriginLazy(originID, originProperties, extConfig);\n                    }\n                    dataSource = new DataSourceDescriptor(\n                        registry,\n                        configurationStorage.isVirtual() ? registry.getDefaultStorage() : configurationStorage,\n                        origin,\n                        id,\n                        originalDriver,\n                        substitutedDriver,\n                        new DBPConnectionConfiguration()\n                    );\n                } else {\n                    oldDataSource = new DataSourceDescriptor(dataSource, registry);\n                    // Clean settings - they have to be loaded later by parser\n                    dataSource.getConnectionConfiguration().setProperties(Collections.emptyMap());\n                    dataSource.getConnectionConfiguration().setHandlers(Collections.emptyList());\n                    dataSource.clearFilters();\n                }\n                dataSource.setName(JSONUtils.getString(conObject, RegistryConstants.ATTR_NAME));\n                dataSource.setDescription(JSONUtils.getString(conObject, RegistryConstants.TAG_DESCRIPTION));\n                dataSource.forceSetSharedCredentials(JSONUtils.getBoolean(conObject,\n                    RegistryConstants.ATTR_SHARED_CREDENTIALS));\n                dataSource.setSavePassword(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_SAVE_PASSWORD));\n                dataSource.setTemplate(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_TEMPLATE));\n                dataSource.setDriverSubstitution(DataSourceProviderRegistry.getInstance()\n                    .getDriverSubstitution(CommonUtils.notEmpty(JSONUtils.getString(conObject, ATTR_DRIVER_SUBSTITUTION))));\n                dataSource.setDetachedProcessEnabled(JSONUtils.getBoolean(conObject, ATTR_DPI_ENABLED));\n\n                DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n                navSettings.setShowSystemObjects(JSONUtils.getBoolean(conObject,\n                    DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS));\n                navSettings.setShowUtilityObjects(JSONUtils.getBoolean(conObject,\n                    DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS));\n                navSettings.setShowOnlyEntities(JSONUtils.getBoolean(conObject,\n                    DataSourceSerializerModern.ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES));\n                navSettings.setHideFolders(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_FOLDERS));\n                navSettings.setHideSchemas(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_SCHEMAS));\n                navSettings.setHideVirtualModel(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_HIDE_VIRTUAL));\n                navSettings.setMergeEntities(JSONUtils.getBoolean(conObject, DataSourceSerializerModern.ATTR_NAVIGATOR_MERGE_ENTITIES));\n\n                dataSource.setConnectionReadOnly(JSONUtils.getBoolean(conObject, RegistryConstants.ATTR_READ_ONLY));\n                final String folderPath = JSONUtils.getString(conObject, RegistryConstants.ATTR_FOLDER);\n                dataSource.setFolder(folderPath == null ? null : registry.findFolderByPath(folderPath, true, parseResults));\n                dataSource.setLockPasswordHash(CommonUtils.toString(conObject.get(RegistryConstants.ATTR_LOCK_PASSWORD)));\n\n                // Connection settings\n                {\n                    Map<String, Object> cfgObject = JSONUtils.getObject(conObject, \"configuration\");\n                    DBPConnectionConfiguration config = dataSource.getConnectionConfiguration();\n                    config.setHostName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOST));\n                    config.setHostPort(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PORT));\n                    config.setServerName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_SERVER));\n                    config.setDatabaseName(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_DATABASE));\n                    config.setUrl(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_URL));\n                    if (!passwordReadCanceled) {\n                        final SecureCredentials creds = configurationManager.isSecure() ?\n                            readPlainCredentials(cfgObject) :\n                            readSecuredCredentials(dataSource, null, null);\n                        config.setUserName(creds.getUserName());\n                        if (dataSource.isSavePassword() || !CommonUtils.isEmpty(creds.getUserPassword())) {\n                            config.setUserPassword(creds.getUserPassword());\n                        } else {\n                            config.setUserPassword(null);\n                        }\n                        boolean savePasswordApplicable = (!dataSource.getProject()\n                            .isUseSecretStorage() || dataSource.isSharedCredentials());\n                        if (savePasswordApplicable && !CommonUtils.isEmpty(creds.getUserPassword())) {\n                            dataSource.setSavePassword(true);\n                        }\n                        dataSource.getConnectionConfiguration().setAuthProperties(creds.getProperties());\n                        dataSource.resetAllSecrets();\n                    }\n                    {\n                        // Still try to read credentials directly from configuration (#6564)\n                        String userName = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_USER);\n                        if (!CommonUtils.isEmpty(userName)) config.setUserName(userName);\n                        String userPassword = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_PASSWORD);\n                        if (!CommonUtils.isEmpty(userPassword)) config.setUserPassword(userPassword);\n                    }\n\n                    config.setClientHomeId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_HOME));\n                    config.setConfigProfileSource(JSONUtils.getString(cfgObject, \"config-profile-source\"));\n                    config.setConfigProfileName(JSONUtils.getString(cfgObject, \"config-profile\"));\n                    config.setConnectionType(\n                        DataSourceProviderRegistry.getInstance().getConnectionType(\n                            JSONUtils.getString(cfgObject, RegistryConstants.ATTR_TYPE), DBPConnectionType.DEFAULT_TYPE));\n                    String configurationType = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_CONFIGURATION_TYPE);\n                    if (!CommonUtils.isEmpty(configurationType)) {\n                        config.setConfigurationType(CommonUtils.valueOf(DBPDriverConfigurationType.class, configurationType, DBPDriverConfigurationType.MANUAL));\n                    }\n                    String colorValue = JSONUtils.getString(cfgObject, RegistryConstants.ATTR_COLOR);\n                    if (!CommonUtils.isEmpty(colorValue)) {\n                        config.setConnectionColor(colorValue);\n                    }\n                    int keepAlive = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_KEEP_ALIVE);\n                    if (keepAlive > 0) {\n                        config.setKeepAliveInterval(keepAlive);\n                    }\n                    boolean closeIdleEnabled = JSONUtils.getBoolean(cfgObject, RegistryConstants.ATTR_CLOSE_IDLE_ENABLED);\n                    config.setCloseIdleConnection(closeIdleEnabled);\n                    int closeIdle = JSONUtils.getInteger(cfgObject, RegistryConstants.ATTR_CLOSE_IDLE);\n                    if (closeIdle > 0) {\n                        config.setCloseIdleInterval(closeIdle);\n                    }\n\n                    config.setProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROPERTIES));\n                    config.setProviderProperties(JSONUtils.deserializeStringMap(cfgObject, RegistryConstants.TAG_PROVIDER_PROPERTIES));\n                    config.setAuthModelId(JSONUtils.getString(cfgObject, RegistryConstants.ATTR_AUTH_MODEL));\n                    //backward compatibility\n                    //in the current version the configuration should not contain auth-properties, they should be in secrets\n                    if (cfgObject.containsKey(RegistryConstants.TAG_AUTH_PROPERTIES)) {\n                        config.setAuthProperties(JSONUtils.deserializeStringMapOrNull(cfgObject, RegistryConstants.TAG_AUTH_PROPERTIES));\n                    }\n\n                    // Events\n                    for (Map.Entry<String, Map<String, Object>> eventObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_EVENTS)) {\n                        DBPConnectionEventType eventType = CommonUtils.valueOf(DBPConnectionEventType.class, eventObject.getKey(), DBPConnectionEventType.BEFORE_CONNECT);\n                        Map<String, Object> eventCfg = eventObject.getValue();\n                        DBRShellCommand command = new DBRShellCommand(\"\");\n                        command.setEnabled(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_ENABLED));\n                        command.setShowProcessPanel(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_SHOW_PANEL));\n                        command.setWaitProcessFinish(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS));\n                        if (command.isWaitProcessFinish()) {\n                            command.setWaitProcessTimeoutMs(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT));\n                        }\n                        command.setTerminateAtDisconnect(JSONUtils.getBoolean(eventCfg, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT));\n                        command.setPauseAfterExecute(JSONUtils.getInteger(eventCfg, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE));\n                        command.setWorkingDirectory(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_WORKING_DIRECTORY));\n                        command.setCommand(JSONUtils.getString(eventCfg, RegistryConstants.ATTR_COMMAND));\n\n                        config.setEvent(eventType, command);\n                    }\n\n                    // Handlers\n                    for (Map.Entry<String, Map<String, Object>> handlerObject : JSONUtils.getNestedObjects(cfgObject, RegistryConstants.TAG_HANDLERS)) {\n                        DBWHandlerConfiguration configuration = parseNetworkHandlerConfig(configurationManager, dataSource, null, handlerObject);\n                        if (configuration != null) {\n                            dataSource.getConnectionConfiguration().updateHandler(configuration);\n                        }\n                    }\n\n                    // Bootstrap\n                    Map<String, Object> bootstrapCfg = JSONUtils.getObject(cfgObject, RegistryConstants.TAG_BOOTSTRAP);\n                    DBPConnectionBootstrap bootstrap = config.getBootstrap();\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_AUTOCOMMIT)) {\n                        bootstrap.setDefaultAutoCommit(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_AUTOCOMMIT));\n                    }\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_TXN_ISOLATION)) {\n                        bootstrap.setDefaultTransactionIsolation(JSONUtils.getInteger(bootstrapCfg, RegistryConstants.ATTR_TXN_ISOLATION));\n                    }\n                    bootstrap.setDefaultCatalogName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_CATALOG));\n                    bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_SCHEMA));\n                    String defObjectName = JSONUtils.getString(bootstrapCfg, RegistryConstants.ATTR_DEFAULT_OBJECT);\n                    if (!CommonUtils.isEmpty(defObjectName) && CommonUtils.isEmpty(bootstrap.getDefaultSchemaName())) {\n                        bootstrap.setDefaultSchemaName(JSONUtils.getString(bootstrapCfg, defObjectName));\n                    }\n\n                    if (bootstrapCfg.containsKey(RegistryConstants.ATTR_IGNORE_ERRORS)) {\n                        bootstrap.setIgnoreErrors(JSONUtils.getBoolean(bootstrapCfg, RegistryConstants.ATTR_IGNORE_ERRORS));\n                    }\n                    bootstrap.setInitQueries(JSONUtils.deserializeStringList(bootstrapCfg, RegistryConstants.TAG_QUERY));\n\n                    if (originalDriver != substitutedDriver) {\n                        if (substitutedDriver.getProviderDescriptor().supportsDriverMigration()) {\n                            final DBPDataSourceProvider dataSourceProvider = substitutedDriver.getDataSourceProvider();\n                            if (dataSourceProvider instanceof DBPConnectionConfigurationMigrator) {\n                                final DBPConnectionConfigurationMigrator migrator = (DBPConnectionConfigurationMigrator) dataSourceProvider;\n                                if (migrator.migrationRequired(config)) {\n                                    final DBPConnectionConfiguration migrated = new DBPConnectionConfiguration(config);\n                                    try {\n                                        migrator.migrateConfiguration(config, migrated);\n                                        dataSource.setConnectionInfo(migrated);\n                                        log.debug(\"Connection configuration for data source '\" + id + \"' was migrated successfully\");\n                                    } catch (DBException e) {\n                                        log.error(\"Unable to migrate connection configuration for data source '\" + id + \"'\", e);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Permissions\n                {\n                    deserializeModifyPermissions(conObject, dataSource);\n                }\n\n                // Filters\n                for (Map<String, Object> filterCfg : JSONUtils.getObjectList(conObject, RegistryConstants.TAG_FILTERS)) {\n                    String typeName = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_TYPE);\n                    String objectID = JSONUtils.getString(filterCfg, RegistryConstants.ATTR_ID);\n                    if (!CommonUtils.isEmpty(typeName)) {\n                        DBSObjectFilter filter = readObjectFiler(filterCfg);\n                        dataSource.updateObjectFilter(typeName, objectID, filter);\n                    }\n                }\n\n                {\n                    // Extensions\n                    if (conObject.containsKey(RegistryConstants.TAG_PROPERTIES)) {\n                        // Backward compatibility\n                        dataSource.setExtensions(\n                            JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_PROPERTIES));\n                    } else {\n                        dataSource.setExtensions(\n                            JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_EXTENSIONS));\n                    }\n                }\n                dataSource.setTags(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_TAGS));\n\n                // Preferences\n                Map<String, String> preferenceProperties = dataSource.getPreferenceStore().getProperties();\n                preferenceProperties.clear();\n                preferenceProperties.putAll(\n                    JSONUtils.deserializeStringMap(conObject, RegistryConstants.TAG_CUSTOM_PROPERTIES)\n                );\n\n                // Virtual model\n                String vmID = CommonUtils.toString(conObject.get(\"virtual-model-id\"), id);\n                DBVModel dbvModel = modelMap.get(vmID);\n                if (dbvModel != null) {\n                    dataSource.setVirtualModel(dbvModel);\n                }\n\n                // Add to the list\n                if (newDataSource) {\n                    parseResults.addedDataSources.add(dataSource);\n                    connectionConfigurationChanged = true;\n                } else {\n                    parseResults.updatedDataSources.add(dataSource);\n                    if (!dataSource.equalSettings(oldDataSource)) {\n                        connectionConfigurationChanged = true;\n                    }\n                }\n            }\n\n            // Saved filters\n            for (Map<String, Object> ctMap : JSONUtils.getObjectList(configurationMap, \"saved-filters\")) {\n                DBSObjectFilter filter = readObjectFiler(ctMap);\n                registry.addSavedFilter(filter);\n            }\n        }\n        return connectionConfigurationChanged;\n\n    }\n\n    @Nullable\n    private Map<String, Map<String, Map<String, String>>> readSecureCredentials(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    ) throws DBException {\n        if (configurationManager.isSecure()) {\n            return null;\n        }\n        final String name = DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_PREFIX\n                + configurationStorage.getStorageSubId() + DBPDataSourceRegistry.CREDENTIALS_CONFIG_FILE_EXT;\n        try (InputStream is = configurationManager.readConfiguration(name, dataSourceIds)) {\n            if (is == null) {\n                return null;\n            }\n            final String data = loadConfigFile(is, true);\n            return CONFIG_GSON.fromJson(data, new TypeToken<Map<String, Map<String, Map<String, String>>>>() {\n            }.getType());\n        } catch (IOException e) {\n            // here we catch any exceptions that happens for secure credential\n            // reading\n            throw new DBException(\"Project secure credentials can not be read\", e);\n        }\n    }\n\n    @Nullable\n    private Map<String, Object> readConfiguration(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    ) throws DBException, IOException {\n        final InputStream is;\n        if (configurationStorage instanceof DataSourceMemoryStorage) {\n            is = ((DataSourceMemoryStorage) configurationStorage).getInputStream();\n        } else {\n            is = configurationManager.readConfiguration(configurationStorage.getStorageName(), dataSourceIds);\n        }\n        if (is == null) {\n            return null;\n        }\n        try (is) {\n            final String data = loadConfigFile(is, CommonUtils.toBoolean(registry.getProject().isEncryptedProject()));\n            return JSONUtils.parseMap(CONFIG_GSON, new StringReader(data));\n        } catch (DBInterruptedException e) {\n            // happens only if user cancelled entering password\n            // not a community level\n            throw e;\n        } catch (IOException e) {\n            // intercept exceptions for crypted configuration\n            // for community provide a dialog\n            throw new DBException(e.getMessage(), e);\n        }\n    }\n\n    @Nullable\n    private static DriverDescriptor parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    ) {\n        if (CommonUtils.isEmpty(providerId)) {\n            log.debug(\"Empty datasource provider for datasource '\" + id + \"'\");\n            return null;\n        }\n\n        if (CommonUtils.isEmpty(driverId)) {\n            log.debug(\"Empty driver for datasource '\" + id + \"'\");\n            return null;\n        }\n\n        DataSourceProviderDescriptor provider = DataSourceProviderRegistry.getInstance().getDataSourceProvider(providerId);\n        if (provider == null) {\n            if (createIfAbsent) {\n                log.debug(\"Can't find datasource provider \" + providerId + \" for datasource '\" + id + \"'\");\n                provider = (DataSourceProviderDescriptor) DataSourceProviderRegistry.getInstance().makeFakeProvider(providerId);\n            } else {\n                return null;\n            }\n        }\n\n        DriverDescriptor driver = provider.getOriginalDriver(driverId);\n        if (driver == null) {\n            if (createIfAbsent) {\n                log.debug(\"Can't find driver \" + driverId + \" in datasource provider \"\n                    + provider.getId() + \" for datasource '\" + id + \"'. Create new driver\");\n                driver = provider.createDriver(driverId);\n                driver.setName(driverId);\n                driver.setDescription(\"Missing driver \" + driverId);\n                driver.setDriverClassName(\"java.sql.Driver\");\n                driver.setTemporary(true);\n                provider.addDriver(driver);\n            } else {\n                return null;\n            }\n        }\n\n        return driver;\n    }\n\n    private void deserializeModifyPermissions(Map<String, Object> conObject, DBPDataSourcePermissionOwner permissionOwner) {\n        if (conObject == null) {\n            return;\n        }\n        Map<String, Object> securityCfg = JSONUtils.getObject(conObject, \"security\");\n        if (!CommonUtils.isEmpty(securityCfg)) {\n            List<String> permissionRestrictions = JSONUtils.deserializeStringList(securityCfg, \"permission-restrictions\");\n            if (!CommonUtils.isEmpty(permissionRestrictions)) {\n                List<DBPDataSourcePermission> permissions = new ArrayList<>();\n                for (String perm : permissionRestrictions) {\n                    try {\n                        DBPDataSourcePermission permission = DBPDataSourcePermission.getById(perm);\n                        if (permission != null) {\n                            permissions.add(permission);\n                        }\n                    } catch (IllegalArgumentException e) {\n                        log.debug(e);\n                    }\n                }\n                if (!permissions.isEmpty()) {\n                    permissionOwner.setModifyPermissions(permissions);\n                }\n            }\n        }\n    }\n\n    @Nullable\n    private DBWHandlerConfiguration parseNetworkHandlerConfig(\n        DataSourceConfigurationManager configurationManager,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)\n    {\n        String handlerId = handlerObject.getKey();\n        Map<String, Object> handlerCfg = handlerObject.getValue();\n\n        NetworkHandlerDescriptor handlerDescriptor = NetworkHandlerRegistry.getInstance().getDescriptor(handlerId);\n        if (handlerDescriptor == null) {\n            if (!isDetachedProcess) {\n                log.warn(\"Can't find network handler '\" + handlerId + \"'\");\n            }\n            return null;\n        } else {\n            DBWHandlerConfiguration curNetworkHandler = new DBWHandlerConfiguration(handlerDescriptor, dataSource);\n            curNetworkHandler.setEnabled(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_ENABLED));\n            curNetworkHandler.setSavePassword(JSONUtils.getBoolean(handlerCfg, RegistryConstants.ATTR_SAVE_PASSWORD));\n            if (!passwordReadCanceled) {\n                final SecureCredentials creds = configurationManager.isSecure() ?\n                    readPlainCredentials(handlerCfg) :\n                    readSecuredCredentials(dataSource, profile,\n                    \"network/\" + handlerId + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()));\n                curNetworkHandler.setUserName(creds.getUserName());\n                if (curNetworkHandler.isSavePassword()) {\n                    curNetworkHandler.setPassword(creds.getUserPassword());\n                }\n                if (creds.getProperties() != null) {\n                    curNetworkHandler.setSecureProperties(creds.getProperties());\n                }\n            }\n            {\n                // Still try to read credentials directly from configuration (#6564)\n                String userName = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_USER);\n                if (!CommonUtils.isEmpty(userName)) curNetworkHandler.setUserName(userName);\n                String userPassword = JSONUtils.getString(handlerCfg, RegistryConstants.ATTR_PASSWORD);\n                if (!CommonUtils.isEmpty(userPassword)) curNetworkHandler.setPassword(userPassword);\n            }\n\n            Map<String, Object> properties = JSONUtils.deserializeProperties(handlerCfg, RegistryConstants.TAG_PROPERTIES);\n            if (properties != null) {\n                curNetworkHandler.setProperties(properties);\n            }\n            return curNetworkHandler;\n        }\n    }\n\n    private static DBSObjectFilter readObjectFiler(Map<String, Object> map) {\n        DBSObjectFilter filter = new DBSObjectFilter();\n        filter.setName(JSONUtils.getString(map, RegistryConstants.ATTR_NAME));\n        filter.setDescription(JSONUtils.getString(map, RegistryConstants.ATTR_DESCRIPTION));\n        filter.setEnabled(JSONUtils.getBoolean(map, RegistryConstants.ATTR_ENABLED));\n        filter.setInclude(JSONUtils.deserializeStringList(map, RegistryConstants.TAG_INCLUDE));\n        filter.setExclude(JSONUtils.deserializeStringList(map, RegistryConstants.TAG_EXCLUDE));\n        return filter;\n    }\n\n    private static void saveFolder(JsonWriter json, DataSourceFolder folder)\n        throws IOException\n    {\n        json.name(folder.getName());\n\n        json.beginObject();\n        if (folder.getParent() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_PARENT, folder.getParent().getFolderPath());\n        }\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, folder.getDescription());\n\n        json.endObject();\n    }\n\n    private void saveDataSource(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @NotNull DataSourceDescriptor dataSource,\n        @NotNull Map<String, DBPExternalConfiguration> externalConfigurations)\n        throws IOException\n    {\n        json.name(dataSource.getId());\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_PROVIDER, dataSource.getDriver().getProviderDescriptor().getId());\n        JSONUtils.field(json, RegistryConstants.ATTR_DRIVER, dataSource.getDriver().getId());\n        if (dataSource.getDriver() != dataSource.getOriginalDriver()) {\n            JSONUtils.field(json, ATTR_ORIGINAL_PROVIDER, dataSource.getOriginalDriver().getProviderDescriptor().getId());\n            JSONUtils.field(json, ATTR_ORIGINAL_DRIVER, dataSource.getOriginalDriver().getId());\n        }\n        if (dataSource.getDriverSubstitution() != null) {\n            JSONUtils.field(json, ATTR_DRIVER_SUBSTITUTION, dataSource.getDriverSubstitution().getId());\n        }\n        DBPDataSourceOrigin origin = dataSource.getOriginSource();\n        if (origin != DataSourceOriginLocal.INSTANCE) {\n            Map<String, Object> originProps = new LinkedHashMap<>();\n            originProps.put(ATTR_ORIGIN_TYPE, origin.getType());\n            if (origin instanceof DBPDataSourceOriginExternal) {\n                DBPExternalConfiguration externalConfiguration = ((DBPDataSourceOriginExternal) origin).getExternalConfiguration();\n                if (externalConfiguration != null) {\n                    originProps.put(ATTR_ORIGIN_CONFIGURATION, externalConfiguration.getId());\n                    externalConfigurations.put(externalConfiguration.getId(), externalConfiguration);\n                }\n            }\n            originProps.putAll(origin.getDataSourceConfiguration());\n            JSONUtils.serializeProperties(json, TAG_ORIGIN, originProps);\n        }\n        JSONUtils.field(json, RegistryConstants.ATTR_NAME, dataSource.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.TAG_DESCRIPTION, dataSource.getDescription());\n        if (dataSource.isSavePassword()) JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, true);\n        if (dataSource.isSharedCredentials()) JSONUtils.field(json, RegistryConstants.ATTR_SHARED_CREDENTIALS, true);\n        if (dataSource.isTemplate()) JSONUtils.field(json, RegistryConstants.ATTR_TEMPLATE, true);\n\n        DataSourceNavigatorSettings navSettings = dataSource.getNavigatorSettings();\n        if (navSettings.isShowSystemObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_SYSTEM_OBJECTS, true);\n        if (navSettings.isShowUtilityObjects()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_UTIL_OBJECTS, true);\n        if (navSettings.isShowOnlyEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_SHOW_ONLY_ENTITIES, true);\n        if (navSettings.isHideFolders()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_FOLDERS, true);\n        if (navSettings.isHideSchemas()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_SCHEMAS, true);\n        if (navSettings.isHideVirtualModel()) JSONUtils.field(json, ATTR_NAVIGATOR_HIDE_VIRTUAL, true);\n        if (navSettings.isMergeEntities()) JSONUtils.field(json, ATTR_NAVIGATOR_MERGE_ENTITIES, true);\n\n        if (dataSource.isConnectionReadOnly()) JSONUtils.field(json, RegistryConstants.ATTR_READ_ONLY, true);\n\n        if (dataSource.getFolder() != null) {\n            JSONUtils.field(json, RegistryConstants.ATTR_FOLDER, dataSource.getFolder().getFolderPath());\n        }\n        final String lockPasswordHash = dataSource.getLockPasswordHash();\n        if (!CommonUtils.isEmpty(lockPasswordHash)) {\n            JSONUtils.field(json, RegistryConstants.ATTR_LOCK_PASSWORD, lockPasswordHash);\n        }\n        if (dataSource.isDetachedProcessEnabled()) JSONUtils.field(json, ATTR_DPI_ENABLED, true);\n\n        if (dataSource.hasSharedVirtualModel()) {\n            JSONUtils.field(json, \"virtual-model-id\", dataSource.getVirtualModel().getId());\n        }\n\n        {\n            // Connection info\n            DBPConnectionConfiguration connectionInfo = dataSource.getConnectionConfiguration();\n            json.name(\"configuration\");\n            json.beginObject();\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOST, connectionInfo.getHostName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_PORT, connectionInfo.getHostPort());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_SERVER, connectionInfo.getServerName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_DATABASE, connectionInfo.getDatabaseName());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_URL, connectionInfo.getUrl());\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_CONFIGURATION_TYPE, connectionInfo.getConfigurationType().toString());\n\n            if (dataSource.getProject().isUseSecretStorage()) {\n                // should be stored in secrets\n            } else if (configurationManager.isSecure()) {\n                // Secure manager == save to buffer\n                savePlainCredentials(json, new SecureCredentials(dataSource));\n            } else {\n                saveSecuredCredentials(\n                    dataSource,\n                    null,\n                    null,\n                    new SecureCredentials(dataSource));\n            }\n\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_HOME, connectionInfo.getClientHomeId());\n            if (connectionInfo.getConnectionType() != null) {\n                JSONUtils.field(json, RegistryConstants.ATTR_TYPE, connectionInfo.getConnectionType().getId());\n            }\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_COLOR, connectionInfo.getConnectionColor());\n            // Save other\n            if (connectionInfo.getKeepAliveInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_KEEP_ALIVE, connectionInfo.getKeepAliveInterval());\n            }\n            JSONUtils.field(json, RegistryConstants.ATTR_CLOSE_IDLE_ENABLED, connectionInfo.isCloseIdleConnection());\n            if (connectionInfo.getCloseIdleInterval() > 0) {\n                JSONUtils.field(json, RegistryConstants.ATTR_CLOSE_IDLE, connectionInfo.getCloseIdleInterval());\n            }\n            JSONUtils.fieldNE(json, \"config-profile-source\", connectionInfo.getConfigProfileSource());\n            JSONUtils.fieldNE(json, \"config-profile\", connectionInfo.getConfigProfileName());\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, connectionInfo.getProperties(), true);\n            JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROVIDER_PROPERTIES, connectionInfo.getProviderProperties(), true);\n            JSONUtils.fieldNE(json, RegistryConstants.ATTR_AUTH_MODEL, connectionInfo.getAuthModelId());\n\n            // Save events\n            if (!ArrayUtils.isEmpty(connectionInfo.getDeclaredEvents())) {\n                json.name(RegistryConstants.TAG_EVENTS);\n                json.beginObject();\n                for (DBPConnectionEventType eventType : connectionInfo.getDeclaredEvents()) {\n                    DBRShellCommand command = connectionInfo.getEvent(eventType);\n                    if (!command.isEnabled()) {\n                        continue;\n                    }\n                    json.name(eventType.name());\n                    json.beginObject();\n                    JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, command.isEnabled());\n                    JSONUtils.field(json, RegistryConstants.ATTR_SHOW_PANEL, command.isShowProcessPanel());\n                    JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS, command.isWaitProcessFinish());\n                    if (command.isWaitProcessFinish()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_WAIT_PROCESS_TIMEOUT, command.getWaitProcessTimeoutMs());\n                    }\n                    JSONUtils.field(json, RegistryConstants.ATTR_TERMINATE_AT_DISCONNECT, command.isTerminateAtDisconnect());\n                    JSONUtils.field(json, RegistryConstants.ATTR_PAUSE_AFTER_EXECUTE, command.getPauseAfterExecute());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_WORKING_DIRECTORY, command.getWorkingDirectory());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_COMMAND, command.getCommand());\n                    json.endObject();\n                }\n                json.endObject();\n            }\n\n            // Save network handlers' configurations\n            if (!CommonUtils.isEmpty(connectionInfo.getHandlers())) {\n                json.name(RegistryConstants.TAG_HANDLERS);\n                json.beginObject();\n                for (DBWHandlerConfiguration configuration : connectionInfo.getHandlers()) {\n                    if (configuration.isEnabled()) {\n                        saveNetworkHandlerConfiguration(configurationManager, json, dataSource, null, configuration);\n                    }\n                }\n                json.endObject();\n            }\n\n            // Save bootstrap info\n            {\n                DBPConnectionBootstrap bootstrap = connectionInfo.getBootstrap();\n                if (bootstrap.hasData()) {\n                    json.name(RegistryConstants.TAG_BOOTSTRAP);\n                    json.beginObject();\n                    if (bootstrap.getDefaultAutoCommit() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_AUTOCOMMIT, bootstrap.getDefaultAutoCommit());\n                    }\n                    if (bootstrap.getDefaultTransactionIsolation() != null) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_TXN_ISOLATION, bootstrap.getDefaultTransactionIsolation());\n                    }\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_CATALOG, bootstrap.getDefaultCatalogName());\n                    JSONUtils.fieldNE(json, RegistryConstants.ATTR_DEFAULT_SCHEMA, bootstrap.getDefaultSchemaName());\n                    if (bootstrap.isIgnoreErrors()) {\n                        JSONUtils.field(json, RegistryConstants.ATTR_IGNORE_ERRORS, true);\n                    }\n                    JSONUtils.serializeStringList(json, RegistryConstants.TAG_QUERY, bootstrap.getInitQueries());\n                    json.endObject();\n                }\n            }\n\n            json.endObject();\n        }\n\n        // Permissions\n        serializeModifyPermissions(json, dataSource);\n\n        {\n            // Filters\n            Collection<FilterMapping> filterMappings = dataSource.getObjectFilters();\n            if (!CommonUtils.isEmpty(filterMappings)) {\n                json.name(RegistryConstants.TAG_FILTERS);\n                json.beginArray();\n                for (FilterMapping filter : filterMappings) {\n                    if (filter.defaultFilter != null && !filter.defaultFilter.isEmpty()) {\n                        saveObjectFiler(json, filter.typeName, null, filter.defaultFilter);\n                    }\n                    for (Map.Entry<String, DBSObjectFilter> cf : filter.customFilters.entrySet()) {\n                        if (!cf.getValue().isEmpty()) {\n                            saveObjectFiler(json, filter.typeName, cf.getKey(), cf.getValue());\n                        }\n                    }\n                }\n                json.endArray();\n            }\n        }\n\n        // Extensions\n        JSONUtils.serializeProperties(json, RegistryConstants.TAG_EXTENSIONS, dataSource.getExtensions(), true);\n        // Tags\n        JSONUtils.serializeProperties(json, RegistryConstants.TAG_TAGS, dataSource.getTags(), true);\n\n        // Preferences\n        {\n            // Save only properties who are differs from default values\n            SimplePreferenceStore prefStore = dataSource.getPreferenceStore();\n            Map<String, String> props = new TreeMap<>();\n            for (String propName : prefStore.preferenceNames()) {\n                String propValue = prefStore.getString(propName);\n                String defValue = prefStore.getDefaultString(propName);\n                if (propValue != null && !CommonUtils.equalObjects(propValue, defValue)) {\n                    props.put(propName, propValue);\n                }\n            }\n            if (!props.isEmpty()) {\n                JSONUtils.serializeProperties(json, RegistryConstants.TAG_CUSTOM_PROPERTIES, props, true);\n            }\n        }\n\n\n        json.endObject();\n    }\n\n    private void serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner) throws IOException {\n        List<DBPDataSourcePermission> permissions = permissionOwner.getModifyPermission();\n        if (!CommonUtils.isEmpty(permissions)) {\n            json.name(\"security\");\n            json.beginObject();\n            List<String> permIds = new ArrayList<>(permissions.size());\n            for (DBPDataSourcePermission perm : permissions) permIds.add(perm.getId());\n            JSONUtils.serializeStringList(json, \"permission-restrictions\", permIds);\n            json.endObject();\n        }\n    }\n\n    private void saveNetworkHandlerConfiguration(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull DBWHandlerConfiguration configuration) throws IOException\n    {\n        json.name(CommonUtils.notEmpty(configuration.getId()));\n        json.beginObject();\n        JSONUtils.field(json, RegistryConstants.ATTR_TYPE, configuration.getType().name());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, configuration.isEnabled());\n        JSONUtils.field(json, RegistryConstants.ATTR_SAVE_PASSWORD, configuration.isSavePassword());\n        if (!CommonUtils.isEmpty(configuration.getUserName()) ||\n            !CommonUtils.isEmpty(configuration.getPassword()) ||\n            !CommonUtils.isEmpty(configuration.getSecureProperties())\n        ) {\n            final SecureCredentials credentials = new SecureCredentials(configuration);\n            credentials.setProperties(configuration.getSecureProperties());\n\n            DBPProject project = dataSource != null ? dataSource.getProject() : profile.getProject();\n\n            if (project.isUseSecretStorage()) {\n                // For secured projects save only shared credentials\n                // Others are stored in secret storage\n                if (dataSource == null || dataSource.isSharedCredentials()) {\n                    savePlainCredentials(json, credentials);\n                }\n            } else if (configurationManager.isSecure()) {\n                savePlainCredentials(\n                    json,\n                    credentials);\n            } else {\n                saveSecuredCredentials(\n                    dataSource,\n                    profile,\n                    \"network/\" + configuration.getId() + (profile == null ? \"\" : \"/profile/\" + profile.getProfileName()),\n                    credentials);\n            }\n        }\n        JSONUtils.serializeProperties(json, RegistryConstants.TAG_PROPERTIES, configuration.getProperties(), true);\n        json.endObject();\n    }\n\n    private static void saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter) throws IOException\n    {\n        json.beginObject();\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_ID, objectID);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_TYPE, typeName);\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_NAME, filter.getName());\n        JSONUtils.fieldNE(json, RegistryConstants.ATTR_DESCRIPTION, filter.getDescription());\n        JSONUtils.field(json, RegistryConstants.ATTR_ENABLED, filter.isEnabled());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_INCLUDE, filter.getInclude());\n        JSONUtils.serializeStringList(json, RegistryConstants.TAG_EXCLUDE, filter.getExclude());\n        json.endObject();\n    }\n\n    private void saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    ) {\n        assert dataSource != null|| profile != null;\n        if (registry.getProject().isUseSecretStorage()) {\n            return;\n        }\n\n        String topNodeId = profile != null ? \"profile:\" + profile.getProfileId() : dataSource.getId();\n        if (subNode == null) subNode = NODE_CONNECTION;\n\n        Map<String, Map<String, String>> nodeMap = secureProperties.computeIfAbsent(topNodeId, s -> new LinkedHashMap<>());\n        Map<String, String> propMap = nodeMap.computeIfAbsent(subNode, s -> new LinkedHashMap<>());\n        saveCredentialsToMap(propMap, credentials);\n        if (propMap.isEmpty()) {\n            nodeMap.remove(subNode);\n        }\n        if (nodeMap.isEmpty()) {\n            secureProperties.remove(topNodeId);\n        }\n    }\n\n    private void savePlainCredentials(JsonWriter jsonWriter, @NotNull SecureCredentials credentials) throws IOException {\n        Map<String, String> propMap = new LinkedHashMap<>();\n        saveCredentialsToMap(propMap, credentials);\n        JSONUtils.serializeProperties(jsonWriter, \"credentials\", propMap, true);\n    }\n\n    private void saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials) {\n        if (!CommonUtils.isEmpty(credentials.getUserName())) {\n            propMap.put(RegistryConstants.ATTR_USER, credentials.getUserName());\n        }\n        if (!CommonUtils.isEmpty(credentials.getUserPassword())) {\n            propMap.put(RegistryConstants.ATTR_PASSWORD, credentials.getUserPassword());\n        }\n        if (!CommonUtils.isEmpty(credentials.getProperties())) {\n            propMap.putAll(credentials.getProperties());\n        }\n    }\n\n    private SecureCredentials readPlainCredentials(Map<String, Object> propMap) {\n        Map<String, Object> credentialsMap = JSONUtils.getObject(propMap, \"credentials\");\n        SecureCredentials creds = new SecureCredentials();\n\n        for (Map.Entry<String, Object> entry : credentialsMap.entrySet()) {\n            String value = CommonUtils.toString(entry.getValue(), null);\n            switch (entry.getKey()) {\n                case RegistryConstants.ATTR_USER:\n                    creds.setUserName(value);\n                    break;\n                case RegistryConstants.ATTR_PASSWORD:\n                    creds.setUserPassword(value);\n                    break;\n                default:\n                    creds.setSecureProp(entry.getKey(), value);\n                    break;\n            }\n        }\n\n        return creds;\n    }\n\n    private SecureCredentials readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)\n    {\n        assert dataSource != null || profile != null;\n\n        SecureCredentials creds = new SecureCredentials();\n\n        String topNodeId = profile != null ? \"profile:\" + profile.getProfileId() : dataSource.getId();\n        if (subNode == null) subNode = NODE_CONNECTION;\n\n        Map<String, Map<String, String>> subMap = secureProperties.get(topNodeId);\n        if (subMap != null) {\n            Map<String, String> propMap = subMap.get(subNode);\n            if (propMap != null) {\n                for (Map.Entry<String, String> prop : propMap.entrySet()) {\n                    switch (prop.getKey()) {\n                        case RegistryConstants.ATTR_USER:\n                            creds.setUserName(prop.getValue());\n                            break;\n                        case RegistryConstants.ATTR_PASSWORD:\n                            creds.setUserPassword(prop.getValue());\n                            break;\n                        default:\n                            creds.setSecureProp(prop.getKey(), prop.getValue());\n                            break;\n                    }\n                }\n            }\n        }\n\n        return creds;\n    }\n\n    @NotNull\n    private static DriverDescriptor getReplacementDriver(@NotNull DriverDescriptor driver) {\n        DriverDescriptor replacement = driver;\n\n        while (replacement.getReplacedBy() != null) {\n            replacement = replacement.getReplacedBy();\n        }\n\n        return replacement;\n    }\n}",
                "methodCount": 26
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 11,
                "candidates": [
                    {
                        "lineStart": 1321,
                        "lineEnd": 1332,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "refactoringInfo": "Move Static method saveObjectFiler to class DriverDescriptorSerializerModern",
                        "description": "move method saveObjectFiler to PsiClass:DriverDescriptorSerializerModern\nRationale: The saveObjectFiler() method is primarily concerned with serializing a filter to JSON. The DriverDescriptorSerializerModern class already handles various serialization tasks using similar JSONUtils utilities. By moving saveObjectFiler() to this class, we maintain a consistent design for serializing objects within the same context and keep related functionality together, thus making the code more modular and easier to maintain.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 272,
                        "lineEnd": 295,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method saveNetworkProfiles to class DataSourceConfigurationManager",
                        "description": "Move method saveNetworkProfiles to org.jkiss.dbeaver.registry.DataSourceConfigurationManager\nRationale: The method saveNetworkProfiles handles the process of saving network profiles, which entails configuring datasources and manipulating network profiles' configurations. This functionality strongly aligns with the role of a DataSourceConfigurationManager, which is responsible for the management of configuration files, including reading and writing these configurations. By moving this method to DataSourceConfigurationManager, it precisely fits into the scope of operations that manage configuration processes, thus preserving the single responsibility principle and enhancing cohesion.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1036,
                        "lineEnd": 1048,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "refactoringInfo": "Move Static method saveFolder to class DriverDescriptorSerializerModern",
                        "description": "move method saveFolder to PsiClass:DriverDescriptorSerializerModern\nRationale: The saveFolder method pertains to serializing folder data into JSON format, which aligns closely with the functionality of DriverDescriptorSerializerModern class, as it already handles the serialization of DriverDescriptor objects to JSON.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 341,
                        "lineEnd": 347,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method getValueEncryptor to class DBPProject",
                        "description": "Move method getValueEncryptor to org.jkiss.dbeaver.model.app.DBPProject\nRationale: The method `getValueEncryptor` relies heavily on `DBPProject.getLocalSecretKey()`. Moving it to `DBPProject` will keep the functionality encapsulated within the project context. The existing class should focus on broader responsibilities and delegate these specific tasks to the respective classes for better cohesiveness.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1267,
                        "lineEnd": 1277,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method serializeModifyPermissions to class DBPDataSourcePermissionOwner",
                        "description": "Move method serializeModifyPermissions to org.jkiss.dbeaver.model.DBPDataSourcePermissionOwner\nRationale: The method `serializeModifyPermissions` directly involves handling permissions of a `DBPDataSourcePermissionOwner` instance. This involves invoking the permissionOwner's `getModifyPermission` method and is deeply tied to the concept of permissions specific to a data source permission owner. Since the method is closely related to permission serialization specific to `DBPDataSourcePermissionOwner`, it is logical to place it within this class. The core functionality of the method relies on interacting with the permissions data structure, which is inherently part of the `DBPDataSourcePermissionOwner` class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 297,
                        "lineEnd": 319,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method saveAuthProfiles to class DataSourceConfigurationManager",
                        "description": "Move method saveAuthProfiles to org.jkiss.dbeaver.registry.DataSourceConfigurationManager\nRationale: The saveAuthProfiles method involves several operations related to the configuration manager, such as checking if the configuration is secure via the isSecure method. These operations suggest that the method is related to the configuration management functionality, and thus it fits well in the DataSourceConfigurationManager class. Additionally, the method's name and its purpose indicate it directly deals with saving authentication profiles, which seems coherent with the responsibilities of the DataSourceConfigurationManager, as it is responsible for reading and writing configuration data.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1279,
                        "lineEnd": 1319,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method saveNetworkHandlerConfiguration to class DataSourceConfigurationManager",
                        "description": "Move method saveNetworkHandlerConfiguration to org.jkiss.dbeaver.registry.DataSourceConfigurationManager\nRationale: The method 'saveNetworkHandlerConfiguration' deals with the saving of network handler configuration, which pertains directly to the responsibilities of a configuration manager. Therefore, moving it to 'DataSourceConfigurationManager' aligns well with the primary duties of managing and saving configurations. Additionally, 'DataSourceConfigurationManager' already has methods related to reading and writing configurations, indicating that it is a suitable place to handle this type of operation. This ensures that all configuration-related methods are centralized in one class, which improves cohesion and reduces the scatter of configuration handling logic.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1365,
                        "lineEnd": 1375,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method saveCredentialsToMap to class SecureCredentials",
                        "description": "Move method saveCredentialsToMap to org.jkiss.dbeaver.registry.SecureCredentials\nRationale: The saveCredentialsToMap() method is specifically concerned with the properties of an instance of SecureCredentials. The method extracts the credentials such as userName, userPassword, and other properties, which belong directly to SecureCredentials. By placing this method in SecureCredentials, we encapsulate behavior that is closely related to the class's properties and responsibilities, improving cohesion and maintainability.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 365,
                        "lineEnd": 378,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method saveSecureCredentialsFile to class DataSourceConfigurationManager",
                        "description": "Move method saveSecureCredentialsFile to org.jkiss.dbeaver.registry.DataSourceConfigurationManager\nRationale: The method saveSecureCredentialsFile() is primarily focused on saving secure credentials and interacts closely with DataSourceConfigurationManager through operations like getting the configuration and writing it. It also uses several configuration properties such as the credentials file name, serializing, and encrypting data, which align more with the responsibilities of a configuration manager than storage. Moving this method to DataSourceConfigurationManager would keep configurations management cohesive and centralized.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 1050,
                        "lineEnd": 1265,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method saveDataSource to class DataSourceConfigurationManager",
                        "description": "Move method saveDataSource to org.jkiss.dbeaver.registry.DataSourceConfigurationManager\nRationale: The `saveDataSource()` method is deeply related to managing the configuration of data sources, which aligns closely with the responsibilities of the `DataSourceConfigurationManager` interface. The method serializes the entire state of a `DataSourceDescriptor`, involving security checks (`isSecure()` method), and might interact with configuration storage methods. These factors heavily indicate it should be part of `DataSourceConfigurationManager`. This move ensures that all configuration responsibilities are encapsulated within a single class, improving cohesion and making the codebase easier to maintain.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    },
                    {
                        "lineStart": 851,
                        "lineEnd": 874,
                        "refactoringType": "MyMoveInstanceMethodRefactoring",
                        "refactoringInfo": "Move method readSecureCredentials to class DataSourceConfigurationManager",
                        "description": "Move method readSecureCredentials to org.jkiss.dbeaver.registry.DataSourceConfigurationManager\nRationale: The method readSecureCredentials() heavily interacts with the DataSourceConfigurationManager class through the use of its methods such as isSecure() and readConfiguration(). The method's primary function involves reading configuration data managed by configurationManager, making it more relevant to the DataSourceConfigurationManager class. Furthermore, moving the method to this class improves cohesion by ensuring that configuration reading methods are centralized within a single class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "startedRefactoringFlow": false,
                        "undone": false
                    }
                ]
            },
            "elapsedTime": [
                {
                    "candidateIndex": 0,
                    "elapsedTime": 4062
                },
                {
                    "candidateIndex": 3,
                    "elapsedTime": 2458
                }
            ],
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 189064
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_move_methods": [
                        {
                            "method_name": "saveFolder",
                            "method_signature": "private static void saveFolder(JsonWriter json, DataSourceFolder folder) throws IOException",
                            "target_class": "DataSourceFolder",
                            "rationale": "The 'saveFolder' method specifically deals with persisting DataSourceFolder objects. It makes sense to move this method to the DataSourceFolder class for better encapsulation and cohesion."
                        },
                        {
                            "method_name": "readSecureCredentials",
                            "method_signature": "private Map<String, Map<String, Map<String, String>>> readSecureCredentials(DBPDataSourceConfigurationStorage configurationStorage, DataSourceConfigurationManager configurationManager, Collection<String> dataSourceIds)",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "The 'readSecureCredentials' method deals with reading secure credentials, which is a responsibility better suited for a class dedicated to managing secure credentials, such as SecureCredentialsManager."
                        },
                        {
                            "method_name": "savePlainCredentials",
                            "method_signature": "private void savePlainCredentials(JsonWriter jsonWriter, SecureCredentials credentials) throws IOException",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "The 'savePlainCredentials' method is focused on persisting plain credentials, which fits the responsibilities of a class managing secure credentials, hence it should be moved to SecureCredentialsManager."
                        },
                        {
                            "method_name": "saveSecuredCredentials",
                            "method_signature": "private void saveSecuredCredentials(DataSourceDescriptor dataSource, DBPConfigurationProfile profile, String subNode, SecureCredentials credentials)",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "The 'saveSecuredCredentials' method involves storing secured credentials, and thus should be managed by a class that handles secure credentials, such as SecureCredentialsManager."
                        },
                        {
                            "method_name": "readPlainCredentials",
                            "method_signature": "private SecureCredentials readPlainCredentials(Map<String, Object> propMap)",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "The 'readPlainCredentials' method parses plain credentials, which is a function best suited for a class that specializes in credential management, like SecureCredentialsManager."
                        },
                        {
                            "method_name": "saveSecureCredentialsFile",
                            "method_signature": "private void saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "The 'saveSecureCredentialsFile' method focuses on saving secure credentials to a file, thus it aligns with the responsibilities of a secure credentials management class."
                        }
                    ],
                    "llm_response_time": 16283
                },
                {
                    "iteration_num": 2,
                    "suggested_move_methods": [
                        {
                            "method_name": "serializeModifyPermissions",
                            "method_signature": "private void serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner) throws IOException",
                            "target_class": "PermissionSerializer",
                            "rationale": "This method is specific to serializing permissions, which can be a separate concern handled by a `PermissionSerializer` class specializing in permission-related serialization."
                        },
                        {
                            "method_name": "deserializeModifyPermissions",
                            "method_signature": "private void deserializeModifyPermissions(Map<String, Object> conObject, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "PermissionSerializer",
                            "rationale": "This method deals with deserializing permissions, and logically belongs together with serialization in a dedicated `PermissionSerializer` class."
                        },
                        {
                            "method_name": "saveNetworkHandlerConfiguration",
                            "method_signature": "private void saveNetworkHandlerConfiguration(DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json, @Nullable DataSourceDescriptor dataSource, @Nullable DBWNetworkProfile profile, @NotNull DBWHandlerConfiguration configuration) throws IOException",
                            "target_class": "NetworkHandlerConfigurationSerializer",
                            "rationale": "This method's responsibility is to handle network handler configuration serialization. It should be moved to a `NetworkHandlerConfigurationSerializer` class to encapsulate network handler serialization logic."
                        },
                        {
                            "method_name": "parseNetworkHandlerConfig",
                            "method_signature": "private DBWHandlerConfiguration parseNetworkHandlerConfig(DataSourceConfigurationManager configurationManager, @Nullable DataSourceDescriptor dataSource, @Nullable DBWNetworkProfile profile, @NotNull Map.Entry<String, Map<String, Object>> handlerObject)",
                            "target_class": "NetworkHandlerConfigurationSerializer",
                            "rationale": "This method handles network handler configuration parsing, making it suitable to be encapsulated in a `NetworkHandlerConfigurationSerializer` class along with the related serialization method."
                        },
                        {
                            "method_name": "readSecureCredentials",
                            "method_signature": "private Map<String, Map<String, Map<String, String>>> readSecureCredentials(@NotNull DBPDataSourceConfigurationStorage configurationStorage, @NotNull DataSourceConfigurationManager configurationManager, @Nullable Collection<String> dataSourceIds) throws DBException",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "This method is about reading secure credentials, so moving it to a `SecureCredentialsManager` would help isolate credential management concerns."
                        },
                        {
                            "method_name": "readPlainCredentials",
                            "method_signature": "private SecureCredentials readPlainCredentials(Map<String, Object> propMap)",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "This method is focused on reading plain credentials, so it should be part of a `SecureCredentialsManager` that handles all credentials-related operations together."
                        },
                        {
                            "method_name": "readSecuredCredentials",
                            "method_signature": "private SecureCredentials readSecuredCredentials(@Nullable DataSourceDescriptor dataSource, @Nullable DBPConfigurationProfile profile, @Nullable String subNode)",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "This method is concerned with reading secured credentials and logically groups with `readPlainCredentials` and `readSecureCredentials` within a `SecureCredentialsManager` class for comprehensive credentials handling."
                        },
                        {
                            "method_name": "saveSecuredCredentials",
                            "method_signature": "private void saveSecuredCredentials(@Nullable DataSourceDescriptor dataSource, @Nullable DBPConfigurationProfile profile, @Nullable String subNode, @NotNull SecureCredentials credentials)",
                            "target_class": "SecureCredentialsManager",
                            "rationale": "This method deals with saving secured credentials and should be moved to a `SecureCredentialsManager` to encapsulate the credential-saving logic together with reading methods."
                        }
                    ],
                    "llm_response_time": 12596
                },
                {
                    "iteration_num": 3,
                    "suggested_move_methods": [
                        {
                            "method_name": "parseNetworkHandlerConfig",
                            "method_signature": "private DBWHandlerConfiguration parseNetworkHandlerConfig(DataSourceConfigurationManager configurationManager, @Nullable DataSourceDescriptor dataSource, @Nullable DBWNetworkProfile profile, @NotNull Map.Entry<String, Map<String, Object>> handlerObject)",
                            "target_class": "NetworkHandlerRegistry",
                            "rationale": "The method 'parseNetworkHandlerConfig' deals primarily with interpreting and configuring network handlers which aligns more closely with the responsibilities of the 'NetworkHandlerRegistry' class."
                        },
                        {
                            "method_name": "deserializeModifyPermissions",
                            "method_signature": "private void deserializeModifyPermissions(Map<String, Object> conObject, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "DBPDataSourcePermissionOwner",
                            "rationale": "The method 'deserializeModifyPermissions' handles deserialization of permission configurations, which aligns with the nature of the 'DBPDataSourcePermissionOwner' class's responsibilities."
                        },
                        {
                            "method_name": "serializeModifyPermissions",
                            "method_signature": "private void serializeModifyPermissions(JsonWriter json, DBPDataSourcePermissionOwner permissionOwner) throws IOException",
                            "target_class": "DBPDataSourcePermissionOwner",
                            "rationale": "The method 'serializeModifyPermissions' handles serialization of permission configurations, which should be part of 'DBPDataSourcePermissionOwner' class as it deals with permission management."
                        },
                        {
                            "method_name": "saveNetworkProfiles",
                            "method_signature": "private void saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles) throws IOException",
                            "target_class": "NetworkHandlerRegistry",
                            "rationale": "The method 'saveNetworkProfiles' deals specifically with network profiles, making it a better fit for the 'NetworkHandlerRegistry' which is responsible for network handler operations."
                        },
                        {
                            "method_name": "saveAuthProfiles",
                            "method_signature": "private void saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles) throws IOException",
                            "target_class": "DBAAuthProfile",
                            "rationale": "The method 'saveAuthProfiles' is specifically concerned with authentication profiles, and logically fits better within the domain of the 'DBAAuthProfile' class."
                        },
                        {
                            "method_name": "readConfiguration",
                            "method_signature": "private Map<String, Object> readConfiguration(DBPDataSourceConfigurationStorage configurationStorage, DataSourceConfigurationManager configurationManager, Collection<String> dataSourceIds) throws DBException, IOException",
                            "target_class": "DataSourceConfigurationManager",
                            "rationale": "The method 'readConfiguration' focuses on reading data source configurations which directly aligns with the role of the 'DataSourceConfigurationManager' in managing these configurations."
                        },
                        {
                            "method_name": "readSecureCredentials",
                            "method_signature": "private Map<String, Map<String, Map<String, String>>> readSecureCredentials(DBPDataSourceConfigurationStorage configurationStorage, DataSourceConfigurationManager configurationManager, Collection<String> dataSourceIds) throws DBException",
                            "target_class": "DBPDataSourceConfigurationStorage",
                            "rationale": "The method 'readSecureCredentials' deals with reading secure credentials specific to a data source configuration storage, making 'DBPDataSourceConfigurationStorage' a more fitting class for this method."
                        }
                    ],
                    "llm_response_time": 11883
                },
                {
                    "iteration_num": -1,
                    "suggested_move_methods": [
                        {
                            "method_name": "saveNetworkProfiles",
                            "method_signature": "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveAuthProfiles",
                            "method_signature": "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "loadConfigFile",
                            "method_signature": "private loadConfigFile(InputStream stream, boolean decrypt)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getValueEncryptor",
                            "method_signature": "private getValueEncryptor(DBPProject project)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveConfigFile",
                            "method_signature": "private saveConfigFile(DataSourceConfigurationManager configurationManager, String name, String contents, boolean teamPrivate, boolean encrypt)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveSecureCredentialsFile",
                            "method_signature": "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "readSecureCredentials",
                            "method_signature": "@Nullable\n    private readSecureCredentials(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "readConfiguration",
                            "method_signature": "@Nullable\n    private readConfiguration(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "parseDriver",
                            "method_signature": "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "deserializeModifyPermissions",
                            "method_signature": "private deserializeModifyPermissions(Map<String, Object> conObject, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "parseNetworkHandlerConfig",
                            "method_signature": "@Nullable\n    private parseNetworkHandlerConfig(\n        DataSourceConfigurationManager configurationManager,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveFolder",
                            "method_signature": "private static saveFolder(JsonWriter json, DataSourceFolder folder)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveDataSource",
                            "method_signature": "private saveDataSource(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @NotNull DataSourceDescriptor dataSource,\n        @NotNull Map<String, DBPExternalConfiguration> externalConfigurations)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "serializeModifyPermissions",
                            "method_signature": "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveNetworkHandlerConfiguration",
                            "method_signature": "private saveNetworkHandlerConfiguration(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull DBWHandlerConfiguration configuration)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveObjectFiler",
                            "method_signature": "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveSecuredCredentials",
                            "method_signature": "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveCredentialsToMap",
                            "method_signature": "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "readSecuredCredentials",
                            "method_signature": "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                },
                {
                    "iteration_num": -2,
                    "suggested_move_methods": [
                        {
                            "method_name": "saveObjectFiler",
                            "method_signature": "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveNetworkProfiles",
                            "method_signature": "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveFolder",
                            "method_signature": "private static saveFolder(JsonWriter json, DataSourceFolder folder)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "getValueEncryptor",
                            "method_signature": "private getValueEncryptor(DBPProject project)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "parseDriver",
                            "method_signature": "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "serializeModifyPermissions",
                            "method_signature": "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveAuthProfiles",
                            "method_signature": "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveNetworkHandlerConfiguration",
                            "method_signature": "private saveNetworkHandlerConfiguration(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull DBWHandlerConfiguration configuration)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveCredentialsToMap",
                            "method_signature": "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveSecureCredentialsFile",
                            "method_signature": "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "readSecuredCredentials",
                            "method_signature": "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveSecuredCredentials",
                            "method_signature": "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "saveDataSource",
                            "method_signature": "private saveDataSource(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @NotNull DataSourceDescriptor dataSource,\n        @NotNull Map<String, DBPExternalConfiguration> externalConfigurations)",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "readSecureCredentials",
                            "method_signature": "@Nullable\n    private readSecureCredentials(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        {
                            "method_name": "loadConfigFile",
                            "method_signature": "private loadConfigFile(InputStream stream, boolean decrypt)",
                            "target_class": "",
                            "rationale": ""
                        }
                    ],
                    "llm_response_time": 0
                }
            ],
            "methodCompatibilityScores": {
                "tf-idf": {
                    "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)": {
                        "first": {
                            "method_name": "saveObjectFiler",
                            "method_signature": "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.25252143087785545
                    },
                    "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)": {
                        "first": {
                            "method_name": "saveNetworkProfiles",
                            "method_signature": "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5244574878319145
                    },
                    "private static saveFolder(JsonWriter json, DataSourceFolder folder)": {
                        "first": {
                            "method_name": "saveFolder",
                            "method_signature": "private static saveFolder(JsonWriter json, DataSourceFolder folder)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5253849789561562
                    },
                    "private getValueEncryptor(DBPProject project)": {
                        "first": {
                            "method_name": "getValueEncryptor",
                            "method_signature": "private getValueEncryptor(DBPProject project)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5479315166327274
                    },
                    "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )": {
                        "first": {
                            "method_name": "parseDriver",
                            "method_signature": "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5570573830384233
                    },
                    "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)": {
                        "first": {
                            "method_name": "serializeModifyPermissions",
                            "method_signature": "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5836661476562294
                    },
                    "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)": {
                        "first": {
                            "method_name": "saveAuthProfiles",
                            "method_signature": "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6496547002943455
                    },
                    "private saveNetworkHandlerConfiguration(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull DBWHandlerConfiguration configuration)": {
                        "first": {
                            "method_name": "saveNetworkHandlerConfiguration",
                            "method_signature": "private saveNetworkHandlerConfiguration(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull DBWHandlerConfiguration configuration)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6797177357506821
                    },
                    "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)": {
                        "first": {
                            "method_name": "saveCredentialsToMap",
                            "method_signature": "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6827089316343226
                    },
                    "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)": {
                        "first": {
                            "method_name": "saveSecureCredentialsFile",
                            "method_signature": "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7004523064492817
                    },
                    "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)": {
                        "first": {
                            "method_name": "readSecuredCredentials",
                            "method_signature": "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7088518652906438
                    },
                    "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )": {
                        "first": {
                            "method_name": "saveSecuredCredentials",
                            "method_signature": "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7144266768266283
                    },
                    "private saveDataSource(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @NotNull DataSourceDescriptor dataSource,\n        @NotNull Map<String, DBPExternalConfiguration> externalConfigurations)": {
                        "first": {
                            "method_name": "saveDataSource",
                            "method_signature": "private saveDataSource(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @NotNull DataSourceDescriptor dataSource,\n        @NotNull Map<String, DBPExternalConfiguration> externalConfigurations)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7285500308573278
                    },
                    "@Nullable\n    private readSecureCredentials(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    )": {
                        "first": {
                            "method_name": "readSecureCredentials",
                            "method_signature": "@Nullable\n    private readSecureCredentials(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7288317275644819
                    },
                    "private loadConfigFile(InputStream stream, boolean decrypt)": {
                        "first": {
                            "method_name": "loadConfigFile",
                            "method_signature": "private loadConfigFile(InputStream stream, boolean decrypt)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.7325745465494565
                    }
                },
                "voyage": {
                    "private getValueEncryptor(DBPProject project)": {
                        "first": {
                            "method_name": "getValueEncryptor",
                            "method_signature": "private getValueEncryptor(DBPProject project)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.3232307462730057
                    },
                    "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )": {
                        "first": {
                            "method_name": "parseDriver",
                            "method_signature": "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.367244376405273
                    },
                    "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)": {
                        "first": {
                            "method_name": "saveCredentialsToMap",
                            "method_signature": "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.37085454204808477
                    },
                    "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)": {
                        "first": {
                            "method_name": "saveObjectFiler",
                            "method_signature": "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4063928740860385
                    },
                    "private loadConfigFile(InputStream stream, boolean decrypt)": {
                        "first": {
                            "method_name": "loadConfigFile",
                            "method_signature": "private loadConfigFile(InputStream stream, boolean decrypt)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.44486367246356884
                    },
                    "private static saveFolder(JsonWriter json, DataSourceFolder folder)": {
                        "first": {
                            "method_name": "saveFolder",
                            "method_signature": "private static saveFolder(JsonWriter json, DataSourceFolder folder)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.45311611292842696
                    },
                    "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)": {
                        "first": {
                            "method_name": "serializeModifyPermissions",
                            "method_signature": "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4774343218147789
                    },
                    "private deserializeModifyPermissions(Map<String, Object> conObject, DBPDataSourcePermissionOwner permissionOwner)": {
                        "first": {
                            "method_name": "deserializeModifyPermissions",
                            "method_signature": "private deserializeModifyPermissions(Map<String, Object> conObject, DBPDataSourcePermissionOwner permissionOwner)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.4822516860086183
                    },
                    "private saveConfigFile(DataSourceConfigurationManager configurationManager, String name, String contents, boolean teamPrivate, boolean encrypt)": {
                        "first": {
                            "method_name": "saveConfigFile",
                            "method_signature": "private saveConfigFile(DataSourceConfigurationManager configurationManager, String name, String contents, boolean teamPrivate, boolean encrypt)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.48861905455377685
                    },
                    "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)": {
                        "first": {
                            "method_name": "readSecuredCredentials",
                            "method_signature": "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5146017598991368
                    },
                    "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )": {
                        "first": {
                            "method_name": "saveSecuredCredentials",
                            "method_signature": "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5437751727989021
                    },
                    "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)": {
                        "first": {
                            "method_name": "saveNetworkProfiles",
                            "method_signature": "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5594730995837115
                    },
                    "@Nullable\n    private parseNetworkHandlerConfig(\n        DataSourceConfigurationManager configurationManager,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)": {
                        "first": {
                            "method_name": "parseNetworkHandlerConfig",
                            "method_signature": "@Nullable\n    private parseNetworkHandlerConfig(\n        DataSourceConfigurationManager configurationManager,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5761624978397534
                    },
                    "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)": {
                        "first": {
                            "method_name": "saveSecureCredentialsFile",
                            "method_signature": "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.5774476284447302
                    },
                    "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)": {
                        "first": {
                            "method_name": "saveAuthProfiles",
                            "method_signature": "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)",
                            "target_class": "",
                            "rationale": ""
                        },
                        "second": 0.6128362567179166
                    }
                }
            },
            "llmMethodPriority": {
                "tf-idf": {
                    "priority_method_names": [
                        "private saveDataSource(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @NotNull DataSourceDescriptor dataSource,\n        @NotNull Map<String, DBPExternalConfiguration> externalConfigurations)",
                        "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)",
                        "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)",
                        "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)",
                        "private saveNetworkHandlerConfiguration(\n        DataSourceConfigurationManager configurationManager, @NotNull JsonWriter json,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull DBWHandlerConfiguration configuration)",
                        "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )",
                        "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                        "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                        "private static saveFolder(JsonWriter json, DataSourceFolder folder)",
                        "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)",
                        "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )",
                        "@Nullable\n    private readSecureCredentials(\n        @NotNull DBPDataSourceConfigurationStorage configurationStorage,\n        @NotNull DataSourceConfigurationManager configurationManager,\n        @Nullable Collection<String> dataSourceIds\n    )",
                        "private loadConfigFile(InputStream stream, boolean decrypt)",
                        "private getValueEncryptor(DBPProject project)",
                        "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)"
                    ],
                    "llm_response_time": 7740
                },
                "tf-idf-5": {
                    "priority_method_names": [
                        "private getValueEncryptor(DBPProject project)",
                        "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )",
                        "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)",
                        "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                        "private static saveFolder(JsonWriter json, DataSourceFolder folder)"
                    ],
                    "llm_response_time": 5319
                },
                "tf-df-3": {
                    "priority_method_names": [
                        "private static saveFolder(JsonWriter json, DataSourceFolder folder)",
                        "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                        "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)"
                    ],
                    "llm_response_time": 5135
                },
                "voyage": {
                    "priority_method_names": [
                        "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )",
                        "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                        "private serializeModifyPermissions(@NotNull JsonWriter json, DBPDataSourcePermissionOwner permissionOwner)",
                        "private deserializeModifyPermissions(Map<String, Object> conObject, DBPDataSourcePermissionOwner permissionOwner)",
                        "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                        "private readSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode)",
                        "private saveSecuredCredentials(\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBPConfigurationProfile profile,\n        @Nullable String subNode,\n        @NotNull SecureCredentials credentials\n    )",
                        "private saveAuthProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBAAuthProfile> authProfiles)",
                        "private saveNetworkProfiles(DataSourceConfigurationManager configurationManager, JsonWriter jsonWriter, List<DBWNetworkProfile> profiles)",
                        "private loadConfigFile(InputStream stream, boolean decrypt)",
                        "private static saveFolder(JsonWriter json, DataSourceFolder folder)",
                        "private getValueEncryptor(DBPProject project)",
                        "private saveConfigFile(DataSourceConfigurationManager configurationManager, String name, String contents, boolean teamPrivate, boolean encrypt)",
                        "private saveSecureCredentialsFile(DataSourceConfigurationManager configurationManager, DBPDataSourceConfigurationStorage storage)",
                        "@Nullable\n    private parseNetworkHandlerConfig(\n        DataSourceConfigurationManager configurationManager,\n        @Nullable DataSourceDescriptor dataSource,\n        @Nullable DBWNetworkProfile profile,\n        @NotNull Map.Entry<String, Map<String, Object>> handlerObject)"
                    ],
                    "llm_response_time": 10073
                },
                "voyage-5": {
                    "priority_method_names": [
                        "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                        "private loadConfigFile(InputStream stream, boolean decrypt)",
                        "private getValueEncryptor(DBPProject project)",
                        "private static saveObjectFiler(JsonWriter json, String typeName, String objectID, DBSObjectFilter filter)",
                        "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )"
                    ],
                    "llm_response_time": 6231
                },
                "voyage-3": {
                    "priority_method_names": [
                        "private saveCredentialsToMap(Map<String, String> propMap, @NotNull SecureCredentials credentials)",
                        "private getValueEncryptor(DBPProject project)",
                        "@Nullable\n    private static parseDriver(\n        @NotNull String id,\n        @NotNull String providerId,\n        @NotNull String driverId,\n        boolean createIfAbsent\n    )"
                    ],
                    "llm_response_time": 5938
                }
            },
            "targetClassMap": {
                "saveObjectFiler": {
                    "target_classes": [
                        {
                            "class_name": "TaskUtils",
                            "similarity_score": 0.20812657945216545
                        },
                        {
                            "class_name": "DriverUtils",
                            "similarity_score": 0.199949841360687
                        },
                        {
                            "class_name": "DataSourceUtils",
                            "similarity_score": 0.19489611623639658
                        },
                        {
                            "class_name": "DriverNameComparator",
                            "similarity_score": 0.13608276348795434
                        },
                        {
                            "class_name": "DriverScoreComparator",
                            "similarity_score": 0.14490471120044368
                        },
                        {
                            "class_name": "LocalSystemRegistry",
                            "similarity_score": 0.27017358555631454
                        },
                        {
                            "class_name": "PluginServiceRegistry",
                            "similarity_score": 0.20065160817176897
                        },
                        {
                            "class_name": "ProductFeatureRegistry",
                            "similarity_score": 0.18286012835299778
                        },
                        {
                            "class_name": "BasePolicyDataProvider",
                            "similarity_score": 0.21813999700122944
                        },
                        {
                            "class_name": "DriverManagerRegistry",
                            "similarity_score": 0.19624132898121732
                        },
                        {
                            "class_name": "ProductBundleRegistry",
                            "similarity_score": 0.18700983288487377
                        },
                        {
                            "class_name": "DataSourceSerializerLegacy",
                            "similarity_score": 0.2062467478527795
                        },
                        {
                            "class_name": "ComparableVersion",
                            "similarity_score": 0.17474850928764932
                        },
                        {
                            "class_name": "GlobalEventManagerImpl",
                            "similarity_score": 0.2215842013183029
                        },
                        {
                            "class_name": "ResourceTypeRegistry",
                            "similarity_score": 0.2149054527250325
                        },
                        {
                            "class_name": "VersionRange",
                            "similarity_score": 0.13594658784335176
                        },
                        {
                            "class_name": "DriversParser",
                            "similarity_score": 0.20828286273410704
                        },
                        {
                            "class_name": "ProductSettingsRegistry",
                            "similarity_score": 0.20939884125839361
                        },
                        {
                            "class_name": "PlatformLanguageRegistry",
                            "similarity_score": 0.1752059881252525
                        },
                        {
                            "class_name": "ObjectManagerRegistry",
                            "similarity_score": 0.190107197452543
                        },
                        {
                            "class_name": "NetworkHandlerRegistry",
                            "similarity_score": 0.17040784491838729
                        },
                        {
                            "class_name": "FilterMapping",
                            "similarity_score": 0.19209025752404346
                        },
                        {
                            "class_name": "DataTypeProviderRegistry",
                            "similarity_score": 0.18328637538819034
                        },
                        {
                            "class_name": "FileSystemProviderRegistry",
                            "similarity_score": 0.19725902721240463
                        },
                        {
                            "class_name": "ResourceTypeDescriptor",
                            "similarity_score": 0.22384874041048142
                        },
                        {
                            "class_name": "DriverLibraryRemote",
                            "similarity_score": 0.21543187110803477
                        },
                        {
                            "class_name": "H2Migrator",
                            "similarity_score": 0.25006257889508593
                        },
                        {
                            "class_name": "DataSourceNavigatorSettings",
                            "similarity_score": 0.2386010778139594
                        },
                        {
                            "class_name": "DefaultArtifactVersion",
                            "similarity_score": 0.19181508427610267
                        },
                        {
                            "class_name": "MavenArtifact",
                            "similarity_score": 0.24521256234496475
                        },
                        {
                            "class_name": "TaskRegistry",
                            "similarity_score": 0.20024421388905536
                        },
                        {
                            "class_name": "MavenArtifactReference",
                            "similarity_score": 0.24415163805732393
                        },
                        {
                            "class_name": "MavenRegistry",
                            "similarity_score": 0.2120082374684462
                        },
                        {
                            "class_name": "DriverDescriptor",
                            "similarity_score": 0.21439765159887775
                        },
                        {
                            "class_name": "DataSourceProviderRegistry",
                            "similarity_score": 0.20175535288607682
                        },
                        {
                            "class_name": "DataSourceProviderDescriptor",
                            "similarity_score": 0.2164159820448398
                        },
                        {
                            "class_name": "DataSourceDescriptor",
                            "similarity_score": 0.20138282924617834
                        },
                        {
                            "class_name": "DataSourceRegistry",
                            "similarity_score": 0.20341017341663756
                        },
                        {
                            "class_name": "LocalProjectImpl",
                            "similarity_score": 0.2042332466940284
                        },
                        {
                            "class_name": "LocalTaskController",
                            "similarity_score": 0.2261355642205238
                        },
                        {
                            "class_name": "LocalWorkspaceSession",
                            "similarity_score": 0.19535793760346612
                        },
                        {
                            "class_name": "MissingDataSourceProvider",
                            "similarity_score": 0.15209250036889013
                        },
                        {
                            "class_name": "RegistryMessages",
                            "similarity_score": 0.2520870702386762
                        },
                        {
                            "class_name": "UpdateSiteDescriptor",
                            "similarity_score": 0.23969749850222494
                        },
                        {
                            "class_name": "RemoteNativeClientLocation",
                            "similarity_score": 0.17824951512110754
                        },
                        {
                            "class_name": "DistributionDescriptor",
                            "similarity_score": 0.1987615979999813
                        },
                        {
                            "class_name": "ValueHandlerDescriptor",
                            "similarity_score": 0.10675210253672476
                        },
                        {
                            "class_name": "TaskCategoryDescriptor",
                            "similarity_score": 0.2198392766737509
                        },
                        {
                            "class_name": "TaskFolderImpl",
                            "similarity_score": 0.1894230821045056
                        },
                        {
                            "class_name": "TaskImpl",
                            "similarity_score": 0.22868346365964173
                        },
                        {
                            "class_name": "TaskLoggingProgressMonitor",
                            "similarity_score": 0.15931737313308106
                        },
                        {
                            "class_name": "TaskManagerImpl",
                            "similarity_score": 0.20643590461402497
                        },
                        {
                            "class_name": "TaskPreferenceStore",
                            "similarity_score": 0.1697791676132977
                        },
                        {
                            "class_name": "TaskRunImpl",
                            "similarity_score": 0.24799416516428152
                        },
                        {
                            "class_name": "TaskRunJob",
                            "similarity_score": 0.18642425962481127
                        },
                        {
                            "class_name": "TaskTypeDescriptor",
                            "similarity_score": 0.1807645316291813
                        },
                        {
                            "class_name": "ResourceHandlerDescriptor",
                            "similarity_score": 0.20215474485289942
                        },
                        {
                            "class_name": "VersionDescriptor",
                            "similarity_score": 0.282842712474619
                        },
                        {
                            "class_name": "MavenArtifactDependency",
                            "similarity_score": 0.2120696700934506
                        },
                        {
                            "class_name": "MavenArtifactLicense",
                            "similarity_score": 0.24975621642178503
                        },
                        {
                            "class_name": "DriverCategoryDescriptor",
                            "similarity_score": 0.23432694801099885
                        },
                        {
                            "class_name": "DriverClassFindJob",
                            "similarity_score": 0.21448439069621544
                        },
                        {
                            "class_name": "DriverClassLoader",
                            "similarity_score": 0.18050414101854048
                        },
                        {
                            "class_name": "MavenArtifactVersion",
                            "similarity_score": 0.22166371561221593
                        },
                        {
                            "class_name": "DriverDependencies",
                            "similarity_score": 0.19178580367026057
                        },
                        {
                            "class_name": "DriverDescriptorSerializerLegacy",
                            "similarity_score": 0.20496110211789026
                        },
                        {
                            "class_name": "MavenProfile",
                            "similarity_score": 0.18405254345807753
                        },
                        {
                            "class_name": "DriverDescriptorSerializerModern",
                            "similarity_score": 0.36316747037940267
                        },
                        {
                            "class_name": "MavenRepository",
                            "similarity_score": 0.21063741555651758
                        },
                        {
                            "class_name": "DriverFileInfo",
                            "similarity_score": 0.21849510977216466
                        },
                        {
                            "class_name": "DriverFileSource",
                            "similarity_score": 0.2411915350974739
                        },
                        {
                            "class_name": "DriverLibraryLocal",
                            "similarity_score": 0.18637269458186095
                        },
                        {
                            "class_name": "Restriction",
                            "similarity_score": 0.1552071299509589
                        },
                        {
                            "class_name": "DriverLibraryMavenArtifact",
                            "similarity_score": 0.20521628045056017
                        },
                        {
                            "class_name": "DriverLibraryMavenDependency",
                            "similarity_score": 0.14655066837164313
                        },
                        {
                            "class_name": "DriverLibraryRepository",
                            "similarity_score": 0.22397894696843096
                        },
                        {
                            "class_name": "ObjectManagerDescriptor",
                            "similarity_score": 0.20113422987583926
                        },
                        {
                            "class_name": "DriverSubstitutionDescriptor",
                            "similarity_score": 0.24238069967716033
                        },
                        {
                            "class_name": "Preset",
                            "similarity_score": 0.2660079583736709
                        },
                        {
                            "class_name": "LocalConfigurationController",
                            "similarity_score": 0.2048079801297601
                        },
                        {
                            "class_name": "ProductBundleDescriptor",
                            "similarity_score": 0.25287380376433516
                        },
                        {
                            "class_name": "NativeClientDescriptor",
                            "similarity_score": 0.18748796308339793
                        },
                        {
                            "class_name": "NativeClientDistributionDescriptor",
                            "similarity_score": 0.20031675089762455
                        },
                        {
                            "class_name": "NativeClientFileDescriptor",
                            "similarity_score": 0.24548656477288625
                        },
                        {
                            "class_name": "ProductSettingDescriptor",
                            "similarity_score": 0.17401229922129147
                        },
                        {
                            "class_name": "LocalFileController",
                            "similarity_score": 0.22983497279682016
                        },
                        {
                            "class_name": "RunStatistics",
                            "similarity_score": 0.14237369936287483
                        },
                        {
                            "class_name": "NetworkHandlerDescriptor",
                            "similarity_score": 0.21618147837517382
                        },
                        {
                            "class_name": "EditorContributionDescriptor",
                            "similarity_score": 0.2300434605401311
                        },
                        {
                            "class_name": "ConnectionTypeParser",
                            "similarity_score": 0.1793643826667853
                        },
                        {
                            "class_name": "SchedulerDescriptor",
                            "similarity_score": 0.2192300915008251
                        },
                        {
                            "class_name": "ContextInfo",
                            "similarity_score": 0.20194641712369388
                        },
                        {
                            "class_name": "SecureCredentials",
                            "similarity_score": 0.2170940138014887
                        },
                        {
                            "class_name": "DataSourceAuthModelDescriptor",
                            "similarity_score": 0.20190935117306255
                        },
                        {
                            "class_name": "DataSourceBindingDescriptor",
                            "similarity_score": 0.21096793697952387
                        },
                        {
                            "class_name": "DataSourceConfigurationManagerBuffer",
                            "similarity_score": 0.20218020387785107
                        },
                        {
                            "class_name": "DataSourceConfigurationManagerNIO",
                            "similarity_score": 0.20455574612536642
                        },
                        {
                            "class_name": "DataSourceConfigurationManagerRM",
                            "similarity_score": 0.2139808535491775
                        },
                        {
                            "class_name": "DataSourceConfigurationStorageDescriptor",
                            "similarity_score": 0.23346480238675887
                        },
                        {
                            "class_name": "DataSourceFileStorage",
                            "similarity_score": 0.2066438474241583
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DriverDescriptorSerializerModern",
                        "LocalSystemRegistry",
                        "VersionDescriptor"
                    ],
                    "llm_response_time": 4723,
                    "similarity_computation_time": 38,
                    "similarity_metric": "cosine"
                },
                "saveNetworkProfiles": {
                    "target_classes": [
                        {
                            "class_name": "DataSourceConfigurationManager",
                            "similarity_score": 0.15085190956155506
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DataSourceConfigurationManager"
                    ],
                    "llm_response_time": 2133,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "saveFolder": {
                    "target_classes": [
                        {
                            "class_name": "TaskUtils",
                            "similarity_score": 0.39736734564100284
                        },
                        {
                            "class_name": "DriverUtils",
                            "similarity_score": 0.497314368031586
                        },
                        {
                            "class_name": "DataSourceUtils",
                            "similarity_score": 0.3922208680097549
                        },
                        {
                            "class_name": "DriverNameComparator",
                            "similarity_score": 0.3286335345030997
                        },
                        {
                            "class_name": "DriverScoreComparator",
                            "similarity_score": 0.3726193021797924
                        },
                        {
                            "class_name": "LocalSystemRegistry",
                            "similarity_score": 0.35160162476274687
                        },
                        {
                            "class_name": "PluginServiceRegistry",
                            "similarity_score": 0.43745386977505957
                        },
                        {
                            "class_name": "ProductFeatureRegistry",
                            "similarity_score": 0.34755452576589374
                        },
                        {
                            "class_name": "BasePolicyDataProvider",
                            "similarity_score": 0.3999762067632065
                        },
                        {
                            "class_name": "DriverManagerRegistry",
                            "similarity_score": 0.4701524481395373
                        },
                        {
                            "class_name": "DataSourceSerializerLegacy",
                            "similarity_score": 0.4909701414203244
                        },
                        {
                            "class_name": "ProductBundleRegistry",
                            "similarity_score": 0.42862086626123974
                        },
                        {
                            "class_name": "ComparableVersion",
                            "similarity_score": 0.4017327762086209
                        },
                        {
                            "class_name": "GlobalEventManagerImpl",
                            "similarity_score": 0.4896481917478683
                        },
                        {
                            "class_name": "VersionRange",
                            "similarity_score": 0.40758913939706304
                        },
                        {
                            "class_name": "DriversParser",
                            "similarity_score": 0.49500938839794356
                        },
                        {
                            "class_name": "ResourceTypeRegistry",
                            "similarity_score": 0.46283897783275174
                        },
                        {
                            "class_name": "PlatformLanguageRegistry",
                            "similarity_score": 0.47012699941570263
                        },
                        {
                            "class_name": "ProductSettingsRegistry",
                            "similarity_score": 0.5284310490516143
                        },
                        {
                            "class_name": "ObjectManagerRegistry",
                            "similarity_score": 0.46930224863351067
                        },
                        {
                            "class_name": "NetworkHandlerRegistry",
                            "similarity_score": 0.4795572170013808
                        },
                        {
                            "class_name": "FilterMapping",
                            "similarity_score": 0.4123457986936335
                        },
                        {
                            "class_name": "DataTypeProviderRegistry",
                            "similarity_score": 0.4918089536610456
                        },
                        {
                            "class_name": "FileSystemProviderRegistry",
                            "similarity_score": 0.4536870109944867
                        },
                        {
                            "class_name": "DriverLibraryRemote",
                            "similarity_score": 0.4239138713194341
                        },
                        {
                            "class_name": "ResourceTypeDescriptor",
                            "similarity_score": 0.5042487113483965
                        },
                        {
                            "class_name": "H2Migrator",
                            "similarity_score": 0.40905169703337796
                        },
                        {
                            "class_name": "DataSourceNavigatorSettings",
                            "similarity_score": 0.4044720766860346
                        },
                        {
                            "class_name": "DefaultArtifactVersion",
                            "similarity_score": 0.4679035282376909
                        },
                        {
                            "class_name": "MavenArtifact",
                            "similarity_score": 0.48054306461280033
                        },
                        {
                            "class_name": "TaskRegistry",
                            "similarity_score": 0.5090320508478844
                        },
                        {
                            "class_name": "MavenArtifactReference",
                            "similarity_score": 0.34840876452627173
                        },
                        {
                            "class_name": "MavenRegistry",
                            "similarity_score": 0.525973605535171
                        },
                        {
                            "class_name": "DriverDescriptor",
                            "similarity_score": 0.48844409895798413
                        },
                        {
                            "class_name": "DataSourceProviderRegistry",
                            "similarity_score": 0.5254438788693516
                        },
                        {
                            "class_name": "DataSourceProviderDescriptor",
                            "similarity_score": 0.5099524514675886
                        },
                        {
                            "class_name": "DataSourceDescriptor",
                            "similarity_score": 0.5083832018127307
                        },
                        {
                            "class_name": "DataSourceRegistry",
                            "similarity_score": 0.5293226730063054
                        },
                        {
                            "class_name": "LocalProjectImpl",
                            "similarity_score": 0.5094829811430607
                        },
                        {
                            "class_name": "LocalTaskController",
                            "similarity_score": 0.42879501068080167
                        },
                        {
                            "class_name": "LocalWorkspaceSession",
                            "similarity_score": 0.43023991327946715
                        },
                        {
                            "class_name": "ConnectionTypeParser",
                            "similarity_score": 0.3475948254005214
                        },
                        {
                            "class_name": "MissingDataSourceProvider",
                            "similarity_score": 0.343669055689516
                        },
                        {
                            "class_name": "RegistryMessages",
                            "similarity_score": 0.16672338494861028
                        },
                        {
                            "class_name": "UpdateSiteDescriptor",
                            "similarity_score": 0.3215879404125773
                        },
                        {
                            "class_name": "RemoteNativeClientLocation",
                            "similarity_score": 0.40471000250205275
                        },
                        {
                            "class_name": "DistributionDescriptor",
                            "similarity_score": 0.3333333333333333
                        },
                        {
                            "class_name": "ContextInfo",
                            "similarity_score": 0.34835084987228265
                        },
                        {
                            "class_name": "ValueHandlerDescriptor",
                            "similarity_score": 0.2864459496157732
                        },
                        {
                            "class_name": "TaskCategoryDescriptor",
                            "similarity_score": 0.4394083637630576
                        },
                        {
                            "class_name": "TaskFolderImpl",
                            "similarity_score": 0.3714320710971125
                        },
                        {
                            "class_name": "TaskImpl",
                            "similarity_score": 0.488498059678735
                        },
                        {
                            "class_name": "TaskLoggingProgressMonitor",
                            "similarity_score": 0.36642288993147554
                        },
                        {
                            "class_name": "TaskManagerImpl",
                            "similarity_score": 0.5101946857887404
                        },
                        {
                            "class_name": "TaskPreferenceStore",
                            "similarity_score": 0.4124246573966036
                        },
                        {
                            "class_name": "TaskRunImpl",
                            "similarity_score": 0.34045673997974407
                        },
                        {
                            "class_name": "TaskRunJob",
                            "similarity_score": 0.4384721410297255
                        },
                        {
                            "class_name": "TaskTypeDescriptor",
                            "similarity_score": 0.4157504029478677
                        },
                        {
                            "class_name": "MavenArtifactDependency",
                            "similarity_score": 0.4016771562027471
                        },
                        {
                            "class_name": "MavenArtifactLicense",
                            "similarity_score": 0.3071595327472434
                        },
                        {
                            "class_name": "MavenArtifactVersion",
                            "similarity_score": 0.4972040585548903
                        },
                        {
                            "class_name": "MavenProfile",
                            "similarity_score": 0.3950918386598358
                        },
                        {
                            "class_name": "MavenRepository",
                            "similarity_score": 0.3948379456105585
                        },
                        {
                            "class_name": "VersionDescriptor",
                            "similarity_score": 0.41109609582188933
                        },
                        {
                            "class_name": "ResourceHandlerDescriptor",
                            "similarity_score": 0.45010821209727175
                        },
                        {
                            "class_name": "ObjectManagerDescriptor",
                            "similarity_score": 0.4189774551420363
                        },
                        {
                            "class_name": "DriverCategoryDescriptor",
                            "similarity_score": 0.3474754951252328
                        },
                        {
                            "class_name": "DriverClassFindJob",
                            "similarity_score": 0.5212274836992302
                        },
                        {
                            "class_name": "DriverClassLoader",
                            "similarity_score": 0.49269418433218376
                        },
                        {
                            "class_name": "DriverDependencies",
                            "similarity_score": 0.49375252999387015
                        },
                        {
                            "class_name": "DriverDescriptorSerializerLegacy",
                            "similarity_score": 0.5353932155840188
                        },
                        {
                            "class_name": "DriverDescriptorSerializerModern",
                            "similarity_score": 0.6612546800877741
                        },
                        {
                            "class_name": "DriverFileInfo",
                            "similarity_score": 0.3607900934413579
                        },
                        {
                            "class_name": "DriverFileSource",
                            "similarity_score": 0.35595164092981546
                        },
                        {
                            "class_name": "DriverLibraryLocal",
                            "similarity_score": 0.4659933431898753
                        },
                        {
                            "class_name": "DriverLibraryMavenArtifact",
                            "similarity_score": 0.5085265999143096
                        },
                        {
                            "class_name": "DriverLibraryMavenDependency",
                            "similarity_score": 0.42132504423474315
                        },
                        {
                            "class_name": "DriverLibraryRepository",
                            "similarity_score": 0.3662335103823572
                        },
                        {
                            "class_name": "DriverSubstitutionDescriptor",
                            "similarity_score": 0.4100194410378433
                        },
                        {
                            "class_name": "Restriction",
                            "similarity_score": 0.5039823196366864
                        },
                        {
                            "class_name": "DataSourceAuthModelDescriptor",
                            "similarity_score": 0.38774425317243144
                        },
                        {
                            "class_name": "DataSourceBindingDescriptor",
                            "similarity_score": 0.5025460700797019
                        },
                        {
                            "class_name": "DataSourceConfigurationManagerBuffer",
                            "similarity_score": 0.42091014994973525
                        },
                        {
                            "class_name": "DataSourceConfigurationManagerNIO",
                            "similarity_score": 0.4947656691645388
                        },
                        {
                            "class_name": "DataSourceConfigurationManagerRM",
                            "similarity_score": 0.4632515065060439
                        },
                        {
                            "class_name": "DataSourceConfigurationStorageDescriptor",
                            "similarity_score": 0.3967528080526645
                        },
                        {
                            "class_name": "DataSourceFileStorage",
                            "similarity_score": 0.3793835349248
                        },
                        {
                            "class_name": "DataSourceFolder",
                            "similarity_score": 0.4760740010106291
                        },
                        {
                            "class_name": "DataSourceHandlerDescriptor",
                            "similarity_score": 0.3743720611296203
                        },
                        {
                            "class_name": "DataSourceInfo",
                            "similarity_score": 0.4880935300919764
                        },
                        {
                            "class_name": "DataSourceMemoryStorage",
                            "similarity_score": 0.34250451119440395
                        },
                        {
                            "class_name": "DataSourceOriginLazy",
                            "similarity_score": 0.36128797290063697
                        },
                        {
                            "class_name": "DataSourceOriginLocal",
                            "similarity_score": 0.3361816427260906
                        },
                        {
                            "class_name": "DataSourceOriginProviderDescriptor",
                            "similarity_score": 0.4101755157647915
                        },
                        {
                            "class_name": "DataSourceOriginProviderLocal",
                            "similarity_score": 0.22360679774997896
                        },
                        {
                            "class_name": "DataSourcePreferenceStore",
                            "similarity_score": 0.42829025167815776
                        },
                        {
                            "class_name": "DataSourceRegistryRM",
                            "similarity_score": 0.4428471153855538
                        },
                        {
                            "class_name": "NativeClientDescriptor",
                            "similarity_score": 0.3477191299344723
                        },
                        {
                            "class_name": "NativeClientDistributionDescriptor",
                            "similarity_score": 0.3923795599061469
                        },
                        {
                            "class_name": "NativeClientFileDescriptor",
                            "similarity_score": 0.35680102015680126
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DriverDescriptorSerializerModern",
                        "DriverDescriptorSerializerLegacy",
                        "DataSourceRegistry"
                    ],
                    "llm_response_time": 5396,
                    "similarity_computation_time": 25,
                    "similarity_metric": "cosine"
                },
                "getValueEncryptor": {
                    "target_classes": [
                        {
                            "class_name": "DBPProject",
                            "similarity_score": 0.07292567746835817
                        },
                        {
                            "class_name": "DataSourceRegistry",
                            "similarity_score": 0.5500197163711467
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DBPProject",
                        "DataSourceRegistry"
                    ],
                    "llm_response_time": 5120,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "parseDriver": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 5260,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "serializeModifyPermissions": {
                    "target_classes": [
                        {
                            "class_name": "DBPDataSourcePermissionOwner",
                            "similarity_score": 0.2760262237369417
                        },
                        {
                            "class_name": "DataSourceRegistry",
                            "similarity_score": 0.5495244109741189
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DBPDataSourcePermissionOwner",
                        "DataSourceRegistry"
                    ],
                    "llm_response_time": 4167,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "saveAuthProfiles": {
                    "target_classes": [
                        {
                            "class_name": "DataSourceConfigurationManager",
                            "similarity_score": 0.14500369764143536
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DataSourceConfigurationManager"
                    ],
                    "llm_response_time": 2685,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "saveNetworkHandlerConfiguration": {
                    "target_classes": [
                        {
                            "class_name": "DataSourceConfigurationManager",
                            "similarity_score": 0.19139511607884777
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DataSourceConfigurationManager"
                    ],
                    "llm_response_time": 2208,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "saveCredentialsToMap": {
                    "target_classes": [
                        {
                            "class_name": "SecureCredentials",
                            "similarity_score": 0.5676200027043136
                        },
                        {
                            "class_name": "DataSourceRegistry",
                            "similarity_score": 0.7497516349435346
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SecureCredentials",
                        "DataSourceRegistry"
                    ],
                    "llm_response_time": 3637,
                    "similarity_computation_time": 3,
                    "similarity_metric": "cosine"
                },
                "saveSecureCredentialsFile": {
                    "target_classes": [
                        {
                            "class_name": "DataSourceConfigurationManager",
                            "similarity_score": 0.16430361065323473
                        },
                        {
                            "class_name": "DBPDataSourceConfigurationStorage",
                            "similarity_score": 0.3178302687095746
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DataSourceConfigurationManager",
                        "DBPDataSourceConfigurationStorage"
                    ],
                    "llm_response_time": 3043,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "readSecuredCredentials": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 4313,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "saveSecuredCredentials": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 3736,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "saveDataSource": {
                    "target_classes": [
                        {
                            "class_name": "DataSourceConfigurationManager",
                            "similarity_score": 0.16682791711349654
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DataSourceConfigurationManager"
                    ],
                    "llm_response_time": 2543,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "readSecureCredentials": {
                    "target_classes": [
                        {
                            "class_name": "DBPDataSourceConfigurationStorage",
                            "similarity_score": 0.3381347607721324
                        },
                        {
                            "class_name": "DataSourceConfigurationManager",
                            "similarity_score": 0.22040012342410364
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DataSourceConfigurationManager",
                        "DBPDataSourceConfigurationStorage"
                    ],
                    "llm_response_time": 2669,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "loadConfigFile": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 4897,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                }
            }
        }
    }
]