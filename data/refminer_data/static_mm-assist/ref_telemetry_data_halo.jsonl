{"id":"8444cd51-a7b7-4e97-9380-e19c40947bc9","methodCount":15,"hostFunctionTelemetryData":{"hostFunctionSize":308,"lineStart":36,"lineEnd":343,"bodyLineStart":36,"language":"java","filePath":"/Users/fraolbatole/Documents/RunRefMiner/MM-Assist-oracle/halo/application/src/main/java/run/halo/app/content/comment/CommentNotificationReasonPublisher.java","sourceCode":"/**\n * Notification reason publisher for {@link Comment} and {@link Reply}.\n *\n * @author guqing\n * @since 2.9.0\n */\n@Component\n@RequiredArgsConstructor\npublic class CommentNotificationReasonPublisher {\n    private static final GroupVersionKind POST_GVK \u003d GroupVersionKind.fromExtension(Post.class);\n    private static final GroupVersionKind PAGE_GVK \u003d\n        GroupVersionKind.fromExtension(SinglePage.class);\n\n    private final ExtensionClient client;\n    private final NewCommentOnPostReasonPublisher newCommentOnPostReasonPublisher;\n    private final NewCommentOnPageReasonPublisher newCommentOnPageReasonPublisher;\n    private final NewReplyReasonPublisher newReplyReasonPublisher;\n\n    /**\n     * On new comment.\n     */\n    @Async\n    @EventListener(CommentCreatedEvent.class)\n    public void onNewComment(CommentCreatedEvent event) {\n        Comment comment \u003d event.getComment();\n        if (isPostComment(comment)) {\n            newCommentOnPostReasonPublisher.publishReasonBy(comment);\n        } else if (isPageComment(comment)) {\n            newCommentOnPageReasonPublisher.publishReasonBy(comment);\n        }\n    }\n\n    /**\n     * On new reply.\n     */\n    @Async\n    @EventListener(ReplyCreatedEvent.class)\n    public void onNewReply(ReplyCreatedEvent event) {\n        Reply reply \u003d event.getReply();\n        var commentName \u003d reply.getSpec().getCommentName();\n        client.fetch(Comment.class, commentName)\n            .ifPresent(comment -\u003e newReplyReasonPublisher.publishReasonBy(reply, comment));\n    }\n\n    boolean isPostComment(Comment comment) {\n        return Ref.groupKindEquals(comment.getSpec().getSubjectRef(), POST_GVK);\n    }\n\n    boolean isPageComment(Comment comment) {\n        return Ref.groupKindEquals(comment.getSpec().getSubjectRef(), PAGE_GVK);\n    }\n\n    @Component\n    @RequiredArgsConstructor\n    static class NewCommentOnPostReasonPublisher {\n\n        private final ExtensionClient client;\n        private final NotificationReasonEmitter notificationReasonEmitter;\n        private final ExternalLinkProcessor externalLinkProcessor;\n\n        public void publishReasonBy(Comment comment) {\n            Ref subjectRef \u003d comment.getSpec().getSubjectRef();\n            Post post \u003d client.fetch(Post.class, subjectRef.getName()).orElseThrow();\n            if (doNotEmitReason(comment, post)) {\n                return;\n            }\n\n            String postUrl \u003d\n                externalLinkProcessor.processLink(post.getStatusOrDefault().getPermalink());\n            var reasonSubject \u003d Reason.Subject.builder()\n                .apiVersion(post.getApiVersion())\n                .kind(post.getKind())\n                .name(subjectRef.getName())\n                .title(post.getSpec().getTitle())\n                .url(postUrl)\n                .build();\n            Comment.CommentOwner owner \u003d comment.getSpec().getOwner();\n            notificationReasonEmitter.emit(NotificationReasonConst.NEW_COMMENT_ON_POST,\n                builder -\u003e {\n                    var attributes \u003d CommentOnPostReasonData.builder()\n                        .postName(subjectRef.getName())\n                        .postTitle(post.getSpec().getTitle())\n                        .postUrl(postUrl)\n                        .commenter(owner.getDisplayName())\n                        .content(comment.getSpec().getContent())\n                        .commentName(comment.getMetadata().getName())\n                        .build();\n                    builder.attributes(ReasonDataConverter.toAttributeMap(attributes))\n                        .author(identityFrom(owner))\n                        .subject(reasonSubject);\n                }).block();\n        }\n\n        boolean doNotEmitReason(Comment comment, Post post) {\n            Comment.CommentOwner commentOwner \u003d comment.getSpec().getOwner();\n            return isPostOwner(post, commentOwner);\n        }\n\n        boolean isPostOwner(Post post, Comment.CommentOwner commentOwner) {\n            String kind \u003d commentOwner.getKind();\n            String name \u003d commentOwner.getName();\n            var postOwner \u003d post.getSpec().getOwner();\n            if (Comment.CommentOwner.KIND_EMAIL.equals(kind)) {\n                return client.fetch(User.class, postOwner)\n                    .filter(user -\u003e name.equals(user.getSpec().getEmail()))\n                    .isPresent();\n            }\n            return name.equals(postOwner);\n        }\n\n        @Builder\n        record CommentOnPostReasonData(String postName, String postTitle, String postUrl,\n                                       String commenter, String content, String commentName) {\n        }\n    }\n\n    @Component\n    @RequiredArgsConstructor\n    static class NewCommentOnPageReasonPublisher {\n        private final ExtensionClient client;\n        private final NotificationReasonEmitter notificationReasonEmitter;\n        private final ExternalLinkProcessor externalLinkProcessor;\n\n        public void publishReasonBy(Comment comment) {\n            Ref subjectRef \u003d comment.getSpec().getSubjectRef();\n            var singlePage \u003d client.fetch(SinglePage.class, subjectRef.getName()).orElseThrow();\n\n            if (doNotEmitReason(comment, singlePage)) {\n                return;\n            }\n\n            var pageUrl \u003d externalLinkProcessor\n                .processLink(singlePage.getStatusOrDefault().getPermalink());\n\n            var reasonSubject \u003d Reason.Subject.builder()\n                .apiVersion(singlePage.getApiVersion())\n                .kind(singlePage.getKind())\n                .name(subjectRef.getName())\n                .title(singlePage.getSpec().getTitle())\n                .url(pageUrl)\n                .build();\n\n            Comment.CommentOwner owner \u003d comment.getSpec().getOwner();\n            notificationReasonEmitter.emit(NotificationReasonConst.NEW_COMMENT_ON_PAGE,\n                builder -\u003e {\n                    var attributes \u003d CommentOnPageReasonData.builder()\n                        .pageName(subjectRef.getName())\n                        .pageTitle(singlePage.getSpec().getTitle())\n                        .pageUrl(pageUrl)\n                        .commenter(defaultIfBlank(owner.getDisplayName(), owner.getName()))\n                        .content(comment.getSpec().getContent())\n                        .commentName(comment.getMetadata().getName())\n                        .build();\n                    builder.attributes(ReasonDataConverter.toAttributeMap(attributes))\n                        .author(identityFrom(owner))\n                        .subject(reasonSubject);\n                }).block();\n        }\n\n        public boolean doNotEmitReason(Comment comment, SinglePage page) {\n            Comment.CommentOwner commentOwner \u003d comment.getSpec().getOwner();\n            return isPageOwner(page, commentOwner);\n        }\n\n        boolean isPageOwner(SinglePage page, Comment.CommentOwner commentOwner) {\n            String kind \u003d commentOwner.getKind();\n            String name \u003d commentOwner.getName();\n            var pageOwner \u003d page.getSpec().getOwner();\n            if (Comment.CommentOwner.KIND_EMAIL.equals(kind)) {\n                return client.fetch(User.class, pageOwner)\n                    .filter(user -\u003e name.equals(user.getSpec().getEmail()))\n                    .isPresent();\n            }\n            return name.equals(pageOwner);\n        }\n\n        @Builder\n        record CommentOnPageReasonData(String pageName, String pageTitle, String pageUrl,\n                                       String commenter, String content, String commentName) {\n        }\n    }\n\n    @UtilityClass\n    static class ReasonDataConverter {\n        public static \u003cT\u003e Map\u003cString, Object\u003e toAttributeMap(T data) {\n            Assert.notNull(data, \"Reason attributes must not be null\");\n            return JsonUtils.mapper().convertValue(data, new TypeReference\u003c\u003e() {\n            });\n        }\n    }\n\n    static UserIdentity identityFrom(Comment.CommentOwner owner) {\n        if (Comment.CommentOwner.KIND_EMAIL.equals(owner.getKind())) {\n            return UserIdentity.anonymousWithEmail(owner.getName());\n        }\n        return UserIdentity.of(owner.getName());\n    }\n\n    @Component\n    @RequiredArgsConstructor\n    static class NewReplyReasonPublisher {\n        private final ExtensionClient client;\n        private final NotificationReasonEmitter notificationReasonEmitter;\n        private final ExtensionComponentsFinder extensionComponentsFinder;\n\n        public void publishReasonBy(Reply reply, Comment comment) {\n            boolean isQuoteReply \u003d StringUtils.isNotBlank(reply.getSpec().getQuoteReply());\n\n            Optional\u003cReply\u003e quoteReplyOptional \u003d Optional.of(isQuoteReply)\n                .filter(Boolean::booleanValue)\n                .flatMap(isQuote -\u003e client.fetch(Reply.class, reply.getSpec().getQuoteReply()));\n\n            if (doNotEmitReason(reply, quoteReplyOptional.orElse(null), comment)) {\n                return;\n            }\n\n            var reasonSubject \u003d quoteReplyOptional\n                .map(quoteReply -\u003e Subscription.ReasonSubject.builder()\n                    .apiVersion(quoteReply.getApiVersion())\n                    .kind(quoteReply.getKind())\n                    .name(quoteReply.getMetadata().getName())\n                    .build()\n                )\n                .orElseGet(() -\u003e Subscription.ReasonSubject.builder()\n                    .apiVersion(comment.getApiVersion())\n                    .kind(comment.getKind())\n                    .name(comment.getMetadata().getName())\n                    .build()\n                );\n\n            var reasonSubjectTitle \u003d quoteReplyOptional\n                .map(quoteReply -\u003e quoteReply.getSpec().getContent())\n                .orElse(comment.getSpec().getContent());\n\n            var quoteReplyContent \u003d quoteReplyOptional\n                .map(quoteReply -\u003e quoteReply.getSpec().getContent())\n                .orElse(null);\n            var replyOwner \u003d reply.getSpec().getOwner();\n\n            var reasonAttributesBuilder \u003d NewReplyReasonData.builder()\n                .commentContent(comment.getSpec().getContent())\n                .isQuoteReply(isQuoteReply)\n                .quoteContent(quoteReplyContent)\n                .commentName(comment.getMetadata().getName())\n                .replier(defaultIfBlank(replyOwner.getDisplayName(), replyOwner.getName()))\n                .content(reply.getSpec().getContent())\n                .replyName(reply.getMetadata().getName());\n\n            getCommentSubjectDisplay(comment.getSpec().getSubjectRef())\n                .ifPresent(subject -\u003e {\n                    reasonAttributesBuilder.commentSubjectTitle(subject.title());\n                    reasonAttributesBuilder.commentSubjectUrl(subject.url());\n                });\n\n            notificationReasonEmitter.emit(NotificationReasonConst.SOMEONE_REPLIED_TO_YOU,\n                builder -\u003e {\n                    var data \u003d ReasonDataConverter.toAttributeMap(reasonAttributesBuilder.build());\n                    builder.attributes(data)\n                        .author(identityFrom(replyOwner))\n                        .subject(Reason.Subject.builder()\n                            .apiVersion(reasonSubject.getApiVersion())\n                            .kind(reasonSubject.getKind())\n                            .name(reasonSubject.getName())\n                            .title(reasonSubjectTitle)\n                            .build());\n                }).block();\n        }\n\n        /**\n         * To be compatible with older versions, it may be empty, so use optional.\n         * TODO use {@link ExtensionGetter} instead of {@code extensionComponentsFinder}\n         */\n        @SuppressWarnings(\"unchecked\")\n        Optional\u003cCommentSubject.SubjectDisplay\u003e getCommentSubjectDisplay(Ref ref) {\n            return extensionComponentsFinder.getExtensions(CommentSubject.class)\n                .stream()\n                .filter(commentSubject -\u003e commentSubject.supports(ref))\n                .findFirst()\n                .flatMap(commentSubject\n                    -\u003e commentSubject.getSubjectDisplay(ref.getName()).blockOptional());\n        }\n\n        boolean doNotEmitReason(Reply currentReply, Reply quoteReply, Comment comment) {\n            boolean isQuoteReply \u003d StringUtils.isNotBlank(currentReply.getSpec().getQuoteReply());\n\n            if (isQuoteReply \u0026\u0026 quoteReply \u003d\u003d null) {\n                throw new IllegalArgumentException(\n                    \"quoteReply can not be null when currentReply is reply to quote\");\n            }\n\n            Comment.CommentOwner commentOwner \u003d isQuoteReply ? quoteReply.getSpec().getOwner()\n                : comment.getSpec().getOwner();\n\n            var currentReplyOwner \u003d currentReply.getSpec().getOwner();\n            // reply to oneself do not emit reason\n            return currentReplyOwner.getKind().equals(commentOwner.getKind())\n                \u0026\u0026 currentReplyOwner.getName().equals(commentOwner.getName());\n        }\n\n        @Builder\n        record NewReplyReasonData(String commentContent, String commentSubjectTitle,\n                                  String commentSubjectUrl, boolean isQuoteReply,\n                                  String quoteContent,\n                                  String commentName, String replier, String content,\n                                  String replyName) {\n        }\n    }\n}","methodCount":15},"candidatesTelemetryData":{"numberOfSuggestions":9,"candidates":[{"lineStart":303,"lineEnd":315,"refactoringType":"MyMoveInstanceMethodRefactoring","refactoringInfo":"Move method getCommentSubjectDisplay to class ExtensionComponentsFinder","description":"Move method getCommentSubjectDisplay to run.halo.app.plugin.ExtensionComponentsFinder\nRationale: The getCommentSubjectDisplay() method relies heavily on the extensionComponentsFinder to retrieve extensions and perform filtering operations. Moving this method to ExtensionComponentsFinder aligns with the Single Responsibility Principle, as it centralizes the logic related to fetching and processing extensions. This enhances cohesion, making the class responsible for extension management. Additionally, it promotes better encapsulation of related functionality. However, care must be taken to ensure that the method\u0027s dependencies are properly managed within the new class.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":303,"lineEnd":315,"refactoringType":"MyMoveInstanceMethodRefactoring","refactoringInfo":"Move method getCommentSubjectDisplay to class ExtensionClient","description":"Move method getCommentSubjectDisplay to run.halo.app.extension.ExtensionClient\nRationale: Although the ExtensionClient primarily handles operations related to extensions, it could serve as a suitable target for getCommentSubjectDisplay() since this method involves fetching extensions and processing them. Moving the method here would encapsulate the logic of interacting with extensions and their displays, thus adhering to the Interface Segregation Principle by ensuring that clients only depend on the methods they use. However, this might clutter the ExtensionClient if it becomes overloaded with extension-related methods, which could lead to a violation of the Single Responsibility Principle.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":303,"lineEnd":315,"refactoringType":"MyMoveInstanceMethodRefactoring","refactoringInfo":"Move method getCommentSubjectDisplay to class NotificationReasonEmitter","description":"Move method getCommentSubjectDisplay to run.halo.app.notification.NotificationReasonEmitter\nRationale: While NotificationReasonEmitter does not directly relate to extension management, if it is responsible for emitting notifications based on comment subjects, it could be a potential target. This move would allow the method to be used in the context of notifications, thereby adhering to the Dependency Inversion Principle by decoupling the notification logic from extension management. However, this is likely the least suitable option as it may introduce unnecessary coupling and dilute the class\u0027s primary responsibility, leading to a violation of the Single Responsibility Principle.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":219,"lineEnd":223,"refactoringType":"MyMoveStaticMethodRefactoring","refactoringInfo":"Move Static method toAttributeMap to class SettingUtils","description":"move method toAttributeMap to PsiClass:SettingUtils\nRationale: The toAttributeMap() method is used for converting data into a map format, which aligns with the utility functions found in SettingUtils that deal with configuration and mapping. Moving it here adheres to the Single Responsibility Principle by consolidating mapping logic and improving cohesion. However, consider that this could lead to a bloated utility class if more mapping-related methods are added in the future.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":219,"lineEnd":223,"refactoringType":"MyMoveStaticMethodRefactoring","refactoringInfo":"Move Static method toAttributeMap to class PatchUtils","description":"move method toAttributeMap to PsiClass:PatchUtils\nRationale: PatchUtils deals with various data transformations, including JSON operations. The toAttributeMap() method fits well within this context as it transforms data into a map format, similar to patching operations. This move would enhance the utility of PatchUtils while adhering to the Open/Closed Principle, allowing for future extensions. However, it may require careful management of method dependencies.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":219,"lineEnd":223,"refactoringType":"MyMoveStaticMethodRefactoring","refactoringInfo":"Move Static method toAttributeMap to class HaloUtils","description":"move method toAttributeMap to PsiClass:HaloUtils\nRationale: HaloUtils features methods that convert and manipulate data. Relocating toAttributeMap() here would centralize data manipulation methods, aligning with the Interface Segregation Principle by keeping utility methods focused. This could also help in improving the discoverability of related methods. However, it might lead to confusion if HaloUtils becomes too generic.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":79,"lineEnd":81,"refactoringType":"MyMoveInstanceMethodRefactoring","refactoringInfo":"Move method isPostComment to class NewCommentOnPostReasonPublisher","description":"Move method isPostComment to run.halo.app.content.comment.CommentNotificationReasonPublisher.NewCommentOnPostReasonPublisher\nRationale: The isPostComment() method is closely related to the concept of comments on posts, making it a natural fit for NewCommentOnPostReasonPublisher. This class deals with the logic of publishing reasons for comments on posts, and the method\u0027s functionality aligns well with its responsibilities. Moving it here enhances cohesion, as the method pertains directly to the domain of post comments. This relocation supports the Single Responsibility Principle by ensuring that the comment-related logic is encapsulated within the appropriate class. However, care must be taken to ensure that the method does not introduce tight coupling with the publisher\u0027s implementation.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":79,"lineEnd":81,"refactoringType":"MyMoveInstanceMethodRefactoring","refactoringInfo":"Move method isPostComment to class GroupVersionKind","description":"Move method isPostComment to run.halo.app.extension.GroupVersionKind\nRationale: The isPostComment() method relies on checking the group kind of a comment, which is fundamentally about understanding the type of resource being dealt with. GroupVersionKind is designed to handle operations related to group and versioning, making it a suitable candidate for this method. Moving it here aligns with the Open/Closed Principle, as it allows for future extensions of group kind checks without altering the existing publisher classes. The potential drawback is that it might lead to a less clear association between comment logic and group kind logic, thus impacting cohesion.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":79,"lineEnd":81,"refactoringType":"MyMoveInstanceMethodRefactoring","refactoringInfo":"Move method isPostComment to class NewCommentOnPageReasonPublisher","description":"Move method isPostComment to run.halo.app.content.comment.CommentNotificationReasonPublisher.NewCommentOnPageReasonPublisher\nRationale: Although NewCommentOnPageReasonPublisher primarily focuses on comments related to pages, the isPostComment() method\u0027s logic can also be relevant in the context of comments and their classifications. Relocating the method here can provide a unified approach to comment categorization across different types. This move could enhance flexibility and reuse of the method across different comment types. However, since this class is not directly related to posts, it might dilute the clarity of responsibilities and lead to confusion regarding the method\u0027s purpose.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false}]},"iterationData":[{"iteration_num":-1,"suggested_move_methods":[{"method_name":"onNewComment","method_signature":"@Async\n    @EventListener(CommentCreatedEvent.class)\n    public onNewComment(CommentCreatedEvent event)","target_class":"","rationale":""},{"method_name":"onNewReply","method_signature":"@Async\n    @EventListener(ReplyCreatedEvent.class)\n    public onNewReply(ReplyCreatedEvent event)","target_class":"","rationale":""},{"method_name":"isPostComment","method_signature":" isPostComment(Comment comment)","target_class":"","rationale":""},{"method_name":"isPageComment","method_signature":" isPageComment(Comment comment)","target_class":"","rationale":""},{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Comment comment)","target_class":"","rationale":""},{"method_name":"doNotEmitReason","method_signature":" doNotEmitReason(Comment comment, Post post)","target_class":"","rationale":""},{"method_name":"isPostOwner","method_signature":" isPostOwner(Post post, Comment.CommentOwner commentOwner)","target_class":"","rationale":""},{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Comment comment)","target_class":"","rationale":""},{"method_name":"doNotEmitReason","method_signature":"public doNotEmitReason(Comment comment, SinglePage page)","target_class":"","rationale":""},{"method_name":"isPageOwner","method_signature":" isPageOwner(SinglePage page, Comment.CommentOwner commentOwner)","target_class":"","rationale":""},{"method_name":"toAttributeMap","method_signature":"public static toAttributeMap(T data)","target_class":"","rationale":""},{"method_name":"identityFrom","method_signature":"static identityFrom(Comment.CommentOwner owner)","target_class":"","rationale":""},{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Reply reply, Comment comment)","target_class":"","rationale":""},{"method_name":"getCommentSubjectDisplay","method_signature":"@SuppressWarnings(\"unchecked\") getCommentSubjectDisplay(Ref ref)","target_class":"","rationale":""},{"method_name":"doNotEmitReason","method_signature":" doNotEmitReason(Reply currentReply, Reply quoteReply, Comment comment)","target_class":"","rationale":""}],"llm_response_time":0},{"iteration_num":-2,"suggested_move_methods":[{"method_name":"getCommentSubjectDisplay","method_signature":"@SuppressWarnings(\"unchecked\") getCommentSubjectDisplay(Ref ref)","target_class":"","rationale":""},{"method_name":"toAttributeMap","method_signature":"public static toAttributeMap(T data)","target_class":"","rationale":""},{"method_name":"isPostComment","method_signature":" isPostComment(Comment comment)","target_class":"","rationale":""},{"method_name":"isPageComment","method_signature":" isPageComment(Comment comment)","target_class":"","rationale":""},{"method_name":"doNotEmitReason","method_signature":" doNotEmitReason(Reply currentReply, Reply quoteReply, Comment comment)","target_class":"","rationale":""},{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Reply reply, Comment comment)","target_class":"","rationale":""},{"method_name":"onNewReply","method_signature":"@Async\n    @EventListener(ReplyCreatedEvent.class)\n    public onNewReply(ReplyCreatedEvent event)","target_class":"","rationale":""},{"method_name":"identityFrom","method_signature":"static identityFrom(Comment.CommentOwner owner)","target_class":"","rationale":""},{"method_name":"doNotEmitReason","method_signature":" doNotEmitReason(Comment comment, Post post)","target_class":"","rationale":""},{"method_name":"doNotEmitReason","method_signature":"public doNotEmitReason(Comment comment, SinglePage page)","target_class":"","rationale":""},{"method_name":"onNewComment","method_signature":"@Async\n    @EventListener(CommentCreatedEvent.class)\n    public onNewComment(CommentCreatedEvent event)","target_class":"","rationale":""},{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Comment comment)","target_class":"","rationale":""},{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Comment comment)","target_class":"","rationale":""},{"method_name":"isPostOwner","method_signature":" isPostOwner(Post post, Comment.CommentOwner commentOwner)","target_class":"","rationale":""},{"method_name":"isPageOwner","method_signature":" isPageOwner(SinglePage page, Comment.CommentOwner commentOwner)","target_class":"","rationale":""}],"llm_response_time":0}],"methodCompatibilityScores":{"@SuppressWarnings(\"unchecked\") getCommentSubjectDisplay(Ref ref)":{"first":{"method_name":"getCommentSubjectDisplay","method_signature":"@SuppressWarnings(\"unchecked\") getCommentSubjectDisplay(Ref ref)","target_class":"","rationale":""},"second":0.3480365354856911},"public static toAttributeMap(T data)":{"first":{"method_name":"toAttributeMap","method_signature":"public static toAttributeMap(T data)","target_class":"","rationale":""},"second":0.3800196193653082}," isPostComment(Comment comment)":{"first":{"method_name":"isPostComment","method_signature":" isPostComment(Comment comment)","target_class":"","rationale":""},"second":0.44837104605747363}," isPageComment(Comment comment)":{"first":{"method_name":"isPageComment","method_signature":" isPageComment(Comment comment)","target_class":"","rationale":""},"second":0.44837104605747363}," doNotEmitReason(Reply currentReply, Reply quoteReply, Comment comment)":{"first":{"method_name":"doNotEmitReason","method_signature":" doNotEmitReason(Reply currentReply, Reply quoteReply, Comment comment)","target_class":"","rationale":""},"second":0.4641879088947484},"public publishReasonBy(Reply reply, Comment comment)":{"first":{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Reply reply, Comment comment)","target_class":"","rationale":""},"second":0.47620980171050975},"@Async\n    @EventListener(ReplyCreatedEvent.class)\n    public onNewReply(ReplyCreatedEvent event)":{"first":{"method_name":"onNewReply","method_signature":"@Async\n    @EventListener(ReplyCreatedEvent.class)\n    public onNewReply(ReplyCreatedEvent event)","target_class":"","rationale":""},"second":0.4884119731401022},"static identityFrom(Comment.CommentOwner owner)":{"first":{"method_name":"identityFrom","method_signature":"static identityFrom(Comment.CommentOwner owner)","target_class":"","rationale":""},"second":0.5076321988878573}," doNotEmitReason(Comment comment, Post post)":{"first":{"method_name":"doNotEmitReason","method_signature":" doNotEmitReason(Comment comment, Post post)","target_class":"","rationale":""},"second":0.5346669400831245},"public doNotEmitReason(Comment comment, SinglePage page)":{"first":{"method_name":"doNotEmitReason","method_signature":"public doNotEmitReason(Comment comment, SinglePage page)","target_class":"","rationale":""},"second":0.5352221721072504},"@Async\n    @EventListener(CommentCreatedEvent.class)\n    public onNewComment(CommentCreatedEvent event)":{"first":{"method_name":"onNewComment","method_signature":"@Async\n    @EventListener(CommentCreatedEvent.class)\n    public onNewComment(CommentCreatedEvent event)","target_class":"","rationale":""},"second":0.545036750782145},"public publishReasonBy(Comment comment)":{"first":{"method_name":"publishReasonBy","method_signature":"public publishReasonBy(Comment comment)","target_class":"","rationale":""},"second":0.6143811398653032}," isPostOwner(Post post, Comment.CommentOwner commentOwner)":{"first":{"method_name":"isPostOwner","method_signature":" isPostOwner(Post post, Comment.CommentOwner commentOwner)","target_class":"","rationale":""},"second":0.6882515332298569}," isPageOwner(SinglePage page, Comment.CommentOwner commentOwner)":{"first":{"method_name":"isPageOwner","method_signature":" isPageOwner(SinglePage page, Comment.CommentOwner commentOwner)","target_class":"","rationale":""},"second":0.6882515332298569}},"llmMethodPriority":{"priority_method_names":["getCommentSubjectDisplay","toAttributeMap","isPostComment","isPageComment","doNotEmitReason","publishReasonBy","onNewReply","identityFrom","doNotEmitReason","doNotEmitReason","onNewComment","publishReasonBy","publishReasonBy","isPostOwner","isPageOwner"],"llm_response_time":3274},"targetClassMap":{"getCommentSubjectDisplay":{"target_classes":[{"class_name":"ExtensionClient","similarity_score":0.2837197462460762},{"class_name":"NotificationReasonEmitter","similarity_score":0.39056350067051926},{"class_name":"ExtensionComponentsFinder","similarity_score":0.3131500502876495}],"target_classes_sorted_by_llm":["ExtensionComponentsFinder","ExtensionClient","NotificationReasonEmitter"],"llm_response_time":3056,"similarity_computation_time":6,"similarity_metric":"voyage"},"toAttributeMap":{"target_classes":[{"class_name":"CommentNotificationReasonPublisher","similarity_score":0.4081860812001931},{"class_name":"PatchUtils","similarity_score":0.45838491632852596},{"class_name":"NewReplyReasonPublisherTest","similarity_score":0.15885101466409676},{"class_name":"ReplyNotificationSubscriptionHelperTest","similarity_score":0.19795189561622398},{"class_name":"ReplyQuery","similarity_score":0.37838701587232176},{"class_name":"CommentNotificationReasonPublisherTest","similarity_score":0.18202891576965372},{"class_name":"CommentQuery","similarity_score":0.354069904222349},{"class_name":"CommentRequestTest","similarity_score":0.32141736147612315},{"class_name":"CommentServiceImplTest","similarity_score":0.3807193587789094},{"class_name":"CommentStats","similarity_score":0.28038607704602214},{"class_name":"OwnerInfo","similarity_score":0.19664628205864068},{"class_name":"Identity","similarity_score":0.4615930911724978},{"class_name":"JsonUtils","similarity_score":0.3538672070452421},{"class_name":"ExtensionStoreUtil","similarity_score":0.22082741963473848},{"class_name":"FileNameUtils","similarity_score":0.27434702609435563},{"class_name":"HaloUtils","similarity_score":0.43696446166895103},{"class_name":"LabelIndexSpecUtils","similarity_score":0.3202563076101743},{"class_name":"LanguageUtils","similarity_score":0.23961691914926153},{"class_name":"PageUrlUtils","similarity_score":0.3897185686277675},{"class_name":"SelectorUtil","similarity_score":0.38738618725533447},{"class_name":"PathUtils","similarity_score":0.20535616764173842},{"class_name":"SettingUtils","similarity_score":0.43661579863190164},{"class_name":"SettingUtilsTest","similarity_score":0.33515619885922654},{"class_name":"Base62Utils","similarity_score":0.36233724134491313},{"class_name":"Base62UtilsTest","similarity_score":0.3105295017040594},{"class_name":"PluginExtensionLoaderUtils","similarity_score":0.42342482556298083},{"class_name":"PluginUtils","similarity_score":0.39246819948283046},{"class_name":"MeterUtils","similarity_score":0.4091540300356328},{"class_name":"PrimaryKeySpecUtils","similarity_score":0.32778114068761827},{"class_name":"IpAddressUtils","similarity_score":0.3318560029720653},{"class_name":"PublicApiUtils","similarity_score":0.3010602180660221},{"class_name":"QueryParamBuildUtil","similarity_score":0.42395054775500624},{"class_name":"ThemeMessageResolutionUtils","similarity_score":0.40532722486977646},{"class_name":"ThemeUtils","similarity_score":0.46433505169207845},{"class_name":"VersionUtils","similarity_score":0.2004459314343183},{"class_name":"ValidationUtils","similarity_score":0.34095671690043816},{"class_name":"ListedSnapshotDto","similarity_score":0.26578219767403816},{"class_name":"ContentUpdateParam","similarity_score":0.3691358303677134},{"class_name":"ContentWrapper","similarity_score":0.27097010305191876},{"class_name":"CategoryPostCountService","similarity_score":0.38146357071457415},{"class_name":"SinglePageQuery","similarity_score":0.35545464337594834},{"class_name":"PostQuery","similarity_score":0.3160128643501442},{"class_name":"Stats","similarity_score":0.2598076211353316},{"class_name":"TestPost","similarity_score":0.34668401692651435},{"class_name":"Ref","similarity_score":0.2786807679588018},{"class_name":"ChangeRecord","similarity_score":0.477509241142917},{"class_name":"NameSlugPair","similarity_score":0.4351941398892446},{"class_name":"NavigationPostVo","similarity_score":0.3425943549137659},{"class_name":"ReplyEventReconciler","similarity_score":0.3565301651293962}],"target_classes_sorted_by_llm":["SettingUtils","PatchUtils","HaloUtils","QueryParamBuildUtil","ChangeRecord","Identity","NameSlugPair","ThemeUtils","MeterUtils","PluginExtensionLoaderUtils"],"llm_response_time":10647,"similarity_computation_time":95,"similarity_metric":"voyage"},"isPostComment":{"target_classes":[{"class_name":"GroupVersionKind","similarity_score":0.2771609312622935},{"class_name":"ExtensionClient","similarity_score":0.011145564251507055},{"class_name":"NewCommentOnPostReasonPublisher","similarity_score":0.3584640895494324},{"class_name":"NewCommentOnPageReasonPublisher","similarity_score":0.35721725415588007},{"class_name":"NewReplyReasonPublisher","similarity_score":0.3177762847994256}],"target_classes_sorted_by_llm":["NewCommentOnPostReasonPublisher","GroupVersionKind","NewCommentOnPageReasonPublisher","NewReplyReasonPublisher","ExtensionClient"],"llm_response_time":5001,"similarity_computation_time":1,"similarity_metric":"voyage"}}}
{"id":"fcaf6b31-d3de-4807-8827-3f949e8d6b38","methodCount":5,"hostFunctionTelemetryData":{"hostFunctionSize":60,"lineStart":162,"lineEnd":221,"bodyLineStart":162,"language":"java","filePath":"/Users/fraolbatole/Documents/RunRefMiner/MM-Assist-oracle/halo/application/src/main/java/run/halo/app/core/extension/attachment/endpoint/AttachmentEndpoint.java","sourceCode":"public interface ISearchRequest extends IListRequest {\n\n        @Schema(description \u003d \"Keyword for searching.\")\n        Optional\u003cString\u003e getKeyword();\n\n        @Schema(description \u003d \"Filter attachments without group. This parameter will ignore group\"\n            + \" parameter.\")\n        Optional\u003cBoolean\u003e getUngrouped();\n\n        @ArraySchema(uniqueItems \u003d true,\n            arraySchema \u003d @Schema(name \u003d \"accepts\",\n                description \u003d \"Acceptable media types.\"),\n            schema \u003d @Schema(description \u003d \"like image/*, video/mp4, text/*\",\n                implementation \u003d String.class,\n                example \u003d \"image/*\"))\n        List\u003cString\u003e getAccepts();\n\n        @ArraySchema(uniqueItems \u003d true,\n            arraySchema \u003d @Schema(name \u003d \"sort\",\n                description \u003d \"Sort property and direction of the list result. Supported fields: \"\n                    + \"creationTimestamp, size\"),\n            schema \u003d @Schema(description \u003d \"like field,asc or field,desc\",\n                implementation \u003d String.class,\n                example \u003d \"creationTimestamp,desc\"))\n        Sort getSort();\n\n        static void buildParameters(Builder builder) {\n            IListRequest.buildParameters(builder);\n            builder.parameter(QueryParamBuildUtil.sortParameter())\n                .parameter(parameterBuilder()\n                    .in(ParameterIn.QUERY)\n                    .name(\"ungrouped\")\n                    .required(false)\n                    .description(\"\"\"\n                        Filter attachments without group. This parameter will ignore group \\\n                        parameter.\\\n                        \"\"\")\n                    .implementation(Boolean.class))\n                .parameter(parameterBuilder()\n                    .in(ParameterIn.QUERY)\n                    .name(\"keyword\")\n                    .required(false)\n                    .description(\"Keyword for searching.\")\n                    .implementation(String.class))\n                .parameter(parameterBuilder()\n                    .in(ParameterIn.QUERY)\n                    .name(\"accepts\")\n                    .required(false)\n                    .description(\"Acceptable media types.\")\n                    .array(\n                        arraySchemaBuilder()\n                            .uniqueItems(true)\n                            .schema(schemaBuilder()\n                                .implementation(String.class)\n                                .example(\"image/*\"))\n                    )\n                    .implementationArray(String.class)\n                );\n        }\n    }","methodCount":5},"candidatesTelemetryData":{"numberOfSuggestions":3,"candidates":[{"lineStart":187,"lineEnd":219,"refactoringType":"MyMoveStaticMethodRefactoring","refactoringInfo":"Move Static method buildParameters to class AttachmentEndpoint","description":"move method buildParameters to PsiClass:AttachmentEndpoint\nRationale: The buildParameters() method is closely related to building query parameters for attachments, which fits well within the AttachmentEndpoint context. Moving it here adheres to the Single Responsibility Principle by grouping related functionalities, thus improving cohesion. This move will also enhance the clarity of the AttachmentEndpoint\u0027s role in the system. However, it may introduce dependencies on AttachmentEndpoint that could complicate unit testing.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":187,"lineEnd":219,"refactoringType":"MyMoveStaticMethodRefactoring","refactoringInfo":"Move Static method buildParameters to class ListRequest","description":"move method buildParameters to PsiClass:ListRequest\nRationale: The buildParameters() method constructs query parameters that are likely used in list requests. By relocating it to ListRequest, we align the method with its primary function of handling list operations, thus improving the class\u0027s cohesion. This adheres to the Open/Closed Principle, making ListRequest more extensible for future parameter requirements. A potential drawback is that it may increase the class\u0027s complexity if not managed carefully.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false},{"lineStart":187,"lineEnd":219,"refactoringType":"MyMoveStaticMethodRefactoring","refactoringInfo":"Move Static method buildParameters to class TagQuery","description":"move method buildParameters to PsiClass:TagQuery\nRationale: The method\u0027s focus on building query parameters aligns with the functionality of TagQuery, which also deals with filtering and searching data. Moving it here enhances cohesion and clarifies the purpose of TagQuery in managing parameters. This adheres to the Interface Segregation Principle, ensuring that classes only implement methods relevant to their functionality. However, it may lead to an overloaded class if TagQuery grows too complex.","couldCreateRefObject":true,"applied":false,"startedRefactoringFlow":false,"undone":false}]},"iterationData":[{"iteration_num":-1,"suggested_move_methods":[{"method_name":"buildParameters","method_signature":"static buildParameters(Builder builder)","target_class":"","rationale":""}],"llm_response_time":0},{"iteration_num":-2,"suggested_move_methods":[{"method_name":"buildParameters","method_signature":"static buildParameters(Builder builder)","target_class":"","rationale":""}],"llm_response_time":0}],"methodCompatibilityScores":{"static buildParameters(Builder builder)":{"first":{"method_name":"buildParameters","method_signature":"static buildParameters(Builder builder)","target_class":"","rationale":""},"second":0.07142857142857142}},"llmMethodPriority":{"priority_method_names":["buildParameters"],"llm_response_time":734},"targetClassMap":{"buildParameters":{"target_classes":[{"class_name":"AttachmentEndpoint","similarity_score":0.22987131480007947},{"class_name":"ThemeUtils","similarity_score":0.15950864447682847},{"class_name":"SettingUtils","similarity_score":0.12193473493953674},{"class_name":"SettingUtilsTest","similarity_score":0.13784708221498995},{"class_name":"UploadOption","similarity_score":0.07763376175556712},{"class_name":"AttachmentUtils","similarity_score":0.08278421786538927},{"class_name":"Thumbnail","similarity_score":0.0618261078768907},{"class_name":"JsonUtils","similarity_score":0.08630430996782347},{"class_name":"ThemeMessageResolutionUtils","similarity_score":0.1554881636781224},{"class_name":"HaloUtils","similarity_score":0.10474909080064895},{"class_name":"LabelIndexSpecUtils","similarity_score":0.10107594250783},{"class_name":"LanguageUtils","similarity_score":0.06524542853160248},{"class_name":"PageUrlUtils","similarity_score":0.12331346918986531},{"class_name":"SelectorUtil","similarity_score":0.1132443231077439},{"class_name":"PatchUtils","similarity_score":0.139942848747413},{"class_name":"PathUtils","similarity_score":0.0724373473441105},{"class_name":"Base62Utils","similarity_score":0.10982673344284041},{"class_name":"Base62UtilsTest","similarity_score":0.12298800925361816},{"class_name":"ExtensionStoreUtil","similarity_score":0.0684474971394413},{"class_name":"PluginExtensionLoaderUtils","similarity_score":0.13080695180795185},{"class_name":"PluginUtils","similarity_score":0.07286276689020073},{"class_name":"ValidationUtils","similarity_score":0.1012792366501087},{"class_name":"FileNameUtils","similarity_score":0.09092151188071727},{"class_name":"VersionUtils","similarity_score":0.07938841860374447},{"class_name":"PrimaryKeySpecUtils","similarity_score":0.11273900848248332},{"class_name":"FileTypeDetectUtils","similarity_score":0.15339299776947407},{"class_name":"IpAddressUtils","similarity_score":0.12021453876762818},{"class_name":"MeterUtils","similarity_score":0.12741767293558595},{"class_name":"SortUtils","similarity_score":0.1362215784170195},{"class_name":"PublicApiUtils","similarity_score":0.07487012977269326},{"class_name":"QueryParamBuildUtil","similarity_score":0.22069164692422386},{"class_name":"Subject","similarity_score":0.10377092427541133},{"class_name":"Subscription","similarity_score":0.08444082728601773},{"class_name":"TagQuery","similarity_score":0.20512958130572928},{"class_name":"TestRole","similarity_score":0.12574886370696423},{"class_name":"Comment","similarity_score":0.0761089228348601},{"class_name":"Theme","similarity_score":0.06606715836669963},{"class_name":"CommentOwner","similarity_score":0.07701807890682083},{"class_name":"CommentReconciler","similarity_score":0.14357630535714},{"class_name":"CommentReconcilerTest","similarity_score":0.08486978939800066},{"class_name":"ThemeQuery","similarity_score":0.2319428126811227},{"class_name":"ThemeReconcilerTest","similarity_score":0.09026690378852183},{"class_name":"ThemeServiceImpl","similarity_score":0.10359310507238194},{"class_name":"RoleBinding","similarity_score":0.08689956922373439},{"class_name":"RouteRuleReconciler","similarity_score":0.11694718908652013},{"class_name":"ListRequest","similarity_score":0.18752034836405143},{"class_name":"Counter","similarity_score":0.051194241085557174},{"class_name":"CreateUserRequest","similarity_score":0.05736163560068633},{"class_name":"PluginReconciler","similarity_score":0.12848458240269645},{"class_name":"PluginServiceImpl","similarity_score":0.13475212858983612}],"target_classes_sorted_by_llm":["AttachmentEndpoint","ListRequest","TagQuery","QueryParamBuildUtil","ThemeQuery","ThemeUtils","ThemeMessageResolutionUtils","CommentReconciler","FileTypeDetectUtils","PatchUtils"],"llm_response_time":11020,"similarity_computation_time":29,"similarity_metric":"voyage"}}}
