[
  {
    "source_class": "jdk.graal.compiler.truffle.test.nodes.explosion.UnrollingTestNode",
    "source_method": "countBlackholeNodes",
    "target_class": "java.lang.String):int \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.core.common.cfg.AbstractControlFlowGraph",
    "source_method": "dominates",
    "target_class": "jdk.graal.compiler.core.common.cfg.BasicBlock<?>):boolean \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.core.common.cfg.AbstractControlFlowGraph",
    "source_method": "commonDominator",
    "target_class": "jdk.graal.compiler.core.common.cfg.BasicBlock<?>):jdk.graal.compiler.core.common.cfg.BasicBlock<?> \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.core.common.cfg.AbstractControlFlowGraph",
    "source_method": "commonDominatorHelper",
    "target_class": "jdk.graal.compiler.core.common.cfg.BasicBlock<?>):jdk.graal.compiler.core.common.cfg.BasicBlock<?> \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "inputs",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "inputPositions",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "successors",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "successorPositions",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "modCount",
    "target_class": "jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "incModCount",
    "target_class": "jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "usageModCount",
    "target_class": "jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "incUsageModCount",
    "target_class": "jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "initialize",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "isAllowedUsageType",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "replaceAtUsagePos",
    "target_class": "jdk.graal.compiler.graph.Node, jdk.graal.compiler.graph.Position):void \t jdk.graal.compiler.graph.Position"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "maybeNotifyInputChanged",
    "target_class": "jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "fireNodeEvent",
    "target_class": "jdk.graal.compiler.graph.Graph.NodeEventListener):void \t jdk.graal.compiler.graph.Graph.NodeEventListener"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "maybeNotifyZeroUsages",
    "target_class": "jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "replaceAllInputs",
    "target_class": "jdk.graal.compiler.graph.Node):void \t jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "clearInputs",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "copyOrClearEdgesForClone",
    "target_class": "jdk.graal.compiler.graph.Edges.Type, java.util.EnumSet<jdk.graal.compiler.graph.Edges.Type>):void \t jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "verifyInputs",
    "target_class": "jdk.graal.compiler.graph.InputEdges"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "valueEquals",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "dataFlowEquals",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "dynamicNodeSizeEstimate",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.graph.Node",
    "source_method": "estimatedNodeCycles",
    "target_class": "jdk.graal.compiler.graph.NodeClass"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "isJumpingToAfterElseBranch",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock, jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData):boolean \t jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.scopes.Scope"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "isLastBlockInThenBranch",
    "target_class": "jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData):boolean \t jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "isLastBlockInSwitchArm",
    "target_class": "jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData):boolean \t jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "isJumpingOverCatchBlock",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock, jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData):boolean \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "isNormalLoopExit",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock, jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData):boolean \t jdk.graal.compiler.nodes.cfg.HIRBlock"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "getSortedSetByLabeledBlockEnd",
    "target_class": "jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "commonDominatorFor",
    "target_class": "boolean):jdk.graal.compiler.nodes.cfg.HIRBlock \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.hightiercodegen.reconstruction.stackifier.blocks.LabeledBlockGeneration",
    "source_method": "generateLabeledBlocks",
    "target_class": "jdk.graal.compiler.hightiercodegen.reconstruction.StackifierData"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode",
    "source_method": "compress",
    "target_class": "jdk.graal.compiler.core.common.CompressEncoding):jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode \t jdk.graal.compiler.nodes.CompressionNode.CompressionOp"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.nodes.HotSpotCompressionNode",
    "source_method": "uncompress",
    "target_class": "jdk.graal.compiler.core.common.CompressEncoding):jdk.graal.compiler.nodes.CompressionNode \t jdk.graal.compiler.nodes.CompressionNode.CompressionOp"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.replacements.CallSiteTargetNode",
    "source_method": "tryFold",
    "target_class": "jdk.graal.compiler.hotspot.replacements.MetaAccessProvider, jdk.graal.compiler.hotspot.replacements.Assumptions):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.replacements.ClassGetHubNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.nodes.spi.CoreProviders"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.replacements.ClassGetHubNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.hotspot.replacements.MetaAccessProvider, jdk.graal.compiler.hotspot.replacements.ConstantReflectionProvider, boolean, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.hotspot.nodes.type.KlassPointerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.replacements.ClassGetHubNode",
    "source_method": "piCastNonNull",
    "target_class": "jdk.graal.compiler.nodes.extended.GuardingNode):jdk.graal.compiler.hotspot.word.KlassPointer \t jdk.graal.compiler.nodes.PiNode.IntrinsifyOp"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.replacements.KlassLayoutHelperNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.hotspot.GraalHotSpotVMConfig, jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.nodes.spi.CoreProviders"
  },
  {
    "source_class": "jdk.graal.compiler.hotspot.replacements.KlassLayoutHelperNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.hotspot.replacements.ConstantReflectionProvider, int):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move",
    "source_method": "reg2reg",
    "target_class": "jdk.graal.compiler.asm.amd64.AMD64MacroAssembler, jdk.graal.compiler.lir.amd64.Value, jdk.graal.compiler.lir.amd64.Value):void \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move",
    "source_method": "reg2stack",
    "target_class": "jdk.graal.compiler.lir.asm.CompilationResultBuilder, jdk.graal.compiler.asm.amd64.AMD64MacroAssembler, jdk.graal.compiler.lir.amd64.Value, jdk.graal.compiler.lir.amd64.Register):void \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move",
    "source_method": "stack2reg",
    "target_class": "jdk.graal.compiler.lir.asm.CompilationResultBuilder, jdk.graal.compiler.asm.amd64.AMD64MacroAssembler, jdk.graal.compiler.lir.amd64.Register, jdk.graal.compiler.lir.amd64.Value):void \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move",
    "source_method": "const2reg",
    "target_class": "jdk.graal.compiler.asm.amd64.AMD64MacroAssembler, jdk.graal.compiler.lir.amd64.Register, jdk.graal.compiler.lir.amd64.JavaConstant, jdk.graal.compiler.lir.amd64.AMD64Kind):void \t jdk.graal.compiler.lir.asm.CompilationResultBuilder"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move",
    "source_method": "const2stack",
    "target_class": "jdk.graal.compiler.asm.amd64.AMD64MacroAssembler, jdk.graal.compiler.lir.amd64.Value, jdk.graal.compiler.lir.amd64.JavaConstant):void \t jdk.graal.compiler.lir.asm.CompilationResultBuilder"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move.PointerCompressionOp",
    "source_method": "hasBase",
    "target_class": "jdk.graal.compiler.core.common.CompressEncoding"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move.PointerCompressionOp",
    "source_method": "emitUncompressWithBaseRegister",
    "target_class": "jdk.graal.compiler.lir.amd64.Register, jdk.graal.compiler.lir.amd64.Register, jdk.graal.compiler.lir.amd64.Register, int, boolean):void \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.lir.amd64.AMD64Move.UncompressPointerOp",
    "source_method": "emitUncompressCode",
    "target_class": "jdk.graal.compiler.lir.amd64.Register, int, jdk.graal.compiler.lir.amd64.Register, boolean):void \t jdk.graal.compiler.asm.Assembler"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.BeginNode",
    "source_method": "begin",
    "target_class": "jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "createPrimitive",
    "target_class": "jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "getConstantNodes",
    "target_class": "jdk.graal.compiler.graph.iterators.NodeIterable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "forConstant",
    "target_class": "jdk.graal.compiler.nodes.Constant, jdk.graal.compiler.nodes.MetaAccessProvider, jdk.graal.compiler.nodes.StructuredGraph):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "forConstant",
    "target_class": "jdk.graal.compiler.nodes.Constant, int, boolean, jdk.graal.compiler.nodes.MetaAccessProvider):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "forConstant",
    "target_class": "jdk.graal.compiler.nodes.Constant, jdk.graal.compiler.nodes.MetaAccessProvider):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "forPrimitive",
    "target_class": "jdk.graal.compiler.nodes.JavaConstant, jdk.graal.compiler.nodes.StructuredGraph):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "forPrimitive",
    "target_class": "jdk.graal.compiler.nodes.Constant):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "unique",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "forIntegerBits",
    "target_class": "jdk.graal.compiler.nodes.JavaConstant):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.core.common.type.IntegerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ConstantNode",
    "source_method": "forIntegerKind",
    "target_class": "long):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.DynamicPiNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.ConstantReflectionProvider, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.extended.GuardingNode, jdk.graal.compiler.nodes.ValueNode, boolean, boolean):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "createInitialLoopScope",
    "target_class": "jdk.graal.compiler.nodes.FixedWithNextNode):jdk.graal.compiler.nodes.GraphDecoder.LoopScope \t jdk.graal.compiler.nodes.FixedWithNextNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "decode",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.MethodScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "propagateCreatedNodes",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "handleInvoke",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.nodes.GraphDecoder.InvokeData):jdk.graal.compiler.nodes.GraphDecoder.LoopScope \t jdk.graal.compiler.nodes.GraphDecoder.InvokeData"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "handleProxyNodes",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.nodes.LoopExitNode):void \t jdk.graal.compiler.nodes.GraphDecoder.LoopScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "handlePhiFunctions",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.nodes.AbstractEndNode, jdk.graal.compiler.nodes.AbstractMergeNode):void \t jdk.graal.compiler.nodes.AbstractMergeNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "readProperties",
    "target_class": "jdk.graal.compiler.graph.Node):void \t jdk.graal.compiler.nodes.GraphDecoder.MethodScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "makeFixedNodeInputs",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.graph.Node):void \t jdk.graal.compiler.graph.Edges"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "makeFloatingNodeInputs",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.graph.Node):void \t jdk.graal.compiler.graph.Edges"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "getNodeClass",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, int):jdk.graal.compiler.graph.NodeClass<?> \t jdk.graal.compiler.nodes.GraphDecoder.MethodScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "makeStubNode",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, int):jdk.graal.compiler.nodes.FixedNode \t jdk.graal.compiler.nodes.GraphDecoder.MethodScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "skipDirectEdge",
    "target_class": "jdk.graal.compiler.graph.Edges, int):boolean \t jdk.graal.compiler.graph.Edges"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "lookupNode",
    "target_class": "int):jdk.graal.compiler.graph.Node \t jdk.graal.compiler.nodes.GraphDecoder.LoopScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "registerNode",
    "target_class": "int, jdk.graal.compiler.graph.Node, boolean, boolean):void \t jdk.graal.compiler.nodes.GraphDecoder.LoopScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "readOrderId",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.MethodScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GraphDecoder",
    "source_method": "readObject",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.MethodScope"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LoopDetector",
    "source_method": "asInt",
    "target_class": "jdk.graal.compiler.nodes.ValueNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LoopDetector",
    "source_method": "bailout",
    "target_class": "jdk.graal.compiler.nodes.graphbuilderconf.LoopExplosionPlugin.LoopExplosionKind"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LoopDetector",
    "source_method": "createSwitch",
    "target_class": "java.util.SortedMap<java.lang.Integer,jdk.graal.compiler.nodes.AbstractBeginNode>, jdk.graal.compiler.nodes.AbstractBeginNode):jdk.graal.compiler.nodes.extended.IntegerSwitchNode \t jdk.graal.compiler.nodes.ProfileData.SwitchProbabilityData"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.GuardNode",
    "source_method": "willDeoptUnconditionally",
    "target_class": "boolean):boolean \t jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "getTrueSuccessorProbability",
    "target_class": "jdk.graal.compiler.nodes.ProfileData.BranchProbabilityData"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "isWorthPerformingSplit",
    "target_class": "jdk.graal.compiler.nodes.LogicNode):boolean \t jdk.graal.compiler.nodes.LogicNegationNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "replaceNodesInBranch",
    "target_class": "jdk.graal.compiler.nodes.IfNode.NodeColor, jdk.graal.compiler.nodes.ValuePhiNode, jdk.graal.compiler.nodes.ValueNode):void \t jdk.graal.compiler.nodes.PhiNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "conditionUses",
    "target_class": "jdk.graal.compiler.nodes.PhiNode, jdk.graal.compiler.nodes.EconomicMap<jdk.graal.compiler.graph.Node,jdk.graal.compiler.nodes.IfNode.NodeColor>):boolean \t jdk.graal.compiler.nodes.GraphState.GuardsStage"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "computeCondition",
    "target_class": "jdk.graal.compiler.nodes.LogicNode, jdk.graal.compiler.nodes.PhiNode, jdk.graal.compiler.graph.Node):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.StructuredGraph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "cleanupMerge",
    "target_class": "jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "insertMerge",
    "target_class": "jdk.graal.compiler.nodes.ValuePhiNode, jdk.graal.compiler.nodes.FrameState, jdk.graal.compiler.nodes.spi.SimplifierTool):jdk.graal.compiler.nodes.MergeNode \t jdk.graal.compiler.nodes.FrameState"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "canMergeRangeChecks",
    "target_class": "jdk.graal.compiler.nodes.LogicNode, boolean):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.type.IntegerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "mergeShortCircuitOrRangeCheck",
    "target_class": "jdk.graal.compiler.debug.DebugContext"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "isUnboxedFrom",
    "target_class": "jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.nodes.PiNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "sameDestination",
    "target_class": "jdk.graal.compiler.nodes.AbstractBeginNode):boolean \t jdk.graal.compiler.nodes.PhiNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "prepareForSwap",
    "target_class": "jdk.graal.compiler.nodes.LogicNode, jdk.graal.compiler.nodes.LogicNode):boolean \t jdk.graal.compiler.debug.DebugContext"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "valuesDistinct",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "expectedConstantForNormalize",
    "target_class": "jdk.graal.compiler.core.common.calc.Condition"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "propagateInjectedProfile",
    "target_class": "jdk.graal.compiler.nodes.EndNode, jdk.graal.compiler.nodes.EndNode):void \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "constantValues",
    "target_class": "jdk.graal.compiler.nodes.AbstractMergeNode, boolean):jdk.graal.compiler.nodes.Constant[] \t jdk.graal.compiler.nodes.AbstractMergeNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.IfNode",
    "source_method": "successorWillBeEliminated",
    "target_class": "jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.InvokeNode",
    "source_method": "estimatedNodeCycles",
    "target_class": "jdk.graal.compiler.nodes.CallTargetNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.InvokeNode",
    "source_method": "estimatedNodeSize",
    "target_class": "jdk.graal.compiler.nodes.CallTargetNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LogicConstantNode",
    "source_method": "forBoolean",
    "target_class": "jdk.graal.compiler.graph.Graph):jdk.graal.compiler.nodes.LogicConstantNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LogicNegationNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LogicNode",
    "source_method": "and",
    "target_class": "boolean, jdk.graal.compiler.nodes.LogicNode, boolean, jdk.graal.compiler.nodes.ProfileData.BranchProbabilityData):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LogicNode",
    "source_method": "or",
    "target_class": "boolean, jdk.graal.compiler.nodes.LogicNode, boolean, jdk.graal.compiler.nodes.ProfileData.BranchProbabilityData):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.LoopBeginNode",
    "source_method": "getSelfIncrements",
    "target_class": "jdk.graal.compiler.nodes.PhiNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.AbstractPointerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.PiNode.IntrinsifyOp):boolean \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ResolvedJavaType, boolean, boolean, jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.core.common.type.TypeReference"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.extended.GuardingNode, jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ValueNodeInterface"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "piCastPositive",
    "target_class": "jdk.graal.compiler.nodes.extended.GuardingNode):int \t jdk.graal.compiler.nodes.PiNode.IntrinsifyOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "piCastNonNull",
    "target_class": "jdk.graal.compiler.nodes.extended.GuardingNode):java.lang.Object \t jdk.graal.compiler.nodes.PiNode.IntrinsifyOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "piCastNonNullClass",
    "target_class": "jdk.graal.compiler.nodes.extended.GuardingNode):java.lang.Class<?> \t jdk.graal.compiler.nodes.PiNode.IntrinsifyOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "piCastNonNanFloat",
    "target_class": "jdk.graal.compiler.nodes.extended.GuardingNode):float \t jdk.graal.compiler.nodes.PiNode.IntrinsifyOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "piCastNonNanDouble",
    "target_class": "jdk.graal.compiler.nodes.extended.GuardingNode):double \t jdk.graal.compiler.nodes.PiNode.IntrinsifyOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.PiNode",
    "source_method": "guardTrySkipPi",
    "target_class": "jdk.graal.compiler.nodes.LogicNode, boolean, jdk.graal.compiler.nodes.NodeView):boolean \t jdk.graal.compiler.graph.iterators.NodeIterable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ProxyNode",
    "source_method": "forValue",
    "target_class": "jdk.graal.compiler.nodes.LoopExitNode):jdk.graal.compiler.nodes.ValueProxyNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ProxyNode",
    "source_method": "forGuard",
    "target_class": "jdk.graal.compiler.nodes.LoopExitNode):jdk.graal.compiler.nodes.GuardProxyNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ProxyNode",
    "source_method": "forMemory",
    "target_class": "jdk.graal.compiler.nodes.LoopExitNode, jdk.graal.compiler.nodes.LocationIdentity):jdk.graal.compiler.nodes.MemoryProxyNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ShortCircuitOrNode",
    "source_method": "canonicalizeNegation",
    "target_class": "boolean, jdk.graal.compiler.nodes.LogicNode, boolean, jdk.graal.compiler.nodes.ProfileData.BranchProbabilityData):jdk.graal.compiler.nodes.ShortCircuitOrNode \t jdk.graal.compiler.nodes.LogicNegationNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ShortCircuitOrNode",
    "source_method": "simplifyComparisonOrdered",
    "target_class": "jdk.graal.compiler.nodes.LogicNode):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.SimplifyingGraphDecoder",
    "source_method": "canonicalizeFixedNode",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.graph.Node):jdk.graal.compiler.graph.Node \t jdk.graal.compiler.nodes.IfNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.SimplifyingGraphDecoder",
    "source_method": "canonicalizeFixedNodeToNull",
    "target_class": "jdk.graal.compiler.nodes.ValueNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.UnaryOpLogicNode",
    "source_method": "skipThroughPisAndProxies",
    "target_class": "jdk.graal.compiler.nodes.PiNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.ValueNode",
    "source_method": "recursiveDataFlowEqualsHelper",
    "target_class": "jdk.graal.compiler.graph.Node):boolean \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.AbstractNormalizeCompareNode",
    "source_method": "tryConstantFold",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, boolean, boolean, jdk.graal.compiler.nodes.calc.JavaKind, jdk.graal.compiler.nodes.calc.ConstantReflectionProvider):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.CompareNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.AddNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.AddNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Add>, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView, boolean):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.AndNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.AndNode",
    "source_method": "eliminateRedundantBinaryArithmeticOp",
    "target_class": "jdk.graal.compiler.core.common.type.IntegerStamp):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.IntegerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.AndNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp.And>, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ConditionalNode",
    "source_method": "combineStamps",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.nodes.calc.MinMaxNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ConditionalNode",
    "source_method": "canonicalizeConditional",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.nodes.spi.CanonicalizerTool):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.IntegerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ConditionalNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.LogicNegationNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.FloatConvertNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.FloatConvertNode",
    "source_method": "isLosslessIntegerToFloatingPoint",
    "target_class": "jdk.graal.compiler.core.common.type.FloatStamp):boolean \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.FloatDivNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.FloatDivNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Div>, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerConvertNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, int, int, jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.IntegerConvertOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerConvertNode",
    "source_method": "convert",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, boolean, jdk.graal.compiler.nodes.StructuredGraph, jdk.graal.compiler.nodes.NodeView, boolean):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerConvertNode",
    "source_method": "convert",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, boolean, jdk.graal.compiler.nodes.NodeView, boolean):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerMulHighNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerTestNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.type.IntegerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerTestNode",
    "source_method": "getSucceedingStamp",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.type.IntegerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IsNullNode",
    "source_method": "canonicalized",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.calc.JavaConstant):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MaxNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MinMaxNode",
    "source_method": "fromConditional",
    "target_class": "jdk.graal.compiler.nodes.calc.ConditionalNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MinMaxNode",
    "source_method": "fromConditional",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MinMaxNode",
    "source_method": "equalOrOffBy1",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.core.common.NumUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MinMaxNode",
    "source_method": "maybeExtendForCompare",
    "target_class": "jdk.graal.compiler.nodes.spi.LoweringProvider, jdk.graal.compiler.core.common.NumUtil.Signedness):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.IntegerConvertNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MinNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MulNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MulNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Mul>, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.MulNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, long, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.LeftShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.OrNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.OrNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Or>, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ReinterpretNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ReinterpretNode",
    "source_method": "evalConst",
    "target_class": "jdk.graal.compiler.nodes.calc.SerializableConstant):jdk.graal.compiler.nodes.calc.Constant \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.ReinterpretOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ReinterpretNode",
    "source_method": "getReinterpretStamp",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.calc.ReinterpretUtils"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ReinterpretNode",
    "source_method": "reinterpret",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ReinterpretNode",
    "source_method": "getOp",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.RemNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.RoundFloatToIntegerNode",
    "source_method": "roundStamp",
    "target_class": "jdk.graal.compiler.core.common.type.PrimitiveStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.RoundFloatToIntegerNode",
    "source_method": "tryFold",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignExtendNode",
    "source_method": "create",
    "target_class": "int, int, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.IntegerConvertOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignExtendNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, int, int, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.NarrowNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignedFloatingIntegerDivNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.nodes.extended.GuardingNode, boolean):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignedFloatingIntegerRemNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.nodes.extended.GuardingNode, boolean):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignedRemNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.extended.GuardingNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignedRemNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.nodes.spi.CanonicalizerTool):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.spi.CanonicalizerTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignedRemNode",
    "source_method": "allUsagesCompareAgainstZero",
    "target_class": "jdk.graal.compiler.nodes.BinaryOpLogicNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SqrtNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SubNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SubNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Sub>, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnpackEndianHalfNode",
    "source_method": "create",
    "target_class": "boolean, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnsignedDivNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.extended.GuardingNode, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnsignedMaxNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnsignedMinNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnsignedRemNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.extended.GuardingNode, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.XorNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.XorNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp.Xor>, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ZeroExtendNode",
    "source_method": "create",
    "target_class": "int, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.PrimitiveStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ZeroExtendNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, int, int, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.NarrowNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "getArithmeticOpTable",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "tryConstantFold",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "binaryFloatOp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp<?>):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "add",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.AddNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "add",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.AddNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "add",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "sub",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.SubNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "sub",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.SubNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "sub",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "mul",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.MulNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "mul",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.MulNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "mul",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "rem",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.RemNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "rem",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.RemNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "rem",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "and",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.AndNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "and",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.AndNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "and",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "or",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.OrNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "or",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.OrNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "or",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "xor",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.XorNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "xor",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.XorNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "xor",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "max",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.MaxNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "max",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.MaxNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "max",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "min",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.MinNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "min",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.MinNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "min",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "umax",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.UnsignedMaxNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "umax",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.UnsignedMaxNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "umax",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "umin",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.UnsignedMinNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "umin",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.UnsignedMinNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "umin",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "shl",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.LeftShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "shl",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.LeftShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "shl",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "shr",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.RightShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "shr",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.RightShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "shr",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "ushr",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "ushr",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "ushr",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "branchlessMin",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.RightShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "branchlessMax",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.RightShiftNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode.ReassociateMatch",
    "source_method": "getValue",
    "target_class": "jdk.graal.compiler.nodes.calc.BinaryNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode.ReassociateMatch",
    "source_method": "getOtherValue",
    "target_class": "jdk.graal.compiler.nodes.calc.BinaryNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "mayReassociate",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp):boolean \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.BinaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "isNonExactMul",
    "target_class": "jdk.graal.compiler.nodes.calc.MulNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "isNonExactAdd",
    "target_class": "jdk.graal.compiler.nodes.calc.AddNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "isNonExactSub",
    "target_class": "jdk.graal.compiler.nodes.calc.SubNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.BinaryArithmeticNode",
    "source_method": "isExactMathOperation",
    "target_class": "jdk.graal.compiler.nodes.calc.AddNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode",
    "source_method": "tryConstantFold",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.calc.ConstantReflectionProvider, boolean):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.calc.CanonicalCondition"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode",
    "source_method": "tryConstantFoldPrimitive",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, boolean, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.calc.CanonicalCondition"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode.CompareOp",
    "source_method": "isConstantConversionSupported",
    "target_class": "jdk.graal.compiler.nodes.NodeView, java.lang.Integer):boolean \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode.CompareOp",
    "source_method": "canonicalConvertConstant",
    "target_class": "jdk.graal.compiler.nodes.calc.MetaAccessProvider, jdk.graal.compiler.core.common.calc.CanonicalCondition, jdk.graal.compiler.nodes.calc.ConvertNode, jdk.graal.compiler.nodes.calc.Constant, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode.CompareOp",
    "source_method": "optimizeConditional",
    "target_class": "jdk.graal.compiler.nodes.calc.ConditionalNode, jdk.graal.compiler.nodes.calc.ConstantReflectionProvider, jdk.graal.compiler.core.common.calc.Condition, boolean):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.LogicNegationNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode",
    "source_method": "createCompareNode",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.calc.ConstantReflectionProvider, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode",
    "source_method": "createAnyCompareNode",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.calc.ConstantReflectionProvider):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode",
    "source_method": "sameValue",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode",
    "source_method": "createCompareNode",
    "target_class": "jdk.graal.compiler.nodes.calc.MetaAccessProvider, jdk.graal.compiler.options.OptionValues, java.lang.Integer, jdk.graal.compiler.core.common.calc.CanonicalCondition, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CompareNode",
    "source_method": "createFloatCompareNode",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, boolean, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CopySignNode",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.type.PrimitiveStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CopySignNode",
    "source_method": "canonicalHelper",
    "target_class": "float):jdk.graal.compiler.graph.Node \t jdk.graal.compiler.nodes.calc.OrNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.CopySignNode",
    "source_method": "canonicalHelper",
    "target_class": "double):jdk.graal.compiler.graph.Node \t jdk.graal.compiler.nodes.calc.OrNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.FloatEqualsNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.calc.CanonicalCondition"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.FloatLessThanNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, boolean, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.calc.CanonicalCondition"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.FloatLessThanNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.calc.MetaAccessProvider, jdk.graal.compiler.options.OptionValues, java.lang.Integer, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, boolean, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.calc.FloatLessThanNode.FloatLessThanOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerBelowNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.calc.MetaAccessProvider, jdk.graal.compiler.options.OptionValues, java.lang.Integer, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.calc.IntegerBelowNode.BelowOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerBelowNode.BelowOp",
    "source_method": "canonicalizeBelowCanonicalOfBelow",
    "target_class": "jdk.graal.compiler.nodes.calc.ConditionalNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.calc.BinaryNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerEqualsNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.calc.CanonicalCondition"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerLessThanNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.calc.MetaAccessProvider, jdk.graal.compiler.options.OptionValues, java.lang.Integer, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.calc.IntegerLowerThanNode.LowerOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerLowerThanNode",
    "source_method": "getSucceedingStampForX",
    "target_class": "boolean, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.nodes.calc.IntegerLowerThanNode.LowerOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerLowerThanNode.LowerOp",
    "source_method": "canonicalizePiXLowerPiXPlusC",
    "target_class": "jdk.graal.compiler.nodes.PiNode, boolean, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicConstantNode \t jdk.graal.compiler.nodes.PiNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.IntegerLowerThanNode.LowerOp",
    "source_method": "canonicalizeRangeFlip",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, int, boolean, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.LeftShiftNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.LeftShiftNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp.Shl>, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.NarrowNode",
    "source_method": "create",
    "target_class": "int, int, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.NegateNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.SubNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ObjectEqualsNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.calc.ConstantReflectionProvider, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.calc.CanonicalCondition"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ObjectEqualsNode",
    "source_method": "virtualizeNonVirtualComparison",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.StructuredGraph, jdk.graal.compiler.nodes.spi.VirtualizerTool):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ObjectEqualsNode",
    "source_method": "virtualizeComparison",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.StructuredGraph, jdk.graal.compiler.nodes.spi.VirtualizerTool):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.spi.CoreProviders"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.PointerEqualsNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.PointerEqualsNode",
    "source_method": "isCached",
    "target_class": "jdk.graal.compiler.nodes.calc.JavaKind):boolean \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.PointerEqualsNode",
    "source_method": "nullSynonym",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.calc.IsNullNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.RightShiftNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.RightShiftNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp.Shr>, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.IntegerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.RoundNode",
    "source_method": "round",
    "target_class": "double):double \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ShiftNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.ShiftNode",
    "source_method": "shiftOp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp<?>):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignedDivNode",
    "source_method": "divisionIsJVMSCompliant",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, boolean):boolean \t jdk.graal.compiler.core.common.NumUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignedDivNode",
    "source_method": "canonical",
    "target_class": "long, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.SignumNode",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.core.common.type.PrimitiveStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnaryArithmeticNode",
    "source_method": "unaryIntegerOp",
    "target_class": "jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.core.common.type.ArithmeticOpTable.UnaryOp<?>):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnaryArithmeticNode",
    "source_method": "unaryFloatOp",
    "target_class": "jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.core.common.type.ArithmeticOpTable.UnaryOp<?>):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnaryArithmeticNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.UnaryOp<OP>):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.UnaryOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.calc.UnsignedRightShiftNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp<jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp.UShr>, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.ArithmeticOpTable.ShiftOp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "compute",
    "target_class": "boolean, boolean, boolean, boolean, boolean, boolean):jdk.graal.compiler.nodes.cfg.ControlFlowGraph \t jdk.graal.compiler.nodes.cfg.ControlFlowGraph.BuildConfig"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph.LoggingCFGDecorator",
    "source_method": "printDomTree",
    "target_class": "java.lang.String):void \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "visitDominatorTreeDefault",
    "target_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph.RecursiveVisitor"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "skipPostDom",
    "target_class": "jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "addDeferredExit",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock):void \t jdk.graal.compiler.core.common.cfg.Loop"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "isDominatorTreeLoopExit",
    "target_class": "boolean):boolean \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph.RPOLoopVerification",
    "source_method": "loopFullyProcessed",
    "target_class": "jdk.graal.compiler.nodes.LoopBeginNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph.RPOLoopVerification",
    "source_method": "allEndsVisited",
    "target_class": "jdk.graal.compiler.nodes.LoopBeginNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "rpoInnerLoopsFirst",
    "target_class": "java.util.function.Consumer<jdk.graal.compiler.nodes.LoopBeginNode>):boolean \t jdk.graal.compiler.nodes.cfg.ControlFlowGraph.RPOLoopVerification"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "predecessorBlockSequentialLoopExit",
    "target_class": "jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "calcDominatorRanges",
    "target_class": "int):void \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "commonDominatorRaw",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock):jdk.graal.compiler.nodes.cfg.HIRBlock \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "commonDominatorRawSameDepth",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock):jdk.graal.compiler.nodes.cfg.HIRBlock \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "blockFor",
    "target_class": "jdk.graal.compiler.graph.NodeMap"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "identifyBlock",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "finishLocalLoopFrequency",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "debugLocalLoopFrequencies",
    "target_class": "double, double):void \t jdk.graal.compiler.nodes.cfg.HIRBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "computeLoopInformation",
    "target_class": "jdk.graal.compiler.core.common.cfg.Loop"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "computeLoopBlocks",
    "target_class": "jdk.graal.compiler.core.common.cfg.Loop<jdk.graal.compiler.nodes.cfg.HIRBlock>, jdk.graal.compiler.nodes.cfg.HIRBlock[], boolean):void \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "computePostdominators",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.cfg.ControlFlowGraph",
    "source_method": "commonPostdominator",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock):jdk.graal.compiler.nodes.cfg.HIRBlock \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.debug.DynamicCounterNode",
    "source_method": "addCounterBefore",
    "target_class": "java.lang.String, long, boolean, jdk.graal.compiler.nodes.FixedNode):void \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.debug.DynamicCounterNode",
    "source_method": "addCounterBefore",
    "target_class": "java.lang.String, jdk.graal.compiler.nodes.ValueNode, boolean, jdk.graal.compiler.nodes.FixedNode):void \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.debug.VerifyHeapNode",
    "source_method": "addBefore",
    "target_class": "jdk.graal.compiler.nodes.StructuredGraph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.AbstractBoxingNode",
    "source_method": "getValueField",
    "target_class": "jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.ClassIsArrayNode",
    "source_method": "canonicalized",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.extended.ConstantReflectionProvider):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.ForeignCallNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.core.common.spi.ForeignCallsProvider, jdk.graal.compiler.core.common.spi.ForeignCallSignature, jdk.graal.compiler.nodes.ValueNode[]):boolean \t jdk.graal.compiler.core.common.spi.ForeignCallsProvider"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.ForeignCallNode",
    "source_method": "finishIntrinsification",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.extended.ForeignCall):boolean \t jdk.graal.compiler.nodes.ValueNodeInterface"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.GetClassNode",
    "source_method": "tryFold",
    "target_class": "jdk.graal.compiler.nodes.extended.MetaAccessProvider, jdk.graal.compiler.nodes.extended.ConstantReflectionProvider, jdk.graal.compiler.nodes.NodeView, jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.AbstractObjectStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.IntegerSwitchNode.MergeCoalesceBuilder",
    "source_method": "addKeyData",
    "target_class": "int):boolean \t jdk.graal.compiler.nodes.extended.IntegerSwitchNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.IntegerSwitchNode.MergeCoalesceBuilder",
    "source_method": "commit",
    "target_class": "jdk.graal.compiler.nodes.extended.IntegerSwitchNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.LoadArrayComponentHubNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.extended.MetaAccessProvider, jdk.graal.compiler.nodes.extended.ConstantReflectionProvider):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.LoadHubNode",
    "source_method": "hubStamp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.core.common.type.AbstractPointerStamp \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.LoadHubNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.extended.MetaAccessProvider, jdk.graal.compiler.nodes.extended.ConstantReflectionProvider):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.LoadHubOrNullNode",
    "source_method": "hubStamp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.core.common.type.AbstractPointerStamp \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.LoadHubOrNullNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.core.common.type.AbstractPointerStamp, jdk.graal.compiler.nodes.extended.MetaAccessProvider, jdk.graal.compiler.nodes.extended.ConstantReflectionProvider):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.MultiGuardNode",
    "source_method": "combine",
    "target_class": "jdk.graal.compiler.nodes.extended.GuardingNode):jdk.graal.compiler.nodes.extended.GuardingNode \t jdk.graal.compiler.nodes.ValueNodeInterface"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.NullCheckNode",
    "source_method": "tryUseUncompressedNullCheck",
    "target_class": "jdk.graal.compiler.core.common.type.AbstractPointerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.ObjectIsArrayNode",
    "source_method": "canonicalized",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.ObjectIsArrayNode",
    "source_method": "doTryFold",
    "target_class": "jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.RawLoadNode",
    "source_method": "computeStampForArrayAccess",
    "target_class": "jdk.graal.compiler.nodes.extended.JavaKind, jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.UnboxNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.extended.ConstantReflectionProvider, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.extended.JavaKind):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.extended.UnsafeCopyNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.extended.JavaKind, jdk.graal.compiler.nodes.extended.LocationIdentity):boolean \t jdk.graal.compiler.nodes.graphbuilderconf.GraphBuilderContext"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.ArrayLengthNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.java.ConstantReflectionProvider):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.java.AbstractNewArrayNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.ArrayLengthNode",
    "source_method": "searchForConstantLength",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.ArrayLengthNode",
    "source_method": "maybeAddPositivePi",
    "target_class": "jdk.graal.compiler.nodes.FixedWithNextNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.ArrayLengthNode",
    "source_method": "readArrayLength",
    "target_class": "jdk.graal.compiler.nodes.java.ConstantReflectionProvider):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.ArrayLengthNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.core.common.type.AbstractPointerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.DynamicNewArrayNode",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.nodes.java.MetaAccessProvider):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.type.TypeReference"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.ExceptionObjectNode",
    "source_method": "getExceptionValueFromState",
    "target_class": "jdk.graal.compiler.nodes.FrameState"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.InstanceOfDynamicNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.java.ConstantReflectionProvider, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, boolean, boolean):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.type.TypeReference"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadFieldNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.ResolvedJavaField):jdk.graal.compiler.nodes.java.LoadFieldNode \t jdk.graal.compiler.core.common.memory.MemoryOrderMode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadFieldNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.ResolvedJavaField, jdk.graal.compiler.core.common.memory.MemoryOrderMode):jdk.graal.compiler.nodes.java.LoadFieldNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadFieldNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.java.ConstantReflectionProvider, jdk.graal.compiler.nodes.java.MetaAccessProvider, jdk.graal.compiler.options.OptionValues, jdk.graal.compiler.nodes.java.Assumptions, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.ResolvedJavaField, boolean, boolean, jdk.graal.compiler.graph.NodeSourcePosition):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadFieldNode",
    "source_method": "createOverrideImmutable",
    "target_class": "jdk.graal.compiler.core.common.type.StampPair"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadFieldNode",
    "source_method": "asConstant",
    "target_class": "jdk.graal.compiler.nodes.java.ConstantReflectionProvider, jdk.graal.compiler.nodes.java.MetaAccessProvider, jdk.graal.compiler.options.OptionValues, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.ResolvedJavaField, jdk.graal.compiler.graph.NodeSourcePosition):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.nodes.util.ConstantFoldUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadFieldNode",
    "source_method": "asPhi",
    "target_class": "jdk.graal.compiler.nodes.java.ConstantReflectionProvider, jdk.graal.compiler.nodes.java.MetaAccessProvider, jdk.graal.compiler.options.OptionValues, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.ResolvedJavaField, jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.graph.NodeSourcePosition):jdk.graal.compiler.nodes.PhiNode \t jdk.graal.compiler.nodes.PhiNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadIndexedNode",
    "source_method": "createStamp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.JavaKind):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.type.TypeReference"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadIndexedNode",
    "source_method": "determinePreciseArrayElementType",
    "target_class": "jdk.graal.compiler.nodes.java.JavaKind):jdk.graal.compiler.nodes.java.JavaKind \t jdk.graal.compiler.core.common.type.AbstractObjectStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.LoadIndexedNode",
    "source_method": "tryConstantFold",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.MetaAccessProvider, jdk.graal.compiler.nodes.java.ConstantReflectionProvider):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.MethodCallTargetNode",
    "source_method": "findSpecialCallTarget",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.ResolvedJavaMethod, jdk.graal.compiler.nodes.java.ResolvedJavaType):jdk.graal.compiler.nodes.java.ResolvedJavaMethod \t jdk.graal.compiler.nodes.CallTargetNode.InvokeKind"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.MethodCallTargetNode",
    "source_method": "devirtualizeCall",
    "target_class": "jdk.graal.compiler.nodes.java.ResolvedJavaMethod, jdk.graal.compiler.nodes.java.ResolvedJavaType, jdk.graal.compiler.nodes.java.Assumptions, jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.nodes.java.ResolvedJavaMethod \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.MethodCallTargetNode",
    "source_method": "tryDevirtualizeInterfaceCall",
    "target_class": "jdk.graal.compiler.nodes.java.ResolvedJavaMethod, jdk.graal.compiler.nodes.java.JavaTypeProfile, jdk.graal.compiler.nodes.java.Assumptions, jdk.graal.compiler.nodes.java.ResolvedJavaType, jdk.graal.compiler.nodes.java.MethodCallTargetNode, jdk.graal.compiler.nodes.FixedNode):jdk.graal.compiler.nodes.java.MethodCallTargetNode \t jdk.graal.compiler.core.common.type.TypeReference"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.MethodCallTargetNode",
    "source_method": "tryCheckCastSingleImplementor",
    "target_class": "jdk.graal.compiler.nodes.java.ResolvedJavaMethod, jdk.graal.compiler.nodes.java.JavaTypeProfile, jdk.graal.compiler.nodes.java.ResolvedJavaType, jdk.graal.compiler.core.common.type.TypeReference, jdk.graal.compiler.nodes.FixedNode, jdk.graal.compiler.nodes.java.MethodCallTargetNode):jdk.graal.compiler.nodes.java.MethodCallTargetNode \t jdk.graal.compiler.core.common.type.TypeReference"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.MethodCallTargetNode",
    "source_method": "find",
    "target_class": "jdk.graal.compiler.nodes.java.ResolvedJavaMethod):jdk.graal.compiler.nodes.java.MethodCallTargetNode \t jdk.graal.compiler.graph.Graph"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.ReachabilityFenceNode",
    "source_method": "hasOnlyReachabilityFenceUsages",
    "target_class": "jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.RegisterFinalizerNode",
    "source_method": "mayHaveFinalizer",
    "target_class": "jdk.graal.compiler.nodes.java.MetaAccessProvider, jdk.graal.compiler.nodes.java.Assumptions):boolean \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.UnsafeCompareAndExchangeNode",
    "source_method": "meetInputs",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.DynamicNewInstanceNode",
    "source_method": "throwsInstantiationExceptionInjectedProbability",
    "target_class": "java.lang.Class<?>, java.lang.Class<?>):boolean \t jdk.graal.compiler.nodes.extended.BranchProbabilityNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.InstanceOfNode",
    "source_method": "createAllowNull",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.JavaTypeProfile, jdk.graal.compiler.nodes.extended.AnchoringNode):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.InstanceOfNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.JavaTypeProfile, jdk.graal.compiler.nodes.extended.AnchoringNode):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.InstanceOfNode",
    "source_method": "createHelper",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.java.JavaTypeProfile, jdk.graal.compiler.nodes.extended.AnchoringNode):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.InstanceOfNode",
    "source_method": "findSynonym",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.LogicNode \t jdk.graal.compiler.core.common.type.AbstractPointerStamp"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.java.InstanceOfNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.nodes.java.ResolvedJavaType, jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.core.common.type.TypeReference"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.memory.SideEffectFreeWriteNode",
    "source_method": "createWithoutSideEffect",
    "target_class": "jdk.graal.compiler.nodes.memory.LocationIdentity, jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.memory.WriteNode \t jdk.graal.compiler.core.common.memory.BarrierType"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.memory.address.OffsetAddressNode",
    "source_method": "create",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.memory.ReadNode",
    "source_method": "generateStamp",
    "target_class": "jdk.graal.compiler.core.common.memory.MemoryExtendKind):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.memory.MemoryExtendKind"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.memory.ReadNode",
    "source_method": "canonicalizeRead",
    "target_class": "jdk.graal.compiler.nodes.memory.address.AddressNode, jdk.graal.compiler.nodes.memory.LocationIdentity, jdk.graal.compiler.nodes.spi.CanonicalizerTool):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.spi.CanonicalizerTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.memory.ReadNode",
    "source_method": "canonicalizeRead",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.memory.LocationIdentity, jdk.graal.compiler.nodes.spi.CoreProviders, jdk.graal.compiler.nodes.NodeView):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.memory.ReadNode",
    "source_method": "canonicalizeRead",
    "target_class": "jdk.graal.compiler.nodes.spi.CanonicalizerTool, jdk.graal.compiler.nodes.memory.JavaKind, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.memory.LocationIdentity):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.NarrowNode"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.memory.WriteNode",
    "source_method": "followedByVolatileWrite",
    "target_class": "jdk.graal.compiler.core.common.util.CompilationAlarm"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.virtual.EnsureVirtualizedNode",
    "source_method": "ensureVirtualFailure",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp):void \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.virtual.VirtualArrayNode",
    "source_method": "virtualizeByteArrayRead",
    "target_class": "jdk.graal.compiler.nodes.virtual.JavaKind, jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.nodes.virtual.VirtualBoxingNode",
    "source_method": "getBoxedValue",
    "target_class": "jdk.graal.compiler.nodes.spi.VirtualizerTool"
  },
  {
    "source_class": "jdk.graal.compiler.phases.graph.ReentrantBlockIterator",
    "source_method": "processLoop",
    "target_class": "jdk.graal.compiler.core.common.cfg.Loop<jdk.graal.compiler.nodes.cfg.HIRBlock>, StateT):jdk.graal.compiler.phases.graph.ReentrantBlockIterator.LoopInfo<StateT> \t jdk.graal.compiler.core.common.cfg.Loop"
  },
  {
    "source_class": "jdk.graal.compiler.phases.graph.ReentrantBlockIterator",
    "source_method": "apply",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock):void \t jdk.graal.compiler.phases.graph.ReentrantBlockIterator.BlockIteratorClosure"
  },
  {
    "source_class": "jdk.graal.compiler.phases.graph.ReentrantBlockIterator",
    "source_method": "apply",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock, StateT, java.util.function.Predicate<jdk.graal.compiler.nodes.cfg.HIRBlock>):jdk.graal.compiler.phases.graph.EconomicMap<jdk.graal.compiler.nodes.FixedNode,StateT> \t jdk.graal.compiler.phases.graph.ReentrantBlockIterator.BlockIteratorClosure"
  },
  {
    "source_class": "jdk.graal.compiler.phases.graph.ReentrantBlockIterator",
    "source_method": "allEndsVisited",
    "target_class": "jdk.graal.compiler.nodes.cfg.HIRBlock, jdk.graal.compiler.nodes.AbstractMergeNode):boolean \t jdk.graal.compiler.nodes.AbstractMergeNode"
  },
  {
    "source_class": "jdk.graal.compiler.phases.graph.ReentrantBlockIterator",
    "source_method": "processMultipleSuccessors",
    "target_class": "java.util.Deque<jdk.graal.compiler.nodes.cfg.HIRBlock>, jdk.graal.compiler.phases.graph.EconomicMap<jdk.graal.compiler.nodes.FixedNode,StateT>, StateT, jdk.graal.compiler.nodes.cfg.HIRBlock):jdk.graal.compiler.nodes.cfg.HIRBlock \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.phases.graph.ReentrantBlockIterator",
    "source_method": "mergeStates",
    "target_class": "StateT, jdk.graal.compiler.nodes.cfg.HIRBlock, jdk.graal.compiler.nodes.cfg.HIRBlock, jdk.graal.compiler.nodes.AbstractMergeNode):java.util.ArrayList<StateT> \t jdk.graal.compiler.core.common.cfg.BasicBlock"
  },
  {
    "source_class": "jdk.graal.compiler.phases.graph.ReentrantBlockIterator",
    "source_method": "recurseIntoLoop",
    "target_class": "java.util.Deque<jdk.graal.compiler.nodes.cfg.HIRBlock>, jdk.graal.compiler.phases.graph.EconomicMap<jdk.graal.compiler.nodes.FixedNode,StateT>, StateT, jdk.graal.compiler.nodes.cfg.HIRBlock):void \t jdk.graal.compiler.core.common.cfg.Loop"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.CachingPEGraphDecoder",
    "source_method": "createGraph",
    "target_class": "jdk.graal.compiler.bytecode.BytecodeProvider):jdk.graal.compiler.nodes.EncodedGraph \t jdk.graal.compiler.debug.DebugContext"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.ArrayRegionCompareToNode",
    "source_method": "foldResult",
    "target_class": "jdk.graal.compiler.core.common.Stride, jdk.graal.compiler.core.common.Stride, jdk.graal.compiler.nodes.ValueNode, int, jdk.graal.compiler.nodes.ValueNode, int, int):int \t jdk.graal.compiler.nodes.util.ConstantReflectionUtil"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.ArrayRegionEqualsNode",
    "source_method": "arrayRegionEquals",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.core.common.Stride, int, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.core.common.Stride, int, int):boolean \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.ArrayRegionEqualsWithMaskNode",
    "source_method": "validStride",
    "target_class": "jdk.graal.compiler.core.common.Stride"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.ArrayRegionEqualsWithMaskNode",
    "source_method": "constantFold",
    "target_class": "jdk.graal.compiler.nodes.ValueNode, int, jdk.graal.compiler.nodes.ValueNode, int, jdk.graal.compiler.nodes.ValueNode, int, int, jdk.graal.compiler.core.common.Stride, jdk.graal.compiler.core.common.Stride, jdk.graal.compiler.core.common.Stride):boolean \t jdk.graal.compiler.nodes.util.ConstantReflectionUtil"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.BasicArrayCopyNode",
    "source_method": "selectComponentKind",
    "target_class": "jdk.graal.compiler.nodes.NodeView"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.BasicArrayCopyNode",
    "source_method": "checkBounds",
    "target_class": "int, jdk.graal.compiler.nodes.virtual.VirtualObjectNode):boolean \t jdk.graal.compiler.core.common.NumUtil"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.BasicArrayCopyNode",
    "source_method": "checkEntryTypes",
    "target_class": "int, jdk.graal.compiler.nodes.virtual.VirtualObjectNode, jdk.graal.compiler.replacements.nodes.ResolvedJavaType, jdk.graal.compiler.nodes.spi.VirtualizerTool):boolean \t jdk.graal.compiler.nodes.spi.VirtualizerTool"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.BasicObjectCloneNode",
    "source_method": "betterStamp",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.ObjectStamp \t jdk.graal.compiler.core.common.type.AbstractObjectStamp"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.BasicObjectCloneNode",
    "source_method": "maybeImproveReturnStamp",
    "target_class": "jdk.graal.compiler.core.common.type.StampPair"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.CountLeadingZerosNode",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.CountLeadingZerosNode",
    "source_method": "tryFold",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.CountTrailingZerosNode",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.nodes.type.StampTool"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.CountTrailingZerosNode",
    "source_method": "tryFold",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.IdentityHashCodeNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.spi.CoreProviders):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.MacroNode.MacroParams",
    "source_method": "of",
    "target_class": "jdk.graal.compiler.replacements.nodes.ResolvedJavaMethod, jdk.graal.compiler.nodes.ValueNode[]):jdk.graal.compiler.replacements.nodes.MacroNode.MacroParams \t jdk.graal.compiler.nodes.graphbuilderconf.GraphBuilderTool"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.MacroNode.MacroParams",
    "source_method": "of",
    "target_class": "jdk.graal.compiler.replacements.nodes.ResolvedJavaMethod, jdk.graal.compiler.core.common.type.StampPair, jdk.graal.compiler.nodes.ValueNode[]):jdk.graal.compiler.replacements.nodes.MacroNode.MacroParams \t jdk.graal.compiler.nodes.graphbuilderconf.GraphBuilderContext"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.MacroNode.MacroParams",
    "source_method": "of",
    "target_class": "jdk.graal.compiler.nodes.CallTargetNode.InvokeKind, jdk.graal.compiler.replacements.nodes.ResolvedJavaMethod, jdk.graal.compiler.nodes.ValueNode[]):jdk.graal.compiler.replacements.nodes.MacroNode.MacroParams \t jdk.graal.compiler.nodes.graphbuilderconf.GraphBuilderTool"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.MethodHandleNode",
    "source_method": "getGraphAdderBeforeNode",
    "target_class": "jdk.graal.compiler.nodes.StructuredGraph"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.MethodHandleNode",
    "source_method": "maybeCastArgument",
    "target_class": "jdk.graal.compiler.nodes.ValueNode[], int, jdk.graal.compiler.replacements.nodes.JavaType):void \t jdk.graal.compiler.replacements.nodes.MethodHandleNode.GraphAdder"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.MethodHandleNode",
    "source_method": "createTargetInvokeNode",
    "target_class": "jdk.graal.compiler.replacements.nodes.Assumptions, jdk.graal.compiler.replacements.nodes.IntrinsicMethod, jdk.graal.compiler.replacements.nodes.ResolvedJavaMethod, jdk.graal.compiler.replacements.nodes.ResolvedJavaMethod, int, jdk.graal.compiler.core.common.type.StampPair, jdk.graal.compiler.nodes.ValueNode[]):T \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.arithmetic.IntegerAddExactOverflowNode",
    "source_method": "canonicalXYconstant",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.LogicConstantNode \t jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.arithmetic.IntegerMulExactOverflowNode",
    "source_method": "canonicalXYconstant",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.LogicConstantNode \t jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.arithmetic.IntegerSubExactOverflowNode",
    "source_method": "canonicalXYconstant",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.LogicConstantNode \t jdk.graal.compiler.nodes.LogicConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.arithmetic.UnsignedMulHighNode",
    "source_method": "canonical",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.ArrayIndexOfNode",
    "source_method": "createIndexOfSingle",
    "target_class": "jdk.graal.compiler.replacements.nodes.JavaKind, jdk.graal.compiler.core.common.Stride, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.replacements.nodes.ArrayIndexOfNode \t jdk.graal.compiler.nodes.spi.CoreProviders"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.ArrayIndexOfNode",
    "source_method": "defaultLocationIdentity",
    "target_class": "jdk.graal.compiler.nodes.NamedLocationIdentity"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.ArrayIndexOfNode",
    "source_method": "minFeaturesAMD64",
    "target_class": "jdk.graal.compiler.lir.gen.LIRGeneratorTool.ArrayIndexOfVariant):java.util.EnumSet<AMD64.CPUFeature> \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.BitCountNode",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.FusedMultiplyAddNode",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp, jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.serviceprovider.GraalServices"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.UnaryMathIntrinsicNode.UnaryOperation",
    "source_method": "computeStamp",
    "target_class": "jdk.graal.compiler.core.common.type.Stamp):jdk.graal.compiler.core.common.type.Stamp \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.nodes.UnaryMathIntrinsicNode",
    "source_method": "tryConstantFold",
    "target_class": "jdk.graal.compiler.replacements.nodes.UnaryMathIntrinsicNode.UnaryOperation):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.replacements.nodes.UnaryMathIntrinsicNode.UnaryOperation"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.PEGraphDecoder.PEAppendGraphBuilderContext",
    "source_method": "updateLastInstruction",
    "target_class": "jdk.graal.compiler.nodes.WithExceptionNode"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.PEGraphDecoder.PEPluginGraphBuilderContext",
    "source_method": "updateLastInstruction",
    "target_class": "jdk.graal.compiler.nodes.StructuredGraph"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.PEGraphDecoder",
    "source_method": "loopExplosionKind",
    "target_class": "jdk.graal.compiler.nodes.graphbuilderconf.LoopExplosionPlugin):jdk.graal.compiler.nodes.graphbuilderconf.LoopExplosionPlugin.LoopExplosionKind \t jdk.graal.compiler.nodes.graphbuilderconf.LoopExplosionPlugin.LoopExplosionKind"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.PEGraphDecoder",
    "source_method": "tooManyLoopExplosionIterations",
    "target_class": "jdk.graal.compiler.options.OptionValues):java.lang.RuntimeException \t jdk.graal.compiler.nodes.util.GraphUtil"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.PEGraphDecoder",
    "source_method": "getSingleMatchingNode",
    "target_class": "boolean, java.lang.Class<T>):T \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.PEGraphDecoder",
    "source_method": "getMatchingNodes",
    "target_class": "boolean, java.lang.Class<T>, int):java.util.List<T> \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.replacements.PEGraphDecoder",
    "source_method": "deleteInvoke",
    "target_class": "jdk.graal.compiler.graph.Node"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.nodes.frame.NewFrameNode",
    "source_method": "constantObject",
    "target_class": "jdk.graal.compiler.nodes.graphbuilderconf.GraphBuilderContext, jdk.graal.compiler.truffle.nodes.frame.ResolvedJavaField):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.nodes.frame.VirtualFrameGetNode",
    "source_method": "isOSRRawStaticAccess",
    "target_class": "jdk.graal.compiler.truffle.nodes.frame.NewFrameNode"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.nodes.frame.VirtualFrameSetNode",
    "source_method": "extendForOSRStaticAccess",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.type.Stamp"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.nodes.frame.VirtualFrameSetNode",
    "source_method": "isOSRRawStaticAccess",
    "target_class": "jdk.graal.compiler.truffle.nodes.frame.NewFrameNode"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.phases.inlining.CallNode",
    "source_method": "makeRoot",
    "target_class": "jdk.graal.compiler.truffle.phases.inlining.CallTree):jdk.graal.compiler.truffle.phases.inlining.CallNode \t jdk.graal.compiler.truffle.phases.inlining.CallTree"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.phases.inlining.CallNode",
    "source_method": "getCurrentCallTarget",
    "target_class": "jdk.graal.compiler.truffle.phases.inlining.JavaConstant):jdk.graal.compiler.truffle.phases.inlining.TruffleCompilable \t jdk.graal.compiler.truffle.TruffleTierContext"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.phases.inlining.CallNode",
    "source_method": "getCallCount",
    "target_class": "jdk.graal.compiler.truffle.phases.inlining.JavaConstant):int \t jdk.graal.compiler.nodes.spi.CoreProvidersDelegate"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.phases.inlining.CallNode",
    "source_method": "isInliningForced",
    "target_class": "jdk.graal.compiler.truffle.phases.inlining.JavaConstant):boolean \t jdk.graal.compiler.nodes.spi.CoreProvidersDelegate"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.phases.inlining.CallNode",
    "source_method": "exploreInlineRatio",
    "target_class": "jdk.graal.compiler.truffle.phases.inlining.CallTree"
  },
  {
    "source_class": "jdk.graal.compiler.truffle.phases.inlining.CallNode",
    "source_method": "finalizeGraph",
    "target_class": "jdk.graal.compiler.nodes.Invoke"
  },
  {
    "source_class": "jdk.graal.compiler.word.WordCastNode",
    "source_method": "wordToObject",
    "target_class": "jdk.graal.compiler.word.JavaKind):jdk.graal.compiler.word.WordCastNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.word.WordCastNode",
    "source_method": "wordToObjectNonNull",
    "target_class": "jdk.graal.compiler.word.JavaKind):jdk.graal.compiler.word.WordCastNode \t jdk.graal.compiler.debug.Assertions"
  },
  {
    "source_class": "jdk.graal.compiler.word.WordCastNode",
    "source_method": "addressToWord",
    "target_class": "jdk.graal.compiler.word.JavaKind):jdk.graal.compiler.word.WordCastNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.word.WordCastNode",
    "source_method": "objectToTrackedPointer",
    "target_class": "jdk.graal.compiler.word.JavaKind):jdk.graal.compiler.word.WordCastNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.word.WordCastNode",
    "source_method": "objectToUntrackedPointer",
    "target_class": "jdk.graal.compiler.word.JavaKind):jdk.graal.compiler.word.WordCastNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.word.WordCastNode",
    "source_method": "narrowOopToUntrackedWord",
    "target_class": "jdk.graal.compiler.word.JavaKind):jdk.graal.compiler.word.WordCastNode \t jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "jdk.graal.compiler.word.WordCastNode",
    "source_method": "objectStampFor",
    "target_class": "jdk.graal.compiler.core.common.type.StampFactory"
  },
  {
    "source_class": "org.graalvm.profdiff.core.OptimizationContextTreeNode",
    "source_method": "getCallerNode",
    "target_class": "org.graalvm.profdiff.core.TreeNode"
  },
  {
    "source_class": "org.graalvm.profdiff.core.TreeNode",
    "source_method": "writeRecursive",
    "target_class": "org.graalvm.profdiff.core.Writer"
  },
  {
    "source_class": "org.graalvm.profdiff.core.TreeNode",
    "source_method": "writeHead",
    "target_class": "org.graalvm.profdiff.core.Writer"
  },
  {
    "source_class": "org.graalvm.profdiff.core.inlining.InliningTreeNode",
    "source_method": "writeReasoningIfEnabled",
    "target_class": "org.graalvm.profdiff.core.ExperimentId):void \t org.graalvm.profdiff.core.Writer"
  },
  {
    "source_class": "org.graalvm.profdiff.core.inlining.InliningTreeNode",
    "source_method": "writeReasoning",
    "target_class": "org.graalvm.profdiff.core.ExperimentId):void \t org.graalvm.profdiff.core.Writer"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.MethodWithBytecodeNode",
    "source_method": "getScopeSlowPath",
    "target_class": "boolean):java.lang.Object \t com.oracle.truffle.espresso.nodes.AbstractInstrumentableBytecodeNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.commands.AddPathToBindingsNode",
    "source_method": "getGuestPath",
    "target_class": "com.oracle.truffle.espresso.runtime.EspressoContext, com.oracle.truffle.espresso.nodes.commands.InteropLibrary):com.oracle.truffle.espresso.runtime.staticobject.StaticObject \t com.oracle.truffle.espresso.runtime.EspressoContext"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "typeCheckJLObject",
    "target_class": "com.oracle.truffle.espresso.impl.Klass):boolean \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "typeCheckInterface",
    "target_class": "com.oracle.truffle.espresso.impl.Klass):boolean \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "typeCheckRegular",
    "target_class": "com.oracle.truffle.espresso.impl.Klass):boolean \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "isJLObject",
    "target_class": "com.oracle.truffle.espresso.impl.Klass):boolean \t com.oracle.truffle.espresso.runtime.EspressoContext"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "isFinal",
    "target_class": "com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "isPrimitive",
    "target_class": "com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "doTypeCheck",
    "target_class": "com.oracle.truffle.espresso.impl.Klass):boolean \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "arraySameDim",
    "target_class": "com.oracle.truffle.espresso.impl.ArrayKlass):boolean \t com.oracle.truffle.espresso.impl.ArrayKlass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "arrayBiggerDim",
    "target_class": "com.oracle.truffle.espresso.impl.ArrayKlass):boolean \t com.oracle.truffle.espresso.impl.ArrayKlass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.TypeCheckNode",
    "source_method": "isInterface",
    "target_class": "com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.AbstractGetFieldNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.espresso.meta.EspressoError"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.ObjectGetFieldNode",
    "source_method": "doEspresso",
    "target_class": "com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.AbstractSetFieldNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.espresso.meta.EspressoError"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.IntSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "int):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.BooleanSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "boolean):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.CharSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "char):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.ShortSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "short):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.ByteSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "byte):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.LongSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "long):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.FloatSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "float):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.DoubleSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "double):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.helper.ObjectSetFieldNode",
    "source_method": "doEspresso",
    "target_class": "com.oracle.truffle.espresso.runtime.staticobject.StaticObject):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupAndInvokeKnownMethodNode",
    "source_method": "doInterfaceCachedNoArg",
    "target_class": "com.oracle.truffle.espresso.impl.Method, java.lang.Object[], com.oracle.truffle.espresso.impl.Method, com.oracle.truffle.espresso.impl.Klass, com.oracle.truffle.espresso.impl.Method, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupAndInvokeKnownMethodNode",
    "source_method": "doVirtualCachedNoArg",
    "target_class": "com.oracle.truffle.espresso.impl.Method, java.lang.Object[], com.oracle.truffle.espresso.impl.Method, com.oracle.truffle.espresso.impl.Klass, com.oracle.truffle.espresso.impl.Method, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupAndInvokeKnownMethodNode",
    "source_method": "interfaceLookup",
    "target_class": "com.oracle.truffle.espresso.impl.Method):com.oracle.truffle.espresso.impl.Method \t com.oracle.truffle.espresso.runtime.staticobject.StaticObject"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupAndInvokeKnownMethodNode",
    "source_method": "virtualLookup",
    "target_class": "com.oracle.truffle.espresso.impl.Method):com.oracle.truffle.espresso.impl.Method \t com.oracle.truffle.espresso.runtime.staticobject.StaticObject"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupAndInvokeKnownMethodNode",
    "source_method": "invoke",
    "target_class": "com.oracle.truffle.espresso.impl.Method, com.oracle.truffle.espresso.runtime.staticobject.StaticObject, java.lang.Object[]):java.lang.Object \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.OverLoadedMethodSelectorNode",
    "source_method": "selectMatchingOverloads",
    "target_class": "java.lang.Object[], com.oracle.truffle.espresso.impl.Klass[][], com.oracle.truffle.espresso.nodes.interop.ToEspressoNode.DynamicToEspresso):com.oracle.truffle.espresso.nodes.interop.CandidateMethodWithArgs \t com.oracle.truffle.espresso.nodes.interop.MethodArgsUtils"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.OverLoadedMethodSelectorNode",
    "source_method": "getParameterType",
    "target_class": "com.oracle.truffle.espresso.nodes.interop.CandidateMethodWithArgs):com.oracle.truffle.espresso.impl.Klass \t com.oracle.truffle.espresso.impl.ArrayKlass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.OverLoadedMethodSelectorNode",
    "source_method": "compareKnownTypesExact",
    "target_class": "com.oracle.truffle.espresso.impl.Klass, java.lang.Object):int \t com.oracle.truffle.espresso.impl.ContextAccessImpl"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.OverLoadedMethodSelectorNode",
    "source_method": "isAssignableFrom",
    "target_class": "com.oracle.truffle.espresso.impl.Klass):boolean \t com.oracle.truffle.espresso.impl.ContextAccessImpl"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.OverLoadedMethodSelectorNode",
    "source_method": "resolveParameterKlasses",
    "target_class": "com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.AbstractLookupFieldNode",
    "source_method": "doLookup",
    "target_class": "java.lang.String, boolean, com.oracle.truffle.espresso.nodes.interop.AbstractLookupFieldNode.FieldLookupKind):com.oracle.truffle.espresso.impl.Field \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.AbstractLookupNode",
    "source_method": "matchMethod",
    "target_class": "com.oracle.truffle.espresso.descriptors.Symbol<com.oracle.truffle.espresso.descriptors.Symbol.Name>, com.oracle.truffle.espresso.descriptors.Symbol<com.oracle.truffle.espresso.descriptors.Symbol.Signature>, boolean, boolean):boolean \t com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.InvokeEspressoNode",
    "source_method": "createDirectCallNode",
    "target_class": "com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.InvokeEspressoNode",
    "source_method": "createToEspresso",
    "target_class": "com.oracle.truffle.espresso.impl.ContextAccessImpl"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.InvokeEspressoNode",
    "source_method": "getParameterKlasses",
    "target_class": "com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.InvokeEspressoNode",
    "source_method": "checkValidInvoke",
    "target_class": "java.lang.Object):void \t com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupFieldNode",
    "source_method": "doUncached",
    "target_class": "java.lang.String, boolean):com.oracle.truffle.espresso.impl.Field \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupProxyKlassNode",
    "source_method": "lookupOrDefineInBindingsLoader",
    "target_class": "com.oracle.truffle.espresso.runtime.EspressoContext):com.oracle.truffle.espresso.impl.Klass \t com.oracle.truffle.espresso.impl.ClassRegistries"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupProxyKlassNode",
    "source_method": "fillParents",
    "target_class": "com.oracle.truffle.espresso.nodes.interop.InteropLibrary, com.oracle.truffle.espresso.nodes.interop.PolyglotTypeMappings, java.util.Set<com.oracle.truffle.espresso.impl.ObjectKlass>, com.oracle.truffle.espresso.runtime.EspressoContext):com.oracle.truffle.espresso.impl.ObjectKlass \t com.oracle.truffle.espresso.runtime.EspressoContext"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.LookupVirtualMethodNode",
    "source_method": "isCandidate",
    "target_class": "com.oracle.truffle.espresso.meta.ModifiersProvider"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode",
    "source_method": "createToEspresso",
    "target_class": "com.oracle.truffle.espresso.meta.Meta):com.oracle.truffle.espresso.nodes.interop.ToEspressoNode \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode",
    "source_method": "getUncachedToEspresso",
    "target_class": "com.oracle.truffle.espresso.meta.Meta):com.oracle.truffle.espresso.nodes.interop.ToEspressoNode \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode.DynamicToEspresso",
    "source_method": "createToEspressoNode",
    "target_class": "com.oracle.truffle.espresso.impl.ContextAccessImpl"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode.DynamicToEspresso",
    "source_method": "doCached",
    "target_class": "com.oracle.truffle.espresso.impl.Klass, com.oracle.truffle.espresso.impl.Klass, com.oracle.truffle.espresso.nodes.interop.ToEspressoNode):java.lang.Object \t com.oracle.truffle.espresso.nodes.interop.ToEspressoNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode.DynamicToEspresso",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.espresso.impl.Klass, com.oracle.truffle.espresso.nodes.interop.ToEspressoNode.GenericToEspresso):java.lang.Object \t com.oracle.truffle.espresso.nodes.interop.ToEspressoNode.GenericToEspresso"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode",
    "source_method": "isTypeConverterEnabled",
    "target_class": "com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode",
    "source_method": "isInternalTypeConverterEnabled",
    "target_class": "com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode",
    "source_method": "isForeignException",
    "target_class": "com.oracle.truffle.espresso.meta.Meta):boolean \t com.oracle.truffle.espresso.impl.Klass"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode",
    "source_method": "getMetaName",
    "target_class": "com.oracle.truffle.espresso.nodes.interop.InteropLibrary):java.lang.String \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.interop.ToEspressoNode",
    "source_method": "checkHasAllFieldsOrThrow",
    "target_class": "com.oracle.truffle.espresso.impl.ObjectKlass, com.oracle.truffle.espresso.nodes.interop.InteropLibrary, com.oracle.truffle.espresso.meta.Meta):void \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHInvokeBasicNode",
    "source_method": "canInline",
    "target_class": "com.oracle.truffle.espresso.impl.Method):boolean \t com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHInvokeBasicNode",
    "source_method": "doCallIndirect",
    "target_class": "com.oracle.truffle.espresso.impl.Method, com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHInvokeGenericNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.espresso.meta.Meta, com.oracle.truffle.espresso.impl.ObjectKlass, com.oracle.truffle.espresso.impl.Method, com.oracle.truffle.espresso.descriptors.Symbol<com.oracle.truffle.espresso.descriptors.Symbol.Name>, com.oracle.truffle.espresso.descriptors.Symbol<com.oracle.truffle.espresso.descriptors.Symbol.Signature>):com.oracle.truffle.espresso.nodes.methodhandle.MHInvokeGenericNode \t com.oracle.truffle.espresso.runtime.staticobject.StaticObject"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHLinkToNativeNode",
    "source_method": "doCached",
    "target_class": "long, com.oracle.truffle.espresso.runtime.panama.DowncallStubNode):java.lang.Object \t com.oracle.truffle.espresso.runtime.panama.DowncallStubNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHLinkToNode",
    "source_method": "canInline",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion):boolean \t com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHLinkToNode",
    "source_method": "doCallDirect",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion, com.oracle.truffle.espresso.impl.Method.MethodVersion, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHLinkToNode",
    "source_method": "doCallIndirect",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion, com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHLinkToNode",
    "source_method": "unbasic",
    "target_class": "com.oracle.truffle.espresso.descriptors.Symbol<com.oracle.truffle.espresso.descriptors.Symbol.Type>[], int, int, boolean):java.lang.Object[] \t com.oracle.truffle.espresso.descriptors.Signatures"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHLinkToNode",
    "source_method": "findLinker",
    "target_class": "com.oracle.truffle.espresso.meta.EspressoError"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.methodhandle.MHLinkToNode",
    "source_method": "getTarget",
    "target_class": "com.oracle.truffle.espresso.runtime.staticobject.StaticObject"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedGetterNode",
    "source_method": "getReceiver",
    "target_class": "com.oracle.truffle.espresso.impl.Field, int):com.oracle.truffle.espresso.runtime.staticobject.StaticObject \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedSetterNode",
    "source_method": "getReceiver",
    "target_class": "com.oracle.truffle.espresso.impl.Field, int, int):com.oracle.truffle.espresso.runtime.staticobject.StaticObject \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedSubstitutionBodyNode",
    "source_method": "create",
    "target_class": "int, int, int, int, com.oracle.truffle.espresso.substitutions.JavaSubstitution.Factory):com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode \t com.oracle.truffle.espresso.substitutions.JavaSubstitution.Factory"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedFieldAccessNode",
    "source_method": "create",
    "target_class": "int, int, int, int, com.oracle.truffle.espresso.nodes.quick.invoke.inline.ConditionalInlinedMethodNode.Recipes, char):com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode \t com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedFieldAccessNode",
    "source_method": "isResolutionSuccessAt",
    "target_class": "char):boolean \t com.oracle.truffle.espresso.classfile.RuntimeConstantPool"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedFieldAccessNode",
    "source_method": "getInlinedField",
    "target_class": "char):com.oracle.truffle.espresso.impl.Field \t com.oracle.truffle.espresso.classfile.RuntimeConstantPool"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedFieldAccessNode",
    "source_method": "getFieldCpi",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion):char \t com.oracle.truffle.espresso.meta.EspressoError"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.ConditionalInlinedMethodNode",
    "source_method": "getDefinitiveNode",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion, int, int, int, int):com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode \t com.oracle.truffle.espresso.nodes.quick.invoke.inline.ConditionalInlinedMethodNode.Recipes"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.ConditionalInlinedMethodNode",
    "source_method": "getFallback",
    "target_class": "int, int, int):com.oracle.truffle.espresso.nodes.quick.invoke.InvokeQuickNode \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.GuardedConditionalInlinedMethodNode",
    "source_method": "getDefinitiveNode",
    "target_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodPredicate, com.oracle.truffle.espresso.impl.Method.MethodVersion, int, int, int, int):com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode \t com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodPredicate"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode",
    "source_method": "createFor",
    "target_class": "int, int, int, int):com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode \t com.oracle.truffle.espresso.nodes.quick.invoke.inline.bodies.InlinedFieldAccessNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode",
    "source_method": "executeBody",
    "target_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode.BodyNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode",
    "source_method": "initCheck",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.inline.InlinedMethodNode",
    "source_method": "isInlineCandidate",
    "target_class": "int):boolean \t com.oracle.truffle.espresso.analysis.hierarchy.ClassHierarchyAssumption"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.InvokeQuickNode",
    "source_method": "peekReceiver",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.InvokeQuickNode",
    "source_method": "getArguments",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.invoke.InvokeStaticQuickNode",
    "source_method": "initializeResolvedKlass",
    "target_class": "com.oracle.truffle.espresso.nodes.bytecodes.InvokeStatic"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.quick.CheckCastQuickNode",
    "source_method": "getExceptionMessage",
    "target_class": "com.oracle.truffle.espresso.runtime.staticobject.StaticObject):java.lang.String \t com.oracle.truffle.espresso.runtime.staticobject.StaticObject"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.AbstractInstrumentableBytecodeNode",
    "source_method": "getScopeSlowPath",
    "target_class": "com.oracle.truffle.espresso.impl.Method"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.AbstractInstrumentableBytecodeNode",
    "source_method": "checkLocals",
    "target_class": "com.oracle.truffle.espresso.impl.Method):boolean \t com.oracle.truffle.espresso.classfile.attributes.Local"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "getSource",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "getSourceSectionAtBCI",
    "target_class": "com.oracle.truffle.espresso.classfile.attributes.LineNumberTableAttribute"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "checkNoForeignObjectAssumption",
    "target_class": "com.oracle.truffle.api.Assumption"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "clearOperandStack",
    "target_class": "int):void \t com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "takeBranchRef1",
    "target_class": "int):boolean \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "takeBranchPrimitive1",
    "target_class": "int):boolean \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "takeBranchPrimitive2",
    "target_class": "int, int):boolean \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "beforeJumpChecks",
    "target_class": "int, int, int, int, com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport, com.oracle.truffle.espresso.nodes.BytecodeNode.Counter, boolean):int \t com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "resolveExceptionHandlers",
    "target_class": "com.oracle.truffle.espresso.runtime.staticobject.StaticObject):com.oracle.truffle.espresso.meta.ExceptionHandler \t com.oracle.truffle.espresso.meta.ExceptionHandler"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "getConstantPool",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "readOriginalCPI",
    "target_class": "com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "patchBci",
    "target_class": "byte, char):void \t com.oracle.truffle.espresso.impl.Method.MethodVersion"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "injectQuick",
    "target_class": "com.oracle.truffle.espresso.nodes.quick.BaseQuickNode, int):com.oracle.truffle.espresso.nodes.quick.BaseQuickNode \t com.oracle.truffle.espresso.perf.DebugCounter"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "quickenCheckCast",
    "target_class": "int, int, int):int \t com.oracle.truffle.espresso.nodes.quick.BaseQuickNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "quickenInstanceOf",
    "target_class": "int, int, int):int \t com.oracle.truffle.espresso.nodes.quick.BaseQuickNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "reQuickenInvoke",
    "target_class": "int, int, int, int, com.oracle.truffle.espresso.impl.Method):int \t com.oracle.truffle.espresso.nodes.quick.BaseQuickNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "quickenGetField",
    "target_class": "int, int, int, int, com.oracle.truffle.espresso.impl.Field):int \t com.oracle.truffle.espresso.nodes.quick.BaseQuickNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "quickenPutField",
    "target_class": "int, int, int, int, com.oracle.truffle.espresso.impl.Field):int \t com.oracle.truffle.espresso.nodes.quick.BaseQuickNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "notifyFieldModification",
    "target_class": "int, com.oracle.truffle.espresso.impl.Field, com.oracle.truffle.espresso.runtime.staticobject.StaticObject, java.lang.Object):void \t com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode",
    "source_method": "notifyFieldAccess",
    "target_class": "int, com.oracle.truffle.espresso.impl.Field, com.oracle.truffle.espresso.runtime.staticobject.StaticObject):void \t com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport",
    "source_method": "notifyEntry",
    "target_class": "com.oracle.truffle.espresso.nodes.AbstractInstrumentableBytecodeNode):void \t com.oracle.truffle.espresso.nodes.AbstractInstrumentableBytecodeNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport",
    "source_method": "notifyFieldModification",
    "target_class": "int, com.oracle.truffle.espresso.impl.Field, com.oracle.truffle.espresso.runtime.staticobject.StaticObject, java.lang.Object):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport",
    "source_method": "notifyFieldAccess",
    "target_class": "int, com.oracle.truffle.espresso.impl.Field, com.oracle.truffle.espresso.runtime.staticobject.StaticObject):void \t com.oracle.truffle.espresso.impl.Field"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport",
    "source_method": "getStatementIndexAfterJump",
    "target_class": "int, int):int \t com.oracle.truffle.espresso.bytecode.MapperBCI"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.BytecodeNode.InstrumentationSupport",
    "source_method": "getNextStatementIndex",
    "target_class": "int):int \t com.oracle.truffle.espresso.bytecode.MapperBCI"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "getMethodVersion",
    "target_class": "com.oracle.truffle.espresso.nodes.EspressoInstrumentableRootNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.espresso.nodes.EspressoInstrumentableRootNode):com.oracle.truffle.espresso.nodes.EspressoRootNode \t com.oracle.truffle.espresso.nodes.EspressoInstrumentableRootNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "hasExactlyOneRootBodyTag",
    "target_class": "com.oracle.truffle.api.nodes.NodeUtil"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "createForBytecodes",
    "target_class": "com.oracle.truffle.espresso.nodes.BytecodeNode"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "setFrameId",
    "target_class": "long):void \t com.oracle.truffle.api.frame.Frame"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "setStackWalkAnchor",
    "target_class": "long):void \t com.oracle.truffle.api.frame.Frame"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "getCookie",
    "target_class": "com.oracle.truffle.api.frame.Frame"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "initCookieSlot",
    "target_class": "com.oracle.truffle.api.frame.Frame"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "readFrameIdOrZero",
    "target_class": "com.oracle.truffle.espresso.vm.FrameCookie"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "readStackAnchorOrZero",
    "target_class": "com.oracle.truffle.espresso.vm.FrameCookie"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "getMonitorStack",
    "target_class": "com.oracle.truffle.api.frame.Frame"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode",
    "source_method": "getMonitorsOnFrame",
    "target_class": "com.oracle.truffle.espresso.nodes.EspressoRootNode.MonitorStack"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.NativeMethodNode",
    "source_method": "toObjectHandle",
    "target_class": "java.lang.Object):java.lang.Object \t com.oracle.truffle.espresso.jni.JniEnv"
  },
  {
    "source_class": "com.oracle.truffle.espresso.nodes.NativeMethodNode",
    "source_method": "maybeThrowAndClearPendingException",
    "target_class": "com.oracle.truffle.espresso.jni.JniEnv"
  },
  {
    "source_class": "com.oracle.truffle.espresso.runtime.panama.DowncallStubNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.espresso.ffi.NativeAccess):com.oracle.truffle.espresso.runtime.panama.DowncallStubNode \t com.oracle.truffle.espresso.ffi.NativeAccess"
  },
  {
    "source_class": "com.oracle.truffle.espresso.runtime.panama.DowncallStubNode",
    "source_method": "call",
    "target_class": "com.oracle.truffle.espresso.runtime.panama.DowncallStubs.DowncallStub"
  },
  {
    "source_class": "com.oracle.truffle.regex.RegexBodyNode",
    "source_method": "isBooleanMatch",
    "target_class": "com.oracle.truffle.regex.RegexSource"
  },
  {
    "source_class": "com.oracle.truffle.regex.RegexRootNode",
    "source_method": "checkThreadInterrupted",
    "target_class": "com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.regex.runtime.nodes.DispatchNode",
    "source_method": "doDirect",
    "target_class": "com.oracle.truffle.regex.result.RegexResult, com.oracle.truffle.api.CallTarget, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.runtime.nodes.DispatchNode",
    "source_method": "doIndirect",
    "target_class": "com.oracle.truffle.regex.result.RegexResult, com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.runtime.nodes.ExpectStringNode",
    "source_method": "doString",
    "target_class": "com.oracle.truffle.api.strings.TruffleString.Encoding, com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.regex.runtime.nodes.ExpectStringNode",
    "source_method": "doBoxedString",
    "target_class": "com.oracle.truffle.api.strings.TruffleString.Encoding, com.oracle.truffle.regex.runtime.nodes.InteropLibrary):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.regex.runtime.nodes.ToIntNode",
    "source_method": "doBoxed",
    "target_class": "com.oracle.truffle.regex.runtime.nodes.InteropLibrary):int \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.regex.runtime.nodes.ToLongNode",
    "source_method": "doBoxed",
    "target_class": "com.oracle.truffle.regex.runtime.nodes.InteropLibrary):long \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecNode",
    "source_method": "charactersProcessedDuringSearch",
    "target_class": "int, int):int \t com.oracle.truffle.regex.result.RegexResult"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecNode",
    "source_method": "resultsEqual",
    "target_class": "com.oracle.truffle.regex.result.RegexResult, int):boolean \t com.oracle.truffle.regex.result.RegexResult"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecNode.LazyCaptureGroupRegexSearchNode",
    "source_method": "getForwardExecutor",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorEntryNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecNode.LazyCaptureGroupRegexSearchNode",
    "source_method": "getBackwardExecutor",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorEntryNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorEntryNode.TRegexExecutorEntryInnerNode",
    "source_method": "runExecutor",
    "target_class": "com.oracle.truffle.api.strings.TruffleString, int, int, int, int, int, com.oracle.truffle.api.nodes.DirectCallNode, com.oracle.truffle.api.strings.TruffleString.CodeRange):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAFindInnerLiteralStateNode",
    "source_method": "executeInnerLiteralSearch",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode):int \t com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode",
    "source_method": "afterIndexOf",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode, int, int, com.oracle.truffle.api.strings.TruffleString.CodeRange):void \t com.oracle.truffle.regex.tregex.nodes.dfa.DFASimpleCG"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode",
    "source_method": "atEnd",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode):void \t com.oracle.truffle.regex.tregex.nodes.dfa.DFASimpleCG"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode",
    "source_method": "successorFound",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode, int):void \t com.oracle.truffle.regex.tregex.nodes.dfa.DFASimpleCG"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode",
    "source_method": "storeResult",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode, boolean):void \t com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode",
    "source_method": "applySimpleCGTransition",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode, com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorLocals):void \t com.oracle.truffle.regex.tregex.nodes.dfa.DFASimpleCGTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode",
    "source_method": "applySimpleCGFinalTransition",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode, com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorLocals):void \t com.oracle.truffle.regex.tregex.nodes.dfa.DFASimpleCGTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "calcNumberOfTransitions",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAAbstractStateNode[]):int \t com.oracle.truffle.regex.tregex.nodes.dfa.DFAAbstractStateNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "prefixMatcherMatches",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorBaseNode, com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorLocals, com.oracle.truffle.api.strings.TruffleString.CodeRange, boolean):boolean \t com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorLocals"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "asciiOrLatin1Matchers",
    "target_class": "com.oracle.truffle.regex.tregex.matchers.CharMatcher[], com.oracle.truffle.regex.tregex.matchers.CharMatcher[]):com.oracle.truffle.regex.tregex.matchers.CharMatcher[] \t com.oracle.truffle.api.strings.TruffleString.CodeRange"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "match",
    "target_class": "int, int):boolean \t com.oracle.truffle.regex.tregex.matchers.CharMatcher"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "transitionMatch",
    "target_class": "int):int \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "transitionNoMatch",
    "target_class": "com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "execTransition",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode, int):int \t com.oracle.truffle.regex.tregex.nodes.dfa.DFAStateNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "validArgs",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorLocals"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode",
    "source_method": "initResultOrder",
    "target_class": "int, com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorProperties):int[] \t com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorProperties"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.CGTrackingDFAStateNode",
    "source_method": "applyAnchoredFinalStateTransition",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode):void \t com.oracle.truffle.regex.tregex.nodes.dfa.DFACaptureGroupLazyTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.CGTrackingDFAStateNode",
    "source_method": "applyUnAnchoredFinalStateTransition",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode):void \t com.oracle.truffle.regex.tregex.nodes.dfa.DFACaptureGroupLazyTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.CGTrackingDFAStateNode",
    "source_method": "storeResult",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorNode):void \t com.oracle.truffle.regex.tregex.nodes.dfa.TRegexDFAExecutorLocals"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.CGTrackingDFAStateNode",
    "source_method": "getCGTrackingCost",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFACaptureGroupLazyTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.CGTrackingDFAStateNode",
    "source_method": "getCost",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFACaptureGroupLazyTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.dfa.CGTrackingDFAStateNode",
    "source_method": "getCost",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFACaptureGroupPartialTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.input.InputReadNode",
    "source_method": "doTStringUTF8",
    "target_class": "int, com.oracle.truffle.regex.tregex.string.Encodings.Encoding, com.oracle.truffle.api.strings.TruffleString.ReadByteNode):int \t com.oracle.truffle.regex.tregex.string.Encodings.Encoding"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.input.InputReadNode",
    "source_method": "doTStringUTF16",
    "target_class": "int, com.oracle.truffle.regex.tregex.string.Encodings.Encoding, com.oracle.truffle.api.strings.TruffleString.ReadCharUTF16Node):int \t com.oracle.truffle.api.strings.TruffleString.ReadCharUTF16Node"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.input.InputReadNode",
    "source_method": "doTStringUTF32",
    "target_class": "int, com.oracle.truffle.regex.tregex.string.Encodings.Encoding, com.oracle.truffle.api.strings.TruffleString.CodePointAtIndexNode):int \t com.oracle.truffle.api.strings.TruffleString.CodePointAtIndexNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexLiteralLookAroundExecutorNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.regex.tregex.parser.ast.LookAroundAssertion, com.oracle.truffle.regex.tregex.buffer.CompilationBuffer):com.oracle.truffle.regex.tregex.nodes.nfa.TRegexLiteralLookAroundExecutorNode \t com.oracle.truffle.regex.tregex.parser.ast.LookAroundAssertion"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexNFAExecutorNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.regex.tregex.parser.ast.GroupBoundaries"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexNFAExecutorNode",
    "source_method": "expandState",
    "target_class": "int, int, boolean):void \t com.oracle.truffle.regex.tregex.nfa.NFAStateTransition"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexNFAExecutorNode",
    "source_method": "maxTransitionIndex",
    "target_class": "com.oracle.truffle.regex.tregex.automaton.BasicState"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexNFAExecutorNode",
    "source_method": "findNextStatesAtEnd",
    "target_class": "com.oracle.truffle.regex.tregex.nfa.NFA"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexNFAExecutorNode",
    "source_method": "expandStateAtEnd",
    "target_class": "com.oracle.truffle.regex.tregex.nfa.NFAState, boolean):void \t com.oracle.truffle.regex.tregex.nfa.NFAState"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorNode",
    "source_method": "createFlags",
    "target_class": "com.oracle.truffle.regex.tregex.nfa.PureNFA, boolean, com.oracle.truffle.regex.tregex.parser.ast.RegexASTSubtreeRootNode, int, int):int \t com.oracle.truffle.regex.tregex.parser.ast.RegexAST"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorNode",
    "source_method": "getSubExecutor",
    "target_class": "com.oracle.truffle.regex.tregex.nfa.PureNFAState"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorNode",
    "source_method": "subMatchFailed",
    "target_class": "java.lang.Object):boolean \t com.oracle.truffle.regex.tregex.nfa.PureNFAState"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorNode",
    "source_method": "getBackRefBoundary",
    "target_class": "com.oracle.truffle.regex.tregex.nfa.PureNFATransition, int, int):int \t com.oracle.truffle.regex.tregex.parser.ast.GroupBoundaries"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorNode",
    "source_method": "updateState",
    "target_class": "com.oracle.truffle.regex.tregex.nfa.PureNFATransition, int):void \t com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorLocals"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorNode",
    "source_method": "tryUpdateState",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorLocals, com.oracle.truffle.api.strings.TruffleString.CodeRange, com.oracle.truffle.regex.tregex.nfa.PureNFATransition, int, boolean, int):boolean \t com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorLocals"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.nfa.TRegexBacktrackingNFAExecutorNode",
    "source_method": "equalsIgnoreCase",
    "target_class": "int, boolean):boolean \t com.oracle.truffle.regex.tregex.parser.flavors.RegexFlavor.EqualsIgnoreCasePredicate"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorNode",
    "source_method": "getMinIndex",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorLocals"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorNode",
    "source_method": "inputAdvance",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.TRegexExecutorLocals"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodesplitter.GraphNode",
    "source_method": "createCopy",
    "target_class": "short):void \t com.oracle.truffle.regex.tregex.nodesplitter.DFANodeSplit"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodesplitter.GraphNode",
    "source_method": "getId",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAAbstractStateNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodesplitter.GraphNode",
    "source_method": "nodeWeight",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAAbstractStateNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodesplitter.GraphNode",
    "source_method": "replaceSuccessor",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAAbstractStateNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodesplitter.GraphNode",
    "source_method": "registerDuplicate",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAAbstractStateNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.nodesplitter.GraphNode",
    "source_method": "updateSuccessors",
    "target_class": "com.oracle.truffle.regex.tregex.nodes.dfa.DFAAbstractStateNode"
  },
  {
    "source_class": "com.oracle.truffle.regex.tregex.parser.ast.RegexASTNode",
    "source_method": "astNodeId",
    "target_class": "com.oracle.truffle.regex.tregex.util.json.Json"
  },
  {
    "source_class": "com.oracle.graal.pointsto.phases.InlineBeforeAnalysisGraphDecoder",
    "source_method": "maybeAbortInlining",
    "target_class": "jdk.graal.compiler.nodes.GraphDecoder.LoopScope, jdk.graal.compiler.graph.Node):void \t com.oracle.graal.pointsto.phases.InlineBeforeAnalysisGraphDecoder.InlineBeforeAnalysisMethodScope"
  },
  {
    "source_class": "com.oracle.graal.pointsto.phases.InlineBeforeAnalysisGraphDecoder",
    "source_method": "abortInlining",
    "target_class": "com.oracle.graal.pointsto.phases.InlineBeforeAnalysisGraphDecoder.InlineBeforeAnalysisMethodScope"
  },
  {
    "source_class": "com.oracle.graal.pointsto.phases.InlineBeforeAnalysisGraphDecoder",
    "source_method": "killControlFlowNodes",
    "target_class": "jdk.graal.compiler.nodes.FixedNode):void \t jdk.graal.compiler.graph.Node"
  },
  {
    "source_class": "com.oracle.svm.configure.config.conditional.MethodCallNode",
    "source_method": "hasConfig",
    "target_class": "com.oracle.svm.configure.config.ConfigurationSet"
  },
  {
    "source_class": "com.oracle.svm.configure.filters.HierarchyFilterNode",
    "source_method": "addToScore",
    "target_class": "int):int \t com.oracle.svm.configure.filters.ConfigurationFilter.Inclusion"
  },
  {
    "source_class": "com.oracle.svm.configure.filters.HierarchyFilterNode",
    "source_method": "removeRedundantNodes",
    "target_class": "com.oracle.svm.configure.filters.ConfigurationFilter.Inclusion):boolean \t com.oracle.svm.configure.filters.ConfigurationFilter.Inclusion"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "verifyBeforeGC",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "verifyAfterGC",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "getChunkBytes",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "precondition",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "postcondition",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "runtimeAssertions",
    "target_class": "com.oracle.svm.core.RuntimeAssertionsSupport"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "scavenge",
    "target_class": "com.oracle.svm.core.genscavenge.GCImpl.ChunkReleaser"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "walkRuntimeCodeCache",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "cleanRuntimeCodeCache",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "promoteChunksWithPinnedObjects",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "removeClosedPinnedObjects",
    "target_class": "com.oracle.svm.core.genscavenge.PinnedObjectImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "blackenDirtyImageHeapRoots",
    "target_class": "com.oracle.svm.core.genscavenge.ImageHeapInfo"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "blackenImageHeapRoots",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "blackenImageHeapRoots",
    "target_class": "com.oracle.svm.core.genscavenge.ImageHeapInfo"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "blackenDirtyCardRoots",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "prepareForPromotion",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "scanGreyObjects",
    "target_class": "com.oracle.svm.core.genscavenge.Timer"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "scanGreyObjectsLoop",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "promoteObject",
    "target_class": "com.oracle.svm.core.genscavenge.UnsignedWord):java.lang.Object \t com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "getChunk",
    "target_class": "boolean):com.oracle.svm.core.genscavenge.HeapChunk.Header<?> \t com.oracle.svm.core.genscavenge.ObjectHeaderImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "promotePinnedObject",
    "target_class": "com.oracle.svm.core.genscavenge.Space"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "swapSpaces",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "releaseSpaces",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "doReferenceHandling",
    "target_class": "com.oracle.svm.core.thread.VMOperation"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl.CollectionVMOperation",
    "source_method": "collect",
    "target_class": "com.oracle.svm.core.genscavenge.HeapImpl"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl.ChunkReleaser",
    "source_method": "getLast",
    "target_class": "com.oracle.svm.core.genscavenge.HeapChunk"
  },
  {
    "source_class": "com.oracle.svm.core.genscavenge.GCImpl",
    "source_method": "printGCSummary",
    "target_class": "com.oracle.svm.core.option.RuntimeOptionKey"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMBinaryIntrinsicNode",
    "source_method": "factory",
    "target_class": "com.oracle.svm.core.graal.llvm.replacements.JavaKind, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode):com.oracle.svm.core.graal.llvm.replacements.LLVMBinaryIntrinsicNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMCeilNode",
    "source_method": "fold",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMCopySignNode",
    "source_method": "fold",
    "target_class": "com.oracle.svm.core.graal.llvm.replacements.JavaConstant):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMCountLeadingZerosNode",
    "source_method": "fold",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMCountTrailingZerosNode",
    "source_method": "fold",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMFloorNode",
    "source_method": "fold",
    "target_class": "jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMMaxNode",
    "source_method": "fold",
    "target_class": "com.oracle.svm.core.graal.llvm.replacements.JavaConstant):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMMinNode",
    "source_method": "fold",
    "target_class": "com.oracle.svm.core.graal.llvm.replacements.JavaConstant):jdk.graal.compiler.nodes.ConstantNode \t jdk.graal.compiler.nodes.ConstantNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.llvm.replacements.LLVMUnaryIntrinsicNode",
    "source_method": "factory",
    "target_class": "com.oracle.svm.core.graal.llvm.replacements.JavaKind, jdk.graal.compiler.nodes.ValueNode):com.oracle.svm.core.graal.llvm.replacements.LLVMUnaryIntrinsicNode \t jdk.graal.compiler.debug.GraalError"
  },
  {
    "source_class": "com.oracle.svm.core.classinitialization.EnsureClassInitializedNode",
    "source_method": "intrinsify",
    "target_class": "jdk.graal.compiler.nodes.ValueNode):boolean \t jdk.graal.compiler.nodes.graphbuilderconf.GraphBuilderContext"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.CEntryPointEnterNode",
    "source_method": "createIsolate",
    "target_class": "com.oracle.svm.core.graal.nodes.CEntryPointEnterNode.EnterAction"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.CEntryPointEnterNode",
    "source_method": "attachThread",
    "target_class": "boolean, boolean):com.oracle.svm.core.graal.nodes.CEntryPointEnterNode \t com.oracle.svm.core.graal.nodes.CEntryPointEnterNode.EnterAction"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.CEntryPointEnterNode",
    "source_method": "enter",
    "target_class": "com.oracle.svm.core.graal.nodes.CEntryPointEnterNode.EnterAction"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.CEntryPointEnterNode",
    "source_method": "enterByIsolate",
    "target_class": "com.oracle.svm.core.graal.nodes.CEntryPointEnterNode.EnterAction"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.CEntryPointLeaveNode",
    "source_method": "isAllowedMerge",
    "target_class": "jdk.graal.compiler.nodes.AbstractMergeNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.FieldOffsetNode",
    "source_method": "create",
    "target_class": "com.oracle.svm.core.graal.nodes.ResolvedJavaField):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.nodes.calc.NarrowNode"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.SubstrateCompressionNode",
    "source_method": "compress",
    "target_class": "jdk.graal.compiler.core.common.CompressEncoding):com.oracle.svm.core.graal.nodes.SubstrateCompressionNode \t jdk.graal.compiler.nodes.CompressionNode.CompressionOp"
  },
  {
    "source_class": "com.oracle.svm.core.graal.nodes.SubstrateCompressionNode",
    "source_method": "uncompress",
    "target_class": "jdk.graal.compiler.core.common.CompressEncoding):com.oracle.svm.core.graal.nodes.SubstrateCompressionNode \t jdk.graal.compiler.nodes.CompressionNode.CompressionOp"
  },
  {
    "source_class": "com.oracle.svm.core.graal.stackvalue.AbstractStackValueNode",
    "source_method": "needsVirtualThreadCheck",
    "target_class": "boolean):boolean \t com.oracle.svm.core.Uninterruptible.Utils"
  },
  {
    "source_class": "com.oracle.svm.core.graal.stackvalue.LateStackValueNode",
    "source_method": "create",
    "target_class": "com.oracle.svm.core.graal.stackvalue.ResolvedJavaMethod, int, boolean):com.oracle.svm.core.graal.stackvalue.LateStackValueNode \t com.oracle.svm.core.config.ConfigurationValues"
  },
  {
    "source_class": "com.oracle.svm.core.graal.stackvalue.StackValueNode",
    "source_method": "create",
    "target_class": "long, jdk.graal.compiler.nodes.graphbuilderconf.GraphBuilderContext, boolean):jdk.graal.compiler.nodes.ValueNode \t jdk.graal.compiler.core.common.calc.UnsignedMath"
  },
  {
    "source_class": "com.oracle.svm.core.graal.stackvalue.StackValueNode",
    "source_method": "create",
    "target_class": "com.oracle.svm.core.graal.stackvalue.StackValueNode.StackSlotIdentity, boolean):com.oracle.svm.core.graal.stackvalue.StackValueNode \t jdk.graal.compiler.core.common.calc.UnsignedMath"
  },
  {
    "source_class": "com.oracle.svm.core.identityhashcode.SubstrateIdentityHashCodeNode",
    "source_method": "isIdentityHashFieldOptional",
    "target_class": "com.oracle.svm.core.config.ConfigurationValues"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.JfrBufferNode",
    "source_method": "offsetOfLock",
    "target_class": "com.oracle.svm.core.util.VMError"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "createJFR",
    "target_class": "com.oracle.svm.core.jfr.JfrStackTraceRepository"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "destroyJFR",
    "target_class": "com.oracle.svm.core.jfr.JfrRecorderThread"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "getStackTraceId",
    "target_class": "com.oracle.svm.core.jfr.JfrStackTraceRepository"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "getThreadId",
    "target_class": "com.oracle.svm.core.jfr.HasJfrSupport"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "getCurrentThreadId",
    "target_class": "com.oracle.svm.core.jfr.HasJfrSupport"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "storeMetadataDescriptor",
    "target_class": "com.oracle.svm.core.jfr.JfrChunkWriter"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "beginRecording",
    "target_class": "com.oracle.svm.core.jfr.JfrChunkWriter"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "setOutput",
    "target_class": "com.oracle.svm.core.jfr.JfrUnlockedChunkWriter"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "setFileNotification",
    "target_class": "com.oracle.svm.core.jfr.JfrOptionSet"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "setGlobalBufferCount",
    "target_class": "com.oracle.svm.core.jfr.JfrOptionSet"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "setGlobalBufferSize",
    "target_class": "com.oracle.svm.core.jfr.JfrOptionSet"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "setMemorySize",
    "target_class": "com.oracle.svm.core.jfr.JfrOptionSet"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "updateSampler0",
    "target_class": "com.oracle.svm.core.jfr.sampler.JfrExecutionSampler"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "setStackDepth",
    "target_class": "com.oracle.svm.core.jfr.JfrOptionSet"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "flush",
    "target_class": "com.oracle.svm.core.jfr.JfrUnlockedChunkWriter"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "markChunkFinal",
    "target_class": "com.oracle.svm.core.jfr.JfrUnlockedChunkWriter"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "shouldRotateDisk",
    "target_class": "com.oracle.svm.core.jfr.JfrUnlockedChunkWriter"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "emitOldObjectSamples",
    "target_class": "boolean, boolean):void \t com.oracle.svm.core.jfr.oldobject.JfrOldObjectProfiler"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "getChunkStartNanos",
    "target_class": "com.oracle.svm.core.jfr.JfrUnlockedChunkWriter"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "isEnabled",
    "target_class": "com.oracle.svm.core.jfr.JfrEvent"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "setLarge",
    "target_class": "boolean):void \t com.oracle.svm.core.jfr.JfrEvent"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "isLarge",
    "target_class": "com.oracle.svm.core.jfr.JfrEvent"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "getThresholdTicks",
    "target_class": "com.oracle.svm.core.jfr.JfrEvent"
  },
  {
    "source_class": "com.oracle.svm.core.jfr.SubstrateJVM",
    "source_method": "printSamplerStatistics",
    "target_class": "com.oracle.svm.core.log.Log"
  },
  {
    "source_class": "com.oracle.svm.hosted.ReachabilityRegistrationNode",
    "source_method": "create",
    "target_class": "com.oracle.svm.core.ParsingReason):com.oracle.svm.hosted.ReachabilityRegistrationNode \t com.oracle.svm.core.util.VMError"
  },
  {
    "source_class": "com.oracle.svm.hosted.c.query.QueryResultParser",
    "source_method": "parse",
    "target_class": "com.oracle.svm.hosted.c.info.NativeCodeInfo, java.io.InputStream):java.util.List<java.lang.String> \t com.oracle.svm.hosted.c.util.FileUtils"
  },
  {
    "source_class": "com.oracle.svm.hosted.c.query.QueryResultParser",
    "source_method": "parseFloatValue",
    "target_class": "com.oracle.svm.hosted.c.info.PropertyInfo"
  },
  {
    "source_class": "com.oracle.svm.hosted.c.query.QueryResultParser",
    "source_method": "parseIntegerProperty",
    "target_class": "com.oracle.svm.hosted.c.info.PropertyInfo"
  },
  {
    "source_class": "com.oracle.svm.hosted.classinitialization.SimulateClassInitializerGraphDecoder",
    "source_method": "handleAccessMonitorNode",
    "target_class": "jdk.graal.compiler.nodes.java.AccessMonitorNode"
  },
  {
    "source_class": "com.oracle.svm.hosted.classinitialization.SimulateClassInitializerGraphDecoder",
    "source_method": "accumulatedNewObjectSize",
    "target_class": "long, jdk.graal.compiler.graph.Node):boolean \t jdk.graal.compiler.debug.DebugContext"
  },
  {
    "source_class": "com.oracle.svm.hosted.classinitialization.SimulateClassInitializerGraphDecoder",
    "source_method": "asIntegerOrMinusOne",
    "target_class": "jdk.graal.compiler.nodes.ValueNode"
  },
  {
    "source_class": "com.oracle.svm.hosted.dashboard.DashboardDumpFeature",
    "source_method": "isHeapBreakdownDumped",
    "target_class": "com.oracle.svm.core.option.HostedOptionKey"
  },
  {
    "source_class": "com.oracle.svm.hosted.dashboard.DashboardDumpFeature",
    "source_method": "isPointsToDumped",
    "target_class": "com.oracle.svm.core.option.HostedOptionKey"
  },
  {
    "source_class": "com.oracle.svm.hosted.dashboard.DashboardDumpFeature",
    "source_method": "isCodeBreakdownDumped",
    "target_class": "com.oracle.svm.core.option.HostedOptionKey"
  },
  {
    "source_class": "com.oracle.svm.hosted.dashboard.DashboardDumpFeature",
    "source_method": "isBgvFormat",
    "target_class": "com.oracle.svm.core.option.HostedOptionKey"
  },
  {
    "source_class": "com.oracle.svm.hosted.dashboard.DashboardDumpFeature",
    "source_method": "isPretty",
    "target_class": "com.oracle.svm.core.option.HostedOptionKey"
  },
  {
    "source_class": "com.oracle.svm.hosted.dashboard.DashboardDumpFeature",
    "source_method": "getFile",
    "target_class": "com.oracle.svm.core.option.HostedOptionKey"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "registerClass",
    "target_class": "java.lang.Class<?>, boolean, boolean):void \t com.oracle.graal.pointsto.meta.AnalysisMetaAccess"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "registerField",
    "target_class": "java.lang.reflect.Field):void \t com.oracle.graal.pointsto.meta.AnalysisMetaAccess"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "checkSubtypeForOverridingField",
    "target_class": "com.oracle.graal.pointsto.meta.AnalysisType):void \t com.oracle.graal.pointsto.meta.AnalysisField"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "checkSubtypeForOverridingMethod",
    "target_class": "com.oracle.graal.pointsto.meta.AnalysisType):void \t com.oracle.graal.pointsto.meta.AnalysisMethod"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "registerTypesForAnnotationDefault",
    "target_class": "com.oracle.svm.hosted.annotation.AnnotationMemberValue"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "includeAnnotation",
    "target_class": "com.oracle.svm.hosted.annotation.AnnotationValue"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "queryGenericInfo",
    "target_class": "com.oracle.svm.core.util.VMError"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder",
    "source_method": "registerLinkageError",
    "target_class": "java.lang.LinkageError, java.util.Map<java.lang.Class<?>,java.lang.Throwable>):void \t com.oracle.svm.hosted.LinkAtBuildTimeSupport"
  },
  {
    "source_class": "com.oracle.svm.hosted.reflect.ReflectionDataBuilder.TestBackdoor",
    "source_method": "registerField",
    "target_class": "boolean, java.lang.reflect.Field):void \t com.oracle.svm.hosted.reflect.ReflectionDataBuilder"
  },
  {
    "source_class": "com.oracle.svm.hosted.thread.VMThreadFeature",
    "source_method": "currentThread",
    "target_class": "com.oracle.svm.core.graal.nodes.ReadReservedRegister"
  },
  {
    "source_class": "com.oracle.svm.hosted.thread.VMThreadFeature",
    "source_method": "handleSet",
    "target_class": "jdk.graal.compiler.nodes.graphbuilderconf.InvocationPlugin.Receiver, jdk.graal.compiler.nodes.ValueNode, jdk.graal.compiler.nodes.ValueNode, boolean):boolean \t jdk.graal.compiler.nodes.graphbuilderconf.InvocationPlugin.Receiver"
  },
  {
    "source_class": "com.oracle.svm.hosted.thread.VMThreadFeature",
    "source_method": "offsetOf",
    "target_class": "com.oracle.svm.hosted.thread.VMThreadLocalCollector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.nfi.SulongNFIRootNode.ParseSourceNode",
    "source_method": "doParse",
    "target_class": "com.oracle.truffle.api.TruffleLanguage.Env"
  },
  {
    "source_class": "com.oracle.truffle.llvm.nfi.SulongNFIRootNode",
    "source_method": "doCached",
    "target_class": "com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.nfi.SulongNFIRootNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.parser.metadata.MDNamedNode",
    "source_method": "create",
    "target_class": "long[], com.oracle.truffle.llvm.parser.metadata.MetadataValueList):com.oracle.truffle.llvm.parser.metadata.MDNamedNode \t com.oracle.truffle.llvm.parser.metadata.MetadataValueList"
  },
  {
    "source_class": "com.oracle.truffle.llvm.parser.metadata.MDNode",
    "source_method": "create38",
    "target_class": "com.oracle.truffle.llvm.parser.metadata.MetadataValueList):com.oracle.truffle.llvm.parser.metadata.MDNode \t com.oracle.truffle.llvm.parser.metadata.MetadataValueList"
  },
  {
    "source_class": "com.oracle.truffle.llvm.parser.metadata.MDNode",
    "source_method": "create32",
    "target_class": "com.oracle.truffle.llvm.parser.listeners.Metadata):com.oracle.truffle.llvm.parser.metadata.MDNode \t com.oracle.truffle.llvm.parser.metadata.ParseUtil"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.LLVMGetStackFromThreadNode",
    "source_method": "getStack",
    "target_class": "java.lang.Thread):com.oracle.truffle.llvm.runtime.memory.LLVMStack \t com.oracle.truffle.llvm.runtime.memory.LLVMThreadingStack"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.LLVMGetStackFromThreadNode",
    "source_method": "generic",
    "target_class": "java.lang.Thread, com.oracle.truffle.llvm.runtime.ConditionProfile):com.oracle.truffle.llvm.runtime.memory.LLVMStack \t com.oracle.truffle.llvm.runtime.memory.LLVMThreadingStack"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.debug.debugexpr.nodes.DebugExprArrayElementNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode):com.oracle.truffle.llvm.runtime.debug.debugexpr.nodes.DebugExprArrayElementNode \t com.oracle.truffle.llvm.runtime.debug.debugexpr.parser.DebugExprType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.debug.debugexpr.nodes.DebugExprPointerCastNode",
    "source_method": "getMember",
    "target_class": "com.oracle.truffle.api.frame.VirtualFrame):java.lang.Object \t com.oracle.truffle.llvm.runtime.debug.debugexpr.nodes.DebugExprTypeofNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.debug.debugexpr.nodes.DebugExprSizeofNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMLanguage"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode",
    "source_method": "createFunction",
    "target_class": "com.oracle.truffle.llvm.runtime.NativeContextExtension"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode",
    "source_method": "getFunction",
    "target_class": "com.oracle.truffle.llvm.runtime.NativeContextExtension"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode.LLVMLongDoubleNativeCallNode",
    "source_method": "doCall",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.NativeContextExtension.WellKnownNativeFunctionNode, com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode):com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleFloatingPoint \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode.LLVMLongDoubleUnaryNativeCallNode",
    "source_method": "doCall",
    "target_class": "com.oracle.truffle.llvm.runtime.NativeContextExtension.WellKnownNativeFunctionNode, com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode):com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleFloatingPoint \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMAsForeignNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.types.PrimitiveType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVM80BitFloatDataEscapeNode",
    "source_method": "escaping80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVM128BitFloatDataEscapeNode",
    "source_method": "escaping128BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMPointerDataEscapeNode",
    "source_method": "escapingForeignNonPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMVoidDataEscapeNode",
    "source_method": "doVoid",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMForeignCallNode.PackForeignArgumentsNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType, com.oracle.truffle.llvm.runtime.debug.type.LLVMSourceFunctionType):com.oracle.truffle.llvm.runtime.interop.LLVMForeignCallNode.PackForeignArgumentsNode \t com.oracle.truffle.llvm.runtime.interop.LLVMGetInteropPrimitiveParamNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMForeignCallNode",
    "source_method": "getCallTarget",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMFunction"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMForeignConstructorCallNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMFunctionCode, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType, com.oracle.truffle.llvm.runtime.debug.type.LLVMSourceFunctionType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured):com.oracle.truffle.llvm.runtime.interop.LLVMForeignConstructorCallNode \t com.oracle.truffle.llvm.runtime.LLVMFunction"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMForeignFunctionCallNode",
    "source_method": "getReturnBaseType",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Function"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMForeignIntrinsicCallNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMFunctionCode.Intrinsic, com.oracle.truffle.llvm.runtime.types.FunctionType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Function):com.oracle.truffle.llvm.runtime.interop.LLVMForeignIntrinsicCallNode \t com.oracle.truffle.llvm.runtime.LLVMFunctionCode.Intrinsic"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMGetInteropPrimitiveParamNode",
    "source_method": "getParam",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.LLVMGetInteropStructParamNode",
    "source_method": "getParam",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMAccessForeignObjectNode.ResolveNativePointerNode",
    "source_method": "doPointer",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode):com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMAccessForeignObjectNode.ResolveNativePointerNode",
    "source_method": "doDerefHandle",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode):com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode",
    "source_method": "doArrayCachedTypeSize",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.MakeAccessLocation, long):com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.AccessLocation \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.MakeAccessLocation"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode",
    "source_method": "doArray",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.MakeAccessLocation):com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.AccessLocation \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.MakeAccessLocation"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode",
    "source_method": "doStructMember",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.StructMember, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.MakeAccessLocation):com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.AccessLocation \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.MakeAccessLocation"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode",
    "source_method": "checkMember",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.StructMember, long):boolean \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.StructMember"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode",
    "source_method": "findMember",
    "target_class": "long):com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.StructMember \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropInvokeNode",
    "source_method": "doClazz",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Clazz, java.lang.String, java.lang.Object[], com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropMethodInvokeNode, com.oracle.truffle.llvm.runtime.interop.access.LLVMSelfArgumentPackNode, com.oracle.truffle.llvm.runtime.interop.access.InteropLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropMethodInvokeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropMethodInvokeNode",
    "source_method": "doNonvirtualCall",
    "target_class": "java.lang.String, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Clazz, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Method, long, java.lang.Object[], com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropNonvirtualCallNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropNonvirtualCallNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropNonvirtualCallNode",
    "source_method": "mkErrorMessage",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Method):java.lang.String \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode",
    "source_method": "hasVirtualMethods",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Clazz"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode",
    "source_method": "doClazzCached",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Clazz, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.VTable):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode",
    "source_method": "doClazz",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode.ReadLocationNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode",
    "source_method": "doSpecialType",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropSpecialAccessNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropSpecialAccessNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode",
    "source_method": "doKnownType",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode.ReadLocationNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode",
    "source_method": "doUnknownType",
    "target_class": "java.lang.Object, long, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode.ReadLocationNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode.ReadLocationNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode.ReadLocationNode",
    "source_method": "isLocationTypeNullOrSameSize",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType):boolean \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.ValueKind"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode.ReadLocationNode",
    "source_method": "fallback",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.AccessLocation, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode",
    "source_method": "doKnownType",
    "target_class": "java.lang.Object, long, java.lang.Object, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.WriteLocationNode):void \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode",
    "source_method": "doUnknownType",
    "target_class": "java.lang.Object, long, java.lang.Object, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.WriteLocationNode):void \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.WriteLocationNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.WriteLocationNode",
    "source_method": "fallback",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropAccessNode.AccessLocation, java.lang.Object, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType):void \t com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.WriteLocationNode",
    "source_method": "isLocationTypeNullOrSameSize",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType):boolean \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Value"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.ReinterpretLLVMAsLong",
    "source_method": "doI16",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMI16DataEscapeNode):long \t com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMI16DataEscapeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.ReinterpretLLVMAsLong",
    "source_method": "doI32",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMI32DataEscapeNode):long \t com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMI32DataEscapeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.ReinterpretLLVMAsLong",
    "source_method": "doI64",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMI64DataEscapeNode):long \t com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode.LLVMI64DataEscapeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.ConvertOutgoingNode",
    "source_method": "doKnownType",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Value, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.ConvertOutgoingNode",
    "source_method": "typeMismatch",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType):boolean \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode.ConvertOutgoingNode",
    "source_method": "doUnknownType",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Value, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM.ForeignToLLVMType, com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMReadFromForeignObjectNode.ForeignReadI64Node",
    "source_method": "doStructured",
    "target_class": "long, com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropReadNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMWriteToForeignObjectNode.ForeignWriteI8Node",
    "source_method": "doStructured",
    "target_class": "long, byte, com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMWriteToForeignObjectNode.ForeignWriteI16Node",
    "source_method": "doStructured",
    "target_class": "long, short, com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMWriteToForeignObjectNode.ForeignWriteI32Node",
    "source_method": "doStructured",
    "target_class": "long, int, com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMWriteToForeignObjectNode.ForeignWriteFloatNode",
    "source_method": "doStructured",
    "target_class": "long, float, com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMWriteToForeignObjectNode.ForeignWriteDoubleNode",
    "source_method": "doStructured",
    "target_class": "long, double, com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMWriteToForeignObjectNode.ForeignWriteI64Node",
    "source_method": "doStructured",
    "target_class": "long, java.lang.Object, com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropWriteNode):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignDirectSuperElemPtrNode",
    "source_method": "doResolve",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignGetIndexPointerNode",
    "source_method": "doCached",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, long, long, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType, com.oracle.truffle.llvm.runtime.interop.export.BranchProfile):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Array"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignGetMemberPointerNode",
    "source_method": "doCached",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, java.lang.String, java.lang.String, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.StructMember):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignGetMemberPointerNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, java.lang.String, com.oracle.truffle.llvm.runtime.interop.export.BranchProfile):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Struct"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignReadNode",
    "source_method": "doValue",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Value, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.ValueKind, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMOffsetLoadNode, com.oracle.truffle.llvm.runtime.interop.LLVMDataEscapeNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMOffsetLoadNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignVirtualSuperElemPtrNode",
    "source_method": "doResolveOther",
    "target_class": "long, com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignReadNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignVirtualSuperElemPtrNode",
    "source_method": "doResolveWindows",
    "target_class": "long, com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignReadNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.export.LLVMForeignWriteNode",
    "source_method": "doValue",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Value, java.lang.Object, com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.ValueKind, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMOffsetStoreNode, com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM):void \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMOffsetStoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode",
    "source_method": "createToNative",
    "target_class": "com.oracle.truffle.llvm.runtime.types.PrimitiveType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode",
    "source_method": "createFromNative",
    "target_class": "com.oracle.truffle.llvm.runtime.types.PrimitiveType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.memory.LLVMUniquesRegionAllocNode",
    "source_method": "doOp",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMInstrumentableNode",
    "source_method": "getScope",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.api.NodeLibrary):java.lang.Object \t com.oracle.truffle.api.frame.Frame"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMInstrumentableNode",
    "source_method": "isLLDebugEnabled",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMNode",
    "source_method": "nativeCallStatisticsEnabled",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMNode",
    "source_method": "findDataLayout",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMLanguage"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMNode",
    "source_method": "getParent",
    "target_class": "java.lang.Class<T>):T \t com.oracle.truffle.api.instrumentation.InstrumentableNode.WrapperNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode",
    "source_method": "doConvert",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode):com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToPointerNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AddNode.LLVMAMD64AddbNode",
    "source_method": "doI8",
    "target_class": "byte, byte):byte \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AddNode.LLVMAMD64AddwNode",
    "source_method": "doI16",
    "target_class": "short, short):short \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AddNode.LLVMAMD64AddlNode",
    "source_method": "doI32",
    "target_class": "int, int):int \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AddNode.LLVMAMD64AddqNode",
    "source_method": "doI64",
    "target_class": "long, long):long \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AndNode.LLVMAMD64AndbNode",
    "source_method": "doI8",
    "target_class": "byte, byte):byte \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AndNode.LLVMAMD64AndwNode",
    "source_method": "doI16",
    "target_class": "short, short):short \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AndNode.LLVMAMD64AndlNode",
    "source_method": "doI32",
    "target_class": "int, int):int \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64AndNode.LLVMAMD64AndqNode",
    "source_method": "doI64",
    "target_class": "long, long):long \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64CmpNode.LLVMAMD64CmpbNode",
    "source_method": "doOp",
    "target_class": "byte, byte):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPAZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64CmpNode.LLVMAMD64CmpwNode",
    "source_method": "doOp",
    "target_class": "short, short):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPAZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64CmpNode.LLVMAMD64CmplNode",
    "source_method": "doOp",
    "target_class": "int, int):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPAZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64CmpNode.LLVMAMD64CmpqNode",
    "source_method": "doOp",
    "target_class": "long, long):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPAZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64CpuidNode",
    "source_method": "getI8",
    "target_class": "int):byte \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64DecNode.LLVMAMD64DecbNode",
    "source_method": "doI8",
    "target_class": "byte):byte \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64DecNode.LLVMAMD64DecwNode",
    "source_method": "doI16",
    "target_class": "short):short \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64DecNode.LLVMAMD64DeclNode",
    "source_method": "doI32",
    "target_class": "int):int \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64DecNode.LLVMAMD64DecqNode",
    "source_method": "doI64",
    "target_class": "long):long \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64GetRspNode",
    "source_method": "getLLVMStack",
    "target_class": "com.oracle.truffle.llvm.runtime.memory.LLVMStack.LLVMStackAccess"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64ImulNode",
    "source_method": "setFlags",
    "target_class": "byte, boolean, boolean):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteBooleanNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64IncNode.LLVMAMD64IncbNode",
    "source_method": "doI8",
    "target_class": "byte):byte \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64IncNode.LLVMAMD64IncwNode",
    "source_method": "doI16",
    "target_class": "short):short \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64IncNode.LLVMAMD64InclNode",
    "source_method": "doI32",
    "target_class": "int):int \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64IncNode.LLVMAMD64IncqNode",
    "source_method": "doI64",
    "target_class": "long):long \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdatePZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64MulNode",
    "source_method": "setFlags",
    "target_class": "byte, boolean, boolean):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteBooleanNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64NegNode.LLVMAMD64NegbNode",
    "source_method": "doI8",
    "target_class": "byte):byte \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64NegNode.LLVMAMD64NegwNode",
    "source_method": "doI16",
    "target_class": "short):short \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64NegNode.LLVMAMD64NeglNode",
    "source_method": "doI32",
    "target_class": "int):int \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64NegNode.LLVMAMD64NegqNode",
    "source_method": "doI64",
    "target_class": "long):long \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64RepNode",
    "source_method": "doRep",
    "target_class": "com.oracle.truffle.api.nodes.LoopNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64SetFlagNode",
    "source_method": "doSetFlag",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteBooleanNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StosbNode",
    "source_method": "opI8",
    "target_class": "byte, long, boolean):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StosbNode",
    "source_method": "opI8",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, boolean):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StoswNode",
    "source_method": "opI8",
    "target_class": "short, long, boolean):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StoswNode",
    "source_method": "opI8",
    "target_class": "short, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, boolean):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StosdNode",
    "source_method": "opI8",
    "target_class": "int, long, boolean):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StosdNode",
    "source_method": "opI8",
    "target_class": "int, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, boolean):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StosqNode",
    "source_method": "opI8",
    "target_class": "long, long, boolean):void \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64StosNode.LLVMAMD64StosqNode",
    "source_method": "opI8",
    "target_class": "long, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, boolean):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64XaddNode.LLVMAMD64XaddbNode",
    "source_method": "doOp",
    "target_class": "byte, byte):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64XaddNode.LLVMAMD64XaddwNode",
    "source_method": "doOp",
    "target_class": "short, short):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64XaddNode.LLVMAMD64XaddlNode",
    "source_method": "doOp",
    "target_class": "int, int):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.LLVMAMD64XaddNode.LLVMAMD64XaddqNode",
    "source_method": "doOp",
    "target_class": "long, long):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64UpdateFlagsNode.LLVMAMD64UpdateCPZSOFlagsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64AddressComputationNode.LLVMAMD64AddressDisplacementComputationNode",
    "source_method": "doLLVMPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64AddressComputationNode.LLVMAMD64AddressOffsetComputationNode",
    "source_method": "doLLVMPointer",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64AddressComputationNode.LLVMAMD64AddressNoBaseOffsetComputationNode",
    "source_method": "doLLVMNativePointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64AddressComputationNode.LLVMAMD64AddressSegmentComputationNode",
    "source_method": "doLLVMPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64AddressComputationNode.LLVMAMD64AddressSegmentComputationNode",
    "source_method": "doI64",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode",
    "source_method": "doI8",
    "target_class": "int, byte):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64RegisterToLongNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode",
    "source_method": "doI16",
    "target_class": "int, short):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64RegisterToLongNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode",
    "source_method": "doNativePointer",
    "target_class": "int, com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode",
    "source_method": "doMemoryWrite",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode.LLVMAMD64MemWriteNode):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode.LLVMAMD64MemWriteNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode.LLVMAMD64MemWriteNode",
    "source_method": "doI8",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):void \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode.LLVMAMD64MemWriteNode",
    "source_method": "doI16",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):void \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode.LLVMAMD64MemWriteNode",
    "source_method": "doI32",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):void \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteNode.LLVMAMD64MemWriteNode",
    "source_method": "doI64",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):void \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteTupelNode",
    "source_method": "doOp",
    "target_class": "byte, byte):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteTupelNode",
    "source_method": "doOp",
    "target_class": "short, short):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteTupelNode",
    "source_method": "doOp",
    "target_class": "int, int):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteTupelNode",
    "source_method": "doOp",
    "target_class": "long, long):void \t com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode",
    "source_method": "doI8",
    "target_class": "byte):void \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode",
    "source_method": "doI16",
    "target_class": "short):void \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode",
    "source_method": "doI32",
    "target_class": "int):void \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode",
    "source_method": "doI64",
    "target_class": "long):void \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.support.LLVMAMD64WriteValueNode",
    "source_method": "doAddress",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):void \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.syscall.LLVMSyscallNode",
    "source_method": "getNodeName",
    "target_class": "com.oracle.truffle.llvm.runtime.memory.LLVMSyscallOperationNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.syscall.LLVMSyscallNode",
    "source_method": "trace",
    "target_class": "java.lang.Object[]):void \t com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.syscall.LLVMUnsupportedSyscallNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSyscallEntry"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.asm.syscall.posix.LLVMPosixCallNode",
    "source_method": "doCall",
    "target_class": "com.oracle.truffle.llvm.runtime.NativeContextExtension.WellKnownNativeFunctionNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.NativeContextExtension.WellKnownNativeFunctionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo128BitFloatingNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo128BitFloatingNode):com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo128BitFloatingNode.LLVMSignedCastToLLVM128BitFloatNode",
    "source_method": "doLLVM128BitFloatNode",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBitLarge"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo128BitFloatingNode.LLVMUnsignedCastToLLVM128BitFloatNode",
    "source_method": "doLLVM128BitFloatNode",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBitLarge"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode):com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode.LLVMSignedCastToLLVM80BitFloatNode",
    "source_method": "doLLVM80BitFloatNode",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBitLarge"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode.LLVMUnsignedCastToLLVM80BitFloatNode",
    "source_method": "doLLVM80BitFloatNode",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBitLarge"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode.LLVMBitcastToLLVM80BitFloatNode",
    "source_method": "doIVarBit",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBitLarge"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode.LLVMBitcastToLLVM80BitFloatNode",
    "source_method": "doI1Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode.LLVMBitcastToLLVM80BitFloatNode",
    "source_method": "doI8Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMTo80BitFloatingNode.LLVMBitcastToLLVM80BitFloatNode",
    "source_method": "doI16Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode",
    "source_method": "doManagedPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM, com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):double \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode):double \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode",
    "source_method": "isForeignNumber",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode.LLVMSignedCastToDoubleNode",
    "source_method": "doDouble",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode.LLVMSignedCastToDoubleNode",
    "source_method": "doDouble",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode.LLVMBitcastToDoubleNode",
    "source_method": "doI64Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToDoubleNode.LLVMBitcastToDoubleNode",
    "source_method": "doDoubleVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode",
    "source_method": "doManagedPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM, com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):float \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode):float \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode",
    "source_method": "isForeignNumber",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode.LLVMSignedCastToFloatNode",
    "source_method": "doFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode.LLVMSignedCastToFloatNode",
    "source_method": "doFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode.LLVMBitcastToFloatNode",
    "source_method": "doI32Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToFloatNode.LLVMBitcastToFloatNode",
    "source_method": "doFloatVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node",
    "source_method": "doManagedPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode):short \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node",
    "source_method": "doFallbackPointerAsComparable",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue):short \t com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node",
    "source_method": "isForeignNumber",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node.LLVMSignedCastToI16Node",
    "source_method": "doLLVM80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node.LLVMSignedCastToI16Node",
    "source_method": "doI16",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node.LLVMUnsignedCastToI16Node",
    "source_method": "doIVarBit",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node.LLVMUnsignedCastToI16Node",
    "source_method": "doLLVM80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI16Node.LLVMBitcastToI16Node",
    "source_method": "doI16Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI1Node",
    "source_method": "doManagedPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI1Node",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI1Node",
    "source_method": "doFallbackPointerAsComparable",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI1Node",
    "source_method": "isForeignNumber",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI1Node.LLVMSignedCastToI1Node",
    "source_method": "doLLVM80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI1Node.LLVMBitcastToI1Node",
    "source_method": "doI1Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node",
    "source_method": "doManagedPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode):int \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node",
    "source_method": "doFallbackPointerAsComparable",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue):int \t com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node",
    "source_method": "isForeignNumber",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node.LLVMSignedCastToI32Node",
    "source_method": "doI32",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node.LLVMSignedCastToI32Node",
    "source_method": "doI32",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node.LLVMSignedCastToI32Node",
    "source_method": "doI32",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node.LLVMUnsignedCastToI32Node",
    "source_method": "doIVarBit",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node.LLVMUnsignedCastToI32Node",
    "source_method": "doLLVM80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node.LLVMBitcastToI32Node",
    "source_method": "doI32Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI32Node.LLVMBitcastToI32Node",
    "source_method": "doFloatVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node",
    "source_method": "doNative",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMSignedCastToI64Node",
    "source_method": "doI64",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMSignedCastToI64Node",
    "source_method": "doI64",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMSignedCastToI64Node",
    "source_method": "doI64",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMUnsignedCastToI64Node",
    "source_method": "doIVarBit",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMUnsignedCastToI64Node",
    "source_method": "do80LLVMBitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMBitcastToI64Node",
    "source_method": "doI64Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMBitcastToI64Node",
    "source_method": "doDoubleVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMBitcastToI64Node",
    "source_method": "castI1Vector",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMBitcastToI64Node",
    "source_method": "castI8Vector",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMBitcastToI64Node",
    "source_method": "castI16Vector",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMBitcastToI64Node",
    "source_method": "castI32Vector",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI64Node.LLVMBitcastToI64Node",
    "source_method": "castFloatVector",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node",
    "source_method": "doManagedPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.convert.ForeignToLLVM, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode):byte \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node",
    "source_method": "doFallbackPointerAsComparable",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue):byte \t com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node",
    "source_method": "isForeignNumber",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.cast.InteropLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node.LLVMSignedCastToI8Node",
    "source_method": "doI8",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node.LLVMSignedCastToI8Node",
    "source_method": "doI8",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node.LLVMUnsignedCastToI8Node",
    "source_method": "doIVarBit",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node.LLVMUnsignedCastToI8Node",
    "source_method": "doLLVM80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToI8Node.LLVMBitcastToI8Node",
    "source_method": "doI8Vector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToVarINode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToVarINode):com.oracle.truffle.llvm.runtime.LLVMIVarBit \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.cast.LLVMToVectorNode.LLVMBitcastToI8VectorNode",
    "source_method": "do80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.control.LLVMDispatchBasicBlockNode",
    "source_method": "dispatchFromBasicBlock",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.control.LLVMDispatchBasicBlockNode.Counters):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.base.LLVMBasicBlockNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.control.LLVMDispatchBasicBlockNode",
    "source_method": "ensureAllFrameSlotsInitialized",
    "target_class": "com.oracle.truffle.api.frame.FrameSlotKind"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.control.LLVMDispatchBasicBlockNode",
    "source_method": "executePhis",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMControlFlowNode, int):void \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMControlFlowNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.control.LLVMDispatchBasicBlockNode",
    "source_method": "nullDeadSlots",
    "target_class": "int[]):void \t com.oracle.truffle.llvm.runtime.nodes.base.LLVMFrameNullerUtil"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.control.LLVMDispatchBasicBlockNode",
    "source_method": "noPhisNecessary",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMControlFlowNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.control.LLVMIndirectBranchNode.LLVMIndirectBranchNodeImpl",
    "source_method": "doCondition",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.control.LLVMRetNode.LLVMStructRetNode",
    "source_method": "returnStruct",
    "target_class": "java.lang.Object):java.lang.Object \t com.oracle.truffle.llvm.runtime.memory.LLVMMemMoveNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMCallNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode[], boolean, boolean):com.oracle.truffle.llvm.runtime.nodes.func.LLVMCallNode \t com.oracle.truffle.llvm.runtime.nodes.others.LLVMAccessSymbolNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMCatchSwitchNode.CatchPadEntryNode",
    "source_method": "doExecute",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, long, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):boolean \t com.oracle.truffle.llvm.runtime.LLVMBitcodeLibraryFunctions.SulongEHCopyWindowsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "createCallNode",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMFunctionCode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doDirectCodeFast",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionCode, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doIndirectCode",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionCode.ResolveFunctionNode, com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.LLVMFunctionCode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doDirectFunction",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionDescriptor, com.oracle.truffle.llvm.runtime.LLVMFunctionCode, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doDirectCode",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionCode, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doIndirect",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionCode.ResolveFunctionNode, com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.LLVMFunctionDescriptor"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doIndirectIntrinsic",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionCode.ResolveFunctionNode, com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.LLVMFunctionDescriptor"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doCachedNativeFunction",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionDescriptor, com.oracle.truffle.llvm.runtime.LLVMFunctionCode, com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode[], com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode, java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.func.InteropLibrary, boolean):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doCachedNativeCode",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.LLVMFunctionCode, com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode[], com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode, java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.func.InteropLibrary, boolean):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doBind",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMFunctionCode, com.oracle.truffle.api.source.Source):java.lang.Object \t com.oracle.truffle.llvm.runtime.NativeContextExtension"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doNative",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode[], com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode, com.oracle.truffle.llvm.runtime.nodes.func.InteropLibrary, com.oracle.truffle.llvm.runtime.LLVMFunctionCode.ResolveFunctionNode, boolean):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "isPointerReturnType",
    "target_class": "com.oracle.truffle.llvm.runtime.types.FunctionType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "prepareNativeArguments",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode[]):java.lang.Object[] \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "createToNativeNodes",
    "target_class": "com.oracle.truffle.llvm.runtime.types.FunctionType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "createFromNativeNode",
    "target_class": "com.oracle.truffle.llvm.runtime.types.FunctionType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode",
    "source_method": "doNativeFunction",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.nodes.func.LLVMNativeDispatchNode, com.oracle.truffle.llvm.runtime.nodes.func.BranchProfile):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.func.LLVMNativeDispatchNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode.LLVMLookupDispatchForeignNode",
    "source_method": "createToLLVMNode",
    "target_class": "com.oracle.truffle.llvm.runtime.types.FunctionType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMDispatchNode.LLVMLookupDispatchForeignNode",
    "source_method": "createLLVMDataEscapeNodes",
    "target_class": "com.oracle.truffle.llvm.runtime.types.FunctionType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMFunctionStartNode",
    "source_method": "customPrepareForAOT",
    "target_class": "com.oracle.truffle.api.nodes.NodeUtil"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMGlobalRootNode",
    "source_method": "executeWithoutFrame",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMGlobalRootNode",
    "source_method": "getMainFunctionType",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMFunction"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMInvokeNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMWriteNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode[], int, int, com.oracle.truffle.llvm.runtime.nodes.api.LLVMStatementNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMStatementNode):com.oracle.truffle.llvm.runtime.nodes.func.LLVMInvokeNode \t com.oracle.truffle.llvm.runtime.nodes.func.LLVMLookupDispatchTargetNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMInvokeNode.LLVMInvokeNodeImpl",
    "source_method": "doInvoke",
    "target_class": "java.lang.Object):void \t com.oracle.truffle.llvm.runtime.nodes.vars.LLVMWriteNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMLandingpadNode.LandingpadCatchEntryNode",
    "source_method": "getIdentifier",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):int \t com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMLandingpadNode.LandingpadFilterEntryNode",
    "source_method": "filterMatches",
    "target_class": "com.oracle.truffle.llvm.runtime.memory.LLVMStack, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMLookupDispatchTargetNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMLookupDispatchTargetNode",
    "source_method": "doLookupNativeFunctionCachedSymbol",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer, com.oracle.truffle.llvm.runtime.nodes.others.LLVMAccessGlobalSymbolNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.LLVMFunctionDescriptor"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMLookupDispatchTargetNode",
    "source_method": "doDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMLookupDispatchTargetNode",
    "source_method": "createOptimized",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.others.LLVMAccessSymbolNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMNativeDispatchNode",
    "source_method": "createToNativeNodes",
    "target_class": "com.oracle.truffle.llvm.runtime.types.FunctionType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMNativeDispatchNode",
    "source_method": "createFromNativeNode",
    "target_class": "com.oracle.truffle.llvm.runtime.types.FunctionType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMNativeDispatchNode",
    "source_method": "prepareNativeArguments",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode[]):java.lang.Object[] \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMNativeDispatchNode",
    "source_method": "doCached",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer, java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.func.InteropLibrary, com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode[], com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode, boolean):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMNativeDispatchNode",
    "source_method": "doGenericSingleContext",
    "target_class": "java.lang.Object[], com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode[], com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode, java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.func.SignatureLibrary, boolean):java.lang.Object \t com.oracle.truffle.llvm.runtime.interop.nfi.LLVMNativeConvertNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMPrepareArgumentNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.func.LLVMTypeIdForExceptionNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsDateNode",
    "source_method": "instantAsDate",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsInstantNode, com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsTimeZoneNode):java.time.LocalDate \t com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsInstantNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsTimeNode",
    "source_method": "instantAsTime",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsInstantNode, com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsTimeZoneNode):java.time.LocalTime \t com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotAsDateTimeNode.LLVMPolyglotAsInstantNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotFromBufferNode",
    "source_method": "doAsBuffer",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMPolyglotTimeZoneGetIdNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.LLVMAsForeignNode, com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.BranchProfile, com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.InteropLibrary):com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer \t com.oracle.truffle.llvm.runtime.interop.LLVMAsForeignNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadCharsetNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadStringNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadStringNode",
    "source_method": "readString",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadStringNode",
    "source_method": "readForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadStringNode.ForeignReadStringNode):java.lang.String \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadStringNode",
    "source_method": "readOther",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadStringNode.PointerReadStringNode):java.lang.String \t com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.LLVMReadStringNode.PointerReadStringNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.interop.typed.LLVMArrayTypeIDNode",
    "source_method": "doArray",
    "target_class": "long):com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Array \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.bit.CountLeadingZeroesNode",
    "source_method": "getFactory",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.LLVMBuiltin.TypedBuiltinFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.bit.CountSetBitsNode",
    "source_method": "getFactory",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.LLVMBuiltin.TypedBuiltinFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.bit.CountTrailingZeroesNode",
    "source_method": "getFactory",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.LLVMBuiltin.TypedBuiltinFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.debug.LLVMToDebugValueNode",
    "source_method": "fromGlobalContainer",
    "target_class": "com.oracle.truffle.llvm.runtime.global.LLVMGlobalContainer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_ComparisonNode.LLVMX86_Cmpss",
    "source_method": "doIntrinsic",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector, byte):com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_ConversionNode.LLVMX86_ConversionFloatToIntNode",
    "source_method": "doIntrinsic",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_ConversionNode.LLVMX86_ConversionDoubleToIntNode",
    "source_method": "doIntrinsic",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_ConversionNode.LLVMX86_Pmovmskb128",
    "source_method": "doIntrinsic128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_ConversionNode.LLVMX86_Movmskpd",
    "source_method": "doIntrinsic",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorSquareRootNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorMaxNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector):com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorMaxsdNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector):com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorMinNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector):com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorMinsdNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector):com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_SSE_VectorMaxNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector):com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_SSE_VectorMaxsdNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector):com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_SSE_VectorMinNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector):com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_SSE_VectorMinsdNode",
    "source_method": "doM128",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector):com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorCmpNode",
    "source_method": "getComparator",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorCmpNode.Comparator"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorCmpNode",
    "source_method": "compare",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector, com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.x86.LLVMX86_VectorMathNode.LLVMX86_VectorCmpNode.Comparator):com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.literals.LLVMSimpleLiteralNode.LLVMIVarBitLiteralNode",
    "source_method": "doIVarBit",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.literals.LLVMSimpleLiteralNode.LLVMManagedPointerLiteralNode",
    "source_method": "doManagedPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.types.AggregateType, com.oracle.truffle.llvm.runtime.datalayout.DataLayout, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode):com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode \t com.oracle.truffle.llvm.runtime.types.AggregateType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.AllocResultNode",
    "source_method": "doByte",
    "target_class": "byte, boolean, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode.LLVMI8OffsetStoreNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.AllocResultNode",
    "source_method": "doShort",
    "target_class": "short, boolean, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode.LLVMI16OffsetStoreNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.AllocResultNode",
    "source_method": "doInt",
    "target_class": "int, boolean, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode.LLVMI32OffsetStoreNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.AllocResultNode",
    "source_method": "doLong",
    "target_class": "long, boolean, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode.LLVMI64OffsetStoreNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.AllocResultNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, boolean, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode.LLVMPointerOffsetStoreNode):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode.LLVMPointerOffsetStoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.LLVMCMPXCHInternalNode",
    "source_method": "doOp",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer, com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer, com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.LLVMCMPXCHInternalNode",
    "source_method": "doOp",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, byte, byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.LLVMCMPXCHInternalNode",
    "source_method": "doOp",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, short, short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.LLVMCMPXCHInternalNode",
    "source_method": "doOp",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, int, int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.LLVMCMPXCHInternalNode",
    "source_method": "doLong",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, long, long, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.LLVMCMPXCHInternalNode",
    "source_method": "doLongGeneric",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, long, long, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMCompareExchangeNode.LLVMCMPXCHInternalNode",
    "source_method": "doOp",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMPointerLoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMGetElementPtrNode",
    "source_method": "isNegated",
    "target_class": "java.lang.Object):boolean \t com.oracle.truffle.llvm.runtime.interop.LLVMNegatedForeignObject"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMGetElementPtrNode",
    "source_method": "doPointerDiff",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMGetElementPtrNode",
    "source_method": "doPointerDiffRev",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMGetElementPtrNode",
    "source_method": "doInt",
    "target_class": "int):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMGetElementPtrNode",
    "source_method": "doLong",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMGetElementPtrNode",
    "source_method": "doNativePointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativeVarargsAreaStackAllocationNode",
    "source_method": "alloc",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.memory.LLVMStack.LLVMAllocaInstruction"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMUnpackVarargsNode",
    "source_method": "byValue",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMVarArgCompoundValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMVectorizedGetElementPtrNode",
    "source_method": "doLong",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector):com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector \t com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMVectorizedGetElementPtrNode.IndexVectorBroadcastNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode):com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode \t com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadHelperNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode",
    "source_method": "createSlowPath",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode \t com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadHelperNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode",
    "source_method": "moveUnitLong",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, int):long \t com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadHelperNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode",
    "source_method": "moveUnitGeneric",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, int):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadHelperNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadHelperNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadI8",
    "source_method": "doDefault",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadI16",
    "source_method": "doManaged",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadI32",
    "source_method": "doManaged",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadI64",
    "source_method": "doLong",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemReadI64",
    "source_method": "doGeneric",
    "target_class": "int):java.lang.Object \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemWriteHelperNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemWriteNative",
    "source_method": "asPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport):long \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemWriteI8",
    "source_method": "doManaged",
    "target_class": "long, int):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemWriteI16",
    "source_method": "doManaged",
    "target_class": "long, int):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemWriteI32",
    "source_method": "doManaged",
    "target_class": "long, int):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemWriteI64",
    "source_method": "doLong",
    "target_class": "long, int):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.ManagedMemMoveHelperNode.MemWriteI64",
    "source_method": "doManaged",
    "target_class": "java.lang.Object, int):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.NativeMemSetNode",
    "source_method": "getAccessLength",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.memory.NativeTypeLibrary):long \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.NativeMemSetNode",
    "source_method": "findMember",
    "target_class": "long):com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.StructMember \t com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Struct"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.NativeMemSetNode",
    "source_method": "memsetManagedI8",
    "target_class": "byte, long, com.oracle.truffle.llvm.runtime.nodes.memory.NativeTypeLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.NativeMemSetNode",
    "source_method": "memsetManagedI16",
    "target_class": "byte, long, com.oracle.truffle.llvm.runtime.nodes.memory.NativeTypeLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.NativeMemSetNode",
    "source_method": "memsetManagedI32",
    "target_class": "byte, long, com.oracle.truffle.llvm.runtime.nodes.memory.NativeTypeLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.NativeMemSetNode",
    "source_method": "memsetManagedI64",
    "target_class": "byte, long, com.oracle.truffle.llvm.runtime.nodes.memory.NativeTypeLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.literal.LLVMI8ArrayLiteralNode",
    "source_method": "foreignWrite",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode.LLVMI8OffsetStoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.literal.LLVMStructArrayLiteralNode",
    "source_method": "noOffset",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVM80BitFloatLoadNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDoubleLoadNode.LLVMDoubleOffsetLoadNode",
    "source_method": "doDoubleDerefHandle",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):double \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDoubleLoadNode.LLVMDoubleOffsetLoadNode",
    "source_method": "doDoubleManaged",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):double \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDoubleLoadNode",
    "source_method": "doDoubleDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):double \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDoubleLoadNode",
    "source_method": "doDoubleManaged",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):double \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMFloatLoadNode.LLVMFloatOffsetLoadNode",
    "source_method": "doFloatManaged",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):float \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMFloatLoadNode",
    "source_method": "doFloatManaged",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):float \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode.LLVMI16OffsetLoadNode",
    "source_method": "doShortManaged",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):short \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode",
    "source_method": "doShortManaged",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):short \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode.LLVMI1OffsetLoadNode",
    "source_method": "doI1Managed",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode",
    "source_method": "doI1Managed",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode.LLVMI32OffsetLoadNode",
    "source_method": "doI32Managed",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):int \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode",
    "source_method": "doI32Managed",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):int \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode.LLVMI64OffsetLoadNode",
    "source_method": "doI64Managed",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):long \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode.LLVMI64OffsetLoadNode",
    "source_method": "doGenericI64Managed",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode",
    "source_method": "doI64Managed",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):long \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode",
    "source_method": "doGenericI64Managed",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode.LLVMI8OffsetLoadNode",
    "source_method": "doI8Managed",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):byte \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode",
    "source_method": "doI8Managed",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):byte \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMIVarBitLoadNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):com.oracle.truffle.llvm.runtime.LLVMIVarBit \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI8VectorNode",
    "source_method": "doI8VectorDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI8VectorNode):com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI16VectorNode",
    "source_method": "doI16VectorDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI16VectorNode):com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI32VectorNode",
    "source_method": "doI32VectorDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI32VectorNode):com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI64VectorNode",
    "source_method": "doI64VectorDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI64VectorNode):com.oracle.truffle.llvm.runtime.vector.LLVMVector \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadI64VectorNode",
    "source_method": "doPointerVector",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadPointerVectorNode):com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadPointerVectorNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadPointerVectorNode",
    "source_method": "doPointerVectorDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadPointerVectorNode):com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadDoubleVectorNode",
    "source_method": "doDoubleVector",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMLoadVectorNode.LLVMLoadDoubleVectorNode):com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMOffsetLoadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.CommonNodeFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMOffsetLoadNode",
    "source_method": "getUncached",
    "target_class": "com.oracle.truffle.llvm.runtime.CommonNodeFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMPointerLoadNode.LLVMPointerOffsetLoadNode",
    "source_method": "doIndirectedForeign",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMPointerLoadNode",
    "source_method": "doIndirectedForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedReadLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode",
    "source_method": "moveNormalDir",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, boolean):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode",
    "source_method": "moveReverseDir",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, boolean):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode",
    "source_method": "createSerialMoves",
    "target_class": "com.oracle.truffle.llvm.runtime.NodeFactory, com.oracle.truffle.llvm.runtime.memory.LLVMMemMoveNode):com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode \t com.oracle.truffle.llvm.runtime.nodes.literals.LLVMSimpleLiteralNode.LLVMI64LiteralNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode",
    "source_method": "createScalarMemMoveSeries",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.NodeFactory, long, com.oracle.truffle.llvm.runtime.memory.LLVMMemMoveNode):com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode \t com.oracle.truffle.llvm.runtime.types.Type"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode.HeadNode",
    "source_method": "useMemMoveIntrinsic",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode.HeadNode",
    "source_method": "copyDirection",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode.HeadNode",
    "source_method": "customCopy",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.library.internal.LLVMCopyTargetLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.library.internal.LLVMCopyTargetLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode.HeadNode",
    "source_method": "delegateToMemMove",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.library.internal.LLVMCopyTargetLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.memory.LLVMMemMoveNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode.HeadNode",
    "source_method": "primitiveMoveInForwardDir",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.library.internal.LLVMCopyTargetLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.move.LLVMPrimitiveMoveNode.HeadNode",
    "source_method": "primitiveMoveInBackwardDir",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.library.internal.LLVMCopyTargetLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI16RMWNode.LLVMI16RMWXchgNode",
    "source_method": "doOp",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI16RMWNode.LLVMI16RMWAddNode",
    "source_method": "doOp",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI16RMWNode.LLVMI16RMWSubNode",
    "source_method": "doOp",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI16RMWNode.LLVMI16RMWAndNode",
    "source_method": "doOp",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI16RMWNode.LLVMI16RMWNandNode",
    "source_method": "doOp",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI16RMWNode.LLVMI16RMWOrNode",
    "source_method": "doOp",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI16RMWNode.LLVMI16RMWXorNode",
    "source_method": "doOp",
    "target_class": "short, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI16LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode):short \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI1RMWNode.LLVMI1RMWXchgNode",
    "source_method": "doOp",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI1RMWNode.LLVMI1RMWAddNode",
    "source_method": "doOp",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI1RMWNode.LLVMI1RMWSubNode",
    "source_method": "doOp",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI1RMWNode.LLVMI1RMWAndNode",
    "source_method": "doOp",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI1RMWNode.LLVMI1RMWNandNode",
    "source_method": "doOp",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI1RMWNode.LLVMI1RMWOrNode",
    "source_method": "doOp",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI1RMWNode.LLVMI1RMWXorNode",
    "source_method": "doOp",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI1LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI32RMWNode.LLVMI32RMWXchgNode",
    "source_method": "doOp",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI32RMWNode.LLVMI32RMWAddNode",
    "source_method": "doOp",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI32RMWNode.LLVMI32RMWSubNode",
    "source_method": "doOp",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI32RMWNode.LLVMI32RMWAndNode",
    "source_method": "doOp",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI32RMWNode.LLVMI32RMWNandNode",
    "source_method": "doOp",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI32RMWNode.LLVMI32RMWOrNode",
    "source_method": "doOp",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI32RMWNode.LLVMI32RMWXorNode",
    "source_method": "doOp",
    "target_class": "int, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI32LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode):int \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI64RMWNode.LLVMI64RMWXchgNode",
    "source_method": "doOp",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI64RMWNode.LLVMI64RMWAddNode",
    "source_method": "doOp",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI64RMWNode.LLVMI64RMWSubNode",
    "source_method": "doOp",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI64RMWNode.LLVMI64RMWAndNode",
    "source_method": "doOp",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI64RMWNode.LLVMI64RMWNandNode",
    "source_method": "doOp",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI64RMWNode.LLVMI64RMWOrNode",
    "source_method": "doOp",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI64RMWNode.LLVMI64RMWXorNode",
    "source_method": "doOp",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI64LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI8RMWNode.LLVMI8RMWXchgNode",
    "source_method": "doOp",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI8RMWNode.LLVMI8RMWAddNode",
    "source_method": "doOp",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI8RMWNode.LLVMI8RMWSubNode",
    "source_method": "doOp",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI8RMWNode.LLVMI8RMWAndNode",
    "source_method": "doOp",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI8RMWNode.LLVMI8RMWNandNode",
    "source_method": "doOp",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI8RMWNode.LLVMI8RMWOrNode",
    "source_method": "doOp",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.rmw.LLVMI8RMWNode.LLVMI8RMWXorNode",
    "source_method": "doOp",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMI8LoadNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode):byte \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode.LLVMPointerOffsetStoreNode):void \t com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode.LLVMPointerOffsetStoreNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStoreVectorNode",
    "source_method": "writeVector",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVM128BitFloatStoreNode.LLVM128BitFloatOffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVM128BitFloatStoreNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVM80BitFloatStoreNode.LLVM80BitFloatOffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVM80BitFloatStoreNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMDoubleStoreNode.LLVMDoubleOffsetStoreNode",
    "source_method": "doOpDerefHandle",
    "target_class": "long, double, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMDoubleStoreNode.LLVMDoubleOffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, double, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMDoubleStoreNode",
    "source_method": "doOpDerefHandle",
    "target_class": "double, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMDoubleStoreNode",
    "source_method": "doOpManaged",
    "target_class": "double, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMFloatStoreNode.LLVMFloatOffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, float, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMFloatStoreNode",
    "source_method": "doOpManaged",
    "target_class": "float, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode.LLVMI16OffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, short, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI16StoreNode",
    "source_method": "doOpManaged",
    "target_class": "short, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode.LLVMI1OffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, boolean, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI1StoreNode",
    "source_method": "doOpManaged",
    "target_class": "boolean, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode.LLVMI32OffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, int, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI32StoreNode",
    "source_method": "doOpManaged",
    "target_class": "int, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode.LLVMI64OffsetStoreNode",
    "source_method": "doOpManagedI64",
    "target_class": "long, long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode.LLVMI64OffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, java.lang.Object, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode",
    "source_method": "doOpManagedI64",
    "target_class": "long, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode",
    "source_method": "doOpManaged",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode.LLVMI8OffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, byte, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode",
    "source_method": "doOpManaged",
    "target_class": "byte, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMIVarBitStoreNode.LLVMIVarBitOffsetStoreNode",
    "source_method": "doOpManaged",
    "target_class": "long, com.oracle.truffle.llvm.runtime.LLVMIVarBit, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMIVarBitStoreNode",
    "source_method": "doOpManaged",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMOffsetStoreNode.LLVMGenericOffsetStoreNode",
    "source_method": "doOp",
    "target_class": "long, java.lang.Object):void \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMOffsetStoreNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.CommonNodeFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMOffsetStoreNode",
    "source_method": "getUncached",
    "target_class": "com.oracle.truffle.llvm.runtime.CommonNodeFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode.LLVMPointerOffsetStoreNode",
    "source_method": "doDerefAddress",
    "target_class": "long, java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode.LLVMPointerOffsetStoreNode",
    "source_method": "doManaged",
    "target_class": "long, java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToPointerNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode",
    "source_method": "doDerefAddress",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMPointerStoreNode",
    "source_method": "doManaged",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToPointerNode, com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary):void \t com.oracle.truffle.llvm.runtime.library.internal.LLVMManagedWriteLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStructStoreNode",
    "source_method": "doOp",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):void \t com.oracle.truffle.llvm.runtime.memory.LLVMMemMoveNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStructStoreNode",
    "source_method": "doOpDerefHandle",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer, com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode):void \t com.oracle.truffle.llvm.runtime.nodes.memory.load.LLVMDerefHandleGetReceiverNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStructStoreNode",
    "source_method": "doManaged",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer):void \t com.oracle.truffle.llvm.runtime.memory.LLVMMemMoveNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMStructStoreNode",
    "source_method": "doConvert",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode):void \t com.oracle.truffle.llvm.runtime.nodes.api.LLVMToNativeNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMInsertValueNode",
    "source_method": "doLLVMPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, java.lang.Object):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.Operation",
    "source_method": "doCompare",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.Operation",
    "source_method": "doCompare",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode",
    "source_method": "doCompare",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode",
    "source_method": "doCompare",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode",
    "source_method": "doPointerPointer",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport):boolean \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode",
    "source_method": "doOther",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport, com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMManagedEqualsNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMManagedEqualsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMManagedEqualsNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode",
    "source_method": "canDoManaged",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMArithmeticOp"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.PointerToI64Node",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode):long \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.PointerToI64Node",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode):com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode \t com.oracle.truffle.llvm.runtime.ArithmeticOperation"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode",
    "source_method": "doManagedLeftLong",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode):long \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode",
    "source_method": "doManagedLeft",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode",
    "source_method": "doManagedRightLong",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode):long \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode",
    "source_method": "doManagedRight",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedArithmeticNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode",
    "source_method": "doPointerRight",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode):long \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMArithmeticOp"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMAbstractI64ArithmeticNode",
    "source_method": "doPointerLeft",
    "target_class": "long, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode):long \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMArithmeticOp"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMI64ArithmeticNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode):long \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMArithmeticOp"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMI64SubNode",
    "source_method": "doSameObjectLong",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMI64SubNode",
    "source_method": "doNotSameObject",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode):long \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.ToNativePointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMFP80ArithmeticNode",
    "source_method": "do80BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat, com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode):com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleFloatingPoint \t com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.LLVMFP128ArithmeticNode",
    "source_method": "do128BitFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat, com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode):com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleFloatingPoint \t com.oracle.truffle.llvm.runtime.floating.LLVMLongDoubleNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedMulNode",
    "source_method": "doNegate",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedSubNode",
    "source_method": "doLeft",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedAndNode",
    "source_method": "doAlign",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMArithmeticNode.ManagedAndNode",
    "source_method": "doMask",
    "target_class": "long):long \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMEqNode",
    "source_method": "eqPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMEqNode",
    "source_method": "eq",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit):boolean \t com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMNeNode",
    "source_method": "nqPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer, com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAddressEqualsNode.LLVMPointerEqualsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMNeNode",
    "source_method": "nq",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit):boolean \t com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMSignedLtNode",
    "source_method": "slt",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit):boolean \t com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMSignedLeNode",
    "source_method": "sle",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit):boolean \t com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnsignedLtNode",
    "source_method": "ult",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit):boolean \t com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnsignedLeNode",
    "source_method": "ule",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMIVarBit):boolean \t com.oracle.truffle.llvm.runtime.LLVMIVarBit"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedLtNode",
    "source_method": "olt",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedLtNode",
    "source_method": "olt",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedGtNode",
    "source_method": "ogt",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedGtNode",
    "source_method": "ogt",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedGeNode",
    "source_method": "oge",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedGeNode",
    "source_method": "oge",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedLeNode",
    "source_method": "ole",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedLeNode",
    "source_method": "ole",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedEqNode",
    "source_method": "oeq",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedEqNode",
    "source_method": "oeq",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedNeNode",
    "source_method": "one",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedNeNode",
    "source_method": "one",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedNode",
    "source_method": "ord",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMOrderedNode",
    "source_method": "ord",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedLtNode",
    "source_method": "ult",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedLtNode",
    "source_method": "ult",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedLeNode",
    "source_method": "ule",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedLeNode",
    "source_method": "ule",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedGtNode",
    "source_method": "ugt",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedGtNode",
    "source_method": "ugt",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedGeNode",
    "source_method": "uge",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedGeNode",
    "source_method": "uge",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedEqNode",
    "source_method": "ueq",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedEqNode",
    "source_method": "ueq",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedNeNode",
    "source_method": "une",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedNeNode",
    "source_method": "une",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedNode",
    "source_method": "uno",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM80BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMCompareNode.LLVMUnorderedNode",
    "source_method": "uno",
    "target_class": "com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat):boolean \t com.oracle.truffle.llvm.runtime.floating.LLVM128BitFloat"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode",
    "source_method": "getFshlFactory",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.LLVMBuiltin.TypedBuiltinFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode",
    "source_method": "getFshrFactory",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.llvm.LLVMBuiltin.TypedBuiltinFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshl_I8Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshl_I16Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshl_I32Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshl_I64Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshr_I8Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshr_I16Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshr_I32Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMFunnelShiftNode.Fshr_I64Vector",
    "source_method": "doFshl",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector, com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode",
    "source_method": "doCompare",
    "target_class": "long):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.NativePointerCompare"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode",
    "source_method": "doCompare",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMNativePointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode",
    "source_method": "doPointerPointer",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode",
    "source_method": "doOther",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMManagedCompareNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMManagedCompareNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode, com.oracle.truffle.llvm.runtime.nodes.api.LLVMExpressionNode):com.oracle.truffle.llvm.runtime.nodes.op.LLVMAbstractCompareNode \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMNegateNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMManagedCompareNode",
    "source_method": "doForeignSameObject",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.NativePointerCompare, com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode):boolean \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMManagedCompareNode",
    "source_method": "doForeignDifferentObjects",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.NativePointerCompare, com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue.ManagedToComparableValue, com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue.ManagedToComparableValue, com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode):boolean \t com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue.ManagedToComparableValue"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMManagedCompareNode",
    "source_method": "doNativeManaged",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.NativePointerCompare, com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue.ManagedToComparableValue):boolean \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMManagedCompareNode",
    "source_method": "doManagedNative",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.NativePointerCompare, com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue.ManagedToComparableValue):boolean \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.LLVMManagedCompareNode",
    "source_method": "doManagedNativeException",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.IsPointerNode, com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode, com.oracle.truffle.llvm.runtime.nodes.op.LLVMPointerCompareNode.NativePointerCompare, com.oracle.truffle.llvm.runtime.nodes.op.ToComparableValue.ManagedToComparableValue):boolean \t com.oracle.truffle.llvm.runtime.nodes.memory.LLVMNativePointerSupport.AsPointerNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "checkLength",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMVector):boolean \t com.oracle.truffle.llvm.runtime.vector.LLVMVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doI1",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAbstractCompareNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doI8",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAbstractCompareNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doI16",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAbstractCompareNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doI32",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAbstractCompareNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doI64",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.nodes.op.LLVMAbstractCompareNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doI64AndPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doI64AndPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doDouble",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.op.LLVMVectorCompareNode",
    "source_method": "doFloat",
    "target_class": "com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector):com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.others.LLVMAccessSymbolNode",
    "source_method": "notFound",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.others.LLVMDynAccessSymbolNode",
    "source_method": "notFound",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode",
    "source_method": "doForeign",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode.CompareForeignNode):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.util.LLVMSameObjectNode",
    "source_method": "fallbackGuard",
    "target_class": "java.lang.Object, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary):boolean \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.AggregateLiteralInPlaceNode",
    "source_method": "initializePrimitiveBlock",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI8StoreNode.LLVMI8OffsetStoreNode, com.oracle.truffle.llvm.runtime.nodes.memory.store.LLVMI64StoreNode.LLVMI64OffsetStoreNode, int, int, int):int \t com.oracle.truffle.api.memory.ByteArraySupport"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMI1ReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMI8ReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMI16ReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMI32ReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMIReadVarBitNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMFloatReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMDoubleReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVM80BitFloatReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVM128BitFloatReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMObjectReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.AttachInteropTypeNode",
    "source_method": "doForeign",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.ForeignAttachInteropTypeNode):java.lang.Object \t com.oracle.truffle.llvm.runtime.pointer.LLVMManagedPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.ForeignAttachInteropTypeNode",
    "source_method": "doForeignNoNativeType",
    "target_class": "com.oracle.truffle.llvm.runtime.interop.access.LLVMInteropType.Structured, com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary, com.oracle.truffle.llvm.runtime.nodes.vars.NativeTypeLibrary):java.lang.Object \t com.oracle.truffle.llvm.runtime.library.internal.LLVMAsForeignLibrary"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.LLVMDebugReadNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.vars.LLVMReadNode.IndexedSlotCache"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI1ExtractElementNode",
    "source_method": "doI1",
    "target_class": "int):boolean \t com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI1ExtractElementNode",
    "source_method": "doI1",
    "target_class": "long):boolean \t com.oracle.truffle.llvm.runtime.vector.LLVMI1Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI8ExtractElementNode",
    "source_method": "doI8",
    "target_class": "int):byte \t com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI8ExtractElementNode",
    "source_method": "doI8",
    "target_class": "long):byte \t com.oracle.truffle.llvm.runtime.vector.LLVMI8Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI16ExtractElementNode",
    "source_method": "doI16",
    "target_class": "int):short \t com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI16ExtractElementNode",
    "source_method": "doI16",
    "target_class": "long):short \t com.oracle.truffle.llvm.runtime.vector.LLVMI16Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI32ExtractElementNode",
    "source_method": "doI32",
    "target_class": "int):int \t com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI32ExtractElementNode",
    "source_method": "doI32",
    "target_class": "long):int \t com.oracle.truffle.llvm.runtime.vector.LLVMI32Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI64ExtractElementNode",
    "source_method": "doI64",
    "target_class": "int):long \t com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI64ExtractElementNode",
    "source_method": "doI64",
    "target_class": "long):long \t com.oracle.truffle.llvm.runtime.vector.LLVMI64Vector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI64ExtractElementNode",
    "source_method": "doPointer",
    "target_class": "int):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMI64ExtractElementNode",
    "source_method": "doPointer",
    "target_class": "long):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.vector.LLVMPointerVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMFloatExtractElementNode",
    "source_method": "doFloat",
    "target_class": "int):float \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMFloatExtractElementNode",
    "source_method": "doFloat",
    "target_class": "long):float \t com.oracle.truffle.llvm.runtime.vector.LLVMFloatVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMDoubleExtractElementNode",
    "source_method": "doDouble",
    "target_class": "int):double \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.runtime.nodes.vector.LLVMExtractElementNode.LLVMDoubleExtractElementNode",
    "source_method": "doDouble",
    "target_class": "long):double \t com.oracle.truffle.llvm.runtime.vector.LLVMDoubleVector"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.AllocExternalSymbolNode",
    "source_method": "getNativeFunction",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol):com.oracle.truffle.llvm.runtime.NativeContextExtension.NativeLookupResult \t com.oracle.truffle.llvm.runtime.LLVMSymbol"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.AllocExternalSymbolNode",
    "source_method": "getNativePointer",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol):com.oracle.truffle.llvm.runtime.NativeContextExtension.NativePointerIntoLibrary \t com.oracle.truffle.llvm.runtime.NativeContextExtension"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.AllocExternalSymbolNode",
    "source_method": "lookupFromScope",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol, com.oracle.truffle.llvm.runtime.LLVMContext):com.oracle.truffle.llvm.runtime.pointer.LLVMPointer \t com.oracle.truffle.llvm.runtime.LLVMScopeChain"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.AllocExternalSymbolNode",
    "source_method": "isDefaultFlagActive",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.c.LLVMDLOpen.RTLDFlags"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitObjcSelectorsNode",
    "source_method": "getNativeContextExtension",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeExternalNode",
    "source_method": "getNativeContextExtension",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeGlobalNode",
    "source_method": "execute",
    "target_class": "com.oracle.truffle.llvm.initialization.Pair<com.oracle.truffle.llvm.runtime.pointer.LLVMPointer,java.lang.Long>):void \t com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeGlobalNode.Buffer",
    "source_method": "createTLGlobalNode",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol[], boolean, com.oracle.truffle.llvm.runtime.nodes.api.LLVMNode, com.oracle.truffle.llvm.initialization.DataSectionFactory):com.oracle.truffle.llvm.runtime.nodes.vars.AggregateTLGlobalInPlaceNode \t com.oracle.truffle.llvm.initialization.DataSectionFactory"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeGlobalsBlockNode",
    "source_method": "getRoSectionPointer",
    "target_class": "com.oracle.truffle.llvm.runtime.pointer.LLVMPointer"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeGlobalsBlockNode",
    "source_method": "alignPageSize",
    "target_class": "long):long \t com.oracle.truffle.llvm.runtime.LLVMLanguage"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeGlobalsBlockNode",
    "source_method": "allocateGlobalsSectionBlock",
    "target_class": "com.oracle.truffle.llvm.runtime.memory.LLVMAllocateNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeModuleNode",
    "source_method": "execute",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMContext):void \t com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeModuleNode",
    "source_method": "createDestructor",
    "target_class": "java.lang.String, com.oracle.truffle.llvm.runtime.LLVMLanguage):com.oracle.truffle.api.RootCallTarget \t com.oracle.truffle.api.frame.FrameDescriptor.Builder"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeModuleNode",
    "source_method": "createStructor",
    "target_class": "com.oracle.truffle.llvm.parser.LLVMParserResult, java.util.Comparator<com.oracle.truffle.llvm.parser.util.Pair<java.lang.Integer,?>>):com.oracle.truffle.llvm.runtime.nodes.api.LLVMStatementNode[] \t com.oracle.truffle.llvm.parser.model.GlobalSymbol"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeModuleNode",
    "source_method": "resolveStructor",
    "target_class": "com.oracle.truffle.llvm.parser.model.symbols.globals.GlobalVariable, java.util.Comparator<com.oracle.truffle.llvm.parser.util.Pair<java.lang.Integer,?>>):com.oracle.truffle.llvm.runtime.nodes.api.LLVMStatementNode[] \t com.oracle.truffle.llvm.parser.model.symbols.constants.aggregate.AggregateConstant"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeOverwriteNode",
    "source_method": "execute",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMScopeChain, com.oracle.truffle.llvm.runtime.nodes.intrinsics.c.LLVMDLOpen.RTLDFlags):void \t com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeSymbolsNode",
    "source_method": "initializeSymbolTable",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeSymbolsNode",
    "source_method": "initializeFunctionSymbols",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMContext"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeSymbolsNode.AllocLLVMFunctionNode",
    "source_method": "createAndResolve",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeSymbolsNode.AllocLLVMEagerFunctionNode",
    "source_method": "createAndResolve",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.InitializeSymbolsNode.AllocIntrinsicFunctionNode",
    "source_method": "createAndDefine",
    "target_class": "com.oracle.truffle.llvm.runtime.LLVMSymbol"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.LoadModulesNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.llvm.parser.LLVMParserResult, boolean, boolean, java.util.List<com.oracle.truffle.llvm.initialization.LoadDependencyNode>, com.oracle.truffle.api.source.Source, com.oracle.truffle.llvm.runtime.LLVMLanguage):com.oracle.truffle.llvm.initialization.LoadModulesNode \t com.oracle.truffle.api.frame.FrameDescriptor"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.LoadModulesNode",
    "source_method": "executeInitialiseAllPhase",
    "target_class": "com.oracle.truffle.llvm.runtime.nodes.intrinsics.c.LLVMDLOpen.RTLDFlags, com.oracle.truffle.llvm.runtime.LLVMScopeChain):void \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.LoadModulesNode",
    "source_method": "executeInitialiseSymbolPhase",
    "target_class": "com.oracle.truffle.llvm.initialization.InitializeSymbolsNode"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.LoadModulesNode",
    "source_method": "findMainFunction",
    "target_class": "com.oracle.truffle.llvm.parser.LLVMParserRuntime"
  },
  {
    "source_class": "com.oracle.truffle.llvm.initialization.LoadNativeNode",
    "source_method": "parseAndInitialiseNativeLib",
    "target_class": "com.oracle.truffle.llvm.runtime.NativeContextExtension"
  },
  {
    "source_class": "com.oracle.truffle.tools.profiler.ProfilerNode",
    "source_method": "getSourceSection",
    "target_class": "com.oracle.truffle.tools.profiler.StackTraceEntry"
  },
  {
    "source_class": "com.oracle.truffle.tools.profiler.ProfilerNode",
    "source_method": "getRootName",
    "target_class": "com.oracle.truffle.tools.profiler.StackTraceEntry"
  },
  {
    "source_class": "com.oracle.truffle.tools.profiler.ProfilerNode",
    "source_method": "getTags",
    "target_class": "com.oracle.truffle.tools.profiler.StackTraceEntry"
  },
  {
    "source_class": "org.graalvm.tools.lsp.server.utils.CoverageEventNode",
    "source_method": "putSection2Uri",
    "target_class": "com.oracle.truffle.api.source.SourceSection"
  },
  {
    "source_class": "org.graalvm.tools.lsp.server.utils.CoverageEventNode",
    "source_method": "copyFrame",
    "target_class": "com.oracle.truffle.api.frame.FrameDescriptor"
  },
  {
    "source_class": "com.oracle.truffle.api.debug.SetThreadSuspensionEnabledNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.api.debug.Breakpoint.SessionList, long):void \t com.oracle.truffle.api.debug.Breakpoint.SessionList"
  },
  {
    "source_class": "com.oracle.truffle.api.debug.SetThreadSuspensionEnabledNode",
    "source_method": "getThreadSuspension",
    "target_class": "com.oracle.truffle.api.debug.Breakpoint.SessionList"
  },
  {
    "source_class": "com.oracle.truffle.api.dsl.test.examples.ExampleNode",
    "source_method": "createTarget",
    "target_class": "com.oracle.truffle.api.nodes.RootNode"
  },
  {
    "source_class": "com.oracle.truffle.api.dsl.test.examples.ExampleNode",
    "source_method": "getNode",
    "target_class": "com.oracle.truffle.api.RootCallTarget"
  },
  {
    "source_class": "com.oracle.truffle.api.dsl.test.examples.ExampleNode",
    "source_method": "createDummyTarget",
    "target_class": "com.oracle.truffle.api.nodes.RootNode"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "hasNewTags",
    "target_class": "java.util.Set<java.lang.Class<? extends com.oracle.truffle.api.instrumentation.Tag>>):boolean \t com.oracle.truffle.api.instrumentation.ProbeNode.RetiredNodeReference"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "onEnter",
    "target_class": "com.oracle.truffle.api.instrumentation.InstrumentationHandler"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "onReturnValue",
    "target_class": "java.lang.Object):void \t com.oracle.truffle.api.instrumentation.InstrumentationHandler"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "isNullOrInteropValue",
    "target_class": "com.oracle.truffle.api.instrumentation.EventContext"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "onYield",
    "target_class": "java.lang.Object):void \t com.oracle.truffle.api.instrumentation.InstrumentationHandler"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "onResume",
    "target_class": "com.oracle.truffle.api.instrumentation.InstrumentationHandler"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "lazyUpdate",
    "target_class": "com.oracle.truffle.api.Assumption"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "lookupExecutionEventNode",
    "target_class": "com.oracle.truffle.api.instrumentation.EventBinding"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "throwIllegalASTAssertion",
    "target_class": "com.oracle.truffle.api.instrumentation.EventContext, com.oracle.truffle.api.instrumentation.EventBinding.Source<?>, com.oracle.truffle.api.nodes.RootNode, java.util.Set<java.lang.Class<?>>, int):boolean \t com.oracle.truffle.api.nodes.NodeUtil"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "findChildContexts",
    "target_class": "com.oracle.truffle.api.nodes.RootNode, java.util.Set<java.lang.Class<?>>, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.api.source.SourceSection, int):com.oracle.truffle.api.instrumentation.EventContext[] \t com.oracle.truffle.api.nodes.NodeUtil"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "indexOfChild",
    "target_class": "com.oracle.truffle.api.nodes.RootNode, java.util.Set<java.lang.Class<?>>, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.api.source.SourceSection, com.oracle.truffle.api.nodes.Node):int \t com.oracle.truffle.api.nodes.NodeUtil"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "countChildren",
    "target_class": "com.oracle.truffle.api.nodes.RootNode, java.util.Set<java.lang.Class<?>>, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.api.source.SourceSection):int \t com.oracle.truffle.api.nodes.NodeUtil"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "exceptionEventForClientInstrument",
    "target_class": "java.lang.String, java.lang.Throwable):void \t com.oracle.truffle.api.instrumentation.InstrumentAccessor"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode",
    "source_method": "checkInteropType",
    "target_class": "com.oracle.truffle.api.instrumentation.EventBinding.Source<?>):boolean \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode.EventChainNode",
    "source_method": "onDispose",
    "target_class": "com.oracle.truffle.api.instrumentation.EventContext, com.oracle.truffle.api.frame.VirtualFrame):void \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode.EventChainNode",
    "source_method": "handleError",
    "target_class": "java.lang.RuntimeException, java.lang.Throwable):java.lang.RuntimeException \t com.oracle.truffle.api.instrumentation.EventBinding.Source"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode.EventChainNode",
    "source_method": "handleUnwind",
    "target_class": "com.oracle.truffle.api.instrumentation.UnwindException, com.oracle.truffle.api.instrumentation.UnwindException):com.oracle.truffle.api.instrumentation.UnwindException \t com.oracle.truffle.api.instrumentation.UnwindException"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode.EventChainNode",
    "source_method": "mergeUnwind",
    "target_class": "com.oracle.truffle.api.instrumentation.UnwindException):com.oracle.truffle.api.instrumentation.UnwindException \t com.oracle.truffle.api.instrumentation.UnwindException"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode.EventChainNode",
    "source_method": "containsBinding",
    "target_class": "com.oracle.truffle.api.instrumentation.UnwindException"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode.EventChainNode",
    "source_method": "getInfo",
    "target_class": "com.oracle.truffle.api.instrumentation.UnwindException"
  },
  {
    "source_class": "com.oracle.truffle.api.instrumentation.ProbeNode.EventChainNode",
    "source_method": "reset",
    "target_class": "com.oracle.truffle.api.instrumentation.UnwindException"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.LoopNode",
    "source_method": "reportLoopCount",
    "target_class": "int):void \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.LoopNode",
    "source_method": "onLoopCountBoundary",
    "target_class": "int):void \t com.oracle.truffle.api.impl.Accessor.RuntimeSupport"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.BlockNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.api.nodes.BlockNode.ElementExecutor<T>):com.oracle.truffle.api.nodes.BlockNode<T> \t com.oracle.truffle.api.impl.Accessor.RuntimeSupport"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.BlockNodeSnippets.ResumableBlockNode",
    "source_method": "resume",
    "target_class": "com.oracle.truffle.api.nodes.BlockNode"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.BytecodeOSRNode",
    "source_method": "pollOSRBackEdge",
    "target_class": "com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.BytecodeOSRNode",
    "source_method": "tryOSR",
    "target_class": "int, java.lang.Object, java.lang.Runnable, com.oracle.truffle.api.frame.VirtualFrame):java.lang.Object \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.BytecodeOSRValidation",
    "source_method": "validateNode",
    "target_class": "com.oracle.truffle.api.nodes.Node"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.DirectCallNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.api.TruffleRuntime"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.IndirectCallNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.api.TruffleRuntime"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.Node",
    "source_method": "accept",
    "target_class": "com.oracle.truffle.api.nodes.NodeVisitor"
  },
  {
    "source_class": "com.oracle.truffle.api.nodes.NodeSnippets",
    "source_method": "notifyInserted",
    "target_class": "com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.host.GuestToHostRootNode",
    "source_method": "guestToHostCall",
    "target_class": "com.oracle.truffle.api.CallTarget, java.lang.Object[]):java.lang.Object \t com.oracle.truffle.api.nodes.EncapsulatingNodeReference"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "doFixed",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.SingleMethod, java.lang.Object, java.lang.Object[], com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostMethodDesc.SingleMethod, com.oracle.truffle.host.HostToTypeNode[], com.oracle.truffle.host.HostContext.ToGuestValueNode, com.oracle.truffle.host.InlinedExactClassProfile, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.GuestToHostCodeCache):java.lang.Object \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "doVarArgs",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.SingleMethod, java.lang.Object, java.lang.Object[], com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostMethodDesc.SingleMethod, com.oracle.truffle.host.HostToTypeNode, com.oracle.truffle.host.HostContext.ToGuestValueNode, com.oracle.truffle.host.InlinedExactClassProfile, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.InlinedBranchProfile, boolean, com.oracle.truffle.host.GuestToHostCodeCache):java.lang.Object \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "doSingleUncached",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.SingleMethod, java.lang.Object, java.lang.Object[], com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostToTypeNode, com.oracle.truffle.host.HostContext.ToGuestValueNode, com.oracle.truffle.host.InlinedConditionProfile, com.oracle.truffle.host.HostExecuteNode.HostMethodProfileNode, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.GuestToHostCodeCache):java.lang.Object \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "doOverloadedCached",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.OverloadedMethod, java.lang.Object, java.lang.Object[], com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostMethodDesc.OverloadedMethod, com.oracle.truffle.host.HostToTypeNode, com.oracle.truffle.host.HostContext.ToGuestValueNode, com.oracle.truffle.host.InteropLibrary, com.oracle.truffle.host.HostExecuteNode.TypeCheckNode[], com.oracle.truffle.host.HostMethodDesc.SingleMethod, boolean, com.oracle.truffle.host.InlinedExactClassProfile, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.GuestToHostCodeCache):java.lang.Object \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "doOverloadedUncached",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.OverloadedMethod, java.lang.Object, java.lang.Object[], com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostToTypeNode, com.oracle.truffle.host.HostContext.ToGuestValueNode, com.oracle.truffle.host.InlinedConditionProfile, com.oracle.truffle.host.HostExecuteNode.HostMethodProfileNode, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.InlinedBranchProfile, com.oracle.truffle.host.GuestToHostCodeCache):java.lang.Object \t com.oracle.truffle.host.HostMethodScope"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "prepareArgumentsUncached",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.SingleMethod, java.lang.Object[], com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostToTypeNode, com.oracle.truffle.host.HostMethodScope, com.oracle.truffle.host.InlinedConditionProfile):java.lang.Object[] \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "createArgTypesArray",
    "target_class": "com.oracle.truffle.host.HostExecuteNode.NullCheckNode"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "fillArgTypesArray",
    "target_class": "java.lang.Object[], com.oracle.truffle.host.HostExecuteNode.TypeCheckNode[], com.oracle.truffle.host.HostMethodDesc.SingleMethod, boolean, java.util.List<com.oracle.truffle.host.HostMethodDesc.SingleMethod>, int, com.oracle.truffle.host.HostContext):void \t com.oracle.truffle.host.HostToTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "checkArgTypes",
    "target_class": "com.oracle.truffle.host.HostExecuteNode.TypeCheckNode[], com.oracle.truffle.host.InteropLibrary, com.oracle.truffle.host.HostContext, boolean):boolean \t com.oracle.truffle.host.HostExecuteNode.TypeCheckNode"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "asVarArgs",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.SingleMethod, com.oracle.truffle.host.HostContext):boolean \t com.oracle.truffle.host.HostToTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "selectOverload",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.OverloadedMethod, java.lang.Object[], com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostExecuteNode.TypeCheckNode[]):com.oracle.truffle.host.HostMethodDesc.SingleMethod \t com.oracle.truffle.host.HostMethodDesc.OverloadedMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "findBestCandidate",
    "target_class": "java.util.List<com.oracle.truffle.host.HostMethodDesc.SingleMethod>, java.lang.Object[], com.oracle.truffle.host.HostContext, boolean, int, com.oracle.truffle.host.HostExecuteNode.TypeCheckNode[]):com.oracle.truffle.host.HostMethodDesc.SingleMethod \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "compareByPriority",
    "target_class": "java.lang.Class<?>, java.lang.Class<?>, java.lang.Object, int):int \t com.oracle.truffle.host.HostToTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "ambiguousOverloadsException",
    "target_class": "java.lang.Object[]):java.lang.RuntimeException \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "createVarArgsArray",
    "target_class": "java.lang.Object[], int):java.lang.Object[] \t com.oracle.truffle.host.HostMethodDesc.SingleMethod"
  },
  {
    "source_class": "com.oracle.truffle.host.HostExecuteNode",
    "source_method": "doInvoke",
    "target_class": "com.oracle.truffle.host.HostMethodDesc.SingleMethod, java.lang.Object, java.lang.Object[], com.oracle.truffle.host.GuestToHostCodeCache, com.oracle.truffle.host.HostContext, com.oracle.truffle.host.HostContext.ToGuestValueNode):java.lang.Object \t com.oracle.truffle.host.HostContext"
  },
  {
    "source_class": "com.oracle.truffle.host.HostTargetMappingNode",
    "source_method": "doCached",
    "target_class": "java.lang.Class<?>, com.oracle.truffle.host.HostContext, com.oracle.truffle.host.InteropLibrary, boolean, int, int, com.oracle.truffle.host.HostTargetMapping[], com.oracle.truffle.host.HostTargetMappingNode.SingleMappingNode[]):java.lang.Object \t com.oracle.truffle.host.HostTargetMapping"
  },
  {
    "source_class": "com.oracle.truffle.host.HostTargetMappingNode",
    "source_method": "getMappings",
    "target_class": "java.lang.Class<?>):com.oracle.truffle.host.HostTargetMapping[] \t com.oracle.truffle.host.HostContext"
  },
  {
    "source_class": "com.oracle.truffle.host.HostTargetMappingNode.SingleMappingNode",
    "source_method": "doDefault",
    "target_class": "com.oracle.truffle.host.HostTargetMapping, com.oracle.truffle.host.HostContext, com.oracle.truffle.host.InteropLibrary, boolean, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.host.InlinedConditionProfile, java.lang.Boolean, com.oracle.truffle.host.HostToTypeNode):java.lang.Object \t com.oracle.truffle.host.HostToTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.host.HostTargetMappingNode.SingleMappingNode",
    "source_method": "convert",
    "target_class": "java.util.function.Function<java.lang.Object,java.lang.Object>, java.lang.Object):java.lang.Object \t com.oracle.truffle.host.HostContext"
  },
  {
    "source_class": "com.oracle.truffle.host.HostTargetMappingNode.SingleMappingNode",
    "source_method": "checkPredicate",
    "target_class": "java.lang.Object, java.util.function.Predicate<java.lang.Object>):boolean \t com.oracle.truffle.host.HostContext"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "allowsImplementation",
    "target_class": "java.lang.Class<?>):boolean \t com.oracle.truffle.host.HostInteropReflect"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.host.HostContext, java.lang.Object, java.lang.Class<?>, java.lang.reflect.Type, boolean):java.lang.Object \t com.oracle.truffle.host.HostTargetMappingNode"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "convertImpl",
    "target_class": "java.lang.Object, java.lang.Class<?>, java.lang.reflect.Type, boolean, boolean, com.oracle.truffle.host.HostContext, com.oracle.truffle.host.InteropLibrary, boolean, com.oracle.truffle.host.HostTargetMappingNode, com.oracle.truffle.host.InlinedBranchProfile):java.lang.Object \t com.oracle.truffle.host.HostUtil"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "canConvert",
    "target_class": "java.lang.Object, java.lang.Class<?>, java.lang.reflect.Type, java.lang.Boolean, com.oracle.truffle.host.HostContext, int, com.oracle.truffle.host.InteropLibrary, com.oracle.truffle.host.HostTargetMappingNode):boolean \t com.oracle.truffle.host.HostUtil"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "isBigIntegerNumberAccess",
    "target_class": "com.oracle.truffle.host.HostContext"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "convertToObject",
    "target_class": "com.oracle.truffle.host.HostContext, java.lang.Object, com.oracle.truffle.host.InteropLibrary):java.lang.Object \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "asPolyglotException",
    "target_class": "java.lang.Object, com.oracle.truffle.host.InteropLibrary):java.lang.Object \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "newInvalidKeyTypeException",
    "target_class": "com.oracle.truffle.host.HostContext):java.lang.RuntimeException \t com.oracle.truffle.host.HostEngineException"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "getGenericParameterType",
    "target_class": "int):com.oracle.truffle.host.HostToTypeNode.TypeAndClass<?> \t com.oracle.truffle.host.HostToTypeNode.TypeAndClass"
  },
  {
    "source_class": "com.oracle.truffle.host.HostToTypeNode",
    "source_method": "truffleObjectToArray",
    "target_class": "com.oracle.truffle.host.InteropLibrary, java.lang.Object, java.lang.Class<?>, java.lang.reflect.Type):java.lang.Object \t com.oracle.truffle.host.HostInteropErrors"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.ClosureArgumentNode.BufferClosureArgumentNode",
    "source_method": "doBuffer",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.LibFFIType.CachedTypeInfo"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.FunctionExecuteNode",
    "source_method": "cachedSignature",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.LibFFISignature, java.lang.Object[], com.oracle.truffle.nfi.backend.libffi.LibFFISignature.CachedSignatureInfo, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.FunctionExecuteNode",
    "source_method": "createCachedSignatureCall",
    "target_class": "com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.FunctionExecuteNode",
    "source_method": "genericExecute",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.LibFFISignature, java.lang.Object[], com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.SerializeArgumentNode.SerializePointerNode",
    "source_method": "putNull",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer, com.oracle.truffle.nfi.backend.libffi.InteropLibrary):void \t com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.SerializeArgumentNode.SerializePointerNode",
    "source_method": "putGeneric",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer, com.oracle.truffle.nfi.backend.libffi.InteropLibrary, com.oracle.truffle.api.nodes.Node, int, com.oracle.truffle.nfi.backend.libffi.InlinedBranchProfile):void \t com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.SerializeArgumentNode.SerializeStringNode",
    "source_method": "putNull",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer, com.oracle.truffle.nfi.backend.libffi.InteropLibrary):void \t com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.SerializeArgumentNode.SerializeStringNode",
    "source_method": "putGeneric",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer, com.oracle.truffle.nfi.backend.libffi.InteropLibrary, com.oracle.truffle.api.nodes.Node, int, com.oracle.truffle.nfi.backend.libffi.InlinedBranchProfile):void \t com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer.TypeTag"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.SerializeArgumentNode.SerializeArrayNode",
    "source_method": "doHostObject",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer, java.lang.Object, com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer.TypeTag):void \t com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.libffi.SerializeArgumentNode.SerializeArrayNode",
    "source_method": "doArray",
    "target_class": "com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer, com.oracle.truffle.nfi.backend.libffi.NativeArgumentBuffer.TypeTag):void \t com.oracle.truffle.nfi.backend.libffi.LibFFIType.CachedTypeInfo"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.panama.ArgumentNode.ToPointerNode",
    "source_method": "putGeneric",
    "target_class": "com.oracle.truffle.api.nodes.Node, com.oracle.truffle.nfi.backend.panama.InteropLibrary, com.oracle.truffle.nfi.backend.panama.InlinedBranchProfile):long \t com.oracle.truffle.nfi.backend.panama.NativePointer"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.panama.FunctionExecuteNode",
    "source_method": "cachedSignature",
    "target_class": "com.oracle.truffle.nfi.backend.panama.PanamaSignature, java.lang.Object[], com.oracle.truffle.nfi.backend.panama.PanamaSignature.CachedSignatureInfo, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.panama.FunctionExecuteNode",
    "source_method": "createCachedSignatureCall",
    "target_class": "com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.backend.panama.FunctionExecuteNode",
    "source_method": "genericExecute",
    "target_class": "com.oracle.truffle.nfi.backend.panama.PanamaSignature, java.lang.Object[], com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.CallSignatureNode.CachedCallSignatureNode",
    "source_method": "doOptimizedIndirect",
    "target_class": "java.lang.Object, java.lang.Object[], com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.CallSignatureNode.CachedCallSignatureNode",
    "source_method": "doSlowPath",
    "target_class": "java.lang.Object, java.lang.Object[], com.oracle.truffle.api.nodes.Node, com.oracle.truffle.nfi.InlinedBranchProfile, com.oracle.truffle.nfi.ConvertTypeNode.ConvertToNativeNode, com.oracle.truffle.nfi.ConvertTypeNode.ConvertFromNativeNode, com.oracle.truffle.nfi.NFIBackendSignatureLibrary, com.oracle.truffle.nfi.CallSignatureNode.BackendSymbolUnwrapNode):java.lang.Object \t com.oracle.truffle.nfi.NFILanguage"
  },
  {
    "source_class": "com.oracle.truffle.nfi.CallSignatureNode.OptimizedCallSignatureNode",
    "source_method": "prepareArgs",
    "target_class": "java.lang.Object[]):java.lang.Object[] \t com.oracle.truffle.nfi.ConvertTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.CallSignatureNode.OptimizedCallClosureNode",
    "source_method": "prepareArgs",
    "target_class": "java.lang.Object[]):java.lang.Object[] \t com.oracle.truffle.nfi.ConvertTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.ConvertTypeNode.ConvertToNativeNode",
    "source_method": "doCached",
    "target_class": "java.lang.Object, com.oracle.truffle.nfi.NFIType.TypeCachedState, com.oracle.truffle.nfi.ConvertTypeNode):java.lang.Object \t com.oracle.truffle.nfi.ConvertTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.ConvertTypeNode.ConvertFromNativeNode",
    "source_method": "doCached",
    "target_class": "java.lang.Object, com.oracle.truffle.nfi.NFIType.TypeCachedState, com.oracle.truffle.nfi.ConvertTypeNode):java.lang.Object \t com.oracle.truffle.nfi.ConvertTypeNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.NFIRootNode.LoadLibraryNode",
    "source_method": "doCached",
    "target_class": "com.oracle.truffle.nfi.NFIBackend, com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.nfi.NFIRootNode.LoadLibraryNode",
    "source_method": "doGeneric",
    "target_class": "com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.FileSystems",
    "source_method": "getRelativePathInResourceRoot",
    "target_class": "com.oracle.truffle.api.impl.Accessor.LanguageSupport"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.FileSystems",
    "source_method": "relativizeToLanguageHome",
    "target_class": "java.nio.file.Path, com.oracle.truffle.polyglot.PolyglotLanguage):java.lang.String \t com.oracle.truffle.polyglot.LanguageCache"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.FileSystems.PreInitializeContextFileSystem",
    "source_method": "verifyImageState",
    "target_class": "com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.FileSystems.PreInitializeContextFileSystem.PreInitializePath",
    "source_method": "onPreInitializeContextEnd",
    "target_class": "com.oracle.truffle.polyglot.InternalResourceCache"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.HostToGuestRootNode",
    "source_method": "installHostCodeCache",
    "target_class": "java.lang.Object, T, java.lang.Class<T>):T \t com.oracle.truffle.polyglot.PolyglotLanguageContext"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.HostToGuestRootNode",
    "source_method": "lookupHostCodeCache",
    "target_class": "java.lang.Object, java.lang.Class<T>):T \t com.oracle.truffle.polyglot.PolyglotLanguageContext"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "isAdditionalTransitionConditionSatisfied",
    "target_class": "com.oracle.truffle.polyglot.PolyglotContextImpl.State):boolean \t com.oracle.truffle.polyglot.PolyglotContextImpl.State"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "claimSharingLayer",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguage"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "claimSharingLayer",
    "target_class": "java.util.Set<com.oracle.truffle.polyglot.PolyglotLanguage>):boolean \t com.oracle.truffle.polyglot.PolyglotSharingLayer"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getInstrumentContextOptions",
    "target_class": "com.oracle.truffle.polyglot.PolyglotContextConfig"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "createContextArray",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "maybeInitializeHostLanguage",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguageContext"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getContext",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguage"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getContextImpl",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguage"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getContextInitialized",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguage):com.oracle.truffle.polyglot.PolyglotLanguageContext \t com.oracle.truffle.polyglot.PolyglotLanguageContext"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "requireContext",
    "target_class": "com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "resume",
    "target_class": "com.oracle.truffle.polyglot.ContextPauseHandle"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getCachedThread",
    "target_class": "com.oracle.truffle.polyglot.WeakAssumedValue"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getCurrentThreadInfo",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "setCachedThreadInfo",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadLocalActions"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "checkAllThreadAccesses",
    "target_class": "boolean):void \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "leaveAndEnter",
    "target_class": "com.oracle.truffle.api.TruffleSafepoint.InterruptibleFunction<T,R>, T, boolean):R \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "finishThreadDispose",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadInfo, java.lang.Throwable):void \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "notifyThreadFinalizing",
    "target_class": "java.lang.Throwable, boolean):java.lang.Throwable \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "notifyThreadDisposing",
    "target_class": "java.lang.Throwable):java.lang.Throwable \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "initializeNewThread",
    "target_class": "boolean):void \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "transitionToMultiThreaded",
    "target_class": "com.oracle.truffle.polyglot.WeakAssumedValue"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "createThreadInfo",
    "target_class": "boolean):com.oracle.truffle.polyglot.PolyglotThreadInfo \t com.oracle.truffle.polyglot.WeakAssumedValue"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "throwDeniedThreadAccess",
    "target_class": "boolean, java.util.List<com.oracle.truffle.polyglot.PolyglotLanguage>):java.lang.RuntimeException \t com.oracle.truffle.polyglot.PolyglotLanguage"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getBindings",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguageContext"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "migrateHostWrapper",
    "target_class": "com.oracle.truffle.polyglot.PolyglotWrapper"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "findLanguageContext",
    "target_class": "extends com.oracle.truffle.api.TruffleLanguage>):com.oracle.truffle.polyglot.PolyglotLanguageContext \t com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getLanguageContextImpl",
    "target_class": "extends com.oracle.truffle.api.TruffleLanguage<?>>):com.oracle.truffle.polyglot.PolyglotLanguageContext \t com.oracle.truffle.polyglot.PolyglotLanguage"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "initializeInnerContextLanguage",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "initializeLanguage",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguageContext"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "requirePublicLanguage",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "printResult",
    "target_class": "java.lang.Object):void \t com.oracle.truffle.api.impl.Accessor.LanguageSupport"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "setInterrupting",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadLocalActions"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "validateInterruptPrecondition",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "interrupt",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getConstantEngine",
    "target_class": "com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "waitForAllThreads",
    "target_class": "long):boolean \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "hasActiveOtherThread",
    "target_class": "boolean):boolean \t com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "calculateHeapSize",
    "target_class": "java.util.concurrent.atomic.AtomicBoolean):long \t com.oracle.truffle.polyglot.ObjectSizeCalculator"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "submitCancellationThreadLocalAction",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadLocalActions"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl.ExitException",
    "source_method": "getSourceLocation",
    "target_class": "com.oracle.truffle.api.nodes.Node"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "finishCleanup",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "disposeContext",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguageContext"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "exitContextNotification",
    "target_class": "int):void \t com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getLocal",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLocals.LocalLocation"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getThreadLocals",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "initializeThreadLocals",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "initializeInstrumentContextThreadLocals",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "resizeContextThreadLocals",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "invokeContextLocalsFactory",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLocals.LocalLocation[]):void \t com.oracle.truffle.polyglot.PolyglotLocals.LocalLocation"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "invokeContextThreadLocalFactory",
    "target_class": "com.oracle.truffle.polyglot.PolyglotThreadInfo"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "invokeContextThreadFactory",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLocals.LocalLocation[], java.lang.Thread):void \t com.oracle.truffle.polyglot.PolyglotLocals.LocalLocation"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "patch",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "replayInstrumentationEvents",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguage"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "preinitialize",
    "target_class": "com.oracle.truffle.polyglot.PolyglotContextConfig.PreinitConfig, com.oracle.truffle.polyglot.PolyglotSharingLayer, java.util.Set<com.oracle.truffle.polyglot.PolyglotLanguage>, boolean):com.oracle.truffle.polyglot.PolyglotContextImpl \t com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getOrCreateContextLoggers",
    "target_class": "com.oracle.truffle.polyglot.PolyglotContextConfig"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "getAllLoggers",
    "target_class": "com.oracle.truffle.polyglot.PolyglotEngineImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl.ContextWeakReference",
    "source_method": "freeSharing",
    "target_class": "com.oracle.truffle.polyglot.PolyglotSharingLayer"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "overridesPatchContext",
    "target_class": "com.oracle.truffle.polyglot.LanguageCache"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotContextImpl",
    "source_method": "runOnExited",
    "target_class": "com.oracle.truffle.polyglot.PolyglotContextConfig"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotExecuteNode",
    "source_method": "doCached",
    "target_class": "java.lang.Object, java.lang.Object[], java.lang.Class<?>, java.lang.reflect.Type, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.polyglot.InteropLibrary, com.oracle.truffle.polyglot.PolyglotLanguageContext.ToGuestValuesNode, com.oracle.truffle.polyglot.PolyglotToHostNode, com.oracle.truffle.polyglot.InlinedConditionProfile, com.oracle.truffle.polyglot.InlinedConditionProfile, com.oracle.truffle.polyglot.InlinedBranchProfile, com.oracle.truffle.polyglot.InlinedBranchProfile, com.oracle.truffle.polyglot.InlinedBranchProfile):java.lang.Object \t com.oracle.truffle.polyglot.PolyglotInteropErrors"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotToHostNode",
    "source_method": "doDefault",
    "target_class": "com.oracle.truffle.polyglot.PolyglotLanguageContext, java.lang.Object, java.lang.Class<?>, java.lang.reflect.Type, com.oracle.truffle.polyglot.AbstractHostLanguageService, com.oracle.truffle.api.nodes.Node):java.lang.Object \t com.oracle.truffle.polyglot.PolyglotContextImpl"
  },
  {
    "source_class": "com.oracle.truffle.polyglot.PolyglotToHostNode",
    "source_method": "inlineToHost",
    "target_class": "com.oracle.truffle.api.impl.Accessor.HostSupport"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedOSRLoopNode",
    "source_method": "profilingLoop",
    "target_class": "com.oracle.truffle.api.nodes.RepeatingNode"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedOSRLoopNode",
    "source_method": "compilingLoop",
    "target_class": "com.oracle.truffle.api.nodes.RepeatingNode"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedOSRLoopNode",
    "source_method": "createRootNodeImpl",
    "target_class": "java.lang.Class<? extends com.oracle.truffle.api.frame.VirtualFrame>):com.oracle.truffle.runtime.OptimizedOSRLoopNode.AbstractLoopOSRRootNode \t com.oracle.truffle.api.nodes.RootNode"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedOSRLoopNode",
    "source_method": "create",
    "target_class": "com.oracle.truffle.runtime.OptimizedTVMCI"
  },
  {
    "source_class": "com.oracle.truffle.runtime.BytecodeOSRRootNode",
    "source_method": "materializeCalled",
    "target_class": "com.oracle.truffle.api.Truffle"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedBlockNode",
    "source_method": "profileArg",
    "target_class": "com.oracle.truffle.api.Assumption"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedBlockNode",
    "source_method": "makeAlwaysZeroAssumption",
    "target_class": "com.oracle.truffle.api.Truffle"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedBlockNode",
    "source_method": "preparePartialBlockCompilations",
    "target_class": "com.oracle.truffle.api.nodes.NodeUtil"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedBlockNode",
    "source_method": "computePartialBlocks",
    "target_class": "com.oracle.truffle.runtime.OptimizedBlockNode<T>, com.oracle.truffle.runtime.OptimizedBlockNode.BlockVisitor, java.lang.Object[], int):com.oracle.truffle.runtime.OptimizedBlockNode.PartialBlocks<T> \t com.oracle.truffle.runtime.OptimizedBlockNode.BlockVisitor"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedBlockNode.BlockVisitor",
    "source_method": "computeBlock",
    "target_class": "com.oracle.truffle.runtime.OptimizedBlockNode.PartialBlocks"
  },
  {
    "source_class": "com.oracle.truffle.runtime.OptimizedBlockNode.PartialBlockRootNode",
    "source_method": "readAndProfileArg",
    "target_class": "com.oracle.truffle.api.Assumption"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.SLStatementNode",
    "source_method": "formatSourceSection",
    "target_class": "com.oracle.truffle.api.source.SourceSection"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.controlflow.SLBlockNode",
    "source_method": "getStatements",
    "target_class": "com.oracle.truffle.api.nodes.BlockNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.controlflow.SLIfNode",
    "source_method": "evaluateCondition",
    "target_class": "com.oracle.truffle.sl.nodes.SLExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.controlflow.SLWhileRepeatingNode",
    "source_method": "evaluateCondition",
    "target_class": "com.oracle.truffle.sl.nodes.SLExpressionNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLAddNode",
    "source_method": "doSLBigInteger",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger):com.oracle.truffle.sl.runtime.SLBigInteger \t com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLAddNode",
    "source_method": "doString",
    "target_class": "java.lang.Object, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode, com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode, com.oracle.truffle.api.strings.TruffleString.ConcatNode):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.strings.TruffleString.ConcatNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLDivNode",
    "source_method": "doSLBigInteger",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger):com.oracle.truffle.sl.runtime.SLBigInteger \t com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLEqualNode",
    "source_method": "doBigNumber",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger):boolean \t com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLEqualNode",
    "source_method": "doTruffleString",
    "target_class": "com.oracle.truffle.api.strings.TruffleString, com.oracle.truffle.api.strings.TruffleString.EqualNode):boolean \t com.oracle.truffle.api.strings.TruffleString.EqualNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLLessThanNode",
    "source_method": "doSLBigInteger",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger):boolean \t com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLMulNode",
    "source_method": "doSLBigInteger",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger):com.oracle.truffle.sl.runtime.SLBigInteger \t com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLReadPropertyNode",
    "source_method": "readSLObject",
    "target_class": "java.lang.Object, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.sl.nodes.expression.DynamicObjectLibrary, com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode):java.lang.Object \t com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLReadPropertyNode",
    "source_method": "readObject",
    "target_class": "java.lang.Object, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.sl.nodes.expression.InteropLibrary, com.oracle.truffle.sl.nodes.util.SLToMemberNode):java.lang.Object \t com.oracle.truffle.sl.nodes.util.SLToMemberNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLSubNode",
    "source_method": "doSLBigInteger",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger):com.oracle.truffle.sl.runtime.SLBigInteger \t com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLWritePropertyNode",
    "source_method": "writeSLObject",
    "target_class": "java.lang.Object, java.lang.Object, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.sl.nodes.expression.DynamicObjectLibrary, com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode):java.lang.Object \t com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.expression.SLWritePropertyNode",
    "source_method": "writeObject",
    "target_class": "java.lang.Object, java.lang.Object, com.oracle.truffle.api.nodes.Node, com.oracle.truffle.sl.nodes.expression.InteropLibrary, com.oracle.truffle.sl.nodes.util.SLToMemberNode):java.lang.Object \t com.oracle.truffle.sl.nodes.util.SLToMemberNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject",
    "source_method": "toDisplayString",
    "target_class": "com.oracle.truffle.sl.nodes.SLRootNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject",
    "source_method": "getSourceLocation",
    "target_class": "com.oracle.truffle.sl.nodes.SLRootNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject",
    "source_method": "getMembers",
    "target_class": "com.oracle.truffle.sl.nodes.SLRootNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject.ExistsMember",
    "source_method": "doGeneric",
    "target_class": "java.lang.String):boolean \t com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject.ModifiableMember",
    "source_method": "doGeneric",
    "target_class": "java.lang.String):boolean \t com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject.ReadMember",
    "source_method": "doRead",
    "target_class": "java.lang.String, int):java.lang.Object \t com.oracle.truffle.sl.runtime.SLNull"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.ArgumentsObject",
    "source_method": "findArgumentIndex",
    "target_class": "com.oracle.truffle.sl.nodes.local.SLWriteLocalVariableNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject.ExistsMember",
    "source_method": "doGeneric",
    "target_class": "java.lang.String):boolean \t com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject.ModifiableMember",
    "source_method": "doGeneric",
    "target_class": "java.lang.String):boolean \t com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject.ReadMember",
    "source_method": "doRead",
    "target_class": "java.lang.String, int):java.lang.Object \t com.oracle.truffle.sl.runtime.SLNull"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject.WriteMember",
    "source_method": "doWrite",
    "target_class": "java.lang.String, com.oracle.truffle.sl.nodes.local.SLWriteLocalVariableNode, java.lang.Object):void \t com.oracle.truffle.sl.nodes.local.SLWriteLocalVariableNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject",
    "source_method": "getVisibleVariablesIndex",
    "target_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.VariablesObject",
    "source_method": "findWriteNode",
    "target_class": "com.oracle.truffle.sl.nodes.local.SLWriteLocalVariableNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.Key",
    "source_method": "asString",
    "target_class": "com.oracle.truffle.sl.nodes.local.SLWriteLocalVariableNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.Key",
    "source_method": "asTruffleString",
    "target_class": "com.oracle.truffle.sl.nodes.local.SLWriteLocalVariableNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.local.SLScopedNode.Key",
    "source_method": "hasSourceLocation",
    "target_class": "com.oracle.truffle.sl.nodes.local.SLWriteLocalVariableNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToMemberNode",
    "source_method": "fromTruffleString",
    "target_class": "com.oracle.truffle.api.strings.TruffleString.ToJavaStringNode):java.lang.String \t com.oracle.truffle.api.strings.TruffleString.ToJavaStringNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToMemberNode",
    "source_method": "fromBigNumber",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToMemberNode",
    "source_method": "bigNumberToString",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode",
    "source_method": "fromNull",
    "target_class": "com.oracle.truffle.sl.runtime.SLStrings"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode",
    "source_method": "fromString",
    "target_class": "com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode",
    "source_method": "fromLong",
    "target_class": "com.oracle.truffle.api.strings.TruffleString.FromLongNode):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.strings.TruffleString.FromLongNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode",
    "source_method": "fromBigNumber",
    "target_class": "com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode",
    "source_method": "fromFunction",
    "target_class": "com.oracle.truffle.sl.runtime.SLFunction"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode",
    "source_method": "fromInterop",
    "target_class": "com.oracle.truffle.sl.nodes.util.InteropLibrary, com.oracle.truffle.api.strings.TruffleString.FromLongNode, com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLToTruffleStringNode",
    "source_method": "bigNumberToString",
    "target_class": "com.oracle.truffle.sl.runtime.SLBigInteger"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLUnboxNode",
    "source_method": "fromString",
    "target_class": "com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode):com.oracle.truffle.api.strings.TruffleString \t com.oracle.truffle.api.strings.TruffleString.FromJavaStringNode"
  },
  {
    "source_class": "com.oracle.truffle.sl.nodes.util.SLUnboxNode",
    "source_method": "fromForeign",
    "target_class": "com.oracle.truffle.sl.nodes.util.InteropLibrary):java.lang.Object \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "org.graalvm.visualizer.coordinator.impl.AbstractOutlineNode",
    "source_method": "getUserName",
    "target_class": "org.graalvm.visualizer.data.FolderElement"
  },
  {
    "source_class": "org.graalvm.visualizer.data.InputNode",
    "source_method": "mapPorts",
    "target_class": "org.graalvm.visualizer.data.serialization.Builder.NodeClass"
  },
  {
    "source_class": "org.graalvm.visualizer.source.impl.SourceRepositoryNode",
    "source_method": "createFileRootNode",
    "target_class": "org.graalvm.visualizer.source.impl.SourceRepositoryImpl):org.graalvm.visualizer.source.impl.Node \t org.graalvm.visualizer.source.impl.FileRoot"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmInstrumentableFunctionNode",
    "source_method": "enterErrorBranch",
    "target_class": "org.graalvm.wasm.WasmCodeEntry"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmInstrumentableFunctionNode",
    "source_method": "paramCount",
    "target_class": "org.graalvm.wasm.WasmModule"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmInstrumentableFunctionNode",
    "source_method": "name",
    "target_class": "org.graalvm.wasm.WasmCodeEntry"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmInstrumentableFunctionNode",
    "source_method": "getScope",
    "target_class": "boolean):java.lang.Object \t org.graalvm.wasm.nodes.WasmInstrumentationSupportNode"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmInstrumentableFunctionNode",
    "source_method": "loadByteArrayFromMemory",
    "target_class": "long, int):byte[] \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmInstrumentationSupportNode",
    "source_method": "enterAt",
    "target_class": "int):void \t com.oracle.truffle.api.instrumentation.InstrumentableNode.WrapperNode"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmInstrumentationSupportNode",
    "source_method": "exitAt",
    "target_class": "int):void \t com.oracle.truffle.api.instrumentation.ProbeNode"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "enterErrorBranch",
    "target_class": "org.graalvm.wasm.WasmCodeEntry"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "failFunctionTypeCheck",
    "target_class": "int):void \t org.graalvm.wasm.WasmFunction"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "executeDirectCall",
    "target_class": "int, org.graalvm.wasm.WasmInstance, int, org.graalvm.wasm.WasmFunction, java.lang.Object[]):int \t com.oracle.truffle.api.TruffleContext"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "assertDirectCall",
    "target_class": "org.graalvm.wasm.WasmFunction, com.oracle.truffle.api.nodes.DirectCallNode):boolean \t org.graalvm.wasm.WasmFunction"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "executeIndirectCallNode",
    "target_class": "com.oracle.truffle.api.CallTarget, java.lang.Object[]):java.lang.Object \t org.graalvm.wasm.nodes.WasmIndirectCallNode"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "load",
    "target_class": "com.oracle.truffle.api.frame.VirtualFrame, int, int, long):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "store",
    "target_class": "com.oracle.truffle.api.frame.VirtualFrame, int, int, long):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "executeAtomicAtAddress",
    "target_class": "com.oracle.truffle.api.frame.VirtualFrame, int, int, long):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "loadVector",
    "target_class": "com.oracle.truffle.api.frame.VirtualFrame, int, int, long):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "storeVector",
    "target_class": "long, org.graalvm.wasm.api.Vector128):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "loadVectorLane",
    "target_class": "com.oracle.truffle.api.frame.VirtualFrame, int, int, long, int, org.graalvm.wasm.api.Vector128):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "storeVectorLane",
    "target_class": "int, long, int, org.graalvm.wasm.api.Vector128):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "global_set",
    "target_class": "org.graalvm.wasm.WasmInstance, com.oracle.truffle.api.frame.VirtualFrame, int, int):void \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "global_get",
    "target_class": "org.graalvm.wasm.WasmInstance, com.oracle.truffle.api.frame.VirtualFrame, int, int):void \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "local_tee",
    "target_class": "int, int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "local_tee_obj",
    "target_class": "int, int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "local_set",
    "target_class": "int, int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "local_set_obj",
    "target_class": "int, int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "local_get",
    "target_class": "int, int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "local_get_obj",
    "target_class": "int, int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_eqz",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_eqz",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_eq",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_ne",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_lt_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_lt_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_gt_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_gt_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_le_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_le_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_ge_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_ge_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_eq",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_ne",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_lt_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_lt_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_gt_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_gt_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_le_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_le_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_ge_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_ge_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_eq",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_ne",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_lt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_gt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_le",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_ge",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_eq",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_ne",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_lt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_gt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_le",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_ge",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_clz",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_ctz",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_popcnt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_add",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_sub",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_mul",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_and",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_or",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_xor",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_shl",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_shr_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_shr_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_rotl",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_rotr",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_clz",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_ctz",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_popcnt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_add",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_sub",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_mul",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_and",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_or",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_xor",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_shl",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_shr_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_shr_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_rotl",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_rotr",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_abs",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_neg",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_ceil",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_floor",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_trunc",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_nearest",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_sqrt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_add",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_sub",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_mul",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_div",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_min",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_max",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_copysign",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_abs",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_neg",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_ceil",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_floor",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_trunc",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_nearest",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_sqrt",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_add",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_sub",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_mul",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_div",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_min",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_max",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_copysign",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_wrap_i64",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_trunc_sat_f32_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_trunc_sat_f32_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_trunc_sat_f64_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_trunc_sat_f64_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_extend_i32_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_extend_i32_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_trunc_sat_f32_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_trunc_sat_f32_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_trunc_sat_f64_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_trunc_sat_f64_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_convert_i32_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_convert_i32_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_convert_i64_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_convert_i64_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_demote_f64",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_convert_i32_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_convert_i32_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_convert_i64_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_convert_i64_u",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_promote_f32",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_reinterpret_f32",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_reinterpret_f64",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f32_reinterpret_i32",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "f64_reinterpret_i64",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_extend8_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i32_extend16_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_extend8_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_extend16_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "i64_extend32_s",
    "target_class": "int):void \t org.graalvm.wasm.nodes.WasmFrame"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "table_init",
    "target_class": "org.graalvm.wasm.WasmInstance, int, int, int, int, int):void \t org.graalvm.wasm.WasmTable"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "table_get",
    "target_class": "org.graalvm.wasm.WasmInstance, com.oracle.truffle.api.frame.VirtualFrame, int, int):void \t org.graalvm.wasm.WasmTable"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "table_set",
    "target_class": "org.graalvm.wasm.WasmInstance, com.oracle.truffle.api.frame.VirtualFrame, int, int):void \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "table_size",
    "target_class": "org.graalvm.wasm.WasmInstance, com.oracle.truffle.api.frame.VirtualFrame, int, int):void \t org.graalvm.wasm.TableRegistry"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "table_grow",
    "target_class": "org.graalvm.wasm.WasmInstance, int, java.lang.Object, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "table_copy",
    "target_class": "org.graalvm.wasm.WasmInstance, int, int, int, int, int):void \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "table_fill",
    "target_class": "org.graalvm.wasm.WasmInstance, int, java.lang.Object, int, int):void \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "memory_init",
    "target_class": "int, int, long, int, int):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "memory_init_unsafe",
    "target_class": "int, int, long, int, int):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "data_drop",
    "target_class": "int):void \t org.graalvm.wasm.RuntimeState"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "data_drop_unsafe",
    "target_class": "int):void \t org.graalvm.wasm.RuntimeState"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "memory_fill",
    "target_class": "long, int, long, int):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "memory_copy",
    "target_class": "long, long, long, int, int):void \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "resolveCallNode",
    "target_class": "int):void \t org.graalvm.wasm.WasmFunction"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "createArgumentsForCall",
    "target_class": "int, int, int):java.lang.Object[] \t org.graalvm.wasm.WasmModule"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "unwindPrimitiveStack",
    "target_class": "int, int, int):void \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "unwindObjectStack",
    "target_class": "int, int, int):void \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "unwindStack",
    "target_class": "int, int, int):void \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "dropStack",
    "target_class": "int, int):void \t com.oracle.truffle.api.CompilerAsserts"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "profileCondition",
    "target_class": "int, boolean):boolean \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "updateBranchTableProfile",
    "target_class": "int, int):void \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "profileBranchTable",
    "target_class": "int, int, boolean):boolean \t com.oracle.truffle.api.CompilerDirectives"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "pushDirectCallResult",
    "target_class": "int, org.graalvm.wasm.WasmFunction, java.lang.Object, org.graalvm.wasm.WasmLanguage):int \t org.graalvm.wasm.WasmFunction"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmFunctionNode",
    "source_method": "pushIndirectCallResult",
    "target_class": "int, int, java.lang.Object, org.graalvm.wasm.WasmLanguage):int \t org.graalvm.wasm.WasmModule"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmIndirectCallNode",
    "source_method": "doCached",
    "target_class": "java.lang.Object[], com.oracle.truffle.api.nodes.DirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.DirectCallNode"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmIndirectCallNode",
    "source_method": "doIndirect",
    "target_class": "java.lang.Object[], com.oracle.truffle.api.nodes.IndirectCallNode):java.lang.Object \t com.oracle.truffle.api.nodes.IndirectCallNode"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmRootNode",
    "source_method": "moveArgumentsToLocals",
    "target_class": "org.graalvm.wasm.nodes.WasmInstrumentableFunctionNode"
  },
  {
    "source_class": "org.graalvm.wasm.nodes.WasmRootNode",
    "source_method": "initializeLocals",
    "target_class": "org.graalvm.wasm.nodes.WasmInstrumentableFunctionNode"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.testutil.RunCustomInitializationNode",
    "source_method": "initializeModule",
    "target_class": "org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiClockTimeGetNode",
    "source_method": "unimplementedClock",
    "target_class": "org.graalvm.wasm.exception.WasmException"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiConstantRandomGetNode",
    "source_method": "randomGet",
    "target_class": "int, int):int \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdFdstatGetNode",
    "source_method": "fdFdstatGet",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdFdstatSetFlagsNode",
    "source_method": "fdFdstatSetFlags",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, short):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdReadNode",
    "source_method": "fdRead",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int):int \t org.graalvm.wasm.predefined.wasi.fd.Fd"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathCreateDirectoryNode",
    "source_method": "pathCreateDirectory",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathFileStatGetNode",
    "source_method": "pathFilestatGet",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathFilestatSetTimesNode",
    "source_method": "pathFilestatSetTimeNode",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int, long, long, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathLinkNode",
    "source_method": "pathLink",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathOpenNode",
    "source_method": "pathOpen",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int, short, long, long, short, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathRemoveDirectoryNode",
    "source_method": "pathRemoveDirectory",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathRenameNode",
    "source_method": "pathRename",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathSymlinkNode",
    "source_method": "pathSymlink",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathUnlinkFileNode",
    "source_method": "pathUnlinkFile",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiRandomGetNode",
    "source_method": "randomGet",
    "target_class": "int, int):int \t org.graalvm.wasm.memory.WasmMemory"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdCloseNode",
    "source_method": "fdClose",
    "target_class": "int):int \t org.graalvm.wasm.predefined.wasi.fd.Fd"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdFilestatGetNode",
    "source_method": "fdFilestatGet",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdFilestatSetTimesNode",
    "source_method": "fdstatSetTime",
    "target_class": "int, long, long, int):int \t org.graalvm.wasm.predefined.wasi.fd.Fd"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdPrestatDirNameNode",
    "source_method": "fdPrestatDirName",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdPrestatGetNode",
    "source_method": "fdPrestatGet",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdSeekNode",
    "source_method": "fdSeek",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, long, int, int):int \t org.graalvm.wasm.WasmContext"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiFdWriteNode",
    "source_method": "fdWrite",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int):int \t org.graalvm.wasm.predefined.wasi.fd.Fd"
  },
  {
    "source_class": "org.graalvm.wasm.predefined.wasi.WasiPathReadLinkNode",
    "source_method": "pathReadLink",
    "target_class": "org.graalvm.wasm.memory.WasmMemory, int, int, int, int, int):int \t org.graalvm.wasm.WasmContext"
  }
]