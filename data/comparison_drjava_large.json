[
    {
        "oracle": "method edu.rice.cs.drjava.config.ConfigOptionListeners.RequiresInteractionsRestartListener::_setupNotificationsPanel(ConfigPanel):void need move to edu.rice.cs.drjava.ui.config.ConfigFrame",
        "class_name": "edu.rice.cs.drjava.config.ConfigOptionListeners.RequiresInteractionsRestartListener",
        "telemetry": {
            "id": "7e6f395f-6a8c-469c-9ad9-2e81a9236f2a",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 352,
                "lineStart": 53,
                "lineEnd": 404,
                "bodyLineStart": 53,
                "language": "java",
                "sourceCode": "/**\n * Tests opening/creating files specified as command line arguments.\n * @version $Id: CommandLineTest.java 5175 2010-01-20 08:46:32Z mgricken $\n */\npublic final class CommandLineTest extends DrJavaTestCase {\n  /** File separator, i.e. '/' or '\\\\'. */\n  private static final char FS = File.separatorChar;\n  \n  /** The MainFrame we're working with. */\n  public MainFrame _mf;\n  \n  /** Files that exist, and the filenames that represent them. */\n  private volatile File f1;\n  private volatile String f1_name;\n  private volatile String f1_contents;\n  private volatile File f2;\n  private volatile String f2_name;\n  private volatile String f2_contents;\n  private volatile File f3;\n  private volatile String f3_name;\n  private volatile String f3_contents;\n  private volatile File f4;\n  private volatile String f4_name;\n  private volatile String f4_contents;\n  private volatile File f5;\n  private volatile String f5_name;\n  private volatile String f5_contents;\n  private volatile File f6;\n  private volatile String f6_name;\n  private volatile String f6_contents;\n  private volatile File f7;\n  private volatile String f7_name;\n  private volatile String f7_contents;\n  private volatile File f8;\n  private volatile String f8_name;\n  private volatile String f8_contents;\n  \n  \n  /** Files that do not exist (constructor deletes them), and their filenames. */\n  private volatile File nof1;\n  private volatile File nof2;\n  private volatile File nof3;\n  private volatile File nof4;\n  private volatile File nof5;\n  public volatile String nof1_name;\n  private volatile String nof2_name;\n  private volatile String nof3_name;\n  private volatile String nof4_name;\n  private volatile String nof5_name;\n  \n  public Log _log = new Log(\"CommandLineTest.txt\", false);\n  \n  /** Constructor.  Sets up test files for us to use: (i) three files that exist and can be opened; (ii) three\n    * files that don't exist\n    * @param name the name of the test case\n    */\n  public CommandLineTest(String name) { super(name); }\n  \n  public void setUp() throws Exception {\n    super.setUp();\n    \n//    _log.log(\"INVOKing DrJava._initConfig() for \" + this);\n//  Perform Swing initialization in event thread because the event thread is already running\n    Utilities.invokeAndWait(new Runnable() { \n      public void run() {\n        \n        _log.log(\"Creating a MainFrame for \" + this);\n        _mf = new MainFrame(); \n        _log.log(\"Created a MainFrame for \" + this + \"; stating file setup\");\n        \n        try {\n          f1 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f1.deleteOnExit();\n          f1_name = f1.getAbsolutePath();\n          f1_contents = \"abcde\";\n          FileWriter fw1 = new FileWriter(f1);\n          fw1.write(f1_contents,0,f1_contents.length());\n          fw1.close();\n          f2 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f2.deleteOnExit();\n          f2_name = f2.getAbsolutePath();\n          f2_contents = \"fghijklm\";\n          FileWriter fw2 = new FileWriter(f2);\n          fw2.write(f2_contents,0,f2_contents.length());\n          fw2.close();\n          f3 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f3.deleteOnExit();\n          f3_name = f3.getAbsolutePath();\n          f3_contents = \"nopqrstuvwxyz\";\n          FileWriter fw3 = new FileWriter(f3);\n          fw3.write(f3_contents,0,f3_contents.length());\n          fw3.close();\n          f4 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f4.deleteOnExit();\n          f4_name = f4.getAbsolutePath();\n          f4_contents = \"abcde\";\n          FileWriter fw4 = new FileWriter(f4);\n          fw4.write(f4_contents,0,f4_contents.length());\n          fw4.close();\n          f5 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f5.deleteOnExit();\n          f5_name = f5.getAbsolutePath();\n          f5_contents = \"fghijklm\";\n          FileWriter fw5 = new FileWriter(f5);\n          fw5.write(f5_contents,0,f5_contents.length());\n          fw5.close();\n          f6 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f6.deleteOnExit();\n          f6_name = f6.getAbsolutePath();\n          f6_contents = \"nopqrstuvwxyz\";\n          FileWriter fw6 = new FileWriter(f6);\n          fw6.write(f6_contents,0,f6_contents.length());\n          fw6.close();\n          f7 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f7.deleteOnExit();\n          f7_name = f7.getAbsolutePath();\n          f7_contents = \"abcde\";\n          FileWriter fw7 = new FileWriter(f7);\n          fw7.write(f7_contents,0,f7_contents.length());\n          fw7.close();\n          f8 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          f8.deleteOnExit();\n          f8_name = f8.getAbsolutePath();\n          f8_contents = \"fghijklm\";\n          FileWriter fw8 = new FileWriter(f8);\n          fw8.write(f8_contents,0,f8_contents.length());\n          fw8.close();\n          \n          nof1 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          nof1_name = nof1.getAbsolutePath();\n          nof1.delete();\n          nof2 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          nof2_name = nof2.getAbsolutePath();\n          nof2.delete();\n          nof3 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          nof3_name = nof3.getAbsolutePath();\n          nof3.delete();\n          nof4 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          nof4_name = nof4.getAbsolutePath();\n          nof4.delete();\n          nof5 = File.createTempFile(\"DrJava-test\", \".java\").getCanonicalFile();\n          nof5_name = nof5.getAbsolutePath();\n          nof5.delete();\n          \n          _log.log(\"File initialization (setUp) is complete\");\n        }\n        catch (IOException e) {\n          System.out.print(\"createTempFile failed.  This should not happen.\");\n          throw new RuntimeException(e.toString());\n        }\n      }\n    });\n  }\n  \n  public void tearDown() throws Exception {\n    Utilities.invokeAndWait(new Runnable() { public void run() { _mf.dispose(); } });\n    _mf = null;\n    super.tearDown();\n  }\n  \n  /** Tests DrJava with no command line arguments. Should open a new, untitled document. */\n  public void testNone() {\n    DrJavaRoot.openCommandLineFiles(_mf, new String[0],false);\n    // ListModel<DefinitionsDocument> docs =\n    // Wouldn't that be nice?\n    List<OpenDefinitionsDocument> docs = _mf.getModel().getOpenDefinitionsDocuments();\n    assertEquals(\"Only one document?\", 1, docs.size());\n    OpenDefinitionsDocument doc = docs.get(0);\n    assertTrue(\"Is new document untitled?\", doc.isUntitled());\n    _log.log(\"testNone() completed\");\n    \n  }\n  \n  /** Open one file on the command line.  Should (obviously) open that file. */\n  public void testOpenOne() throws BadLocationException {\n    String[] list = new String[1];\n    list[0] = f1_name;\n    DrJavaRoot.openCommandLineFiles(_mf, list,false);\n//    _log.log(\"openCommandLineFiles completed\");\n    List<OpenDefinitionsDocument> docs = _mf.getModel().getOpenDefinitionsDocuments();\n//    Utilities.showDebug(docs.toString());\n//    _log.log(\"got OpenDefDocs\");\n    assertEquals(\"Only one document opened?\", 1, docs.size());\n    OpenDefinitionsDocument doc = docs.get(0);\n//    System.err.println(\"Doc text = \" + doc.getText());\n    assertEquals(\"Correct length of file?\", f1_contents.length(), doc.getLength());\n//    _log.log(\"Ready to perform getText operation\");\n    assertEquals(\"Do the contents match?\", f1_contents, doc.getText(0,f1_contents.length()));\n    _log.log(\"testOpenOne completed\");\n  }\n  \n  /** Many files on the command line.  Should open all of them, displaying the last one. */\n  public void testOpenMany() throws BadLocationException {\n    String[] list = new String[3];\n    list[0] = f1_name;\n    list[1] = f2_name;\n    list[2] = f3_name;\n    DrJavaRoot.openCommandLineFiles(_mf, list, false);\n//    _log.log(\"openCommandLineFiles completed\");\n    List<OpenDefinitionsDocument> docs = _mf.getModel().getOpenDefinitionsDocuments();\n    assertEquals(\"Exactly three documents?\", 3, docs.size());\n    OpenDefinitionsDocument doc1 = docs.get(0);\n    assertEquals(\"Correct length of file 1?\", f1_contents.length(), doc1.getLength());\n    assertEquals(\"Do the contents of file 1 match?\", f1_contents, doc1.getText(0,f1_contents.length()));\n    \n    OpenDefinitionsDocument doc2 = docs.get(1);\n    assertEquals(\"Correct length of file 2?\", f2_contents.length(), doc2.getLength());\n    assertEquals(\"Do the contents of file 2 match?\", f2_contents, doc2.getText(0,f2_contents.length()));\n    \n    OpenDefinitionsDocument doc3 = docs.get(2);\n    assertEquals(\"Correct length of file 3?\", f3_contents.length(), doc3.getLength());\n    assertEquals(\"Do the contents of file 3 match?\", f3_contents, doc3.getText(0,f3_contents.length()));\n    \n    assertEquals(\"Is the last document the active one?\", doc3, _mf.getModel().getActiveDocument());\n    _log.log(\"testOpenMany completed\");\n  }\n  \n  /** Supplying both valid and invalid filenames on the command line. Should open only the valid ones. */\n  public void testMixed() throws BadLocationException {\n    String[] list = new String[6];\n    list[0] = f4_name;\n    list[1] = nof1_name;\n    list[2] = nof2_name;\n    list[3] = f5_name;\n    list[4] = f6_name;\n    list[5] = nof3_name;\n    DrJavaRoot.openCommandLineFiles(_mf, list, false);\n//    _log.log(\"openCommandLineFiles completed\");\n    List<OpenDefinitionsDocument> docs = _mf.getModel().getOpenDefinitionsDocuments();\n    assertEquals(\"Exactly three documents?\", 3, docs.size());\n    OpenDefinitionsDocument doc1 = docs.get(0);\n    assertEquals(\"Correct length of file 1?\", f4_contents.length(), doc1.getLength());\n    assertEquals(\"Do the contents of file 1 match?\", f4_contents, doc1.getText(0,f4_contents.length()));\n    \n    OpenDefinitionsDocument doc2 = docs.get(1);\n    assertEquals(\"Correct length of file 2?\", f5_contents.length(), doc2.getLength());\n    assertEquals(\"Do the contents of file 2 match?\", f5_contents, doc2.getText(0,f5_contents.length()));\n    \n    OpenDefinitionsDocument doc3 = docs.get(2);\n    assertEquals(\"Correct length of file 3?\", f6_contents.length(), doc3.getLength());\n    assertEquals(\"Do the contents of file 3 match?\", f6_contents, doc3.getText(0,f6_contents.length()));\n    \n    assertEquals(\"Is the last document the active one?\", doc3, _mf.getModel().getActiveDocument());\n    _log.log(\"testMixed completed\");\n  }\n  \n  /** Test duplicate files. */\n  public void testDups() throws BadLocationException {\n    String[] list = new String[6];\n    list[0] = f7_name;\n    list[1] = nof4_name;\n    list[2] = nof5_name;\n    list[3] = f8_name;\n    list[4] = f8_name;\n    list[5] = f7_name;\n    DrJavaRoot.openCommandLineFiles(_mf, list, false);\n//    _log.log(\"openCommandLineFiles in testDups completed\");\n    \n    List<OpenDefinitionsDocument> docs = _mf.getModel().getOpenDefinitionsDocuments();\n    Utilities.clearEventQueue();\n    assertEquals(\"Exactly two documents?\", 2, docs.size());\n    OpenDefinitionsDocument doc1 = docs.get(0);\n    assertEquals(\"Correct length of file 1?\", f7_contents.length(), doc1.getLength());\n    assertEquals(\"Do the contents of file 1 match?\", f7_contents, doc1.getText(0,f7_contents.length()));\n    Utilities.clearEventQueue();\n    OpenDefinitionsDocument doc2 = docs.get(1);\n    assertEquals(\"Correct length of file 2?\", f8_contents.length(), doc2.getLength());\n    assertEquals(\"Do the contents of file 2 match?\", f8_contents, doc2.getText(0,f8_contents.length()));\n    \n    assertEquals(\"Is the last document the active one?\", doc2, _mf.getModel().getActiveDocument());\n//    _log.log(\"testDups completed\");\n  }\n  \n  /** A regression test for bug #542747, which related to opening a file via the command line using a relative path.\n    * The problem was that getSourceRoot() would fail on the document, because the filename was not absolute. (The\n    * fix will be to absolutize file paths when opening files.)\n    */\n  public void testRelativePath() throws IOException, InvalidPackageException {\n    String funnyName = \"DrJava_automatically_deletes_this_1\";\n    File newDirectory = mkTempDir(funnyName);\n    File relativeFile = new File(newDirectory, \"X.java\");\n    \n    assertEquals(relativeFile + \" is absolute?\", false, relativeFile.isAbsolute());\n    \n    try { checkFile(relativeFile, funnyName); }\n    catch (Exception e) { fail(\"Exception thrown: \" + StringOps.getStackTrace(e)); }\n    finally { IOUtil.deleteOnExitRecursively(newDirectory); }\n    _log.log(\"testRelativePath completed\");\n  }\n  \n  /** Tests paths with \".\" and \"..\" in them.  Windows will blow up if you use one in a JFileChooser without\n    * converting it to a canonical filename.\n    */\n  public void testDotPaths() {\n    String funnyName = \"DrJava_automatically_deletes_this_2\";\n    File newDirectory = mkTempDir(funnyName);\n    \n    assertTrue(\"child directory created OK\", new File(newDirectory, \"childDir\").mkdir());\n    \n    File relativeFile = new File(newDirectory, \".\" + FS + \"X.java\");\n    File relativeFile2 = new File(newDirectory, \".\" + FS + \"Y.java\");\n    File relativeFile3 = new File(newDirectory, \"childDir\" + FS + \"..\" + FS + \"Z.java\");\n    \n    try {\n      checkFile(relativeFile, funnyName);\n      checkFile(relativeFile2, funnyName);\n      checkFile(relativeFile3, funnyName);\n    }\n    catch (Exception e) { fail(\"Exception thrown: \" + StringOps.getStackTrace(e)); }\n    finally { IOUtil.deleteOnExitRecursively(newDirectory); }\n    _log.log(\"testDotPaths completed\");\n  }\n  \n  /** Helper for testRelativeFile and testDotPaths. */\n  private File mkTempDir(String funnyName) {\n    // OK, we have to create a directory with a hard-coded name in the current working directory, so we'll make it\n    // strange. If this directory happens to exist, it'll be deleted.\n    File newDirectory = new File(funnyName);\n    if (newDirectory.exists()) IOUtil.deleteOnExitRecursively(newDirectory);\n//    System.err.println(\"newDirectory.exists() = \" + newDirectory.exists());\n    assertTrue(\"directory created OK\", newDirectory.mkdir());\n//    _log.log(\"Temporary directory \" + funnyName + \" created\");\n    return newDirectory;\n  }\n  \n  /** Helper for testRelativeFile and testDotPaths. */\n  private void checkFile(File relativeFile, String funnyName) throws IOException, InvalidPackageException {\n    IOUtil.writeStringToFile(relativeFile, \"package \" + funnyName + \"; class X { }\");\n    assertTrue(\"file exists\", relativeFile.exists());\n    \n    String path = relativeFile.getCanonicalPath();\n    DrJavaRoot.openCommandLineFiles(_mf, new String[] { path }, false);\n    \n    List<OpenDefinitionsDocument> docs = _mf.getModel().getOpenDefinitionsDocuments();\n    assertEquals(\"Number of open documents\", 1, docs.size());\n    \n    OpenDefinitionsDocument doc = docs.get(0);\n    \n    assertEquals(\"OpenDefDoc file is the right one and is canonical\", relativeFile.getCanonicalFile(), doc.getFile());\n    \n    // The source root should be the current directory (as a canonical path, of course).\n    Utilities.clearEventQueue();\n    File root = doc.getSourceRoot();\n    Utilities.clearEventQueue();\n//    System.err.println(\"Source root is: \" + root);\n//    System.err.println(\"Package name is: \" + doc.getPackageName());\n    assertEquals(\"source root\", IOUtil.WORKING_DIRECTORY.getCanonicalFile(), root);\n    \n    // Close this doc to clean up after ourselves for the next check.\n    _mf.getModel().closeFile(doc);\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 2,
                "candidates": [
                    {
                        "lineStart": 377,
                        "lineEnd": 402,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.MainFrame\nRationale: The method interacts with the model and open documents, which are likely managed by the MainFrame class. It also involves file operations and UI interactions, making it more suitable for the MainFrame.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 365,
                        "lineEnd": 375,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.MainFrame\nRationale: The mkTempDir method is related to file and directory management, which is likely to be relevant in the context of the MainFrame class, especially if it handles user interactions that involve file operations.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "elapsedTime": [
                {
                    "candidateIndex": 0,
                    "elapsedTime": 3477
                }
            ],
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 13360
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "mkTempDir",
                        "checkFile"
                    ],
                    "llm_response_time": 2253
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "mkTempDir",
                        "checkFile"
                    ],
                    "llm_response_time": 7605
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "mkTempDir",
                        "checkFile"
                    ],
                    "llm_response_time": 2623
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "mkTempDir",
                        "checkFile"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "checkFile",
                    "mkTempDir"
                ],
                "llm_response_time": 742
            },
            "targetClassMap": {
                "checkFile": {
                    "target_classes": [
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.5285418761241203
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.4252080824867723
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "MainFrame",
                        "Log"
                    ],
                    "llm_response_time": 2033,
                    "similarity_computation_time": 38,
                    "similarity_metric": "cosine"
                },
                "mkTempDir": {
                    "target_classes": [
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.47455990700702366
                        },
                        {
                            "class_name": "Log",
                            "similarity_score": 0.4372666825422979
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "MainFrame",
                        "Log"
                    ],
                    "llm_response_time": 1585,
                    "similarity_computation_time": 31,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.TestDocGetter::testConstructOneDocWithoutLineNums():void need move to edu.rice.cs.drjava.model.compiler.CompilerErrorModelTest",
        "class_name": "edu.rice.cs.drjava.model.TestDocGetter",
        "telemetry": {
            "id": "1c59aae7-6565-47d5-b1ec-8bb06b85f0f8",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 805,
                "lineStart": 55,
                "lineEnd": 859,
                "bodyLineStart": 55,
                "language": "java",
                "sourceCode": "/** @version $Id: ConfigOptionListeners.java 5186 2010-03-03 00:14:02Z fro21888 $ */\npublic class ConfigOptionListeners implements OptionConstants {\n  public static class DisplayAllCompilerVersionsListener implements OptionListener<Boolean>, OptionConstants {\n    protected JFrame _parent;\n    public DisplayAllCompilerVersionsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<Boolean> oe) {\n      JOptionPane.showMessageDialog(_parent, \"You will have to restart DrJava before the change takes effect.\");\n    }\n  }\n  \n  public static class SlaveJVMArgsListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public SlaveJVMArgsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n//      final OptionListener<String> slaveJvmArgsListener = this;\n      DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, this);\n      if (!oe.value.equals(\"\")) {\n        int result = JOptionPane.\n          showConfirmDialog(_parent,\n                            \"Specifying Interations JVM Args is an advanced option. Invalid arguments may cause\\n\" +\n                            \"the Interactions Pane to stop working.\\n\" + \"Are you sure you want to set this option?\\n\" +\n                            \"(You will have to reset the interactions pane before changes take effect.)\",\n                            \"Confirm Interactions JVM Arguments\", JOptionPane.YES_NO_OPTION);\n        if (result!=JOptionPane.YES_OPTION) {\n          DrJava.getConfig().setSetting(oe.option, \"\");\n        }\n        else {\n          sanitizeSlaveJVMArgs(_parent, oe.value, this);\n        }\n      }\n      DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, this);\n    }\n  }\n\n  @SuppressWarnings(\"fallthrough\")\n  public static void sanitizeSlaveJVMArgs(JFrame parent,\n                                          String value,\n                                          final OptionListener<String> l) {\n    int pos = value.indexOf(\"-Xmx\");\n    if (((pos>1) && (Character.isWhitespace(value.charAt(pos-1)))) ||\n        (pos == 0)) {\n      int endpos = pos+(\"-Xmx\".length());\n      while(endpos<value.length() && (! Character.isWhitespace(value.charAt(endpos)))) {\n        ++endpos;\n      }\n      \n      int startpos = pos+(\"-Xmx\".length());\n      String size = value.substring(startpos,endpos);\n      long factor = 1;\n      long heapSize;\n      switch(size.toLowerCase().charAt(size.length()-1)) {\n        case 'g': {\n          factor *= 1024; // fall-through intended\n        }\n        case 'm': {\n          factor *= 1024; // fall-through intended\n        }\n        case 'k': {\n          factor *= 1024; // fall-through intended\n          break;\n        }\n        default: {\n          if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1))) factor = 0;\n        }\n      }\n      try {\n        if (factor == 1)  heapSize = new Long(size);\n        else if (factor > 1) heapSize = new Long(size.substring(0,size.length()-1)) * factor;\n        else heapSize = -1;\n      }\n      catch(NumberFormatException nfe) { heapSize = -1; /* invalid */ }\n      long heapSizeMB = (heapSize / 1024) / 1024;\n      // find the next bigger of the choices\n      String newSetting = getNextBiggerHeapSize(heapSizeMB);\n      int result;\n      if (heapSize >= 0) {\n        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\", \"Clean \\\"Slave JVM Args\\\"\", \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\" + \n                           \"Would you like to copy the value \\\"\" + newSetting + \"\\\" into the \\\"Maximum Heap\\\" setting,\\n\" + \n                           \"just clean up \\\"JVM Args for Interactions JVM\\\", or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n      }\n      else {\n        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\",\n          \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Interactions JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting should be used instead.\\n\" + \n                           \"Furthermore, the specified heap size \\\"\" + size + \"\\\" is invalid.\\n\" + \n                           \"Would you like to clean up the \\\"JVM Args for Interactions JVM\\\"\\n\" + \n                           \"or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result==1) { result = 2; }\n      }\n      if (result!=2) {\n        // clean up\n        while((endpos<value.length()) &&\n              (Character.isWhitespace(value.charAt(endpos)))) {\n          ++endpos;\n        }\n        String newValue = value.substring(0,pos) + value.substring(endpos);\n        DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, l);\n        DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, new OptionListener<String>() {\n          public void optionChanged(OptionEvent<String> oe) {\n            DrJava.getConfig().removeOptionListener(SLAVE_JVM_ARGS, this);\n            EventQueue.invokeLater(new Runnable() { \n              public void run() { DrJava.getConfig().addOptionListener(SLAVE_JVM_ARGS, l); }\n            });\n          }\n        });\n        DrJava.getConfig().setSetting(SLAVE_JVM_ARGS, newValue);\n        if (result == 0) {\n          // copy\n          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, newSetting);\n        }\n        else {\n          JOptionPane.showMessageDialog(parent,\n                                        \"You will have to reset the interactions pane before changes take effect.\");\n        }\n      }\n    }\n  }\n  \n  public static class SlaveJVMXMXListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public SlaveJVMXMXListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      DrJava.getConfig().removeOptionListener(SLAVE_JVM_XMX, this);\n      sanitizeSlaveJVMXMX(_parent, oe.value);\n      DrJava.getConfig().addOptionListener(SLAVE_JVM_XMX, this);\n      JOptionPane.showMessageDialog(_parent,\n                                    \"You will have to reset the interactions pane before changes take effect.\");\n    }\n  }\n  \n  public static void sanitizeSlaveJVMXMX(JFrame parent, String value) {\n    if ((!value.equals(\"\")) &&\n        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {\n      long heapSize;\n      String size = value.trim();\n      try {\n        heapSize = new Long(size);\n      }\n      catch(NumberFormatException nfe) {\n        heapSize = -1; // invalid\n      }\n      if (heapSize < 0) {\n        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",\n          \"Ignore\" };\n        int result = JOptionPane.\n          showOptionDialog(parent,\n                           \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + \n                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",\n                           \"Invalid Maximum Heap Size\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result == 0) {\n          // clean up\n          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n      else if (heapSize > 0) {\n        if (!checkHeapSize(heapSize)) {\n          JOptionPane.\n            showMessageDialog(parent,\n                              \"The \\\"Maximum Heap Memory for Interactions JVM\\\" setting is too big: \\\"\" + size + \"\\\"\\n\" + \n                              \"DrJava has reset the heap size to the default. You should choose something smaller.\",\n                              \"Maximum Heap Size Too Big\",\n                              JOptionPane.ERROR_MESSAGE);\n          // clean up\n          DrJava.getConfig().setSetting(SLAVE_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n    }\n  }\n  \n  /** Return the next bigger heap size setting. */\n  static String getNextBiggerHeapSize(long heapSizeMB) {\n    String newSetting = OptionConstants.heapSizeChoices.get(0);\n    for(int i=1; i < OptionConstants.heapSizeChoices.size(); ++i) {\n      try {\n        newSetting = OptionConstants.heapSizeChoices.get(i);\n        float choice = new Float(newSetting);\n        if (choice>=heapSizeMB) {\n          return newSetting;\n        }\n      }\n      catch(NumberFormatException nfe) {\n        return OptionConstants.heapSizeChoices.get(0);\n      }\n    }\n    return newSetting;\n  }\n  \n  public static class MasterJVMArgsListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public MasterJVMArgsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);\n//      final OptionListener<String> masterJvmArgsListener = this;\n      if (!oe.value.equals(\"\")) {\n        int result = JOptionPane.\n          showConfirmDialog(_parent,\n                            \"Specifying Main JVM Args is an advanced option. Invalid arguments may cause\\n\" +\n                            \"DrJava to fail on start up.  You may need to edit or delete your .drjava preferences file\\n\" +\n                            \"to recover.\\n Are you sure you want to set this option?\\n\" +\n                            \"(You will have to restart Drjava before changes take effect.)\",\n                            \"Confirm Main JVM Arguments\", JOptionPane.YES_NO_OPTION);\n        if (result!=JOptionPane.YES_OPTION) {\n          DrJava.getConfig().setSetting(oe.option, \"\");\n        }\n        else {\n          sanitizeMasterJVMArgs(_parent, oe.value, this);\n        }\n      }\n      DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, this);\n    }\n  }\n  \n  @SuppressWarnings(\"fallthrough\")\n  public static void sanitizeMasterJVMArgs(JFrame parent, String value, final OptionListener<String> l) {\n    int pos = value.indexOf(\"-Xmx\");\n    if ((pos > 1 && Character.isWhitespace(value.charAt(pos-1))) || pos == 0) {\n      int endpos = pos+(\"-Xmx\".length());\n      while((endpos<value.length()) &&\n            (!Character.isWhitespace(value.charAt(endpos)))) {\n        ++endpos;\n      }\n      \n      int startpos = pos+(\"-Xmx\".length());\n      String size = value.substring(startpos,endpos);\n      long factor = 1;\n      long heapSize;\n      switch(size.toLowerCase().charAt(size.length()-1)) {\n        case 'g': { factor *= 1024; /* fall-through intended */ }\n        case 'm': { factor *= 1024; /* fall-through intended */ }\n        case 'k': {\n          factor *= 1024; /* fall-through intended */\n          break;\n        }\n        default: { if (!Character.isDigit(size.toLowerCase().charAt(size.length()-1)))  factor = 0; }\n      }\n      try {\n        if (factor==1)  heapSize = new Long(size);\n        else if (factor>1)  heapSize = new Long(size.substring(0,size.length()-1)) * factor;\n        else  heapSize = -1;\n      }\n      catch(NumberFormatException nfe) { heapSize = -1; /* invalid */ }\n      long heapSizeMB = (heapSize / 1024) / 1024;\n      \n      // find the next bigger of the choices\n      String newSetting = getNextBiggerHeapSize(heapSizeMB);\n      int result;\n      if (heapSize >= 0) {\n        String[] options = new String[] { \"Copy to \\\"Maximum Heap\\\" Setting\", \"Clean \\\"Master JVM Args\\\"\", \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\" + \n                           \"Would you like to copy the value \\\"\" + newSetting + \"\\\" into the \\\"Maximum Heap\\\" setting,\\n\" + \n                           \"just clean up \\\"JVM Args for Main JVM\\\", or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n      }\n      else {\n        String[] options = new String[] { \"Clean \\\"Main JVM Args\\\"\", \"Ignore\" };\n        result = JOptionPane.\n          showOptionDialog(parent,\n                           \"You seem to have specified the maximum heap size as part of the\\n\" +\n                           \"\\\"JVM Args for Main JVM\\\" setting: \\\"-Xmx\" + size + \"\\\"\\n\" + \n                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting should be used instead.\\n\" + \n                           \"Furthermore, the specified heap size \\\"\" + size + \"\\\" is invalid.\\n\" + \n                           \"Would you like to clean up the \\\"JVM Args for Main JVM\\\"\\n\" + \n                           \"or ignore this potential problem?\",\n                           \"Maximum Heap Size Set in JVM Arguments\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result==1) { result = 2; }\n      }\n      if (result!=2) {\n        // clean up\n        while(endpos<value.length() && Character.isWhitespace(value.charAt(endpos))) ++endpos;\n\n        String newValue = value.substring(0,pos) + value.substring(endpos);\n        DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, l);\n        DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, new OptionListener<String>() {\n          public void optionChanged(OptionEvent<String> oe) {\n            DrJava.getConfig().removeOptionListener(MASTER_JVM_ARGS, this);\n            EventQueue.invokeLater(new Runnable() { \n              public void run() { DrJava.getConfig().addOptionListener(MASTER_JVM_ARGS, l); }\n            });\n          }\n        });\n        DrJava.getConfig().setSetting(MASTER_JVM_ARGS, newValue);\n        if (result == 0) DrJava.getConfig().setSetting(MASTER_JVM_XMX, newSetting);   // copy\n        else JOptionPane.showMessageDialog(parent, \"You will have to restart DrJava before the change takes effect.\");\n      }\n    }\n  }\n  \n  public static class MasterJVMXMXListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public MasterJVMXMXListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      DrJava.getConfig().removeOptionListener(MASTER_JVM_XMX, this);\n      sanitizeMasterJVMXMX(_parent, oe.value);\n      JOptionPane.showMessageDialog(_parent, \"You will have to restart DrJava before the change takes effect.\");\n      DrJava.getConfig().addOptionListener(MASTER_JVM_XMX, this);\n    }\n  }\n  \n  public static void sanitizeMasterJVMXMX(JFrame parent, String value) {\n    if ((!value.equals(\"\")) &&\n        (!value.equals(OptionConstants.heapSizeChoices.get(0)))) {\n      String size = value.trim();\n      long heapSize;\n      try {\n        heapSize = new Long(size);\n      }\n      catch(NumberFormatException nfe) {\n        heapSize = -1; // invalid\n      }\n      if (heapSize < 0) {\n        String[] options = new String[] { \"Clean \\\"Maximum Heap\\\" Setting\",\n          \"Ignore\" };\n        int result = JOptionPane.\n          showOptionDialog(parent,\n                           \"The \\\"Maximum Heap Memory for Main JVM\\\" setting is invalid: \\\"\" + size + \"\\\"\\n\" + \n                           \"Would you like to clean up the \\\"Maximum Heap\\\" setting or ignore this potential problem?\",\n                           \"Invalid Maximum Heap Size\",\n                           0,\n                           JOptionPane.QUESTION_MESSAGE,\n                           null,\n                           options,\n                           options[0]);\n        if (result == 0) {\n          // clean up\n          DrJava.getConfig().setSetting(MASTER_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n      else if (heapSize > 0) {\n        if (!checkHeapSize(heapSize)) {\n          JOptionPane.\n            showMessageDialog(parent,\n                              \"The \\\"Maximum Heap Memory for Main JVM\\\" setting is too big: \\\"\" + size + \"\\\"\\n\" + \n                              \"DrJava has reset the heap size to the default. You should choose something smaller.\",\n                              \"Maximum Heap Size Too Big\",\n                              JOptionPane.ERROR_MESSAGE);\n          // clean up\n          DrJava.getConfig().setSetting(MASTER_JVM_XMX, OptionConstants.heapSizeChoices.get(0));\n        }\n      }\n    }\n  }\n  \n  /** @return true if a JVM can be created with the specified heap size (in MB) */\n  public static boolean checkHeapSize(long heapSize) {\n    int exitValue = 1;\n    try {\n      JVMBuilder jvmb = JVMBuilder.DEFAULT.jvmArguments(\"-Xmx\"+heapSize+\"M\");\n      Process p = jvmb.start(MemoryCheckDummy.class.getName());\n      exitValue = p.waitFor();\n    }\n    catch(java.io.IOException e) { exitValue = 1; }\n    catch(InterruptedException e) { exitValue = 1; }\n    return (exitValue==0);\n  }\n  \n  /** Class that gets executed to check if the selected heap size is possible. */\n  public static class MemoryCheckDummy {\n    public static void main(String[] args) {\n      final StringBuilder sb = new StringBuilder(\"DrJava Version : \");\n      sb.append(edu.rice.cs.drjava.Version.getVersionString());\n      sb.append(\"\\nDrJava Build Time: \");\n      sb.append(edu.rice.cs.drjava.Version.getBuildTimeString());\n      sb.append(\"\\n\\nUsed memory: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()-Runtime.getRuntime().freeMemory()));\n      sb.append(\"\\nFree memory: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().freeMemory()));\n      sb.append(\"\\nTotal memory: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().totalMemory()));\n      sb.append(\"\\nTotal memory can expand to: about \");\n      sb.append(StringOps.memSizeToString(Runtime.getRuntime().maxMemory()));\n      System.out.println(sb.toString());\n      System.exit(0);\n    }\n  }\n  \n  public static class JavadocCustomParamsListener implements OptionListener<String>, OptionConstants {\n    protected JFrame _parent;\n    public JavadocCustomParamsListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      sanitizeJavadocCustomParams(_parent, oe.value);\n    }\n  }\n  \n  public static void sanitizeJavadocCustomParams(JFrame parent,\n                                                 String value) {\n    boolean containsPrivate = (value.indexOf(\"-private\") >= 0);\n    boolean containsProtected = (value.indexOf(\"-protected\") >= 0);\n    boolean containsPublic = (value.indexOf(\"-public\") >= 0);\n    boolean containsPackage = (value.indexOf(\"-package\") >= 0);\n\n    if (containsPrivate || containsProtected || containsPublic || containsPackage) {\n      StringBuilder sb = new StringBuilder();\n      if (containsPublic) { sb.append(\"-public \"); }\n      if (containsProtected) { sb.append(\"-protected \"); }\n      if (containsPrivate) { sb.append(\"-private \"); }\n      if (containsPackage) { sb.append(\"-package \"); }      \n      String[] options = new String[] { \"Copy to \\\"Access Level\\\" Setting\",\n        \"Clean \\\"Custom Javadoc Parameters\\\"\",\n        \"Ignore\" };\n      int result = JOptionPane.\n        showOptionDialog(parent,\n                         \"You seem to have specified \" + sb.toString() + \"as part of the\\n\" +\n                         \"\\\"Custom Javadoc Parameters\\\" setting. The \\\"Access Level\\\"\\n\" + \n                         \"setting should be used instead. Would you like to copy the\\n\" + \n                         \"parameter into the \\\"Access Level\\\" setting, just clean up\\n\" + \n                         \"\\\"Custom Javadoc Parameters\\\", or ignore this potential problem?\",\n                         \"Access Level Set in Custom Javadoc Parameters\",\n                         0,\n                         JOptionPane.QUESTION_MESSAGE,\n                         null,\n                         options,\n                         options[0]);\n      if (result!=2) {\n        if (result == 0) {\n          // copy\n          if (containsPublic) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"public\"); }\n          else if (containsProtected) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"protected\"); }\n          else if (containsPrivate) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"private\"); }\n          else if (containsPackage) { DrJava.getConfig().setSetting(JAVADOC_ACCESS_LEVEL, \"package\"); }\n        }\n        // clean up\n        String[] params = value.split(\"(-private|-protected|-package|-public)\");\n        sb = new StringBuilder();\n        for(int i = 0; i < params.length; i++){\n          if(!params[i].trim().equals(\"\")) { sb.append(params[i].trim()); sb.append(' '); }\n        }\n        DrJava.getConfig().setSetting(JAVADOC_CUSTOM_PARAMS, sb.toString().trim());\n      }\n    }\n  }\n  \n  public static class LookAndFeelListener implements OptionListener<String> {\n    protected JFrame _parent;\n    public LookAndFeelListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n//        try {\n//          UIManager.setLookAndFeel(oe.value);\n//          SwingUtilities.updateComponentTreeUI(MainFrame.this);\n//          if (_debugPanel != null) {\n//            SwingUtilities.updateComponentTreeUI(_debugPanel);\n//          }\n//          if (_configFrame != null) {\n//            SwingUtilities.updateComponentTreeUI(_configFrame);\n//          }\n//          if (_helpFrame != null) {\n//            SwingUtilities.updateComponentTreeUI(_helpFrame);\n//          }\n//          if (_aboutDialog != null) {\n//            SwingUtilities.updateComponentTreeUI(_aboutDialog);\n//          }\n//          SwingUtilities.updateComponentTreeUI(_navPanePopupMenu);\n//          SwingUtilities.updateComponentTreeUI(_interactionsPanePopupMenu);\n//          SwingUtilities.updateComponentTreeUI(_consolePanePopupMenu);\n//          SwingUtilities.updateComponentTreeUI(_openChooser);\n//          SwingUtilities.updateComponentTreeUI(_saveChooser);\n//          Iterator<TabbedPanel> it = _tabs.iterator();\n//          while (it.hasNext()) {\n//            SwingUtilities.updateComponentTreeUI(it.next());\n//          }\n//        }\n//        catch (Exception ex) {\n//          _showError(ex, \"Could Not Set Look and Feel\",\n//                     \"An error occurred while trying to set the look and feel.\");\n//        }\n      \n      String title = \"Apply Look and Feel\";\n      String msg = \"Look and feel changes will take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_LAF).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_LAF, Boolean.FALSE);\n        }\n      }\n    }\n  }\n  \n  public static class PlasticThemeListener implements OptionListener<String> {\n    protected JFrame _parent;\n    public PlasticThemeListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {\n      String title = \"Apply Theme\";\n      String msg = \"Changes to the theme will take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_THEME).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_THEME, Boolean.FALSE);\n        }\n      }\n    }\n  }  \n  \n  public static class RequiresDrJavaRestartListener<T> implements OptionListener<T> {\n    protected JFrame _parent;\n    protected String _description;\n    public RequiresDrJavaRestartListener(JFrame parent, String description) {\n      _parent = parent;\n      _description = description;\n    }\n    public void optionChanged(OptionEvent<T> oe) {      \n      String title = \"Apply Preference Changes\";\n      String msg = \"Changes to the '\"+_description+\"' preferences\\nwill only take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_MISC).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_MISC, Boolean.FALSE);\n        }\n      }\n    }\n  }\n\n  public static class RequiresInteractionsRestartListener<T> implements OptionListener<T> {\n    protected JFrame _parent;\n    protected String _description;\n    public RequiresInteractionsRestartListener(JFrame parent, String description) {\n      _parent = parent;\n      _description = description;\n    }\n    public void optionChanged(OptionEvent<T> oe) {\n      String title = \"Apply Preference Changes\";\n      String msg = \"Changes to the '\"+_description+\"' preferences\\nwill only take effect when you reset the Interactions Pane.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_INTERACTIONS).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_INTERACTIONS, Boolean.FALSE);\n        }\n      }\n    }\n\t/** Adds all of the components for the Prompts panel of the preferences window. \n\t * @param configFrame TODO\n\t * @param panel TODO*/\n\t  public void _setupNotificationsPanel(ConfigFrame configFrame, ConfigPanel panel) {\n\t    // Quit\n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.QUIT_PROMPT, \"Prompt Before Quit\", configFrame,\n\t                                                         \"Whether DrJava should prompt the user before quitting.\", false)\n\t                         .setEntireColumn(true));\n\t\n\t    // Interactions\n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.INTERACTIONS_RESET_PROMPT,\n\t                                                         \"Prompt Before Resetting Interactions Pane\", configFrame,\n\t                                                         \"<html>Whether DrJava should prompt the user before<br>\" +\n\t                                                         \"manually resetting the interactions pane.</html>\", false)\n\t                         .setEntireColumn(true));\n\t    \n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.INTERACTIONS_EXIT_PROMPT,\n\t                                                  \"Prompt if Interactions Pane Exits Unexpectedly\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should show a dialog box if a program<br>\" +\n\t                                                  \"in the Interactions Pane exits without the user clicking Reset.</html>\",\n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t\n\t    // Javadoc\n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.JAVADOC_PROMPT_FOR_DESTINATION,\n\t                                                         \"Prompt for Javadoc Destination\", \n\t                                                         configFrame,\n\t                                                         \"<html>Whether Javadoc should always prompt the user<br>\" +\n\t                                                         \"to select a destination directory.</html>\", \n\t                                                         false)\n\t                         .setEntireColumn(true));\n\t\n\t\n\t    // Clean\n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.PROMPT_BEFORE_CLEAN,\n\t                                                         \"Prompt before Cleaning Build Directory\", configFrame,\n\t                                                         \"<html>Whether DrJava should prompt before cleaning the<br>\" +\n\t                                                         \"build directory of a project</html>\", false)\n\t                         .setEntireColumn(true));\n\t\n\t    // Prompt to change the language level extensions (.dj0/.dj1->.dj, .dj2->.java)\n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.PROMPT_RENAME_LL_FILES, \"Prompt to Rename Old Language Level Files When Saving\", configFrame,\n\t                                                         \"<html>Whether DrJava should prompt the user to rename old language level files.<br>\"+\n\t                                                         \"DrJava suggests to rename .dj0 and .dj1 files to .dj, and .dj2 files to .java.</html>\", false)\n\t                         .setEntireColumn(true));\n\t\n\t    \n\t    // Save before X\n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_COMPILE,\n\t                                                         \"Automatically Save Before Compiling\", configFrame,\n\t                                                         \"<html>Whether DrJava should automatically save before<br>\" +\n\t                                                         \"recompiling or ask the user each time.</html>\", false)\n\t                         .setEntireColumn(true));\n\t    \n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JUNIT, \n\t                                                         \"Automatically Compile Before Testing\", configFrame,\n\t                                                         \"<html>Whether DrJava should automatically compile before<br>\" +\n\t                                                         \"testing with JUnit or ask the user each time.</html>\", false)\n\t                         .setEntireColumn(true)); \n\t    \n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_JAVADOC,\n\t                                                         \"Automatically Save Before Generating Javadoc\", configFrame,\n\t                                                         \"<html>Whether DrJava should automatically save before<br>\" +\n\t                                                         \"generating Javadoc or ask the user each time.</html>\", false)\n\t                         .setEntireColumn(true));\n\t    \n\t    configFrame.addOptionComponent(panel, new BooleanOptionComponent(OptionConstants.ALWAYS_COMPILE_BEFORE_JAVADOC,\n\t                                                         \"Automatically Compile Before Generating Javadoc\", configFrame,\n\t                                                         \"<html>Whether DrJava should automatically compile before<br>\" +\n\t                                                         \"generating Javadoc or ask the user each time.</html>\", false)\n\t                         .setEntireColumn(true));\n\t\n\t\n\t    // These are very problematic features, and so are disabled for the forseeable future.\n\t//    addOptionComponent(panel, \n\t//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_RUN, \n\t//                                                  \"Automatically Save and Compile Before Running Main Method\", \n\t//                                                  this,\n\t//                                                  \"<html>Whether DrJava automatically saves and compiles before running<br>\" +\n\t//                                                  \"a document's main method or explicitly asks the user each time.</html>\"));\n\t//    addOptionComponent(panel, \n\t//                       new BooleanOptionComponent(OptionConstants.ALWAYS_SAVE_BEFORE_DEBUG, \n\t//                                                  \"Automatically Save and Compile Before Debugging\", \n\t//                                                  this,\n\t//                                                  \"<html>Whether DrJava automatically saves and compiles before<br>\" +\n\t//                                                  \"debugging or explicitly asks the user each time.</html>\"));\n\t    \n\t    // Warnings\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_BREAKPOINT_OUT_OF_SYNC,\n\t                                                  \"Warn on Breakpoint if Out of Sync\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user if the class file<br>\" +\n\t                                                  \"is out of sync before setting a breakpoint in that file.</html>\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_DEBUG_MODIFIED_FILE,\n\t                                                  \"Warn if Debugging Modified File\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +\n\t                                                  \"debugged has been modified since its last save.</html>\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_LAF,\n\t                                                  \"Warn to Restart to Change Look and Feel\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user that look and feel<br>\" +\n\t                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_THEME,\n\t                                                  \"Warn to Restart to Change Theme\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user that theme<br>\" +\n\t                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_DCP,\n\t                                                  \"Warn to Restart to Change Default Compiler Preference\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user that default compiler preference<br>\" +\n\t                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_MISC,\n\t                                                  \"Warn to Restart to Change Preferences (other)\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user that preference<br>\" +\n\t                                                  \"changes will not be applied until DrJava is restarted.</html>.\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_CHANGE_INTERACTIONS,\n\t                                                  \"Warn to Reset to Change Interactions\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user that preference<br>\" +\n\t                                                  \"changes will not be applied until the Interactions Pane<br>\" +\n\t                                                  \"is reset.</html>.\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.WARN_PATH_CONTAINS_POUND,\n\t                                                  \"Warn if File's Path Contains a '#' Symbol\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user if the file being<br>\" +\n\t                                                  \"saved has a path that contains a '#' symbol.<br>\" +\n\t                                                  \"Users cannot use such files in the Interactions Pane<br>\" +\n\t                                                  \"because of a bug in Java.</html>\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t\n\t    configFrame.addOptionComponent(panel, \n\t                       new BooleanOptionComponent(OptionConstants.DIALOG_DRJAVA_ERROR_POPUP_ENABLED, \n\t                                                  \"Show a notification window when the first DrJava error occurs\", \n\t                                                  configFrame,\n\t                                                  \"<html>Whether to show a notification window when the first DrJava error occurs.<br>\" +\n\t                                                  \"If this is disabled, only the \\\"DrJava Error\\\" button will appear.</html>\", \n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    configFrame.addOptionComponent(panel,\n\t                       new BooleanOptionComponent(OptionConstants.WARN_IF_COMPIZ, \n\t                                                  \"Warn If Compiz Detected\",\n\t                                                  configFrame,\n\t                                                  \"<html>Whether DrJava should warn the user if Compiz is running.<br>\"+\n\t                                                  \"Compiz and Java Swing are incompatible and can lead to crashes.</html>\",\n\t                                                  false)\n\t                         .setEntireColumn(true));\n\t    \n\t    \n\t    configFrame.addOptionComponent(panel, \n\t                       new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +\n\t                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + \n\t                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", configFrame, true));\n\t\n\t    configFrame.addOptionComponent(panel, \n\t                       new ForcedChoiceOptionComponent(OptionConstants.DELETE_LL_CLASS_FILES,\n\t                                                       \"Delete language level class files?\", configFrame,\n\t                                                       \"Whether DrJava should delete class files in directories with language level files.\"));\n\t\n\t    configFrame.addOptionComponent(panel, \n\t                       new LabelComponent(\"<html>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" +\n\t                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\" + \n\t                                          \"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</html>\", configFrame, true));\n\t\n\t    configFrame.addOptionComponent(panel, \n\t                       new ForcedChoiceOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION,\n\t                                                       \"Check for new versions?\", configFrame,\n\t                                                       \"Whether DrJava should check for new versions on drjava.org.\"));\n\t    configFrame.addOptionComponent(panel, new IntegerOptionComponent(OptionConstants.NEW_VERSION_NOTIFICATION_DAYS,\n\t                                                         \"Days between new version check\", configFrame,\n\t                                                         \"The number of days between automatic new version checks.\"));\n\t\n\t    panel.displayComponents();\n\t  }\n  }\n  \n   public static class DefaultCompilerListener implements OptionListener<String> {\n    protected JFrame _parent;\n    public DefaultCompilerListener(JFrame parent) { _parent = parent; }\n    public void optionChanged(OptionEvent<String> oe) {      \n      String title = \"Apply Default Compiler Preference Change\";\n      String msg = \"Default Compiler Preference will take effect when you restart DrJava.\";\n      if (DrJava.getConfig().getSetting(WARN_CHANGE_DCP).booleanValue()) {\n        ConfirmCheckBoxDialog dialog =\n          new ConfirmCheckBoxDialog(_parent, title, msg,\n                                    \"Do not show this message again\",\n                                    JOptionPane.INFORMATION_MESSAGE,\n                                    JOptionPane.DEFAULT_OPTION);\n        if (dialog.show() == JOptionPane.OK_OPTION && dialog.getCheckBoxValue()) {\n          DrJava.getConfig().setSetting(WARN_CHANGE_DCP, Boolean.FALSE);\n        }\n      }\n    }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 7,
                "candidates": [
                    {
                        "lineStart": 88,
                        "lineEnd": 191,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method deals with JVM arguments and settings, which are likely part of the configuration setup for the DrJava environment. Moving it to DrJavaPropertySetup aligns it with the management of properties related to the Java environment.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 292,
                        "lineEnd": 379,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method 'sanitizeMasterJVMArgs' deals with JVM arguments and settings, which are likely part of the configuration setup for the DrJava application. Moving it to 'DrJavaPropertySetup' aligns it with the management of application properties.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 205,
                        "lineEnd": 247,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method sanitizeSlaveJVMXMX deals with configuration settings related to the JVM heap size, which aligns with the responsibilities of DrJavaPropertySetup in managing and setting up properties for the DrJava application.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 392,
                        "lineEnd": 434,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method sanitizeMasterJVMXMX deals with configuration settings related to the JVM heap size, which aligns with the responsibilities of DrJavaPropertySetup in managing application properties.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 436,
                        "lineEnd": 447,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method checkHeapSize() is related to configuring the Java Virtual Machine (JVM) settings, which aligns with the responsibilities of DrJavaPropertySetup in managing properties related to the DrJava environment.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 249,
                        "lineEnd": 265,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.OptionConstants\nRationale: The method getNextBiggerHeapSize() directly interacts with OptionConstants.heapSizeChoices, making it logical to move this method to the OptionConstants class, which likely manages various option settings.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 477,
                        "lineEnd": 523,
                        "refactoringType": "MyMoveStaticMethodRefactoring",
                        "description": "move method to edu.rice.cs.drjava.config.DrJavaPropertySetup\nRationale: The method deals with Javadoc parameters and settings, which are likely part of the configuration setup for the DrJava application. Moving it to DrJavaPropertySetup aligns it with the management of application properties.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 33687
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "sanitizeSlaveJVMArgs",
                        "sanitizeMasterJVMArgs",
                        "sanitizeSlaveJVMXMX",
                        "sanitizeMasterJVMXMX",
                        "checkHeapSize",
                        "getNextBiggerHeapSize",
                        "sanitizeJavadocCustomParams",
                        "LookAndFeelListener",
                        "PlasticThemeListener",
                        "DefaultCompilerListener"
                    ],
                    "llm_response_time": 12719
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "sanitizeSlaveJVMArgs",
                        "sanitizeMasterJVMArgs",
                        "sanitizeSlaveJVMXMX",
                        "sanitizeMasterJVMXMX",
                        "sanitizeJavadocCustomParams",
                        "getNextBiggerHeapSize",
                        "checkHeapSize"
                    ],
                    "llm_response_time": 10953
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "sanitizeSlaveJVMArgs",
                        "sanitizeMasterJVMArgs",
                        "sanitizeSlaveJVMXMX",
                        "sanitizeMasterJVMXMX",
                        "checkHeapSize",
                        "sanitizeJavadocCustomParams",
                        "getNextBiggerHeapSize"
                    ],
                    "llm_response_time": 8418
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "sanitizeSlaveJVMArgs",
                        "sanitizeMasterJVMArgs",
                        "sanitizeSlaveJVMXMX",
                        "sanitizeMasterJVMXMX",
                        "checkHeapSize",
                        "getNextBiggerHeapSize",
                        "sanitizeJavadocCustomParams",
                        "LookAndFeelListener",
                        "PlasticThemeListener",
                        "DefaultCompilerListener"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "sanitizeSlaveJVMArgs",
                    "sanitizeMasterJVMArgs",
                    "sanitizeSlaveJVMXMX",
                    "sanitizeMasterJVMXMX",
                    "checkHeapSize",
                    "getNextBiggerHeapSize",
                    "sanitizeJavadocCustomParams",
                    "LookAndFeelListener",
                    "PlasticThemeListener",
                    "DefaultCompilerListener"
                ],
                "llm_response_time": 1509
            },
            "targetClassMap": {
                "sanitizeSlaveJVMArgs": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.5022101459204045
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.1307808376377743
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.41451333614483915
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.592418012171128
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.4035466178442546
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4933862433862434
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.3333059018776367
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6671687121218196
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3900890943467719
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.6080978781836597
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3461281218288633
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.6502387627621212
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.32948079029415284
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.5201543739723907
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3348781342647053
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3870111152784012
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.28005601680560194
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6799180487623075
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.6017460306229417
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.3610507445388753
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2883658559625699
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.5199401549558602
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.22059658062612805
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5291251279921817
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6649220756221502
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.3470653390787221
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6692324234232697
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5759873568351142
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5717547174692134
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.4592926511200384
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.5010907907239613
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6288096107582709
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.47331913943124887
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.36641405439646996
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.5031789634624948
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.54158686782656
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.41119969792768635
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5521568920593694
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5816495218751393
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.38018588439126494
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.43362666451534176
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.7820441990489998
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.55012528478634
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.4733360795504957
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.5883900140288104
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.36174523711294704
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.45552525800483057
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5857600500059299
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3640890911118309
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5543630041628614
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.43653188395191234
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.39293158532995354
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.5056998232295327
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.6086611075698954
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5678950849707911
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5658750210007698
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.24221879844735017
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.3603955979584714
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11074321899691639
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3615913429822787
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3615913429822787
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3615913429822787
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.28980029497627835
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.35864536204028274
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.31833650668318925
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.3516107215757399
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3512085593894638
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.28340443852253533
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.35050237358745495
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.34192771521937726
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.29160592175990213
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3708114661328734
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3503980090211551
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.29160592175990213
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.31104631654389564
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.33759782358136636
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.26636030162946683
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.2963555539297452
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.2457017552816338
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.23437252874355
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.3579757419679019
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.34363889494255956
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.3387946751716872
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3688921477798919
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.35444007304383374
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.1954693897510495
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3414903847838388
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.38281747344888717
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.38927456627585333
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.35345042397849036
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3318608823749688
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.285199818619858
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.16562108096584038
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.35916534917411935
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.361098651700035
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.3733350456661923
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.3439496209272696
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "OptionListener",
                        "ConfigProperty",
                        "OptionMapLoader",
                        "FileProperty",
                        "KeyStrokeOption",
                        "VectorOption",
                        "FileListProperty",
                        "RecursiveFileListProperty",
                        "PropertyMaps",
                        "DrJavaProperty",
                        "FontOption",
                        "OptionMapLoaderTest",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "UnaryOpProperty",
                        "BinaryOpProperty",
                        "ResourceBundleConfiguration",
                        "NonNegativeIntegerOptionTest",
                        "ForcedChoiceOptionTest",
                        "IntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "BooleanOptionTest",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "SavableConfigurationTest",
                        "VectorOptionTest",
                        "Option",
                        "DefaultOptionMap",
                        "ColorOption",
                        "MutableFileProperty",
                        "StringOptionTest",
                        "ConstantProperty",
                        "OptionParseException",
                        "DrJavaPropertySetupTest",
                        "JavaSystemProperty",
                        "FileOption",
                        "FileConfiguration",
                        "LongOption",
                        "NonNegativeIntegerOption",
                        "OptionParser",
                        "IntegerOption",
                        "ForcedChoiceOption",
                        "VariableProperty",
                        "SavableConfiguration",
                        "DrJavaActionProperty",
                        "BooleanOption",
                        "FontOptionTest",
                        "StringOption",
                        "OptionConstants",
                        "EagerProperty",
                        "OptionEvent",
                        "ParseStrategy",
                        "FormatStrategy",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 2045,
                    "similarity_computation_time": 90,
                    "similarity_metric": "cosine"
                },
                "sanitizeMasterJVMArgs": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.5036068100151253
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.12626477539542125
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.4106249236109923
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.5790621630903761
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3974897106928899
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4725176380923566
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.32684412529506573
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6487458189086621
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.4060935245175548
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.5988376292379923
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.35675691512150237
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.6367170534596654
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3283426920334306
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.5208425457549641
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3331270104119959
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3800148462033265
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2837341062835794
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6662014268730657
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.6015946339763976
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.35266806873318435
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.29276097432369724
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.5005171276888538
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.21839989017608283
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5120398211088578
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6444646915934624
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.37335441479772663
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6457349760028682
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5760926656773234
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5790053200057741
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.453673404758043
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.4678705686396916
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6260815489060042
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.4638643394867804
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3679075652659514
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4800098953857396
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5215209974368137
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.4062951596394763
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5315303675105103
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5884657469541248
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3822825757962039
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.42908561296611514
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.7684323093680016
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.5351956620094132
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.46245535779186786
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.5773322041301183
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.36354532937191636
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.4615657983129302
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5922915436229222
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.36137882115332476
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5275838871068054
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.4409734737891263
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.38996445254774126
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.5077320200924531
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.5801088829639928
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5463016123732747
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5403270587738722
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.24854284261346934
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.37257747665498625
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.10180898296477446
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.36765331659255013
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.36765331659255013
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.36765331659255013
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.28621182947071916
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.370910133002362
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.32969575085118175
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.3663003408343088
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.35709646865510325
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.29157893363466303
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.3647111019577019
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.35003719645855197
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2655273953168417
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3798149698379113
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.363774037444954
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2655273953168417
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.2859525795719834
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.34583198446927543
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.27269468625979537
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.3018847082135045
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.2523902829218678
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.24006322097836216
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.3693532099578466
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3564569893828287
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.3485668418697244
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3712024875017097
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.3646901742929706
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.20021549265126143
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3542283375215077
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.38521502628496057
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.39183340853355986
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.3556640535152678
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.33748458042517016
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2906125602153213
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.1696424507246007
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.36556705446656623
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3630141973362308
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.3830297358916037
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.35820771952448077
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "OptionListener",
                        "ConfigProperty",
                        "FileProperty",
                        "OptionMapLoader",
                        "KeyStrokeOption",
                        "VectorOption",
                        "FileListProperty",
                        "DrJavaProperty",
                        "PropertyMaps",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "RecursiveFileListProperty",
                        "FontOption",
                        "BinaryOpProperty",
                        "OptionMapLoaderTest",
                        "UnaryOpProperty",
                        "ResourceBundleConfiguration",
                        "NonNegativeIntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "IntegerOptionTest",
                        "ForcedChoiceOptionTest",
                        "BooleanOptionTest",
                        "ColorOptionTest",
                        "SavableConfigurationTest",
                        "Option",
                        "LongOptionTest",
                        "VectorOptionTest",
                        "ColorOption",
                        "DefaultOptionMap",
                        "StringOptionTest",
                        "MutableFileProperty",
                        "OptionParseException",
                        "ConstantProperty",
                        "DrJavaPropertySetupTest",
                        "JavaSystemProperty",
                        "FileOption",
                        "FileConfiguration",
                        "OptionParser",
                        "LongOption",
                        "NonNegativeIntegerOption",
                        "ForcedChoiceOption",
                        "IntegerOption",
                        "OptionConstants",
                        "VariableProperty",
                        "SavableConfiguration",
                        "DrJavaActionProperty",
                        "BooleanOption",
                        "StringOption",
                        "FontOptionTest",
                        "EagerProperty",
                        "OptionEvent",
                        "FormatStrategy",
                        "ParseStrategy",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 2364,
                    "similarity_computation_time": 24,
                    "similarity_metric": "cosine"
                },
                "sanitizeSlaveJVMXMX": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.4149149050564064
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11885645184252516
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.35475888723859084
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.5067494735621231
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.34815835039753074
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4263883923445463
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.2805547873816992
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.5856536783486616
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3169006517023506
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.5268321266728515
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.30227980481247935
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.5566106516552507
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.29842000880659403
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.43277047750240505
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.2974224913027369
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.33551506146937055
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.23195259991714118
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.5940946723587216
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.5213611857126251
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.2976336569554498
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.24044523591131528
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.44821946128815404
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.1967604453669851
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.4500616819272035
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6047041373207764
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.26879980192556124
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.5872757005132643
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.49140754989025437
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.47697133417008986
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.4106744122378561
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.45379740131991525
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.5514002153700139
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.3966321635605611
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3013845259203858
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4238006782242467
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.46525628919354367
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.35114424754722673
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.4759922124622249
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.4852525172192294
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.32087906586535375
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.369332077053671
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.6685730701898736
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.4682580593740934
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.3898358695104194
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.49492503635720364
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3100318272768329
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.3634702398686728
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.48869768387925244
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.30155185469012497
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.486389530692628
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.340355792055027
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3458140819275186
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.40923309828218063
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.5427267537018973
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.49761410932668143
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.4946052015930067
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.19161491054299623
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.32179755208713795
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.10165807349649782
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3246010684802756
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3246010684802756
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3246010684802756
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.2621052975272913
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.319224450662802
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.2823206172729115
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.31238130385883117
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.31528042872095385
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.25015769039449853
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.31182661921147264
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3049813797608417
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2705008904002297
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.33102092639336345
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3121651019951302
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2705008904002297
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.2855287176446869
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.30663986750406513
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.22395005070854485
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.2686271708798472
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.22029350197889278
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.20922279560267149
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.31814819914696385
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3055985283874447
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.30176862254400544
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3433984185572144
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.31461553755286925
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.17449422249999189
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.30368785543280064
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.34385747225524427
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.3535252089033328
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.31747915857089354
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.29631887899487686
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2525934760075916
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.14784883602260981
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3210238438821347
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.33456004189053673
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.3039185017169972
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "OptionConstants",
                        "KeyStrokeOption",
                        "ConfigProperty",
                        "OptionMapLoader",
                        "FileProperty",
                        "VectorOption",
                        "FileListProperty",
                        "RecursiveFileListProperty",
                        "PropertyMaps",
                        "DrJavaProperty",
                        "FontOption",
                        "ResourceBundleConfiguration",
                        "OptionMapLoaderTest",
                        "NonNegativeIntegerOptionTest",
                        "UnaryOpProperty",
                        "QuaternaryOpProperty",
                        "ForcedChoiceOptionTest",
                        "TernaryOpProperty",
                        "BinaryOpProperty",
                        "IntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "BooleanOptionTest",
                        "DefaultOptionMap",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "ColorOption",
                        "VectorOptionTest",
                        "Option",
                        "ConstantProperty",
                        "SavableConfigurationTest",
                        "StringOptionTest",
                        "MutableFileProperty",
                        "JavaSystemProperty",
                        "OptionParseException",
                        "FileOption",
                        "FileConfiguration",
                        "LongOption",
                        "NonNegativeIntegerOption",
                        "VariableProperty",
                        "DrJavaPropertySetupTest",
                        "IntegerOption",
                        "BooleanOption",
                        "SavableConfiguration",
                        "ForcedChoiceOption",
                        "OptionParser",
                        "StringOption",
                        "DrJavaActionProperty",
                        "EagerProperty",
                        "FontOptionTest",
                        "OptionListener",
                        "OptionEvent",
                        "ParseStrategy",
                        "FormatStrategy",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 2500,
                    "similarity_computation_time": 48,
                    "similarity_metric": "cosine"
                },
                "sanitizeMasterJVMXMX": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.4149149050564064
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11885645184252516
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.35475888723859084
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.5067494735621231
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.34815835039753074
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4263883923445463
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.2805547873816992
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.5856536783486616
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3169006517023506
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.5268321266728515
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.30227980481247935
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.5566106516552507
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.29842000880659403
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.43277047750240505
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.2974224913027369
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.33551506146937055
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.23195259991714118
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.5940946723587216
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.5213611857126251
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.2976336569554498
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.24044523591131528
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.44821946128815404
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.1967604453669851
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.4500616819272035
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6047041373207764
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.26758738573221164
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.5872757005132643
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.49140754989025437
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.47697133417008986
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.4106744122378561
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.45379740131991525
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.5514002153700139
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.3966321635605611
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3013845259203858
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4238006782242467
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.46525628919354367
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.35114424754722673
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.4759922124622249
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.4852525172192294
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.32087906586535375
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.369332077053671
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.6690172555980387
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.470289547701096
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.3898358695104194
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.49492503635720364
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3100318272768329
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.3634702398686728
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.48869768387925244
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.30155185469012497
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.486389530692628
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.340355792055027
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3458140819275186
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.40923309828218063
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.5427267537018973
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.49761410932668143
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.4946052015930067
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.19161491054299623
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.32179755208713795
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.10165807349649782
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3246010684802756
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3246010684802756
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3246010684802756
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.2621052975272913
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.319224450662802
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.2823206172729115
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.31238130385883117
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.31528042872095385
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.25015769039449853
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.31182661921147264
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3049813797608417
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2705008904002297
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.33102092639336345
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3121651019951302
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2705008904002297
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.2855287176446869
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.30663986750406513
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.22395005070854485
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.2686271708798472
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.22029350197889278
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.20922279560267149
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.31814819914696385
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3055985283874447
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.30176862254400544
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3433984185572144
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.31461553755286925
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.17449422249999189
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.30368785543280064
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.34385747225524427
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.3535252089033328
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.31747915857089354
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.29631887899487686
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2525934760075916
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.14784883602260981
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3210238438821347
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3253248175805189
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.33456004189053673
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.3039185017169972
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "KeyStrokeOption",
                        "ConfigProperty",
                        "OptionMapLoader",
                        "FileProperty",
                        "VectorOption",
                        "FileListProperty",
                        "RecursiveFileListProperty",
                        "PropertyMaps",
                        "DrJavaProperty",
                        "FontOption",
                        "ResourceBundleConfiguration",
                        "OptionMapLoaderTest",
                        "NonNegativeIntegerOptionTest",
                        "UnaryOpProperty",
                        "QuaternaryOpProperty",
                        "ForcedChoiceOptionTest",
                        "TernaryOpProperty",
                        "BinaryOpProperty",
                        "IntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "BooleanOptionTest",
                        "DefaultOptionMap",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "ColorOption",
                        "VectorOptionTest",
                        "Option",
                        "ConstantProperty",
                        "SavableConfigurationTest",
                        "StringOptionTest",
                        "MutableFileProperty",
                        "JavaSystemProperty",
                        "OptionParseException",
                        "FileOption",
                        "FileConfiguration",
                        "LongOption",
                        "NonNegativeIntegerOption",
                        "VariableProperty",
                        "DrJavaPropertySetupTest",
                        "IntegerOption",
                        "BooleanOption",
                        "SavableConfiguration",
                        "ForcedChoiceOption",
                        "OptionParser",
                        "StringOption",
                        "DrJavaActionProperty",
                        "EagerProperty",
                        "FontOptionTest",
                        "OptionListener",
                        "OptionEvent",
                        "ParseStrategy",
                        "FormatStrategy",
                        "OptionConstants",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1401,
                    "similarity_computation_time": 21,
                    "similarity_metric": "cosine"
                },
                "checkHeapSize": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.39120595879235354
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11868931087888489
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3667543418508897
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.4746750703974286
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3602775422804802
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.4856238539211126
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.3758340350425746
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6515394518080068
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3112420908990512
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.5312582409410521
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.28934086078211235
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.5541104161101753
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.32288829996897417
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.45620035056196956
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.34558827067302966
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3562626515972127
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.22390553775994956
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6498724382992573
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.5384857445549427
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.32203747293023505
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.2175970699446223
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.49157757399657115
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.2279211529192759
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.4349604158445194
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5026347052584254
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.582335495405328
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.3520700814260412
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.5962020483436553
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5656449322551804
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5265134668779847
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.42357954248770385
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.46261771638703103
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6180498074239881
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.42145591476476446
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.35557950110937975
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.513707393708107
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5102624443640013
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.36887052626510813
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5220368976638744
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5308180361709335
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3054448640892811
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.42358687104367887
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.6111478939131373
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.5157457641880903
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.48524366066821706
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.531334722112013
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3344849253542769
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.4735752231884302
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5317108279430159
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.30048021306698885
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5221166705785193
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.2255986756016621
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.370366148398511
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.5416037115563531
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.5793204503533727
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.4937634612372659
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5390519482441095
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.24831222786326923
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.3235765894610792
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.09296647613532098
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3394514291136108
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3394514291136108
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3394514291136108
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.27247463045653303
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.33540102562855695
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.29791678788934267
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.33701971188265994
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3297043740550192
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.2678222129683647
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.33501365726001897
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3271119466578582
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.26111648393354675
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3473227352427738
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3324007413453537
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.26111648393354675
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.26111648393354675
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.35428311972999765
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.3337891536756912
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.3103401918899219
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.28961646905374744
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.24945589327939088
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.2151358759909815
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.33590241436966206
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3194437129996473
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.31491832864888675
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.3228529696391083
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.17942579968289865
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.33040347578663
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.350033298449319
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.36563621206356534
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.32318121905169506
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3098753415048175
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2759132637573981
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.15202735801492656
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3266372899592439
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3373005262694457
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.34913864913011416
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.3147315304839234
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "JavaSystemProperty",
                        "FileProperty",
                        "ConfigProperty",
                        "FileListProperty",
                        "OptionMapLoader",
                        "KeyStrokeOption",
                        "RecursiveFileListProperty",
                        "UnaryOpProperty",
                        "VectorOption",
                        "SavableConfigurationTest",
                        "NonNegativeIntegerOptionTest",
                        "DrJavaProperty",
                        "QuaternaryOpProperty",
                        "OptionMapLoaderTest",
                        "PropertyMaps",
                        "TernaryOpProperty",
                        "BinaryOpProperty",
                        "ForcedChoiceOptionTest",
                        "IntegerOptionTest",
                        "KeyStrokeOptionTest",
                        "VectorOptionTest",
                        "BooleanOptionTest",
                        "ColorOptionTest",
                        "ResourceBundleConfiguration",
                        "LongOptionTest",
                        "ColorOption",
                        "MutableFileProperty",
                        "FontOption",
                        "OptionParseException",
                        "DefaultOptionMap",
                        "Configuration",
                        "ClassPathOption",
                        "ConstantProperty",
                        "StringOptionTest",
                        "Option",
                        "OptionEvent",
                        "NonNegativeIntegerOption",
                        "FileConfiguration",
                        "FileOption",
                        "LongOption",
                        "IntegerOption",
                        "VariableProperty",
                        "OptionConstants",
                        "EagerProperty",
                        "BooleanOption",
                        "DrJavaActionProperty",
                        "ForcedChoiceOption",
                        "StringOption",
                        "SavableConfiguration",
                        "FontOptionTest",
                        "OptionParser",
                        "ParseStrategy",
                        "FormatStrategy",
                        "OptionListener",
                        "RecursiveFileListPropertyTest",
                        "DrJavaPropertySetupTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1691,
                    "similarity_computation_time": 36,
                    "similarity_metric": "cosine"
                },
                "getNextBiggerHeapSize": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.42755487470184383
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11716404227796842
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.4533304253811686
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.5288715145201525
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.39811302879679994
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.5637345210021216
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.32735666148146897
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.70182900531698
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.38750156233455285
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.589744836269383
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.38382692718851086
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.5663054231459933
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3615945316606385
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.5078046052654189
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.48360418509577147
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.39964129940203186
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.25260359118026904
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.6656382996339169
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.6067769773699201
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.3339275108696662
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.24548656477288622
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.515624921321887
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.24106302110709238
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.44495682619913596
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5192533040339872
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6379621767340855
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.2969351293014861
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6063258530211526
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.6189489581863588
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5405620211111191
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.5437301576257939
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.6148626653124584
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6536863817332982
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.43947867492679543
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.37608211297324684
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4781283006928457
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5352238316928125
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.4217724268329625
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5475742762157305
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5438253264854712
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3670409764295107
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.4181433837626493
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.6345955452883616
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.4811869805638256
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.4922748066044886
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.4958570554574397
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.4344558965419409
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.43872826378089297
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.544046318046072
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.3019155250235218
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.564584941687748
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.1502213574582511
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.39172135409636205
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.47834460310746046
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.6547518942759106
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5967118742300536
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.574205911039682
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.230471083707187
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.39699135025640464
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.10925210715205451
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.3958470856962791
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.3958470856962791
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.3958470856962791
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.28818543935741636
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.38577991572865217
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3509007870361994
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.37521281224481456
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3844806779921202
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.30183950348998506
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.37830769686996607
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3736509777126882
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.30685820596610774
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3967372055079601
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3778522462322105
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.30685820596610774
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.30685820596610774
                        },
                        {
                            "class_name": "ClassPathOption",
                            "similarity_score": 0.4441019053226951
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.3796795169991607
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.27704180984252297
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.33481015250715046
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.2595142115495482
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.2507589721301414
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.3857222040145296
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3757861151199216
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.36083279807468976
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.3761941973155936
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.20913587236374473
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3734366130765737
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.4085143369505323
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.42539056009055665
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.37717600582758154
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3613572969308877
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.2918223432663729
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.17720068238680045
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.38090403580779264
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.39365426504409834
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.40388893488073907
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.36378903996483264
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OptionConstants",
                        "Configuration",
                        "FileProperty",
                        "ConfigProperty",
                        "RecursiveFileListProperty",
                        "FileListProperty",
                        "KeyStrokeOption",
                        "DrJavaPropertySetup",
                        "UnaryOpProperty",
                        "DefaultOptionMap",
                        "DrJavaProperty",
                        "OptionMapLoader",
                        "ResourceBundleConfiguration",
                        "PropertyMaps",
                        "NonNegativeIntegerOptionTest",
                        "VectorOption",
                        "ForcedChoiceOptionTest",
                        "ColorOption",
                        "IntegerOptionTest",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "ConstantProperty",
                        "BinaryOpProperty",
                        "BooleanOptionTest",
                        "FontOption",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "OptionMapLoaderTest",
                        "MutableFileProperty",
                        "EagerProperty",
                        "KeyStrokeOptionTest",
                        "SavableConfigurationTest",
                        "VectorOptionTest",
                        "FileOption",
                        "ClassPathOption",
                        "StringOptionTest",
                        "OptionParseException",
                        "DrJavaActionProperty",
                        "Option",
                        "FileConfiguration",
                        "JavaSystemProperty",
                        "IntegerOption",
                        "LongOption",
                        "BooleanOption",
                        "VariableProperty",
                        "NonNegativeIntegerOption",
                        "OptionParser",
                        "StringOption",
                        "SavableConfiguration",
                        "ForcedChoiceOption",
                        "FontOptionTest",
                        "OptionEvent",
                        "ParseStrategy",
                        "FormatStrategy",
                        "OptionListener",
                        "RecursiveFileListPropertyTest",
                        "DrJavaPropertySetupTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1182,
                    "similarity_computation_time": 13,
                    "similarity_metric": "cosine"
                },
                "sanitizeJavadocCustomParams": {
                    "target_classes": [
                        {
                            "class_name": "Option",
                            "similarity_score": 0.43126917521980596
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11155309082447186
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.37377450982551835
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.57268049139608
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.35710265715535494
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.48996909082126894
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.3321848874067578
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.6894690145192681
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.29362832555834695
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.589274007889287
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.2801922639636523
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.6139584005746497
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.37581990374627816
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.4627483463330917
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.3136320405897705
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.35847349773203774
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.2270571041406971
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.7190843653674144
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.5926486180243398
                        },
                        {
                            "class_name": "FontOptionTest",
                            "similarity_score": 0.32563321434696096
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.23142373666655786
                        },
                        {
                            "class_name": "LongOptionTest",
                            "similarity_score": 0.5109566453732676
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.21844531905252418
                        },
                        {
                            "class_name": "ColorOptionTest",
                            "similarity_score": 0.5131788824590501
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.6924890562486055
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.2619278775263332
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.6541259264525706
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.5442953163013639
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.5247159586153981
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.4324965514216731
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.5270489516300568
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.6446469152728517
                        },
                        {
                            "class_name": "StringOptionTest",
                            "similarity_score": 0.44265719111951557
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.3357992520529721
                        },
                        {
                            "class_name": "VectorOptionTest",
                            "similarity_score": 0.4955264334128008
                        },
                        {
                            "class_name": "BooleanOptionTest",
                            "similarity_score": 0.5303781145110013
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.37233647384839474
                        },
                        {
                            "class_name": "IntegerOptionTest",
                            "similarity_score": 0.5426167427101986
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.5346265740369874
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.3202781984163613
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.4112146276000562
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.7429428680768505
                        },
                        {
                            "class_name": "KeyStrokeOptionTest",
                            "similarity_score": 0.5209194887357864
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.448230374206605
                        },
                        {
                            "class_name": "OptionMapLoaderTest",
                            "similarity_score": 0.5466543872994377
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.3243886306502387
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.4065419160552896
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.5388982444329147
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.2912392068742611
                        },
                        {
                            "class_name": "ForcedChoiceOptionTest",
                            "similarity_score": 0.5522093890122737
                        },
                        {
                            "class_name": "DrJavaPropertySetupTest",
                            "similarity_score": 0.31592984402762664
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.37425335333754806
                        },
                        {
                            "class_name": "SavableConfigurationTest",
                            "similarity_score": 0.47955514522623865
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.6292708392671622
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.5424101360057683
                        },
                        {
                            "class_name": "NonNegativeIntegerOptionTest",
                            "similarity_score": 0.5642575021158952
                        },
                        {
                            "class_name": "RecursiveFileListPropertyTest",
                            "similarity_score": 0.20681039951560043
                        },
                        {
                            "class_name": "Option",
                            "similarity_score": 0.3713483312942951
                        },
                        {
                            "class_name": "OptionMap",
                            "similarity_score": 0.11496953551251148
                        },
                        {
                            "class_name": "FileOption",
                            "similarity_score": 0.37458353655796345
                        },
                        {
                            "class_name": "FontOption",
                            "similarity_score": 0.37458353655796345
                        },
                        {
                            "class_name": "LongOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "ColorOption",
                            "similarity_score": 0.37458353655796345
                        },
                        {
                            "class_name": "OptionEvent",
                            "similarity_score": 0.29363936385487877
                        },
                        {
                            "class_name": "FileProperty",
                            "similarity_score": 0.3717491312509271
                        },
                        {
                            "class_name": "OptionParser",
                            "similarity_score": 0.3265602460854442
                        },
                        {
                            "class_name": "PropertyMaps",
                            "similarity_score": 0.3545411484981936
                        },
                        {
                            "class_name": "StringOption",
                            "similarity_score": 0.3638276933305353
                        },
                        {
                            "class_name": "VectorOption",
                            "similarity_score": 0.2866863986308904
                        },
                        {
                            "class_name": "BooleanOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "Configuration",
                            "similarity_score": 0.3644627435303294
                        },
                        {
                            "class_name": "EagerProperty",
                            "similarity_score": 0.36165155072368793
                        },
                        {
                            "class_name": "IntegerOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "ParseStrategy",
                            "similarity_score": 0.3121529471316362
                        },
                        {
                            "class_name": "ConfigProperty",
                            "similarity_score": 0.3891507013562561
                        },
                        {
                            "class_name": "DrJavaProperty",
                            "similarity_score": 0.3659313329767786
                        },
                        {
                            "class_name": "FormatStrategy",
                            "similarity_score": 0.3121529471316362
                        },
                        {
                            "class_name": "OptionListener",
                            "similarity_score": 0.3229168418603133
                        },
                        {
                            "class_name": "KeyStrokeOption",
                            "similarity_score": 0.3481450953231137
                        },
                        {
                            "class_name": "OptionConstants",
                            "similarity_score": 0.2657360678415704
                        },
                        {
                            "class_name": "OptionMapLoader",
                            "similarity_score": 0.30235547083375536
                        },
                        {
                            "class_name": "UnaryOpProperty",
                            "similarity_score": 0.24123411199120048
                        },
                        {
                            "class_name": "BinaryOpProperty",
                            "similarity_score": 0.2394482988564823
                        },
                        {
                            "class_name": "ConstantProperty",
                            "similarity_score": 0.37208231925877766
                        },
                        {
                            "class_name": "DefaultOptionMap",
                            "similarity_score": 0.3519159253053053
                        },
                        {
                            "class_name": "FileListProperty",
                            "similarity_score": 0.35245439005751134
                        },
                        {
                            "class_name": "VariableProperty",
                            "similarity_score": 0.38836420285511375
                        },
                        {
                            "class_name": "FileConfiguration",
                            "similarity_score": 0.35933845996047964
                        },
                        {
                            "class_name": "TernaryOpProperty",
                            "similarity_score": 0.19970264051559242
                        },
                        {
                            "class_name": "ForcedChoiceOption",
                            "similarity_score": 0.35932984159469833
                        },
                        {
                            "class_name": "JavaSystemProperty",
                            "similarity_score": 0.3940684781975636
                        },
                        {
                            "class_name": "DrJavaPropertySetup",
                            "similarity_score": 0.4024348799842549
                        },
                        {
                            "class_name": "MutableFileProperty",
                            "similarity_score": 0.36383833120429426
                        },
                        {
                            "class_name": "DrJavaActionProperty",
                            "similarity_score": 0.34194642107142936
                        },
                        {
                            "class_name": "OptionParseException",
                            "similarity_score": 0.285668945035477
                        },
                        {
                            "class_name": "QuaternaryOpProperty",
                            "similarity_score": 0.16920791145892175
                        },
                        {
                            "class_name": "SavableConfiguration",
                            "similarity_score": 0.36665771362870087
                        },
                        {
                            "class_name": "NonNegativeIntegerOption",
                            "similarity_score": 0.3754187294266099
                        },
                        {
                            "class_name": "RecursiveFileListProperty",
                            "similarity_score": 0.3885946740131833
                        },
                        {
                            "class_name": "ResourceBundleConfiguration",
                            "similarity_score": 0.349465174317924
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "DrJavaPropertySetup",
                        "Configuration",
                        "ConfigProperty",
                        "KeyStrokeOption",
                        "FileProperty",
                        "OptionMapLoader",
                        "FileListProperty",
                        "RecursiveFileListProperty",
                        "VectorOption",
                        "DrJavaProperty",
                        "PropertyMaps",
                        "FontOption",
                        "NonNegativeIntegerOptionTest",
                        "ForcedChoiceOptionTest",
                        "OptionMapLoaderTest",
                        "UnaryOpProperty",
                        "IntegerOptionTest",
                        "ResourceBundleConfiguration",
                        "QuaternaryOpProperty",
                        "TernaryOpProperty",
                        "BooleanOptionTest",
                        "DefaultOptionMap",
                        "BinaryOpProperty",
                        "KeyStrokeOptionTest",
                        "ColorOptionTest",
                        "LongOptionTest",
                        "VectorOptionTest",
                        "ColorOption",
                        "SavableConfigurationTest",
                        "MutableFileProperty",
                        "StringOptionTest",
                        "ConstantProperty",
                        "Option",
                        "JavaSystemProperty",
                        "OptionParseException",
                        "VariableProperty",
                        "BooleanOption",
                        "LongOption",
                        "IntegerOption",
                        "NonNegativeIntegerOption",
                        "FileOption",
                        "FileConfiguration",
                        "SavableConfiguration",
                        "StringOption",
                        "EagerProperty",
                        "ForcedChoiceOption",
                        "DrJavaActionProperty",
                        "OptionEvent",
                        "OptionParser",
                        "FontOptionTest",
                        "OptionListener",
                        "DrJavaPropertySetupTest",
                        "ParseStrategy",
                        "FormatStrategy",
                        "OptionConstants",
                        "RecursiveFileListPropertyTest",
                        "OptionMap"
                    ],
                    "llm_response_time": 1450,
                    "similarity_computation_time": 16,
                    "similarity_metric": "cosine"
                },
                "LookAndFeelListener": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1627,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "PlasticThemeListener": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1918,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "DefaultCompilerListener": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 949,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.ui.MainFrame::testNE():void need move to edu.rice.cs.drjava.CommandLineTest",
        "class_name": "edu.rice.cs.drjava.ui.MainFrame",
        "telemetry": {
            "id": "75d75ccf-cc73-4a76-9b89-50171081c3ba",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 84,
                "lineStart": 58,
                "lineEnd": 141,
                "bodyLineStart": 58,
                "language": "java",
                "sourceCode": "/** Test implementation of the document fetching methods in the GlobalModel interface. */\npublic class TestDocGetter extends DummyGlobalModel {\n  \n  /** Storage for documents and File keys. */\n  HashMap<File, OpenDefinitionsDocument> docs;\n\n  /** Convenience constructor for no-documents case. */\n  public TestDocGetter() { this(new File[0], new String[0]); }\n\n  /** Primary constructor, builds OpenDefDocs from Strings.\n   *  @param files the keys to use when getting OpenDefDocs\n   *  @param texts the text to put in the OpenDefDocs\n   */\n  public TestDocGetter(File[] files, String[] texts) {\n    if (files.length != texts.length) {\n      throw new IllegalArgumentException(\"Argument arrays must match in size.\");\n    }\n\n    docs = new HashMap<File, OpenDefinitionsDocument>(texts.length * 2);\n\n    GlobalEventNotifier en = new GlobalEventNotifier();\n    for (int i = 0; i < texts.length; i++) {\n      DefinitionsDocument doc = new DefinitionsDocument(en);\n      OpenDefinitionsDocument odoc = new TestOpenDoc(doc);\n      odoc.setFile(files[i]);\n      try { doc.insertString(0, texts[i], null); }\n      catch (BadLocationException e) { throw new UnexpectedException(e); }\n      docs.put(files[i], odoc);\n    }\n  }\n\n  public OpenDefinitionsDocument getDocumentForFile(File file)\n    throws IOException {\n    // Try to find the key in docs.\n    if (docs.containsKey(file)) return docs.get(file);\n    else throw new IllegalStateException(\"TestDocGetter can't open new files!\");\n  }\n  \n  public List<OpenDefinitionsDocument> getOpenDefinitionsDocuments() {\n    return new ArrayList<OpenDefinitionsDocument>(docs.values());\n  }\n\n  /** Tests CompilerErrorModel setup code with one file and only errors without line numbers. \n * @param compilerErrorModelTest TODO*/\n  public void testConstructOneDocWithoutLineNums(CompilerErrorModelTest compilerErrorModelTest) {\n    compilerErrorModelTest.setupDoc();\n    compilerErrorModelTest.errors = new DJError[] { \n      new DJError(compilerErrorModelTest.files[0], \"Test error with File\", false),\n      new DJError(compilerErrorModelTest.files[0], \"Test warning with File\", true),\n      new DJError(compilerErrorModelTest.files[0], \"Test error with File\", false) \n    };\n    \n    DJError[] copy = new DJError[compilerErrorModelTest.errors.length];\n    for (int i = 0; i < compilerErrorModelTest.errors.length; i++)  copy[i] = compilerErrorModelTest.errors[i];\n    compilerErrorModelTest.model = new CompilerErrorModel(copy, this);\n    Utilities.clearEventQueue();  // constructor for CompilerErrorModel calls invokeLater\n    \n    // We successfully built the model, now test the basics.\n    Assert.assertEquals(\"Should have 3 compiler errors.\", 3, compilerErrorModelTest.model.getNumErrors());\n    Assert.assertEquals(\"Should have 1 warning\" , 1, compilerErrorModelTest.model.getNumWarnings());\n    Assert.assertEquals(\"Should have 2 compiler errors\" , 2, compilerErrorModelTest.model.getNumCompErrors());\n    Assert.assertEquals(\"Errors should be sorted.\", compilerErrorModelTest.errors[1], compilerErrorModelTest.model.getError(2));\n    Assert.assertTrue(\"hasOnlyWarnings should return false.\", !compilerErrorModelTest.model.hasOnlyWarnings());\n  }\n\n/** Test implementation of OpenDefinitionsDocument interface. */\n  private static class TestOpenDoc extends DummyOpenDefDoc {\n    DefinitionsDocument _doc;\n    File _file;\n    TestOpenDoc(DefinitionsDocument d) {\n      _doc = d;\n      _defDoc = d;\n      _file = FileOps.NULL_FILE;\n    }\n\n    /** This is the only method that we care about. */\n    public DefinitionsDocument getDocument() { return _doc; }\n\n    /** Okay, I lied.  We need this one, too. */\n    public File getFile() throws FileMovedException  { return _file; }\n    \n    public void setFile(File f) { _file = f; }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 99,
                        "lineEnd": 120,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.compiler.CompilerErrorModelTest\nRationale: The method testConstructOneDocWithoutLineNums is specifically designed to test the functionality of the CompilerErrorModel class using instances of CompilerErrorModelTest. It directly interacts with the setup and properties of CompilerErrorModelTest, making it logical for the method to reside within this test class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 4958
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "testConstructOneDocWithoutLineNums"
                    ],
                    "llm_response_time": 1673
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "testConstructOneDocWithoutLineNums"
                    ],
                    "llm_response_time": 1535
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "testConstructOneDocWithoutLineNums"
                    ],
                    "llm_response_time": 1140
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "testConstructOneDocWithoutLineNums"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "testConstructOneDocWithoutLineNums"
                ],
                "llm_response_time": 496
            },
            "targetClassMap": {
                "testConstructOneDocWithoutLineNums": {
                    "target_classes": [
                        {
                            "class_name": "CompilerErrorModelTest",
                            "similarity_score": 0.7699124606004802
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "CompilerErrorModelTest"
                    ],
                    "llm_response_time": 1693,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.util.swing.FileChooser::_runCommand():void need move to edu.rice.cs.drjava.ui.ExecuteExternalDialog",
        "class_name": "edu.rice.cs.util.swing.FileChooser",
        "telemetry": {
            "id": "f3a141a4-4016-430f-b4aa-6a95a6d22098",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 64,
                "lineStart": 48,
                "lineEnd": 111,
                "bodyLineStart": 48,
                "language": "java",
                "sourceCode": "public class FileChooser extends JFileChooser {\n  \n  /** File system root for chooser */\n  protected File _root;\n  \n  /** Creates a FileChooser with the given root, allowing only a single selection WITHIN the specified file system\n    * @param root the root directory to display in the tree\n    */\n  public FileChooser(File root) { \n    super(root);\n    _init(root);\n  }\n  \n  /*---------- INITIALIZATION METHODS ----------*/\n  \n  /** Sets up the GUI components of the dialog */\n  private void _init(final File root) {\n    \n    setRoot(root);\n    \n    setFileSelectionMode(FILES_ONLY);\n    setDialogType(CUSTOM_DIALOG);\n    setApproveButtonText(\"Select\");\n  }\n  \n  public void setRoot(File root) {\n    _root = root; // may be null\n    if (root != null) {\n      if (! root.exists()) _root = null;\n      else if (! root.isDirectory()) _root = root.getParentFile();\n    }\n  }\n  \n  public File getRoot() { return _root; }\n  \n  public boolean isTraversable(File f) {\n    if (_root == null) return super.isTraversable(f);\n//    Utilities.show(\"isTraversable(\" + f + \") called; _root = \" + _root);\n    return f != null && f.isDirectory() && IOUtil.isMember(f, _root);\n  }\n\n/** Execute the command line. \n * @param executeExternalDialog TODO*/\n  public void _runCommand(ExecuteExternalDialog executeExternalDialog) {\n    executeExternalDialog._mainFrame.updateStatusField(\"Executing external process...\");\n    GeneralProcessCreator.LOG.log(\"_runCommand(): ${enclosing.djapp.file} = \" + executeExternalDialog._commandEnclosingFileLine.getText());\n    \n    executeExternalDialog._mainFrame.removeModalWindowAdapter(executeExternalDialog);\n    if (executeExternalDialog._commandLinePreview.getText().length() > 0) {\n      try { \n        executeExternalDialog._props = PropertyMaps.TEMPLATE.clone();\n        PropertyMaps pm = executeExternalDialog._props.clone();\n        executeExternalDialog.runCommand(\"\", executeExternalDialog._commandLine.getText(), executeExternalDialog._commandWorkDirLine.getText(), \n                   executeExternalDialog._commandEnclosingFileLine.getText().trim(), pm);\n      } \n      catch(CloneNotSupportedException e) { throw new edu.rice.cs.util.UnexpectedException(e); }\n    }\n    \n    // Always apply and save settings\n    executeExternalDialog._saveSettings();\n    executeExternalDialog.setVisible(false);\n    if (executeExternalDialog._cm != null) { executeExternalDialog._cm.signal(); }    \n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 88,
                        "lineEnd": 109,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.ExecuteExternalDialog\nRationale: The method _runCommand directly manipulates the properties and methods of the ExecuteExternalDialog instance, such as updating the status field, running commands, and saving settings, indicating it is closely tied to the functionality of this class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 6070
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "_runCommand"
                    ],
                    "llm_response_time": 1692
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "_runCommand"
                    ],
                    "llm_response_time": 1741
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "_runCommand"
                    ],
                    "llm_response_time": 2041
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "_runCommand"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "_runCommand"
                ],
                "llm_response_time": 514
            },
            "targetClassMap": {
                "_runCommand": {
                    "target_classes": [
                        {
                            "class_name": "ExecuteExternalDialog",
                            "similarity_score": 0.7206198133206289
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ExecuteExternalDialog"
                    ],
                    "llm_response_time": 902,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.util.swing.DelegatingAction::_installNewDocumentListener(OpenDefinitionsDocument):void need move to edu.rice.cs.drjava.ui.MainFrame",
        "class_name": "edu.rice.cs.util.swing.DelegatingAction",
        "telemetry": {
            "id": "4a7f2873-ff66-4f03-b0f6-fbc72b89f9c2",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 163,
                "lineStart": 52,
                "lineEnd": 214,
                "bodyLineStart": 52,
                "language": "java",
                "sourceCode": "public class DelegatingAction implements Action {\n  /** These keys will be copied from the delegatee. All other keys are held in this action itself.\n   */\n  private static final String[] KEYS_TO_DELEGATE = {\n    //DEFAULT,\n    NAME,\n    //SHORT_DESCRIPTION,\n    //LONG_DESCRIPTION,\n    //SMALL_ICON,\n    //ACTION_COMMAND_KEY,\n    //ACCELERATOR_KEY,\n    //MNEMONIC_KEY,\n  };\n\n  /** Can't use a more specific type parameter because of Action interface. */\n  private HashMap<String, Object> _localProperties = new HashMap<String, Object>();\n\n  /** The action to delegate to. If it's null, this action is disabled and all method calls will result in \n    * IllegalStateExceptions.\n    */\n  private volatile Action _delegatee;\n  private final LinkedList<PropertyChangeListener> _listenerList =\n    new LinkedList<PropertyChangeListener>();\n\n  /** Returns value of the key, from delegatee is it's in {@link #KEYS_TO_DELEGATE} or from this if not. */\n  public Object getValue(String key) {\n    _checkState();\n    \n    if (_isDelegatedKey(key)) return _delegatee.getValue(key);\n    else return _localProperties.get(key);\n  }\n\n  private boolean _isDelegatedKey(String key) {\n    for (int i = 0; i < KEYS_TO_DELEGATE.length; i++) {\n      if (KEYS_TO_DELEGATE[i].equals(key)) return true;\n    }\n    return false;\n  }\n\n  public void putValue(String key, Object value) {\n    _checkState();\n\n    if (_isDelegatedKey(key)) {\n      _delegatee.putValue(key, value);\n    }\n    else {\n      Object old = _localProperties.get(key);\n      _localProperties.put(key, value);\n\n      PropertyChangeEvent event = new PropertyChangeEvent(this, key, old, value);\n      for (PropertyChangeListener listener : _listenerList) {\n        listener.propertyChange(event);\n      }\n    }\n  }\n\n  public void setEnabled(boolean b) {\n    _checkState();\n    _delegatee.setEnabled(b);\n  }\n\n  public boolean isEnabled() {\n    _checkState();\n    return _delegatee.isEnabled();\n  }\n\n  public void addPropertyChangeListener(PropertyChangeListener listener) {\n    _checkState();\n    _delegatee.addPropertyChangeListener(listener);\n    _listenerList.add(listener);\n  }\n\n  public void removePropertyChangeListener(PropertyChangeListener listener) {\n    _checkState();\n    _delegatee.removePropertyChangeListener(listener);\n    _listenerList.remove(listener);\n  }\n\n  public void actionPerformed(ActionEvent ae) {\n    _checkState();\n    _delegatee.actionPerformed(ae);\n  }\n\n  public Action getDelegatee() { return _delegatee; }\n    \n  public void setDelegatee(final Action newDelegatee) {\n    if (newDelegatee == null) {\n      throw new IllegalArgumentException(\"setDelegatee(null) is not allowed!\");\n    }\n    \n    // create property change notifications\n    boolean isEnabled = newDelegatee.isEnabled();\n\n    PropertyChangeEvent enabledEvent\n       = new PropertyChangeEvent(newDelegatee, \"enabled\", Boolean.FALSE, isEnabled);\n\n    PropertyChangeEvent[] events = null;\n\n    if (_delegatee != null) {\n      events = new PropertyChangeEvent[KEYS_TO_DELEGATE.length];\n\n      for (int i = 0; i < KEYS_TO_DELEGATE.length; i++) {\n        Object oldValue = _delegatee.getValue(KEYS_TO_DELEGATE[i]);\n        Object newValue = newDelegatee.getValue(KEYS_TO_DELEGATE[i]);\n\n        events[i] = new PropertyChangeEvent(newDelegatee,\n                                            KEYS_TO_DELEGATE[i],\n                                            oldValue,\n                                            newValue);\n      }\n    }\n\n    // remove listeners from old and add to new\n    for (PropertyChangeListener listener : _listenerList) {\n      if (_delegatee != null) {\n        _delegatee.removePropertyChangeListener(listener);\n      }\n\n      newDelegatee.addPropertyChangeListener(listener);\n\n      // fire property change events for all properties\n\n      if (events != null) {\n        for (int i = 0; i < events.length; i++) {\n          listener.propertyChange(events[i]);\n        }\n      }\n\n      listener.propertyChange(enabledEvent);\n    }\n\n    _delegatee = newDelegatee;\n  }\n\n  private void _checkState() {\n    if (_delegatee == null) {\n      throw new IllegalStateException(\"delegatee is null!\");\n    }\n  }\n\n/** Makes sure save and compile buttons and menu items are enabled and disabled appropriately after document\n    * modifications.\n * @param mainFrame TODO\n * @param d TODO\n    */\n  public void _installNewDocumentListener(final MainFrame mainFrame, final OpenDefinitionsDocument d) {\n    d.addDocumentListener(new DocumentUIListener() {\n      public void changedUpdate(DocumentEvent e) {  }\n      public void insertUpdate(DocumentEvent e) {\n        assert EventQueue.isDispatchThread();\n        mainFrame._saveAction.setEnabled(true);\n        if (mainFrame.isDebuggerEnabled() && mainFrame._debugPanel.getStatusText().equals(\"\"))\n          mainFrame._debugPanel.setStatusText(MainFrame.DEBUGGER_OUT_OF_SYNC);\n      }\n      public void removeUpdate(DocumentEvent e) {\n        assert EventQueue.isDispatchThread();\n        mainFrame._saveAction.setEnabled(true);\n        if (mainFrame.isDebuggerEnabled() && mainFrame._debugPanel.getStatusText().equals(\"\"))\n          mainFrame._debugPanel.setStatusText(MainFrame.DEBUGGER_OUT_OF_SYNC);\n      }\n    });\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 191,
                        "lineEnd": 212,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method is primarily concerned with document modifications and managing document listeners, which aligns more closely with the responsibilities of the OpenDefinitionsDocument class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 5492
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "_installNewDocumentListener"
                    ],
                    "llm_response_time": 1927
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "_installNewDocumentListener"
                    ],
                    "llm_response_time": 1620
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "_installNewDocumentListener"
                    ],
                    "llm_response_time": 1299
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "_installNewDocumentListener"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "_installNewDocumentListener"
                ],
                "llm_response_time": 543
            },
            "targetClassMap": {
                "_installNewDocumentListener": {
                    "target_classes": [
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.5333624312893388
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.3024745333046412
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "MainFrame"
                    ],
                    "llm_response_time": 1448,
                    "similarity_computation_time": 20,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.GlobalEventNotifier::testCommentOutMultipleLines():void need move to edu.rice.cs.drjava.model.definitions.CommentTest",
        "class_name": "edu.rice.cs.drjava.model.GlobalEventNotifier",
        "telemetry": {
            "id": "9b0b130d-8874-4348-8d3f-bbfb4cdaa124",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 607,
                "lineStart": 50,
                "lineEnd": 656,
                "bodyLineStart": 50,
                "language": "java",
                "sourceCode": "/** Keeps track of all listeners to the model, and has the ability to notify them of some event.\n  * <p>\n  * This class has a specific role of managing GlobalModelListeners.  Other classes with similar names use similar\n  * code to perform the same function for other interfaces, e.g. InteractionsEventNotifier and JavadocEventNotifier.\n  * These classes implement the appropriate interface definition so that they can be used transparently as composite \n  * packaging for a particular listener interface.\n  * <p>\n  * Components which might otherwise manage their own list of listeners use EventNotifiers instead to simplify their \n  * internal implementation.  Notifiers should therefore be considered a private implementation detail of the \n  * components, and should not be used directly outside of the \"host\" component.\n  * <p>\n  * TODO: remove direct references to GlobalEventNotifier outside of DefaultGlobalModel\n  * TODO: remove public modifier from this class when above has happened\n  *\n  * All methods in this class must use the synchronization methods provided by ReaderWriterLock.  This ensures that \n  * multiple notifications (reads) can occur simultaneously, but only one thread can be adding or removing listeners \n  * (writing) at a time, and no reads can occur during a write.\n  * <p>\n  * <i>No</i> methods on this class should be synchronized using traditional Java synchronization!\n  * <p>\n  * @version $Id: GlobalEventNotifier.java 5236 2010-04-27 01:43:36Z mgricken $\n  */\n// QUESTION: why are we still using _lock operations?  All notifiers should run in the event thread.\n\npublic class GlobalEventNotifier extends EventNotifier<GlobalModelListener>\n  implements GlobalModelListener /*, Serializable */ {\n  \n  public <P,R> void executeAsyncTask(AsyncTask<P,R> task, P param, boolean showProgress, boolean lockUI) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.executeAsyncTask(task, param, showProgress, lockUI); } }\n    finally { _lock.endRead(); }\n  }\n  \n  public void filesNotFound(File... f) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.filesNotFound(f); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** @return the intersection of all the return values from the listeners. */\n  public File[] filesReadOnly(File... f) {\n    _lock.startRead();\n    java.util.LinkedList<File> files = new java.util.LinkedList<File>();\n    for(File fi: f) { files.add(fi); }\n    try {\n      for (GlobalModelListener l : _listeners) {\n        java.util.List<File> retry = java.util.Arrays.asList(l.filesReadOnly(f));\n        files.retainAll(retry);\n      }\n    }\n    finally { _lock.endRead(); }\n    return files.toArray(new File[files.size()]);\n  }\n  \n  /** Performs any UI related steps to handle the case in which a file is being opened that\n   * is already open and modified. The two choices are to revert to the copy on disk, or to\n   * keep the current changes.\n   * @param doc  {@code true} if the user wishes to revert the document, {@code false} to ignore\n   */\n  public void handleAlreadyOpenDocument(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try { for(GlobalModelListener l : _listeners) { l.handleAlreadyOpenDocument(doc); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /* -------------- project state ------------------*/\n  public void openProject(File pfile, FileOpenSelector files) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.openProject(pfile, files); } }\n    finally { _lock.endRead(); }\n  }\n  \n  public void projectClosed() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.projectClosed();} }\n    finally { _lock.endRead(); }\n  }\n  \n  public void allFilesClosed() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.allFilesClosed();} }\n    finally { _lock.endRead(); }\n  }\n   \n  public void projectModified() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.projectModified(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  public void projectBuildDirChanged() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.projectBuildDirChanged(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  public void projectWorkDirChanged() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.projectWorkDirChanged(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  public void projectRunnableChanged() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.projectRunnableChanged(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  \n  /* ---------- Deprecated Methods ---------- */\n  \n  /** Lets the listeners know some event has taken place.\n    * @param n tells the listener what happened.\n    */\n  public void notifyListeners(Notifier n) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { n.notifyListener(l); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Allows the GlobalModel to ask its listeners a yes/no question and receive a response.\n    * @param p the question being asked of the listeners\n    * @return the listeners' responses ANDed together, true if they all\n    * agree, false if some disagree\n    * @deprecated Use listener methods directly instead.\n    */\n  @Deprecated\n  public boolean pollListeners(Poller p) {\n    _lock.startRead();\n    try {\n      for (GlobalModelListener l: _listeners) { if (! p.poll(l)) return false; }\n      return true;\n    }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Class model for notifying listeners of an event.\n   * @deprecated Use listener methods directly instead.\n   */\n  @Deprecated\n  public abstract static class Notifier {\n    public abstract void notifyListener(GlobalModelListener l);\n  }\n  \n  /** Class model for asking listeners a yes/no question.\n   * @deprecated Use listener methods directly instead.\n   */\n  @Deprecated\n  public abstract static class Poller {\n    public abstract boolean poll(GlobalModelListener l);\n  }\n  \n  // ---------- End of Deprecated Methods ----------\n  \n  \n  \n  //------------------------------ GlobalModel -------------------------------//\n  \n  /** Called when a file's main method is about to be run. */\n  public void prepareForRun(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.prepareForRun(doc); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after a new document is created. */\n  public void newFileCreated(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.newFileCreated(doc); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the console window is reset. */\n  public void consoleReset() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.consoleReset(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after the current document is saved. */\n  public void fileSaved(OpenDefinitionsDocument doc) {\n//    ScrollableDialog sd = new ScrollableDialog(null, \"fileSaved(\" + doc + \") called in GlobalEventNotifier.java\", \"\", \"\");\n//    sd.show();\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.fileSaved(doc); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after a file is opened and read into the current document. */\n  public void fileOpened(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.fileOpened(doc); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after a document is closed. */\n  public void fileClosed(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.fileClosed(doc); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after a document is reverted. */\n  public void fileReverted(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.fileReverted(doc); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when an undoable edit occurs. */\n  public void undoableEditHappened() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.undoableEditHappened(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called to ask the listeners if it is OK to abandon the current document. */\n  public boolean canAbandonFile(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try {\n      for (GlobalModelListener l: _listeners) { if (! l.canAbandonFile(doc)) return false; }\n      return true;\n    }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called to ask the listeners save the file before quitting at the user's option.\n    * @return true if quitting should continue, false if the user cancelled */\n  public boolean quitFile(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try {\n      // if one of the listeners returns false (=user cancelled), abort\n      for (GlobalModelListener l: _listeners) { if (!l.quitFile(doc)) return false; }\n    }\n    finally { _lock.endRead(); }\n    return true;\n  }\n  \n  /** Called to ask the listeners if it is OK to revert the current document to the version saved on disk. */\n  public boolean shouldRevertFile(OpenDefinitionsDocument doc) {\n    _lock.startRead();\n    try { \n      for (GlobalModelListener l: _listeners) { if (! l.shouldRevertFile(doc)) return false; }\n      return true;\n    }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the selection in the navigator changes the current directory without changing the active document. */\n  public void currentDirectoryChanged(File dir) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.currentDirectoryChanged(dir); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the selection in the navigator changes the active document. */\n  public void activeDocumentChanged(OpenDefinitionsDocument active) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.activeDocumentChanged(active); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the active document is refreshed.  */\n  public void activeDocumentRefreshed(OpenDefinitionsDocument active) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.activeDocumentRefreshed(active); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called to shift the focus to the Definitions Pane. */\n  public void focusOnDefinitionsPane() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.focusOnDefinitionsPane(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called to shift the focus to the last focus owner among the main frame panes. */\n  public void focusOnLastFocusOwner() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.focusOnLastFocusOwner(); } }\n    finally { _lock.endRead(); }\n  }\n//  /** Called to demand that all files be saved before running the main method of a document. It is up to the caller\n//    * of this method to check if the documents have been saved, using IGetDocuments.hasModifiedDocuments(). This is\n//    * nor used currently, but it is commented out in case it is needed later. \n//    */\n//  public void saveBeforeRun() {\n//    _lock.startRead();\n//    try { for (GlobalModelListener l : _listeners) { l.saveBeforeRun(); } }\n//    finally { _lock.endRead(); }\n//  }\n  \n  //------------------------------ Interactions ------------------------------//\n  \n  /** Called after an interaction is started by the GlobalModel. */\n  public void interactionStarted() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interactionStarted(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when an interaction has finished running. */\n  public void interactionEnded() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interactionEnded(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the interactions window generates a syntax error.\n    * @param offset the error's offset into the InteractionsDocument.\n    * @param length the length of the error.\n    */\n  public void interactionErrorOccurred(int offset, int length) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interactionErrorOccurred(offset, length); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the interactionsJVM has begun resetting. */\n  public void interpreterResetting() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interpreterResetting(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the interactions window is reset. */\n  public void interpreterReady(File wd) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interpreterReady(wd); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called if the interpreter reset failed.\n    * @param t Throwable explaining why the reset failed.\n    * (Subclasses must maintain listeners.)\n    */\n  public void interpreterResetFailed(final Throwable t) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interpreterResetFailed(t); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the interactions JVM was closed by System.exit or by being aborted. Immediately after this the\n    * interactions will be reset.\n    * @param status the exit code\n    */\n  public void interpreterExited(int status) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interpreterExited(status); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when the active interpreter is changed.\n    * @param inProgress Whether the new interpreter is processing an interaction (i.e,. whether an interactionEnded\n    *        event will be fired)\n    */\n  public void interpreterChanged(boolean inProgress) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interpreterChanged(inProgress); } }\n    finally { _lock.endRead(); }\n  }\n  \n  //-------------------------------- Compiler --------------------------------//\n  \n  /** Called after a compile is started by the GlobalModel. */\n  public void compileStarted() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.compileStarted(); }\n    }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when a compile has finished running. */\n  public void compileEnded(File workDir, List<? extends File> excludedFiles) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.compileEnded(workDir, excludedFiles); } }\n    finally { _lock.endRead(); }\n  }\n  \n   /** Called if a compile is aborted. */\n  public void compileAborted(Exception e) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.compileAborted(e); } }\n    finally { _lock.endRead(); }\n  }\n  /** Called to demand that all files be saved before compiling. It is up to the caller of this method to check\n    * if the documents have been saved, using IGetDocuments.hasModifiedDocuments().\n    */\n  public void saveBeforeCompile() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.saveBeforeCompile(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called to demand that the active document, which is untitled, is saved before compiling.  */\n  public void saveUntitled() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.saveUntitled(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after the active compiler has been changed. */\n  public void activeCompilerChanged() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.activeCompilerChanged(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  //---------------------------------- JUnit ---------------------------------//\n  \n  /** Called when trying to test a non-TestCase class.\n    * @param isTestAll whether or not it was a use of the test all button\n    * @param didCompileFail whether or not a compile before this JUnit attempt failed\n    */\n  public void nonTestCase(boolean isTestAll, boolean didCompileFail) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.nonTestCase(isTestAll, didCompileFail); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when trying to test an illegal class file.\n    * @param e the ClassFileError thrown when DrJava attempted to load the offending file\n    */\n  public void classFileError(ClassFileError e) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.classFileError(e); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called before attempting unit testing if tested class files are out of sync, to give the user a chance to save. Do\n    * not continue with JUnit if the user doesn't recompile!\n    */\n  public void compileBeforeJUnit(final CompilerListener cl, List<OpenDefinitionsDocument> outOfSync) {\n//    Utilities.show(\"compileBeforeJUnit invoked with argument \" + cl + \" in GlobalEventNotifier \" + this);\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.compileBeforeJUnit(cl, outOfSync); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after JUnit is started by the GlobalModel. */\n  public void junitStarted() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.junitStarted(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when testing specific list of classes. */\n  public void junitClassesStarted() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.junitClassesStarted(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called to indicate that a suite of tests has started running.\n    * @param numTests The number of tests in the suite to be run.\n    */\n  public void junitSuiteStarted(int numTests) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.junitSuiteStarted(numTests); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when a particular test is started.\n    * @param name The name of the test being started.\n    */\n  public void junitTestStarted(String name) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.junitTestStarted(name); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called when a particular test has ended.\n    * @param name the name of the test that has ended\n    * @param wasSuccessful whether the test passed or not\n    * @param causedError if not successful, whether the test caused an error or simply failed\n    */\n  public void junitTestEnded(String name, boolean wasSuccessful, boolean causedError) {\n    _lock.startRead();\n    try { \n      for (GlobalModelListener l : _listeners) { l.junitTestEnded(name, wasSuccessful, causedError); }\n    }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after JUnit is finished running tests. */\n  public void junitEnded() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.junitEnded(); } }\n    finally { _lock.endRead(); }\n  }\n  \n//  /** Called to demand that all files be saved before running JUnit tests. It is up to the caller of this \n//    * method to check if the documents have been saved, using IGetDocuments.hasModifiedDocuments(). This is \n//    * never called currently, but it is commented out in case it is needed later. */\n//  public void saveBeforeJUnit() {\n//    _lock.startRead();\n//    try {\n//      for (GlobalModelListener l : _listeners) {\n//        l.saveBeforeJUnit();\n//      }\n//    }\n//    finally {\n//      _lock.endRead();\n//    }\n//  }\n  \n  //--------------------------------- Javadoc --------------------------------//\n  \n  /** Called after Javadoc is started by the GlobalModel. */\n  public void javadocStarted() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.javadocStarted(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Called after Javadoc is finished.\n    * @param success whether the Javadoc operation generated proper output\n    * @param destDir if (success) the location where the output was generated, otherwise undefined (possibly null)\n    * @param allDocs Whether Javadoc was run for all open documents\n    */\n  public void javadocEnded(boolean success, File destDir, boolean allDocs) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.javadocEnded(success, destDir, allDocs); } }\n    finally { _lock.endRead(); }\n  }\n  \n  \n  /** Called before attempting Javadoc, to give the user a chance to save. Do not continue with Javadoc if the user \n    * doesn't save!\n    */\n  public void saveBeforeJavadoc() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.saveBeforeJavadoc(); } }\n    finally { _lock.endRead(); }\n  }\n\n  /** Called before attempting Javadoc, to give the user a chance to compile. Do not continue with Javadoc if the\n    * user doesn't comoile!\n    */\n  public void compileBeforeJavadoc(final CompilerListener afterCompile) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.compileBeforeJavadoc(afterCompile); } }\n    finally { _lock.endRead(); }\n  }\n  \n//  /** Called to demand that all files be saved before starting the debugger. It is up to the caller of this method\n//    * to check if the documents have been saved, using IGetDocuments.hasModifiedDocuments(). This is not used \n//    * currently, but it is commented out in case it is needed later. */\n//  public void saveBeforeDebug() {\n//    _lock.startRead();\n//    try { for (GlobalModelListener l : _listeners) { l.saveBeforeDebug(); } }\n//    finally { _lock.endRead(); }\n//  }\n  \n  /** Notifies the view that the current interaction is incomplete. */\n  public void interactionIncomplete() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.interactionIncomplete(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  /** Notifies the view that the current file path contains a #. */\n  public void filePathContainsPound() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.filePathContainsPound(); } }\n    finally { _lock.endRead(); }\n  }\n  \n  // ----- Cache -----\n  public void documentNotFound(OpenDefinitionsDocument d, File f) {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.documentNotFound(d,f); } }\n    finally { _lock.endRead(); } \n  }\n  \n  // ----- BrowserHistory -----\n  public void browserChanged() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.browserChanged(); } }\n    finally { _lock.endRead(); } \n  }\n\n  public void updateCurrentLocationInDoc() {\n    _lock.startRead();\n    try { for (GlobalModelListener l : _listeners) { l.updateCurrentLocationInDoc(); } }\n    finally { _lock.endRead(); } \n  }\n\n/** Tests the Comment Out Line(s) command with multiple lines. \n * @param commentTest TODO*/\n  public void testCommentOutMultipleLines(CommentTest commentTest) throws BadLocationException {\n    String text =\n      \"Here is some abritrary text that should be commented.\\n\" +\n      \"/* It is on multiple lines, and contains slashes // and other\\n\" +\n      \"various */ obnoxious characters.\\n\";\n\n    String commented =\n      \"//Here is some abritrary text that should be commented.\\n\" +\n      \"///* It is on multiple lines, and contains slashes // and other\\n\" +\n      \"//various */ obnoxious characters.\\n\";\n\n    commentTest.doc.insertString(0, text, null);\n    CommentTest._assertContents(\"Sample text is inserted improperly.\", text, commentTest.doc);\n    commentTest.doc.commentLines(0, commentTest.doc.getLength());\n    CommentTest._assertContents(\"These lines should be wing-commented!\", commented, commentTest.doc);\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 0,
                "candidates": []
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 159834
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "executeAsyncTask",
                        "filesNotFound",
                        "handleAlreadyOpenDocument",
                        "openProject",
                        "projectClosed",
                        "allFilesClosed",
                        "projectModified",
                        "projectBuildDirChanged",
                        "projectWorkDirChanged",
                        "projectRunnableChanged",
                        "prepareForRun",
                        "newFileCreated",
                        "consoleReset",
                        "fileSaved",
                        "fileOpened",
                        "fileClosed",
                        "fileReverted",
                        "undoableEditHappened",
                        "canAbandonFile",
                        "quitFile",
                        "shouldRevertFile",
                        "currentDirectoryChanged",
                        "activeDocumentChanged",
                        "activeDocumentRefreshed",
                        "focusOnDefinitionsPane",
                        "focusOnLastFocusOwner",
                        "interactionStarted",
                        "interactionEnded",
                        "interactionErrorOccurred",
                        "interpreterResetting",
                        "interpreterReady",
                        "interpreterResetFailed",
                        "interpreterExited",
                        "interpreterChanged",
                        "compileStarted",
                        "compileEnded",
                        "compileAborted",
                        "saveBeforeCompile",
                        "saveUntitled",
                        "activeCompilerChanged",
                        "nonTestCase",
                        "classFileError",
                        "compileBeforeJUnit",
                        "junitStarted",
                        "junitClassesStarted",
                        "junitSuiteStarted",
                        "junitTestStarted",
                        "junitTestEnded",
                        "junitEnded",
                        "javadocStarted",
                        "javadocEnded",
                        "saveBeforeJavadoc",
                        "compileBeforeJavadoc",
                        "interactionIncomplete",
                        "filePathContainsPound",
                        "documentNotFound",
                        "browserChanged",
                        "updateCurrentLocationInDoc",
                        "testCommentOutMultipleLines"
                    ],
                    "llm_response_time": 42171
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "executeAsyncTask",
                        "filesNotFound",
                        "handleAlreadyOpenDocument",
                        "openProject",
                        "projectClosed",
                        "allFilesClosed",
                        "projectModified",
                        "projectBuildDirChanged",
                        "projectWorkDirChanged",
                        "projectRunnableChanged",
                        "prepareForRun",
                        "newFileCreated",
                        "consoleReset",
                        "fileSaved",
                        "fileOpened",
                        "fileClosed",
                        "fileReverted",
                        "undoableEditHappened",
                        "canAbandonFile",
                        "quitFile",
                        "shouldRevertFile",
                        "currentDirectoryChanged",
                        "activeDocumentChanged",
                        "activeDocumentRefreshed",
                        "focusOnDefinitionsPane",
                        "focusOnLastFocusOwner",
                        "interactionStarted",
                        "interactionEnded",
                        "interactionErrorOccurred",
                        "interpreterResetting",
                        "interpreterReady",
                        "interpreterResetFailed",
                        "interpreterExited",
                        "interpreterChanged",
                        "compileStarted",
                        "compileEnded",
                        "compileAborted",
                        "saveBeforeCompile",
                        "saveUntitled",
                        "activeCompilerChanged",
                        "nonTestCase",
                        "classFileError",
                        "compileBeforeJUnit",
                        "junitStarted",
                        "junitClassesStarted",
                        "junitSuiteStarted",
                        "junitTestStarted",
                        "junitTestEnded",
                        "junitEnded",
                        "javadocStarted",
                        "javadocEnded",
                        "saveBeforeJavadoc",
                        "compileBeforeJavadoc",
                        "interactionIncomplete",
                        "filePathContainsPound",
                        "documentNotFound",
                        "browserChanged",
                        "updateCurrentLocationInDoc",
                        "testCommentOutMultipleLines"
                    ],
                    "llm_response_time": 47269
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "executeAsyncTask",
                        "filesNotFound",
                        "projectClosed",
                        "compileStarted",
                        "javadocStarted",
                        "interactionStarted",
                        "testCommentOutMultipleLines"
                    ],
                    "llm_response_time": 66644
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "executeAsyncTask",
                        "filesNotFound",
                        "handleAlreadyOpenDocument",
                        "openProject",
                        "projectClosed",
                        "allFilesClosed",
                        "projectModified",
                        "projectBuildDirChanged",
                        "projectWorkDirChanged",
                        "projectRunnableChanged",
                        "prepareForRun",
                        "newFileCreated",
                        "consoleReset",
                        "fileSaved",
                        "fileOpened",
                        "fileClosed",
                        "fileReverted",
                        "undoableEditHappened",
                        "canAbandonFile",
                        "quitFile",
                        "shouldRevertFile",
                        "currentDirectoryChanged",
                        "activeDocumentChanged",
                        "activeDocumentRefreshed",
                        "focusOnDefinitionsPane",
                        "focusOnLastFocusOwner",
                        "interactionStarted",
                        "interactionEnded",
                        "interactionErrorOccurred",
                        "interpreterResetting",
                        "interpreterReady",
                        "interpreterResetFailed",
                        "interpreterExited",
                        "interpreterChanged",
                        "compileStarted",
                        "compileEnded",
                        "compileAborted",
                        "saveBeforeCompile",
                        "saveUntitled",
                        "activeCompilerChanged",
                        "nonTestCase",
                        "classFileError",
                        "compileBeforeJUnit",
                        "junitStarted",
                        "junitClassesStarted",
                        "junitSuiteStarted",
                        "junitTestStarted",
                        "junitTestEnded",
                        "junitEnded",
                        "javadocStarted",
                        "javadocEnded",
                        "saveBeforeJavadoc",
                        "compileBeforeJavadoc",
                        "interactionIncomplete",
                        "filePathContainsPound",
                        "documentNotFound",
                        "browserChanged",
                        "updateCurrentLocationInDoc",
                        "testCommentOutMultipleLines"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "executeAsyncTask",
                    "filesNotFound",
                    "handleAlreadyOpenDocument",
                    "openProject",
                    "projectClosed",
                    "allFilesClosed",
                    "projectModified",
                    "projectBuildDirChanged",
                    "projectWorkDirChanged",
                    "projectRunnableChanged",
                    "prepareForRun",
                    "newFileCreated",
                    "fileSaved",
                    "fileOpened",
                    "fileClosed",
                    "fileReverted",
                    "canAbandonFile",
                    "quitFile",
                    "shouldRevertFile",
                    "interactionStarted",
                    "interactionEnded",
                    "interactionErrorOccurred",
                    "interpreterResetting",
                    "interpreterReady",
                    "interpreterResetFailed",
                    "interpreterExited",
                    "compileStarted",
                    "compileEnded",
                    "compileAborted",
                    "saveBeforeCompile",
                    "saveUntitled",
                    "nonTestCase",
                    "classFileError",
                    "junitStarted",
                    "junitClassesStarted",
                    "junitSuiteStarted",
                    "junitTestStarted",
                    "junitTestEnded",
                    "junitEnded",
                    "javadocStarted",
                    "javadocEnded",
                    "saveBeforeJavadoc",
                    "compileBeforeJavadoc",
                    "interactionIncomplete",
                    "filePathContainsPound",
                    "documentNotFound",
                    "browserChanged",
                    "updateCurrentLocationInDoc",
                    "consoleReset",
                    "undoableEditHappened",
                    "currentDirectoryChanged",
                    "activeDocumentChanged",
                    "activeDocumentRefreshed",
                    "focusOnDefinitionsPane",
                    "focusOnLastFocusOwner",
                    "interpreterChanged",
                    "activeCompilerChanged",
                    "compileBeforeJUnit",
                    "testCommentOutMultipleLines"
                ],
                "llm_response_time": 3368
            },
            "targetClassMap": {
                "executeAsyncTask": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1565,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "filesNotFound": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1519,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "handleAlreadyOpenDocument": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1730,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "openProject": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 2099,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "projectClosed": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1687,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "allFilesClosed": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1419,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "projectModified": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1737,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "projectBuildDirChanged": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1673,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "projectWorkDirChanged": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1190,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "projectRunnableChanged": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1747,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "prepareForRun": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 3439,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "newFileCreated": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1739,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "fileSaved": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1417,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "fileOpened": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 845,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "fileClosed": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1508,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "fileReverted": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 2263,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "canAbandonFile": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1359,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "quitFile": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1957,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "shouldRevertFile": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1362,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "interactionStarted": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1627,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.util.swing.DirectoryChooser::_setUpLanguageLevelMenu(int, boolean):JMenu need move to edu.rice.cs.drjava.ui.MainFrame",
        "class_name": "edu.rice.cs.util.swing.DirectoryChooser",
        "telemetry": {
            "id": "bdffeba2-7511-4995-aa96-85c56244014f",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 148,
                "lineStart": 63,
                "lineEnd": 210,
                "bodyLineStart": 63,
                "language": "java",
                "sourceCode": "public class DirectoryChooser extends JFileChooser {\n  \n  /** GUI component that owns the dialog (if any) for this directory chooser. */\n  protected Component _owner;\n  \n  /** File system root for chooser */\n  protected File _root;\n  \n  /** Creates a DirectoryChooser rooted at file system root, allowing only a single selection. */\n  public DirectoryChooser() { this(null, null, false, false); }\n  \n  /** Creates a DirectoryChooser rooted at the file system root, allowing only single selection. */\n  public DirectoryChooser(Component owner) { this(owner, null, false, false); }\n  \n  /** Creates a DirectoryChooser rooted at the file system root, allowing multiple selection as specified.\n    * @param allowMultiple whether to allow multiple selection\n    */\n  public DirectoryChooser(Component owner, boolean allowMultiple) { this(owner, null, allowMultiple, false); }\n  \n  /** Creates a DirectoryChooser with the given root, allowing only a single selection.\n    * @param root the root directory to display in the tree\n    */\n  public DirectoryChooser(Component owner, File root) { this(owner, root, false, false); }\n  \n  /** Creates a DirectoryChooser with the given root, allowing multiple selections as specified.\n    * @param root the root directory to display in the tree. If null, then show entire file system\n    * @param allowMultiple whether to allow multiple selection\n    */\n  public DirectoryChooser(Component owner, File root, boolean allowMultiple, boolean showHidden) {\n    /* This super call sets current directory to root if it is valid directory, root.parentFile() if it is a valid \n     * non-directory file, and the system default otherwise. */\n    super(root);\n    _init(owner, root, allowMultiple, showHidden);\n  }\n  \n  /*---------- INITIALIZATION METHODS ----------*/\n  \n  /** Sets up the GUI components of the dialog */\n  private void _init(Component owner, final File root, boolean allowMultiple, boolean showHidden) {\n    \n    \n//    if (root != null && root.exists()) {\n//      setFileView(new FileView() { \n//                    public Boolean isTraversable(File f) { \n//                      return Boolean.valueOf(f.isDirectory() && FileOps.inFileTree(f, root)); \n//                    }});\n//    }\n    \n    _owner = owner;\n    _root = root; // may be null\n    if (root != null) {\n      if (! root.exists()) _root = null;\n      else if (! root.isDirectory()) _root = root.getParentFile();\n    }\n    \n    setMultiSelectionEnabled(allowMultiple);\n    setFileHidingEnabled(! showHidden);\n    setFileSelectionMode(DIRECTORIES_ONLY);\n    setDialogType(CUSTOM_DIALOG);\n    setApproveButtonText(\"Select\");\n    setFileFilter(new FileFilter() {\n      public boolean accept(File f) { return true; }\n      public String getDescription() { return \"All Folders\"; }\n    });\n  }\n  \n  public int showDialog(File initialSelection) {\n    setCurrentDirectory(initialSelection);\n    return showDialog(_owner, null);  // null means leave the approve button text unchanged\n  }\n  \n  /** Set the owner of this DirectoryChooser. */\n  public void setOwner(Component owner) { _owner = owner; }\n  \n  /** Shows the dialog with the same selection as the last time the dialog was shown. If this is the first time it is\n    * shown, then the root is selected.\n    */\n  public int showDialog() { return showDialog(_owner, null); }\n  \n  /** returns which directories were selected in the tree\n    * @return an array of files for the selected directories\n    */\n  public File[] getSelectedDirectories() { return getSelectedFiles(); }\n  \n  /** returns which directory was selected in the tree\n    * @return the file for the selected directory, null if none selected\n    */\n  public File getSelectedDirectory() { return getSelectedFile(); }\n\n/** Creates and returns the language levels menu.\n    * @param mainFrame TODO\n * @param mask the keystroke modifier to be used\n * @param updateKeyboardManager true if the keyboard manager should be updated; pass true only for MainFrame!\n    */\n  public JMenu _setUpLanguageLevelMenu(MainFrame mainFrame, int mask, boolean updateKeyboardManager) {\n    JMenu languageLevelMenu = new JMenu(\"Language Level\");\n    PlatformFactory.ONLY.setMnemonic(languageLevelMenu,KeyEvent.VK_L);\n    ButtonGroup group = new ButtonGroup();\n    \n    final Configuration config = DrJava.getConfig();\n    int currentLanguageLevel = config.getSetting(LANGUAGE_LEVEL);\n    final JRadioButtonMenuItem rbFullJavaMenuItem = new JRadioButtonMenuItem(\"Full Java\");\n    rbFullJavaMenuItem.setToolTipText(\"Use full Java syntax\");\n    if (currentLanguageLevel != OptionConstants.FUNCTIONAL_JAVA_LEVEL) { rbFullJavaMenuItem.setSelected(true); }\n    rbFullJavaMenuItem.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        config.setSetting(LANGUAGE_LEVEL, OptionConstants.FULL_JAVA);\n      }});\n    group.add(rbFullJavaMenuItem);\n    languageLevelMenu.add(rbFullJavaMenuItem);\n    languageLevelMenu.addSeparator();\n    \n    final JRadioButtonMenuItem rbFunctionalMenuItem = new JRadioButtonMenuItem(\"Functional Java\");\n    rbFunctionalMenuItem.setToolTipText(\"Use Functional Java language-level features\");\n    if (currentLanguageLevel == OptionConstants.FUNCTIONAL_JAVA_LEVEL) { rbFunctionalMenuItem.setSelected(true); }\n    rbFunctionalMenuItem.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        config.setSetting(LANGUAGE_LEVEL, OptionConstants.FUNCTIONAL_JAVA_LEVEL);\n      }});\n    group.add(rbFunctionalMenuItem);\n    languageLevelMenu.add(rbFunctionalMenuItem);\n    \n    config.addOptionListener(LANGUAGE_LEVEL, new OptionListener<Integer>() {\n      public void optionChanged(OptionEvent<Integer> oce) {\n        switch(oce.value) {\n          case OptionConstants.ELEMENTARY_LEVEL:\n          case OptionConstants.INTERMEDIATE_LEVEL:\n          case OptionConstants.FUNCTIONAL_JAVA_LEVEL: {\n            rbFunctionalMenuItem.setSelected(true);\n            break;\n          }\n          default: {\n            rbFullJavaMenuItem.setSelected(true);\n            break;\n          }\n        }\n      }\n    });\n    \n    return languageLevelMenu;\n  }\n  \n//  public boolean isTraversable(File f) {\n//    if (_root == null) return super.isTraversable(f);\n//    Utilities.show(\"isTraversable(\" + f + \") called; _root = \" + _root);\n//    return f.isDirectory() && FileOps.inFileTree(f, _root);\n//  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 151,
                        "lineEnd": 202,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.MainFrame\nRationale: The method _setUpLanguageLevelMenu creates a menu related to language levels, which is likely part of the user interface managed by the MainFrame class. It takes MainFrame as a parameter, indicating that it is closely tied to the functionality and context of the MainFrame.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 6460
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "_setUpLanguageLevelMenu"
                    ],
                    "llm_response_time": 2873
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "_setUpLanguageLevelMenu"
                    ],
                    "llm_response_time": 1300
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "_setUpLanguageLevelMenu"
                    ],
                    "llm_response_time": 1663
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "_setUpLanguageLevelMenu"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "_setUpLanguageLevelMenu"
                ],
                "llm_response_time": 511
            },
            "targetClassMap": {
                "_setUpLanguageLevelMenu": {
                    "target_classes": [
                        {
                            "class_name": "MainFrame",
                            "similarity_score": 0.7462099846532706
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "MainFrame"
                    ],
                    "llm_response_time": 1764,
                    "similarity_computation_time": 18,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.FindReplaceMachine::findPrevious():void need move to edu.rice.cs.drjava.ui.FindReplacePanel",
        "class_name": "edu.rice.cs.drjava.model.FindReplaceMachine",
        "telemetry": {
            "id": "15aee957-38c4-4ebf-abee-b39a8cb7e54f",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 683,
                "lineStart": 56,
                "lineEnd": 738,
                "bodyLineStart": 56,
                "language": "java",
                "sourceCode": "/** Implementation of logic of find/replace over a document.\n  * @version $Id: FindReplaceMachine.java 5354 2010-08-10 22:41:14Z mgricken $\n  */\npublic class FindReplaceMachine {\n  \n  static private Log _log = new Log(\"FindReplace.txt\", false);\n  \n  /* Visible machine state; manipulated directly or indirectly by FindReplacePanel. */\n  private OpenDefinitionsDocument _doc;      // Current search document \n  private OpenDefinitionsDocument _firstDoc; // First document where searching started (when searching all documents)\n//  private Position _current;                 // Position of the cursor in _doc when machine is stopped\n  private int _current;                 // Position of the cursor in _doc when machine is stopped\n  private MovingDocumentRegion _selectionRegion; // selected text region\n//  private Position _start;                   // Position in _doc from which searching started or will start.\n  private String _findWord;                  // Word to find. */\n  private String _replaceWord;               // Word to replace _findword.\n  private boolean _matchCase;\n  private boolean _matchWholeWord;\n  private boolean _searchAllDocuments;       // Whether to search all documents (or just the current document)\n  private boolean _searchSelectionOnly;      // Whether to search only the selection\n  private boolean _isForward;                // Whether search direction is forward (false means backward)\n  private boolean _ignoreCommentsAndStrings; // Whether to ignore matches in comments and strings\n  private boolean _ignoreTestCases;          // Whether to ignore documents that end in *Test.java\n  private String _lastFindWord;              // Last word found; set to null by FindReplacePanel if caret is updated\n  private boolean _skipText;                 // Whether to skip over the current match if direction is reversed\n  private DocumentIterator _docIterator;     // An iterator of open documents; _doc is current\n  private SingleDisplayModel _model;\n  private Component _frame;  \n  \n  /** Standard Constructor.\n    * Creates new machine to perform find/replace operations on a particular document starting from a given position.\n    * @param docIterator an object that allows navigation through open Swing documents (it is DefaultGlobalModel)\n    */\n  public FindReplaceMachine(SingleDisplayModel model, DocumentIterator docIterator, Component frame) {    \n    _skipText = false;\n//    _checkAllDocsWrapped = false;\n//    _allDocsWrapped = false;\n    _model = model;\n    _frame = frame;\n    _docIterator = docIterator;\n    _current = -1;\n    setFindAnyOccurrence();\n    setFindWord(\"\");\n    setReplaceWord(\"\");\n    setSearchBackwards(false);\n    setMatchCase(true);\n    setSearchAllDocuments(false);\n    setSearchSelectionOnly(false);\n    setIgnoreCommentsAndStrings(false);\n    setIgnoreTestCases(false);\n  }\n  \n  public void cleanUp() {\n    _docIterator = null;\n    setFindWord(\"\");\n    _doc = null;\n  }\n  \n  /** Called when the current position is updated in the document implying _skipText should not be set\n    * if the user toggles _searchBackwards\n    */\n  public void positionChanged() {\n    _lastFindWord = null;\n    _skipText = false;\n  }\n  \n  public void setLastFindWord() { _lastFindWord = _findWord; }\n  \n  public boolean isSearchBackwards() { return ! _isForward; }\n  \n  public void setSearchBackwards(boolean searchBackwards) {\n    if (_isForward == searchBackwards) {\n      // If we switch from searching forward to searching backwards or vice versa, isOnMatch is true, and _findword is\n      // the same as the _lastFindWord, we know the user just found _findWord, so skip over this match.\n      if (onMatch() && _findWord.equals(_lastFindWord)) _skipText = true;\n      else _skipText = false;\n    }\n    _isForward = ! searchBackwards;\n  }\n  \n  public void setMatchCase(boolean matchCase) { _matchCase = matchCase; }\n  public boolean getMatchCase() { return _matchCase; }\n  \n  public void setMatchWholeWord() { _matchWholeWord = true; }\n  \n  public boolean getMatchWholeWord() { return _matchWholeWord; }\n  \n  public void setFindAnyOccurrence() { _matchWholeWord = false; }  \n  \n  public void setSearchAllDocuments(boolean searchAllDocuments) { _searchAllDocuments = searchAllDocuments; }\n  \n  public void setSearchSelectionOnly(boolean searchSelectionOnly) { _searchSelectionOnly = searchSelectionOnly; }\n  \n  public void setIgnoreCommentsAndStrings(boolean ignoreCommentsAndStrings) {\n    _ignoreCommentsAndStrings = ignoreCommentsAndStrings;\n  }\n  public boolean getIgnoreCommentsAndStrings() { return _ignoreCommentsAndStrings; }\n  \n  public void setIgnoreTestCases(boolean ignoreTestCases) {\n    _ignoreTestCases = ignoreTestCases;\n  }\n  public boolean getIgnoreTestCases() { return _ignoreTestCases; }\n\n  public void setDocument(OpenDefinitionsDocument doc) { _doc = doc; }\n  \n  public void setFirstDoc(OpenDefinitionsDocument firstDoc) { _firstDoc = firstDoc; }\n  \n  public void setPosition(int pos) { _current = pos; }\n  \n  /** Gets the character offset to which this machine is currently pointing. */\n  public int getCurrentOffset() { //return _current.getOffset(); \n    return _current;\n  }\n  \n  public String getFindWord() { return _findWord; }\n  \n  public String getReplaceWord() { return _replaceWord; }\n  \n  public boolean getSearchAllDocuments() { return _searchAllDocuments; }\n  \n  public boolean getSearchSelectionOnly() { return _searchSelectionOnly; }\n  \n  public OpenDefinitionsDocument getDocument() { return _doc; }\n  \n  public OpenDefinitionsDocument getFirstDoc() { return _firstDoc; }\n  \n  /** Change the word being sought.\n    * @param word the new word to seek\n    */\n  public void setFindWord(String word) {  \n    _findWord = StringOps.replace(word, StringOps.EOL, \"\\n\"); \n  }\n  \n  /** Change the replacing word.\n    * @param word the new replacing word\n    */\n  public void setReplaceWord(String word) { \n    _replaceWord = StringOps.replace(word, StringOps.EOL,\"\\n\"); \n  }\n  \n  /** Determine if the machine is on an instance of the find word.  Only executes in event thread except for\n    * initialization.\n    * @return true if the current position is right after an instance of the find word.\n    */\n  public boolean onMatch() {\n    \n    // Should be fixed now because of invokeAndWait in MainFrame constructor\n    // (was: this invariant doesn't hold.  See DrJava bug #2321815)\n    assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    \n    String findWord = _findWord;\n    int wordLen, off;\n    \n    if(_current == -1) return false;\n    \n    wordLen = findWord.length();\n    if (_isForward) off = getCurrentOffset() - wordLen;\n    else off = getCurrentOffset();\n    \n    if (off < 0) return false;\n    \n    String matchSpace;\n    try {\n      if (off + wordLen > _doc.getLength()) return false;\n      matchSpace = _doc.getText(off, wordLen);\n    }\n    catch (BadLocationException e) { throw new UnexpectedException(e); }\n    \n    if (!_matchCase) {\n      matchSpace = matchSpace.toLowerCase();\n      findWord = findWord.toLowerCase();\n    }\n    return matchSpace.equals(findWord);\n  }\n  \n  /** If we're on a match for the find word, replace it with the replace word.  Only executes in event thread. */\n  public boolean replaceCurrent() {\n    \n    assert EventQueue.isDispatchThread();\n    \n    if (! onMatch()) return false;\n    try {\n//      boolean atStart = false;\n      int offset = getCurrentOffset();\n      if (_isForward) offset -= _findWord.length();  // position is now on left edge of match\n//      assert _findWord.equals(_doc.getText(offset, _findWord.length()));\n      \n//      Utilities.show(\"ReplaceCurrent called. _doc = \" + _doc.getText() + \" offset = \" + offset + \" _findWord = \" +\n//        _findWord);\n      \n      _doc.remove(offset, _findWord.length());\n      \n//      if (position == 0) atStart = true;\n      _doc.insertString(offset, _replaceWord, null);  // could use _insertString if we had the DefinitionsDocument\n      \n      // update _current Position\n      if (_isForward) setPosition(offset + _replaceWord.length());\n      else setPosition(offset);\n      \n      return true;\n    }\n    catch (BadLocationException e) { throw new UnexpectedException(e); }\n  }\n\n  /** Set the selected text region.\n    * @param s selected region\n    */\n  public void setSelection(MovingDocumentRegion s) { \n    _selectionRegion = s;\n  }\n\n  /** Replaces all occurrences of the find word with the replace word in the current document of in all documents\n    * depending the value of the machine register _searchAllDocuments.\n    * @return the number of replacements\n    */\n  public int replaceAll() { \n    return replaceAll(_searchAllDocuments, _searchSelectionOnly); \n  }\n  \n  /** Replaces all occurences of the find word with the replace word in the current document of in all documents or \n    * in the current selection of the current document depending the value of the flag searchAll\n    * @return the number of replacements\n    */\n  private int replaceAll(boolean searchAll, boolean searchSelectionOnly) {\n    if (searchAll) {\n      int count = 0;           // the number of replacements done so far\n      int n = _docIterator.getDocumentCount();\n      for (int i = 0; i < n; i++) {\n        // replace all in the rest of the documents\n        count += _replaceAllInCurrentDoc(false);\n        _doc = _docIterator.getNextDocument(_doc, _frame);\n        \n        if(_doc==null) break;\n      }\n      \n      // update display (adding \"*\") in navigatgorPane\n      _model.getDocumentNavigator().repaint();\n      \n      return count;\n    }\n    else if(searchSelectionOnly) {\n      int count = 0;\n      count += _replaceAllInCurrentDoc(searchSelectionOnly);\n      return count;\n    }\n    else \n      return _replaceAllInCurrentDoc(false);\n  }\n  \n  /** Replaces all occurences of _findWord with _replaceWord in _doc. Never searches in other documents.  Starts at\n    * the beginning or the end of the document (depending on find direction).  This convention ensures that matches \n    * created by string replacement will not be replaced as in the following example:<p>\n    *   findString:    \"hello\"<br>\n    *   replaceString: \"e\"<br>\n    *   document text: \"hhellollo\"<p>\n    * Depending on the cursor position, clicking replace all could either make the document text read \"hello\" \n    * (which is correct) or \"e\".  This is because of the behavior of findNext(), and it would be incorrect\n    * to change that behavior.  Only executes in event thread.\n    * @return the number of replacements\n    */\n  private int _replaceAllInCurrentDoc(boolean searchSelectionOnly) {\n    \n    assert EventQueue.isDispatchThread();\n    \n    if(!searchSelectionOnly) {\n      _selectionRegion = new MovingDocumentRegion(_doc, 0, _doc.getLength(),\n                                                  _doc._getLineStartPos(0),\n                                                  _doc._getLineEndPos(_doc.getLength()));\n    }\n    if (_isForward) setPosition(_selectionRegion.getStartOffset());\n    else setPosition(_selectionRegion.getEndOffset());\n    \n    int count = 0;\n    FindResult fr = findNext(false);  // find next match in current doc   \n    //  Utilities.show(fr + \" returned by call on findNext()\");\n    \n    while (!fr.getWrapped() && fr.getFoundOffset() <= _selectionRegion.getEndOffset()) {\n      replaceCurrent();\n      count++;\n      //  Utilities.show(\"Found \" + count + \" occurrences. Calling findNext() inside loop\");\n      fr = findNext(false);           // find next match in current doc\n      //  Utilities.show(\"Call on findNext() returned \" + fr.toString() + \"in doc '\" + \n      //    _doc.getText().substring(0,fr.getFoundOffset()) + \"[|]\" + _doc.getText().substring(fr.getFoundOffset()) + \"'\");\n    }\n    return count;\n  }\n  \n  /** Processes all occurences of the find word with the replace word in the current document or in all documents\n    * depending the value of the machine register _searchAllDocuments.\n    * @param findAction action to perform on the occurrences; input is the FindResult, output is ignored\n    * @return the number of processed occurrences\n    */\n  public int processAll(Runnable1<FindResult> findAction, MovingDocumentRegion region) { \n    _selectionRegion = region;\n    return processAll(findAction, _searchAllDocuments, _searchSelectionOnly); \n  }\n  \n  /** Processes all occurences of the find word with the replace word in the current document or in all documents\n    * depending the value of the flag searchAll.  Assumes that findAction does not modify the document it processes.\n    * Only executes in event thread.\n    * @param findAction action to perform on the occurrences; input is the FindResult, output is ignored\n    * @return the number of replacements\n    */\n  private int processAll(Runnable1<FindResult> findAction, boolean searchAll, boolean searchSelectionOnly) {\n    \n    assert EventQueue.isDispatchThread();\n    \n    if (searchAll) {\n      int count = 0;           // the number of replacements done so far\n      int n = _docIterator.getDocumentCount();\n      for (int i = 0; i < n; i++) {\n        // process all in the rest of the documents\n        count += _processAllInCurrentDoc(findAction, false);\n        _doc = _docIterator.getNextDocument(_doc, _frame);\n        \n        if(_doc==null) break;\n      }\n      \n      // update display (perhaps adding \"*\") in navigatgorPane\n      _model.getDocumentNavigator().repaint();\n      \n      return count;\n    }\n    else if(searchSelectionOnly) {\n      int count = 0;\n      count += _processAllInCurrentDoc(findAction, searchSelectionOnly);\n      return count;\n    }\n    else return _processAllInCurrentDoc(findAction, false);\n  }\n  \n  /** Processes all occurences of _findWord in _doc. Never processes other documents.  Starts at the beginning or the\n    * end of the document (depending on find direction).  This convention ensures that matches created by string \n    * replacement will not be replaced as in the following example:<p>\n    *  findString:    \"hello\"<br>\n    *  replaceString: \"e\"<br>\n    *  document text: \"hhellollo\"<p>\n    * Assumes this has mutually exclusive access to _doc (e.g., by hourglassOn) and findAction does not modify _doc.\n    * Only executes in event thread.\n    * @param findAction action to perform on the occurrences; input is the FindResult, output is ignored\n    * @return the number of replacements\n    */\n  private int _processAllInCurrentDoc(Runnable1<FindResult> findAction, boolean searchSelectionOnly) {\n    if(!searchSelectionOnly) {\n      _selectionRegion = new MovingDocumentRegion(_doc, 0, _doc.getLength(),\n                                                  _doc._getLineStartPos(0),\n                                                  _doc._getLineEndPos(_doc.getLength()));\n    }\n    if (_isForward) setPosition(_selectionRegion.getStartOffset());\n    else setPosition(_selectionRegion.getEndOffset());\n    \n    int count = 0;\n    FindResult fr = findNext(false);  // find next match in current doc   \n    \n    while (! fr.getWrapped() && fr.getFoundOffset() <= _selectionRegion.getEndOffset()) {\n      findAction.run(fr);\n      count++;\n      fr = findNext(false);           // find next match in current doc\n    }\n    return count;\n  }\n  \n  public FindResult findNext() { return findNext(_searchAllDocuments); }\n  \n  /** Finds the next occurrence of the find word and returns an offset at the end of that occurrence or -1 if the word\n    * was not found.  In a forward search, the match offset is the RIGHT edge of the word.  In subsequent searches, the\n    * same instance won't be found again.  In a backward search, the position returned is the LEFT edge of the word.  \n    * Also returns a flag indicating whether the end of the document was reached and wrapped around. This is done\n    * using the FindResult class which contains the matching document, an integer offset and two flag indicated whether\n    * the search wrapped (within _doc and across all documents).  Only executes in the event thread.\n    * @param searchAll whether to search all documents (or just _doc)\n    * @return a FindResult object containing foundOffset and a flag indicating wrapping to the beginning during a search\n    */\n  private FindResult findNext(boolean searchAll) {\n    \n    assert EventQueue.isDispatchThread();\n    \n    // Find next match, if any, in _doc. \n    FindResult fr;\n    int start;\n    int len;\n    \n    // If the user just found a match and toggled the \"Search Backwards\" option, we should skip the matched text.\n    if (_skipText) {  // adjust position (offset)\n//      System.err.println(\"Skip text is true!  Last find word = \" + _lastFindWord);\n      int wordLen = _lastFindWord.length();\n      if (_isForward) setPosition(getCurrentOffset() + wordLen);\n      else setPosition(getCurrentOffset() - wordLen);\n      positionChanged();\n    }\n    \n//    System.err.println(\"findNext(\" + searchAll + \") called with _doc = [\" + _doc.getText() + \"] and offset = \" +\n//      _current.getOffset());\n    \n    int offset = getCurrentOffset();\n//    System.err.println(\"findNext(\" + searchAll + \") called; initial offset is \" + offset);\n//    System.err.println(\"_doc = [\" + _doc.getText() + \"], _doc.getLength() = \" + _doc.getLength());\n    if (_isForward) { \n      start = offset;\n      len = _doc.getLength() - offset; \n    }\n    else { \n      start = 0; \n      len = offset; \n    }\n    fr = _findNextInDoc(_doc, start, len, searchAll);\n    if (fr.getFoundOffset() >= 0 || ! searchAll) return fr;  // match found in _doc or search is local\n    \n    // find match in other docs\n    return _findNextInOtherDocs(_doc, start, len);\n  }\n  \n  \n  /** Finds next match in specified doc only.  If searching forward, len must be doc.getLength().  If searching backward,\n    * start must be 0.  If searchAll, suppress executing in-document wrapped search, because it must be deferred.  Only\n    * runs in the event thread.  Note than this method does a wrapped search if specified search fails.\n    */\n  private FindResult _findNextInDoc(OpenDefinitionsDocument doc, int start, int len, boolean searchAll) {\n    // search from current position to \"end\" of document (\"end\" is start if searching backward)\n//    Utilities.show(\"_findNextInDoc([\" + doc.getText() + \"], \" + start + \", \" + len + \", \" + searchAll + \")\");\n//    _log.log(\"_findNextInDoc([\" + doc.getText() + \"], \" + start + \", \" + len + \", \" + searchAll + \")\");\n    FindResult fr = _findNextInDocSegment(doc, start, len);\n    if (fr.getFoundOffset() >= 0 || searchAll) return fr;\n    \n    return _findWrapped(doc, start, len, false);  // last arg is false because search has not wrapped through all docs\n  }\n  \n  /** Helper method for findNext that looks for a match after searching has wrapped off the \"end\" (start if searching\n    * backward) of the document.  Only runs in event thread.  \n    * INVARIANT (! _isForward => start = 0) && (_isForward => start + len = doc.getLength()).\n    * @param doc  the document in which search wrapped\n    * @param start the location of preceding text segment where search FAILED.  \n    * @param len  the length of text segment previously searched\n    * @param allWrapped  whether this wrapped search is being performed after an all document search has wrapped\n    * @return the offset where the instance was found. Returns -1 if no instance was found between start and end\n    */  \n  private FindResult _findWrapped(OpenDefinitionsDocument doc, int start, int len, boolean allWrapped) {\n    \n    final int docLen = doc.getLength();\n    if (docLen == 0) return new FindResult(doc, -1, true, allWrapped); // failure result\n    \n    final int wordLen =  _findWord.length();\n    \n    assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen) && wordLen > 0;\n    assert (_isForward && start + len == docLen) || (! _isForward && start == 0);\n//    Utilities.show(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +\n//                       doc.getLength() + \", _isForward = \" + _isForward);\n//    _log.log(\"_findWrapped(\" + doc + \", \" + start + \", \" + len + \", \" + allWrapped + \")  docLength = \" +\n//             doc.getLength() + \", _isForward = \" + _isForward);\n    \n    int newLen;\n    int newStart;\n    \n    final int adjustment = wordLen - 1; // non-negative max size of the findWord suffix (prefix) within preceding text\n    \n    if (_isForward) {\n      newStart = 0;\n      newLen = start + adjustment;  // formerly start, which was an annoying bug\n      if (newLen > docLen) newLen = docLen;\n    }\n    else {\n      newStart = len - adjustment;\n      if (newStart < 0) newStart = 0;\n      newLen = docLen - newStart;\n    }\n    \n//    _log.log(\"Calling _findNextInDocSegment(\" + doc.getText() + \", newStart = \" + newStart + \", newLen = \" + \n//             newLen + \", allWrapped = \" + allWrapped + \") and _isForward = \" + _isForward);\n    return _findNextInDocSegment(doc, newStart, newLen, true, allWrapped);\n  } \n  \n  /** Find first valid match withing specified segment of doc. */  \n  private FindResult _findNextInDocSegment(OpenDefinitionsDocument doc, int start, int len) {\n    return _findNextInDocSegment(doc, start, len, false, false);\n  }\n  \n  /** Main helper method for findNext... that searches for _findWord inside the specified document segment.  Only runs\n    * in the event thread.\n    * @param doc document to be searched\n    * @param start the location (offset/left edge) of the text segment to be searched \n    * @param len the requested length of the text segment to be searched\n    * @param wrapped whether this search is after wrapping around the document\n    * @param allWrapped whether this seach is after wrapping around all documents\n    * @return a FindResult object with foundOffset and a flag indicating wrapping to the beginning during a search. The\n    * foundOffset returned insided the FindResult is -1 if no instance was found.\n    */\n  private FindResult _findNextInDocSegment(final OpenDefinitionsDocument doc, final int start, int len, \n                                           final boolean wrapped, final boolean allWrapped) {  \n//    Utilities.show(\"called _findNextInDocSegment(\" + doc.getText() + \",\\n\" + start + \", \" + len + \", \" + wrapped +\n//      \" ...)\");\n    boolean inTestCase = false;\n    for(String ext: OptionConstants.LANGUAGE_LEVEL_EXTENSIONS) {\n      inTestCase |= doc.getFileName().endsWith(\"Test\"+ext);\n    }\n    \n    if (!_ignoreTestCases || ! inTestCase) {\n      final int docLen = doc.getLength();;     // The length of the segment to be searched\n      final int wordLen = _findWord.length();   // length of search key (word being searched for)\n      \n      assert (start >= 0 && start <= docLen) && (len >= 0 && len <= docLen);\n      \n      if (len == 0 || docLen == 0) return new FindResult(doc, -1, wrapped, allWrapped);\n      \n      if (start + len > docLen) len = docLen - start;\n      \n//    if (start + len > docLen) len = docLen - start;\n      \n      String text;             // The text segment to be searched\n      final String findWord;   // copy of word being searched (so it can converted to lower case if necessary\n      \n      try { \n        \n//      if (wrapped && allWrapped) Utilities.show(start  + \", \" + len + \", \" + docLen + \", doc = '\" + doc.getText() + \"'\");\n        text = doc.getText(start, len);\n        \n        if (! _matchCase) {\n          text = text.toLowerCase();\n          findWord = _findWord.toLowerCase();  // does not affect wordLen\n        }\n        else findWord = _findWord;\n//       if (wrapped && allWrapped) Utilities.show(\"Executing loop with findWord = \" + findWord + \"; text = \" + text +\n//          \"; len = \" + len);     \n        \n        // loop to find first valid (not ignored) occurrence of findWord\n        // loop carried variables are rem, foundOffset; \n        // loop invariant variables are _doc, docLen, _isForward, findWord, wordLen, start, len.\n        // Invariant:  on forwardsearch, foundOffset + rem == len; on backward search foundOffset == rem.\n        // loop exits by returning match (as FindResult) or by falling through with no match.\n        // if match is returned, _current has been updated to match location\n        int foundOffset = _isForward? 0 : len;\n        int rem = len;\n//      _log.log(\"Starting search loop; text = '\" + text + \"' findWord = '\" + findWord + \"' forward? = \" + _isForward +\n//         \" rem = \" + rem + \" foundOffset = \" + foundOffset);\n        while (rem >= wordLen) {\n          \n          // Find next match in text\n          foundOffset = _isForward ? text.indexOf(findWord, foundOffset) : text.lastIndexOf(findWord, foundOffset);\n//        _log.log(\"foundOffset = \" + foundOffset);\n          if (foundOffset < 0) break;  // no valid match in this document\n          int foundLocation = start + foundOffset;\n          int matchLocation;\n          \n          if (_isForward) {\n            foundOffset += wordLen;                          // skip over matched word\n//          text = text.substring(adjustedOffset, len);    // len is length of text before update\n            rem = len - foundOffset;                         // len is updated to length of remaining text to search\n            matchLocation = foundLocation + wordLen;         // matchLocation is index in _doc of right edge of match\n//            _current = docToSearch.createPosition(start);          // put caret at beginning of found word\n          }\n          else { \n            \n            foundOffset -= wordLen;                        // skip over matched word        \n            rem = foundOffset;                             // rem is adjusted to match foundOffset\n            matchLocation = foundLocation;                 // matchLocation is index in _doc of left edge of match\n//          text = text.substring(0, len);               // len is length of text after update\n//            _current = docToSearch.createPosition(foundLocation);  // put caret at end of found word\n          }\n//        _log.log(\"rem = \" + rem);\n          \n//        _log.log(\"Finished iteration with text = \" + text + \"; len = \" + len + \"; foundLocation = \" + foundLocation);\n          assert foundLocation > -1;\n          if (_shouldIgnore(foundLocation, doc)) continue;\n          \n          //_current = doc.createPosition(matchLocation);   // formerly doc.createPosition(...)\n          setPosition(matchLocation);\n          \n//        System.err.println(\"Returning result = \" + new FindResult(doc, matchLocation, wrapped, allWrapped));\n          \n          return new FindResult(doc, matchLocation, wrapped, allWrapped);  // return valid match\n        }\n      }\n      catch (BadLocationException e) { throw new UnexpectedException(e); }\n    }      \n    // loop fell through; search failed in doc segment\n    return new FindResult(doc, -1, wrapped, allWrapped);\n  }\n  \n  /** Searches all documents following startDoc for _findWord, cycling through the documents in the direction specified\n    * by _isForward. If the search cycles back to doc without finding a match, performs a wrapped search on doc.\n    * @param startDoc  document where searching started and just failed\n    * @param start  location in startDoc of the document segment where search failed.\n    * @param len  length of the text segment where search failed.\n    * @return the FindResult containing the information for where we found _findWord or a dummy FindResult.\n    */\n  private FindResult _findNextInOtherDocs(final OpenDefinitionsDocument startDoc, int start, int len) {\n    \n//    System.err.println(\"_findNextInOtherDocs(\" + startDoc.getText() + \", \" + start + \", \" + len + \")\");\n    \n    boolean allWrapped = false;\n    // _doc may be null if the next document isn't found and the user didn't want to continue!\n    _doc = _isForward ? _docIterator.getNextDocument(startDoc) : _docIterator.getPrevDocument(startDoc);\n    if (_doc == null) return new FindResult(startDoc, -1, true, true);\n    \n    while (_doc != startDoc) {\n      if (_doc == _firstDoc) allWrapped = true;\n      boolean inTestCase = (_doc.getFileName().endsWith(\"Test.java\"));\n      \n      if (! _ignoreTestCases || ! inTestCase) {\n//      System.err.println(\"_doc = [\" + _doc.getText() + \"]\");\n        \n//      if (_isForward) setPosition(0);\n//      else setPosition(_doc.getLength());\n        \n        \n        // find next match in _doc\n        FindResult fr;\n        fr = _findNextInDocSegment(_doc, 0, _doc.getLength(), false, allWrapped); \n        \n        if (fr.getFoundOffset() >= 0) return fr;\n      }\n//      System.err.println(\"Advancing from '\" + _doc.getText() + \"' to next doc\");        \n      // _doc may be null if the next document isn't found and the user didn't want to continue!\n      _doc = _isForward ? _docIterator.getNextDocument(_doc) : _docIterator.getPrevDocument(_doc);     \n      if (_doc == null) return new FindResult(startDoc, -1, true, true);\n//      System.err.println(\"Next doc is: '\" + _doc.getText() + \"'\");\n    }\n    \n    // No valid match found; perform wrapped search.  Only runs in event thread.\n    return _findWrapped(startDoc, start, len, true);  // last arg is true because searching all docs has wrapped\n  } \n  \n  /** Determines whether the whole find word is found at the input position.  Assumes read lock or hourglass is\n    * already held.\n    * @param doc - the document where an instance of the find word was found\n    * @param foundOffset - the position where that instance was found\n    * @return true if the whole word is found at foundOffset, false otherwise\n    */\n  private boolean wholeWordFoundAtCurrent(OpenDefinitionsDocument doc, int foundOffset) {    \n    \n    char leftOfMatch = 0;   //  forced initialization\n    char rightOfMatch = 0;  //  forced initialization\n    int leftLoc = foundOffset - 1;\n    int rightLoc = foundOffset + _findWord.length();\n    boolean leftOutOfBounds = false;\n    boolean rightOutOfBounds = false;\n    \n    try { leftOfMatch = doc.getText(leftLoc, 1).charAt(0); }\n    catch (BadLocationException e) { leftOutOfBounds = true; } \n    catch (IndexOutOfBoundsException e) { leftOutOfBounds = true; }\n    try { rightOfMatch = doc.getText(rightLoc, 1).charAt(0); }\n    catch (BadLocationException e) { rightOutOfBounds = true; } \n    catch (IndexOutOfBoundsException e) { rightOutOfBounds = true; }    \n    \n    if (! leftOutOfBounds && ! rightOutOfBounds) return isDelimiter(rightOfMatch) && isDelimiter(leftOfMatch);\n    if (! leftOutOfBounds) return isDelimiter(leftOfMatch);\n    if (! rightOutOfBounds) return isDelimiter(rightOfMatch);\n    return true;\n  }\n  \n  /** Determines whether a character is a delimiter (not a letter or digit) as a helper to wholeWordFoundAtCurrent\n    * \n    * @param ch - a character\n    * @return true if ch is a delimiter, false otherwise\n    */\n  private boolean isDelimiter(char ch) { return ! Character.isLetterOrDigit(ch)  &&  ch != '_'; }\n  \n  /** Returns true if the currently found instance should be ignored (either because it is inside a string or comment or\n    * because it does not match the whole word when either or both of those conditions are set to true).  Only executes \n    * in event thread.\n    * @param foundOffset the location of the instance found\n    * @param odd the current document where the instance was found\n    * @return true if the location should be ignored, false otherwise\n    */\n  private boolean _shouldIgnore(int foundOffset, OpenDefinitionsDocument odd) {\n    \n    assert EventQueue.isDispatchThread();\n\n    return (_matchWholeWord && ! wholeWordFoundAtCurrent(odd, foundOffset)) || \n      (_ignoreCommentsAndStrings && odd.isShadowed(foundOffset));\n  }\n\n/** Called when user the activates \"find previous\" command.  Package visibility to accommodate calls from MainFrame. \n * @param findReplacePanel TODO*/\n  public void findPrevious(FindReplacePanel findReplacePanel) {\n    findReplacePanel._frame.updateStatusField(\"Finding Previous\");\n    setSearchBackwards(true);\n    findReplacePanel._findLabelBot.setText(\"Prev\");\n    findReplacePanel._doFind();\n    if (DrJava.getConfig().getSetting(OptionConstants.FIND_REPLACE_FOCUS_IN_DEFPANE).booleanValue()) {\n      findReplacePanel._defPane.requestFocusInWindow();  // moves focus to DefinitionsPane\n    }\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 14,
                "candidates": [
                    {
                        "lineStart": 181,
                        "lineEnd": 186,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The setFindWord method is likely related to the content or text being processed, which aligns with the responsibilities of the OpenDefinitionsDocument class, as it manages the document's content.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 188,
                        "lineEnd": 193,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The setReplaceWord method likely pertains to the content or representation of a document, making OpenDefinitionsDocument the most appropriate class for managing the replacement word functionality.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 135,
                        "lineEnd": 135,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method setMatchCase(boolean matchCase) likely pertains to document settings or properties, making it more suitable for the OpenDefinitionsDocument class, which typically manages document-related configurations.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 138,
                        "lineEnd": 138,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method setMatchWholeWord() likely pertains to document handling or text processing, which aligns with the responsibilities of OpenDefinitionsDocument, making it a suitable target class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 144,
                        "lineEnd": 144,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.SingleDisplayModel\nRationale: The method setSearchAllDocuments() likely pertains to the display or management of documents in a single view, making SingleDisplayModel the most appropriate class for this method.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 146,
                        "lineEnd": 146,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.SingleDisplayModel\nRationale: The method setSearchSelectionOnly() suggests a functionality related to managing display settings or states, which aligns well with the responsibilities of a SingleDisplayModel class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 148,
                        "lineEnd": 150,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method setIgnoreCommentsAndStrings() likely pertains to the handling of document parsing or processing, which is a core responsibility of the OpenDefinitionsDocument class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 153,
                        "lineEnd": 155,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method setIgnoreTestCases(boolean ignoreTestCases) suggests functionality related to managing test cases, which is likely relevant to a document that defines or contains code or tests, making OpenDefinitionsDocument the most appropriate class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 136,
                        "lineEnd": 136,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method getMatchCase() likely pertains to document settings or properties, which aligns with the responsibilities of the OpenDefinitionsDocument class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 140,
                        "lineEnd": 140,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method getMatchWholeWord() likely pertains to document handling or text processing, which aligns with the responsibilities of the OpenDefinitionsDocument class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 173,
                        "lineEnd": 173,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.SingleDisplayModel\nRationale: The method getSearchAllDocuments() likely pertains to the display or management of document search settings, making it more relevant to the SingleDisplayModel class, which handles the display logic for documents.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 175,
                        "lineEnd": 175,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.SingleDisplayModel\nRationale: The method getSearchSelectionOnly() likely pertains to the state of a display model, which would manage how selections are represented in a user interface context.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 151,
                        "lineEnd": 151,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method getIgnoreCommentsAndStrings() likely pertains to document settings or configurations, which aligns with the responsibilities of the OpenDefinitionsDocument class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    },
                    {
                        "lineStart": 156,
                        "lineEnd": 156,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.OpenDefinitionsDocument\nRationale: The method getIgnoreTestCases() likely pertains to the configuration or state of a document, making OpenDefinitionsDocument the most appropriate class for this method.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 32078
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "setFindWord",
                        "setReplaceWord",
                        "setMatchCase",
                        "setMatchWholeWord",
                        "setSearchAllDocuments",
                        "setSearchSelectionOnly",
                        "setIgnoreCommentsAndStrings",
                        "setIgnoreTestCases"
                    ],
                    "llm_response_time": 9227
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "setFindWord",
                        "setReplaceWord",
                        "setMatchCase",
                        "setMatchWholeWord",
                        "setSearchAllDocuments",
                        "setSearchSelectionOnly",
                        "setIgnoreCommentsAndStrings",
                        "setIgnoreTestCases"
                    ],
                    "llm_response_time": 8896
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "setFindWord",
                        "setReplaceWord",
                        "setMatchCase",
                        "setMatchWholeWord",
                        "setSearchAllDocuments",
                        "setSearchSelectionOnly",
                        "setIgnoreCommentsAndStrings",
                        "setIgnoreTestCases",
                        "getMatchCase",
                        "getMatchWholeWord",
                        "getSearchAllDocuments",
                        "getSearchSelectionOnly",
                        "getIgnoreCommentsAndStrings",
                        "getIgnoreTestCases"
                    ],
                    "llm_response_time": 11786
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "setFindWord",
                        "setReplaceWord",
                        "setMatchCase",
                        "setMatchWholeWord",
                        "setSearchAllDocuments",
                        "setSearchSelectionOnly",
                        "setIgnoreCommentsAndStrings",
                        "setIgnoreTestCases",
                        "getMatchCase",
                        "getMatchWholeWord",
                        "getSearchAllDocuments",
                        "getSearchSelectionOnly",
                        "getIgnoreCommentsAndStrings",
                        "getIgnoreTestCases"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "setFindWord",
                    "setReplaceWord",
                    "setMatchCase",
                    "setMatchWholeWord",
                    "setSearchAllDocuments",
                    "setSearchSelectionOnly",
                    "setIgnoreCommentsAndStrings",
                    "setIgnoreTestCases",
                    "getMatchCase",
                    "getMatchWholeWord",
                    "getSearchAllDocuments",
                    "getSearchSelectionOnly",
                    "getIgnoreCommentsAndStrings",
                    "getIgnoreTestCases"
                ],
                "llm_response_time": 2073
            },
            "targetClassMap": {
                "setFindWord": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.4577621445946454
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.4577621445946454
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.3930312381065064
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.4402153090413563
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2705,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "setReplaceWord": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.4710100856841811
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.4710100856841811
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.40854392978891735
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.4569328684715869
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2009,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "setMatchCase": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.045834924851410566
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.15932323181759625
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2030,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "setMatchWholeWord": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.15641450333477797
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.15641450333477797
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.048615279266412334
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.1689878064281679
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 1783,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "setSearchAllDocuments": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.045834924851410566
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.15932323181759625
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SingleDisplayModel",
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2956,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "setSearchSelectionOnly": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.045834924851410566
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.15932323181759625
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SingleDisplayModel",
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2380,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "setIgnoreCommentsAndStrings": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.045834924851410566
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.15932323181759625
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 1933,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "setIgnoreTestCases": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.14746900797859647
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.045834924851410566
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.15932323181759625
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2174,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getMatchCase": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.05197191965064278
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.14720082997171371
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2140,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                },
                "getMatchWholeWord": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.05197191965064278
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.14720082997171371
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2679,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getSearchAllDocuments": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.05197191965064278
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.14720082997171371
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SingleDisplayModel",
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 1949,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getSearchSelectionOnly": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.05197191965064278
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.14720082997171371
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "SingleDisplayModel",
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 1632,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getIgnoreCommentsAndStrings": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.05197191965064278
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.14720082997171371
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 1999,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "getIgnoreTestCases": {
                    "target_classes": [
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "OpenDefinitionsDocument",
                            "similarity_score": 0.16303378421603443
                        },
                        {
                            "class_name": "DocumentIterator",
                            "similarity_score": 0.05197191965064278
                        },
                        {
                            "class_name": "SingleDisplayModel",
                            "similarity_score": 0.14720082997171371
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "OpenDefinitionsDocument",
                        "OpenDefinitionsDocument",
                        "SingleDisplayModel",
                        "DocumentIterator"
                    ],
                    "llm_response_time": 2281,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.ui.config.VectorFileOptionComponent::reset2():void need move to edu.rice.cs.drjava.ui.ProjectPropertiesFrame",
        "class_name": "edu.rice.cs.drjava.ui.config.VectorFileOptionComponent",
        "telemetry": {
            "id": "cccaf1dd-7f39-4e25-8d1b-6434c59f39de",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 108,
                "lineStart": 57,
                "lineEnd": 164,
                "bodyLineStart": 57,
                "language": "java",
                "sourceCode": "/** Graphical form of a VectorOption for the Extra Classpath/Sourcepath options.\n  * Uses a file chooser for each File element.\n *  @version $Id: VectorFileOptionComponent.java 5246 2010-05-07 19:10:44Z mgricken $\n */\npublic class VectorFileOptionComponent extends VectorOptionComponent<File> implements OptionConstants {\n  private JFileChooser _jfc;\n  protected File _baseDir = null;\n  \n  public VectorFileOptionComponent(VectorOption<File> opt, String text, SwingFrame parent) {\n    this(opt, text, parent, null);\n  }\n  \n  /** Constructor that allows for a tooltip description. */\n  public VectorFileOptionComponent(VectorOption<File> opt, String text, SwingFrame parent, String description) {\n    this(opt, text, parent, description, false);\n  }\n\n  /** Constructor with flag for move buttons. */\n  public VectorFileOptionComponent(VectorOption<File> opt, String text, SwingFrame parent,\n                                   String description, boolean moveButtonEnabled) {\n    super(opt, text, parent, new String[] { }, description, moveButtonEnabled);  // creates all four buttons\n    \n    // set up JFileChooser\n    File workDir = new File(System.getProperty(\"user.home\"));\n\n    _jfc = new JFileChooser(workDir);\n    _jfc.setDialogTitle(\"Select\");\n    _jfc.setApproveButtonText(\"Select\");\n    _jfc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);\n    _jfc.setMultiSelectionEnabled(true);\n    _jfc.setFileFilter(ClassPathFilter.ONLY);\n  }\n\n  /** Sets the directory where the chooser will start if no file is selected. */\n  public void setBaseDir(File f) {\n    if (f.isDirectory()) { _baseDir = f; }\n  }\n  \n  /** Shows a file chooser for adding a file to the element. */\n  public void chooseFile() {\n    int[] rows = _table.getSelectedRows();\n    File selection = (rows.length==1)?_data.get(rows[0]):null;\n    if (selection != null) {\n      File parent = selection.getParentFile();\n      if (parent != null) {\n        _jfc.setCurrentDirectory(parent);\n      }\n    }\n    else {\n      if (_baseDir != null) { _jfc.setCurrentDirectory(_baseDir); }\n    }\n\n    File[] c = null;\n    int returnValue = _jfc.showDialog(_parent, null);\n    if (returnValue == JFileChooser.APPROVE_OPTION) {\n      c = _jfc.getSelectedFiles();\n    }\n    if (c != null) {\n      _table.getSelectionModel().clearSelection();\n      for(int i = 0; i < c.length; i++) {\n        _addValue(c[i]);\n      }\n    }\n  }\n  \n  /** @return the file chooser */\n  public JFileChooser getFileChooser() {\n    return _jfc;\n  }\n  \n  protected Action _getAddAction() {\n    return new AbstractAction(\"Add\") {\n      public void actionPerformed(ActionEvent ae) {\n        chooseFile();\n      }\n    };\n  }\n\npublic void reset2(ProjectPropertiesFrame projectPropertiesFrame, File projRoot) {\n//  Utilities.show(\"reset(\" + projRoot + \")\");\n    projectPropertiesFrame._projRootSelector.setFileField(projRoot);\n\n    final File bd = projectPropertiesFrame._model.getBuildDirectory();\n    final JTextField bdTextField = projectPropertiesFrame._buildDirSelector.getFileField();\n    if (bd == FileOps.NULL_FILE) bdTextField.setText(\"\");\n    else projectPropertiesFrame._buildDirSelector.setFileField(bd);\n\n    final File wd = projectPropertiesFrame._model.getWorkingDirectory();\n    final JTextField wdTextField = projectPropertiesFrame._workDirSelector.getFileField();\n    if (wd == FileOps.NULL_FILE) wdTextField.setText(\"\");\n    else projectPropertiesFrame._workDirSelector.setFileField(wd);\n\n    final String mc = projectPropertiesFrame._model.getMainClass();\n    final JTextField mcTextField = projectPropertiesFrame._mainDocumentSelector;\n    if (mc == null) mcTextField.setText(\"\");\n    else mcTextField.setText(mc);\n    \n    projectPropertiesFrame._autoRefreshComponent.setSelected(projectPropertiesFrame._getAutoRefreshStatus());\n\n    ArrayList<AbsRelFile> cp = new ArrayList<AbsRelFile>(CollectUtil.makeList(projectPropertiesFrame._model.getExtraClassPath()));\n    projectPropertiesFrame._extraClassPathList.setValue(cp);\n\n    ArrayList<File> ef = new ArrayList<File>();\n    for(File f: projectPropertiesFrame._model.getExclFiles()) { ef.add(f); }\n    setValue(ef);\n    projectPropertiesFrame._applyButton.setEnabled(false);\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 134,
                        "lineEnd": 162,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.ui.ProjectPropertiesFrame\nRationale: The method 'reset2' directly manipulates the fields and components of the ProjectPropertiesFrame class, indicating that it is closely tied to the state and behavior of this class.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 6330
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "reset2"
                    ],
                    "llm_response_time": 1774
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "reset2"
                    ],
                    "llm_response_time": 1876
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "reset2"
                    ],
                    "llm_response_time": 2165
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "reset2"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "reset2"
                ],
                "llm_response_time": 425
            },
            "targetClassMap": {
                "reset2": {
                    "target_classes": [
                        {
                            "class_name": "ProjectPropertiesFrame",
                            "similarity_score": 0.6216409139090413
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "ProjectPropertiesFrame"
                    ],
                    "llm_response_time": 944,
                    "similarity_computation_time": 1,
                    "similarity_metric": "cosine"
                }
            }
        }
    },
    {
        "oracle": "method edu.rice.cs.drjava.model.repl.InteractionsDJDocument::testHistoryRecallNextMovesToEnd():void need move to edu.rice.cs.drjava.ui.InteractionsPaneTest",
        "class_name": "edu.rice.cs.drjava.model.repl.InteractionsDJDocument",
        "telemetry": {
            "id": "c7905299-4285-4c37-a393-7083e2ecd4f7",
            "hostFunctionTelemetryData": {
                "hostFunctionSize": 290,
                "lineStart": 61,
                "lineEnd": 350,
                "bodyLineStart": 61,
                "language": "java",
                "sourceCode": "/** Represents a Swing-based InteractionsDocument. Extends AbstractDJDocument which contains code shared by\n  * the Swing interactions and definitions documents.\n  */\npublic class InteractionsDJDocument extends AbstractDJDocument implements ConsoleDocumentInterface {\n  \n  /** Whether the document currently has a prompt and is ready to accept input. */\n  private volatile boolean _hasPrompt;\n  \n  /** A flag indicating that the interpreter was recently reset, and to reset the styles list \n    * the next time a style is added. Cannot reset immediately because then the styles would be lost while \n    * the interactions pane is resetting.\n    */\n  private volatile boolean _toClear = false;\n  \n // fields for use by undo/redo functionality\n  private volatile CompoundUndoManager _undoManager;\n  private static final int UNDO_LIMIT = 100;\n  private volatile boolean _isModifiedSinceSave = false;\n  private GlobalEventNotifier _notifier;\n  \n  /** Standard constructor. */\n  public InteractionsDJDocument() { \n    super(); \n    _hasPrompt = false;\n    _notifier = new GlobalEventNotifier(); // so this isn't null\n  } \n   \n\n  public InteractionsDJDocument(GlobalEventNotifier notifier){\n   super();\n   _hasPrompt = false;\n   _notifier=notifier;\n   resetUndoManager();\n  }\n  \n  public boolean hasPrompt() { return _hasPrompt; }\n  \n  /** Sets the _hasPrompt property. \n    * @param val new boolean value for _hasPrompt.\n    */\n  public void setHasPrompt(boolean val) { \n    _hasPrompt = val;\n  }\n  \n  protected void _styleChanged() { /* Do nothing */ }\n \n  //-------------Undo/Redo Functionality---------------------// \n  /** Appending any information for the reduced model from each undo command */\n  private static class CommandUndoableEdit extends AbstractUndoableEdit {\n    private final Runnable _undoCommand;\n    private final Runnable _redoCommand;\n    \n    public CommandUndoableEdit(final Runnable undoCommand, final Runnable redoCommand) {\n      _undoCommand = undoCommand;\n      _redoCommand = redoCommand;\n    }\n    \n    public void undo() throws CannotUndoException {\n      super.undo();\n      _undoCommand.run();\n    }\n    \n    public void redo() throws CannotRedoException {\n      super.redo();\n      _redoCommand.run();\n    }\n    \n    public boolean isSignificant() { return false; }\n  }\n  \n  /** Getter method for CompoundUndoManager\n    * @return _undoManager\n    */\n  public CompoundUndoManager getUndoManager() { return _undoManager; }\n  \n  /** Resets the undo manager. */\n  public void resetUndoManager() {\n    _undoManager = new CompoundUndoManager(_notifier);\n    _undoManager.setLimit(UNDO_LIMIT);\n  }\n  \n  /** Public accessor for the next undo action. */\n  public UndoableEdit getNextUndo() { return _undoManager.getNextUndo(); }\n  \n  /** Public accessor for the next undo action. */\n  public UndoableEdit getNextRedo() { return _undoManager.getNextRedo(); }\n  \n  /** Informs this document's undo manager that the document has been saved. */\n  public void documentSaved() { _undoManager.documentSaved(); }\n \n  protected int startCompoundEdit() { return _undoManager.startCompoundEdit(); }\n  \n  protected void endCompoundEdit(int key) { _undoManager.endCompoundEdit(key); }\n  \n  //This method added for FrenchKeyBoardFix\n  protected void endLastCompoundEdit() { _undoManager.endLastCompoundEdit(); }\n  \n  protected void addUndoRedo(AbstractDocument.DefaultDocumentEvent chng, Runnable undoCommand, Runnable doCommand) {\n    chng.addEdit(new CommandUndoableEdit(undoCommand, doCommand));    \n  }\n  \n  public boolean undoManagerCanUndo() {\n   return _undoManager.canUndo();\n  }\n  \n  public boolean undoManagerCanRedo(){\n    return _undoManager.canRedo();\n  }\n  \n  public void updateModifiedSinceSave() {\n    _isModifiedSinceSave = _undoManager.isModified();\n   // if (_odd != null) _odd.documentReset();\n  }\n  \n  /** Sets the modification state of this document to true and updates the state of the associated _odd. \n    * Assumes that write lock is already held. \n    */\n  private void _setModifiedSinceSave() {\n/* */ assert Utilities.TEST_MODE || EventQueue.isDispatchThread();\n    if (! _isModifiedSinceSave) {\n      _isModifiedSinceSave = true;\n      //if (_odd != null) _odd.documentModified();  // null test required for some unit tests\n    }    \n  }\n  \n  /** Resets the modification state of this document.  Used after a document has been saved or reverted. */\n  public void resetModification() {\n    _isModifiedSinceSave = false;\n    _undoManager.documentSaved();\n   // if (_odd != null) _odd.documentReset();  // null test required for some unit tests\n  }\n  \n  /** Determines if the document has been modified since the last save.\n    * @return true if the document has been modified\n    */\n  public boolean isModifiedSinceSave() { return  _isModifiedSinceSave; }\n  \n  //-------------end Undo/Redo Functionality---------------------// \n  \n  \n  /** Returns a new indenter. Eventually to be used to return an interactions indenter */\n  protected Indenter makeNewIndenter(int indentLevel) { return new Indenter(indentLevel); }\n  \n  /** A list of styles and their locations augmenting this document.  This augmentation is NOT part of the reduced\n    * model; it a separate extension that uses itself as a mutual exclusion lock.  This list holds pairs of location\n    * intervals and strings (identifying styles).  In essence it maps regions to colors (??).\n    * in the document and styles, which is basically a map of regions where the coloring view that is now attached to\n    * the Interactions Pane.  It is not allowed to use the reduced model to determine the color settings when \n    * rendering text. (Why not? -- Corky)  We keep a list of all places where styles not considered by the reduced \n    * are being used, such as System.out, System.err, and the various return styles for Strings and other Objects.  \n    * Since the LinkedList class is not thread safe,  we have to synchronized all methods that access pointers in \n    * _stylesList and the associated boolean _toClear.\n    */\n  private List<Pair<Pair<Integer,Integer>,String>> _stylesList = new LinkedList<Pair<Pair<Integer,Integer>,String>>();\n  \n  /** Adds the given coloring style to the styles list.  Only runs in event thread. */\n  public void addColoring(int start, int end, String style) {\n//    synchronized(_stylesList) {\n    if (_toClear) {\n      _stylesList.clear();    \n      _toClear = false;\n    }\n    if (style != null)\n      _stylesList.add(0, new Pair<Pair<Integer,Integer>,String>\n                      (new Pair<Integer,Integer>(Integer.valueOf(start),Integer.valueOf(end)), style));\n//    }\n  }\n  \n  /** Accessor method used to copy contents of _stylesList to an array.  Used in test cases. */\n  public Pair<Pair<Integer, Integer>, String>[] getStyles() { \n    synchronized(_stylesList) {\n        // TODO: file javac bug report concerning placement of @SuppressWarnings.  Fails if rhs of result binding is used as body of return statement.\n        @SuppressWarnings(\"unchecked\")\n        Pair<Pair<Integer, Integer>, String>[] result = _stylesList.toArray(new Pair[0]);\n        return result;\n    }\n  }\n  \n  /** Attempts to set the coloring on the graphics based upon the content of the styles list\n    * returns false if the point is not in the list.  Only runs in event thread.\n    */\n  public boolean setColoring(int point, Graphics g) {\n    synchronized(_stylesList) {\n      for(Pair<Pair<Integer,Integer>,String> p :  _stylesList) {\n        Pair<Integer,Integer> loc = p.first();\n        if (loc.first() <= point && loc.second() >= point) {\n          if (p.second().equals(InteractionsDocument.ERROR_STYLE)) {\n            //DrJava.consoleErr().println(\"Error Style\");\n            g.setColor(ERROR_COLOR);   \n            g.setFont(g.getFont().deriveFont(Font.BOLD));\n          }\n          else if (p.second().equals(InteractionsDocument.DEBUGGER_STYLE)) {\n            //DrJava.consoleErr().println(\"Debugger Style\");\n            g.setColor(DEBUGGER_COLOR);\n            g.setFont(g.getFont().deriveFont(Font.BOLD));\n          }\n          else if (p.second().equals(ConsoleDocument.SYSTEM_OUT_STYLE)) {\n            //DrJava.consoleErr().println(\"System.out Style\");\n            g.setColor(INTERACTIONS_SYSTEM_OUT_COLOR);\n            g.setFont(MAIN_FONT);\n          }\n          else if (p.second().equals(ConsoleDocument.SYSTEM_IN_STYLE)) {\n            //DrJava.consoleErr().println(\"System.in Style\");\n            g.setColor(INTERACTIONS_SYSTEM_IN_COLOR);\n            g.setFont(MAIN_FONT);\n          }\n          else if (p.second().equals(ConsoleDocument.SYSTEM_ERR_STYLE)) {\n            //DrJava.consoleErr().println(\"System.err Style\");\n            g.setColor(INTERACTIONS_SYSTEM_ERR_COLOR);\n            g.setFont(MAIN_FONT);\n          }\n          else if (p.second().equals(InteractionsDocument.OBJECT_RETURN_STYLE)) {\n            g.setColor(NORMAL_COLOR);\n            g.setFont(MAIN_FONT);\n          }\n          else if (p.second().equals(InteractionsDocument.STRING_RETURN_STYLE)) {\n            g.setColor(DOUBLE_QUOTED_COLOR);\n            g.setFont(MAIN_FONT);\n          }\n          else if (p.second().equals(InteractionsDocument.NUMBER_RETURN_STYLE)) {\n            g.setColor(NUMBER_COLOR);\n            g.setFont(MAIN_FONT);\n          }\n          else if (p.second().equals(InteractionsDocument.CHARACTER_RETURN_STYLE)) {\n            g.setColor(SINGLE_QUOTED_COLOR);\n            g.setFont(MAIN_FONT);\n          }\n          else return false; /* Normal text color */ \n          \n          return true;\n        }\n      }\n      return false;\n    }\n  }\n  \n  /** Attempts to set the font on the graphics context based upon the styles held in the styles list. Only runs in\n    * event thread. \n    */\n  public void setBoldFonts(int point, Graphics g) {\n    synchronized(_stylesList) {\n      for(Pair<Pair<Integer,Integer>,String> p :  _stylesList) {\n        Pair<Integer,Integer> loc = p.first();\n        if (loc.first() <= point && loc.second() >= point) {\n          if (p.second().equals(InteractionsDocument.ERROR_STYLE))\n            g.setFont(g.getFont().deriveFont(Font.BOLD));\n          else if (p.second().equals(InteractionsDocument.DEBUGGER_STYLE))\n            g.setFont(g.getFont().deriveFont(Font.BOLD));\n          else  g.setFont(MAIN_FONT);\n          return;\n        }\n      }\n    }\n  }\n  \n  /** Called when the Interactions pane is reset.  Only runs in event thread. */\n  public void clearColoring() { synchronized(_stylesList) { _toClear = true; } }\n  \n  /** @return true iff the end of the current interaction is an open comment block\n    */\n  public boolean _inBlockComment() {\n        boolean toReturn = _inBlockComment(getLength());\n        return toReturn;\n  }\n  \n  /** Inserts the given exception data into the document with the given style.\n    * @param message Message contained in the exception\n    * @param styleName name of the style for formatting the exception\n    */\n  public void appendExceptionResult(String message, String styleName) {\n    // Note that there is similar code in InteractionsDocument.  Something should be refactored.\n    try { insertText(getLength(), message + \"\\n\", styleName); }\n    catch (EditDocumentException ble) { throw new UnexpectedException(ble); }\n  }\n\n\n/** Tests that moving the caret down (recalling the next command from history) will move the caret to the end of\n    * the document.\n * @param interactionsPaneTest TODO\n    */\n  public void testHistoryRecallNextMovesToEnd(final InteractionsPaneTest interactionsPaneTest) {\n    Utilities.invokeAndWait(new Runnable() { \n      public void run() {\n        interactionsPaneTest._pane.setCaretPosition(1);\n        interactionsPaneTest._controller.historyNextAction.actionPerformed(null);\n      }\n    });\n    Assert.assertEquals(\"Caret not moved to end on down arrow.\", interactionsPaneTest._doc.getLength(), interactionsPaneTest._pane.getCaretPosition());\n  }\n}"
            },
            "candidatesTelemetryData": {
                "numberOfSuggestions": 1,
                "candidates": [
                    {
                        "lineStart": 325,
                        "lineEnd": 333,
                        "refactoringType": "MyMoveMethodRefactoring",
                        "description": "Move method to edu.rice.cs.drjava.model.definitions.CompoundUndoManager\nRationale: The appendExceptionResult method deals with inserting text and managing document state, which aligns more closely with the responsibilities of a document management system. The CompoundUndoManager likely handles operations related to undo/redo functionality, making it a suitable candidate for managing document changes, including appending exception results.",
                        "couldCreateRefObject": true,
                        "applied": false,
                        "undone": false
                    }
                ]
            },
            "processingTime": {
                "llmResponseTime": -1,
                "pluginProcessingTime": -1,
                "totalTime": 16101
            },
            "iterationData": [
                {
                    "iteration_num": 1,
                    "suggested_method_names": [
                        "appendExceptionResult",
                        "setColoring",
                        "setBoldFonts",
                        "clearColoring"
                    ],
                    "llm_response_time": 4309
                },
                {
                    "iteration_num": 2,
                    "suggested_method_names": [
                        "appendExceptionResult",
                        "setColoring",
                        "setBoldFonts",
                        "clearColoring"
                    ],
                    "llm_response_time": 6934
                },
                {
                    "iteration_num": 3,
                    "suggested_method_names": [
                        "appendExceptionResult",
                        "setColoring",
                        "setBoldFonts",
                        "clearColoring"
                    ],
                    "llm_response_time": 4095
                },
                {
                    "iteration_num": -1,
                    "suggested_method_names": [
                        "appendExceptionResult",
                        "setColoring",
                        "setBoldFonts",
                        "clearColoring"
                    ],
                    "llm_response_time": 0
                }
            ],
            "llmMethodPriority": {
                "priority_method_names": [
                    "appendExceptionResult",
                    "setColoring",
                    "setBoldFonts",
                    "clearColoring"
                ],
                "llm_response_time": 641
            },
            "targetClassMap": {
                "appendExceptionResult": {
                    "target_classes": [
                        {
                            "class_name": "CompoundUndoManager",
                            "similarity_score": 0.5727677454876468
                        },
                        {
                            "class_name": "GlobalEventNotifier",
                            "similarity_score": 0.5472159304392442
                        }
                    ],
                    "target_classes_sorted_by_llm": [
                        "CompoundUndoManager",
                        "GlobalEventNotifier"
                    ],
                    "llm_response_time": 1659,
                    "similarity_computation_time": 2,
                    "similarity_metric": "cosine"
                },
                "setColoring": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 2481,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "setBoldFonts": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 4232,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                },
                "clearColoring": {
                    "target_classes": [],
                    "target_classes_sorted_by_llm": [],
                    "llm_response_time": 1147,
                    "similarity_computation_time": 0,
                    "similarity_metric": "cosine"
                }
            }
        }
    }
]